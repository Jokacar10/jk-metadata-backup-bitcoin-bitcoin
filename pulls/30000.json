{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000",
    "id": 1846564965,
    "node_id": "PR_kwDOABII585uEFhl",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30000",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30000.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30000.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/0fb17bf61a40b73a2b81a18e70b3de180c917f22",
    "number": 30000,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "p2p: index TxOrphanage by wtxid, allow entries with same txid",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Part of #27463 in the \"make orphan handling more robust\" section.\r\n\r\nCurrently the main map in `TxOrphanage` is indexed by txid; we do not allow 2 transactions with the same txid into TxOrphanage. This means that if we receive a transaction and want to store it in orphanage, we'll fail to do so if a same-txid-different-witness version of the tx already exists in the orphanage. The existing orphanage entry can stay until it expires 20 minutes later, or until we find that it is invalid.\r\n\r\nThis means an attacker can try to block/delay us accepting an orphan transaction by sending a mutated version of the child ahead of time. See included test.\r\n\r\nPrior to #28970, we don't rely on the orphanage for anything and it would be relatively difficult to guess what transaction will go to a node's orphanage. After the parent(s) are accepted, if anybody sends us the correct transaction, we'll end up accepting it. However, this is a bit more painful for 1p1c: it's easier for an attacker to tell when a tx is going to hit a node's orphanage, and we need to store the correct orphan + receive the parent before we'll consider the package. If we start out with a bad orphan, we can't evict it until we receive the parent + try the 1p1c, and then we'll need to download the real child, put it in orphanage, download the parent again, and then retry 1p1c.",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "created_at": "2024-04-29T20:59:09Z",
    "updated_at": "2025-06-17T06:17:42Z",
    "closed_at": "2024-05-15T13:56:28Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2024-05-15T13:56:28Z",
    "merged_by": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "33303b2b296cdb21b6ade3e95663e9ed58c08753",
    "assignee": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "assignees": [
      {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_reviewers": [
      {
        "login": "AngusP",
        "id": 1328814,
        "node_id": "MDQ6VXNlcjEzMjg4MTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1328814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AngusP",
        "html_url": "https://github.com/AngusP",
        "followers_url": "https://api.github.com/users/AngusP/followers",
        "following_url": "https://api.github.com/users/AngusP/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AngusP/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AngusP/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AngusP/subscriptions",
        "organizations_url": "https://api.github.com/users/AngusP/orgs",
        "repos_url": "https://api.github.com/users/AngusP/repos",
        "events_url": "https://api.github.com/users/AngusP/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AngusP/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "glozow:2024-04-orphan-use-wtxid",
      "ref": "2024-04-orphan-use-wtxid",
      "sha": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 244262754,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNDQyNjI3NTQ=",
        "name": "bitcoin",
        "full_name": "glozow/bitcoin",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/glozow/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bitcoin",
        "archive_url": "https://api.github.com/repos/glozow/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/glozow/bitcoin/events",
        "forks_url": "https://api.github.com/repos/glozow/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/glozow/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/glozow/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/glozow/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/glozow/bitcoin/hooks",
        "svn_url": "https://github.com/glozow/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 4,
        "stargazers_count": 15,
        "watchers_count": 15,
        "size": 274199,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-13T13:59:15Z",
        "created_at": "2020-03-02T02:31:56Z",
        "updated_at": "2025-06-12T21:03:10Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "7fcf4e99791ca5be0b068ac03a81a50ece11dba3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37382,
        "stargazers_count": 84187,
        "watchers_count": 84187,
        "size": 283888,
        "default_branch": "master",
        "open_issues_count": 751,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-17T00:33:19Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-06-17T06:27:15Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 296,
    "deletions": 65,
    "changed_files": 7,
    "commits": 7,
    "review_comments": 87,
    "comments": 12
  },
  "events": [
    {
      "event": "commented",
      "id": 2083652023,
      "node_id": "IC_kwDOABII5858MgG3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2083652023",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T20:59:12Z",
      "updated_at": "2024-05-14T18:34:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30000).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [instagibbs](https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2055134670), [AngusP](https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2110638042), [theStack](https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2055922168), [sr-gi](https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2056028500), [stickies-v](https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2053065161), [itornaza](https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2110867498) |\n| Stale ACK | [mzumsande](https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2053800837) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2083652023",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "labeled",
      "id": 12649044485,
      "node_id": "LE_lADOABII586HTPTkzwAAAALx8RoF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12649044485",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T20:59:14Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "reviewed",
      "id": 2029804607,
      "node_id": "PRR_kwDOABII5854_Fw_",
      "url": null,
      "actor": null,
      "commit_id": "c1bd98577c81f26cb6d972fd202e5620a6a78c3c",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "osarukun",
        "id": 84421592,
        "node_id": "MDQ6VXNlcjg0NDIxNTky",
        "avatar_url": "https://avatars.githubusercontent.com/u/84421592?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/osarukun",
        "html_url": "https://github.com/osarukun",
        "followers_url": "https://api.github.com/users/osarukun/followers",
        "following_url": "https://api.github.com/users/osarukun/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/osarukun/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/osarukun/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/osarukun/subscriptions",
        "organizations_url": "https://api.github.com/users/osarukun/orgs",
        "repos_url": "https://api.github.com/users/osarukun/repos",
        "events_url": "https://api.github.com/users/osarukun/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/osarukun/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2029804607",
      "submitted_at": "2024-04-29T23:03:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "labeled",
      "id": 12650227260,
      "node_id": "LE_lADOABII586HTPTkzwAAAALyAyY8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12650227260",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T23:14:29Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2083841166,
      "node_id": "IC_kwDOABII5858NOSO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2083841166",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T23:14:30Z",
      "updated_at": "2024-04-29T23:14:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24396449433</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2083841166",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "commented",
      "id": 2085668407,
      "node_id": "IC_kwDOABII5858UMY3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2085668407",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-30T15:26:32Z",
      "updated_at": "2024-04-30T15:26:32Z",
      "author_association": "MEMBER",
      "body": "Will fix the linter when I rebase",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2085668407",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12669023359,
      "node_id": "HRFPE_lADOABII586HTPTkzwAAAALzIfR_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12669023359",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/4b4dfaa8f3fb98696ab19962e07db51046137542",
      "created_at": "2024-05-01T10:15:00Z"
    },
    {
      "event": "unlabeled",
      "id": 12669411116,
      "node_id": "UNLE_lADOABII586HTPTkzwAAAALzJ98s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12669411116",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T11:18:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "ready_for_review",
      "id": 12670060215,
      "node_id": "RFRE_lADOABII586HTPTkzwAAAALzMca3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12670060215",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T12:49:19Z"
    },
    {
      "event": "reviewed",
      "id": 2033911780,
      "node_id": "PRR_kwDOABII5855Owfk",
      "url": null,
      "actor": null,
      "commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "code changes are quite mechanical, thankfully\r\n\r\nconcept ACK",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2033911780",
      "submitted_at": "2024-05-01T16:33:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "commented",
      "id": 2088877822,
      "node_id": "IC_kwDOABII5858gb7-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2088877822",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T18:20:39Z",
      "updated_at": "2024-05-01T18:20:39Z",
      "author_association": "MEMBER",
      "body": "should be able to add fuzz coverage easily for differing wtxids but same txids in `src/test/fuzz/txorphan.cpp`",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2088877822",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "reviewed",
      "id": 2033751635,
      "node_id": "PRR_kwDOABII5855OJZT",
      "url": null,
      "actor": null,
      "commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, but I'm [concerned](https://github.com/bitcoin/bitcoin/pull/30000/files#r1586713579) about the behaviour change in `AlreadyHaveTx`, which seems quite non-trivial to review so I'll need to look into further.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2033751635",
      "submitted_at": "2024-05-01T19:25:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "commented",
      "id": 2093526057,
      "node_id": "IC_kwDOABII5858yKwp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2093526057",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T18:14:57Z",
      "updated_at": "2024-05-03T18:14:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "concept ACK\r\n\r\nAfter being caught out of guard due to the short notice on this PR at the Bitcoin Review Club, I took time to review the code changes and read the comments above. \r\n\r\nTo my understanding, we need to check the `wtxid` for screening transactions for inclusion in the orphanage in order to catch witness malleations as well. This was not previously possible because we where only checking against `txid` that does not include the `[witness]` section of a transaction as defined in [BIP141](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#transaction-id). \r\n\r\nThis change needs to be implemented only for the orphanage and not the rest of the structures that `AlreadyHaveTx()` checks against, since `txid` might be relevant there. The new behavior is implicitly documented in the `bool TxOrphanage::HaveTx(const Wtxid& wtxid) const` function definition which now takes `wtxid` as its single argument. ",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2093526057",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "reviewed",
      "id": 2038712299,
      "node_id": "PRR_kwDOABII5855hEfr",
      "url": null,
      "actor": null,
      "commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2038712299",
      "submitted_at": "2024-05-03T19:51:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12768770836,
      "node_id": "HRFPE_lADOABII586HTPTkzwAAAAL5E_sU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12768770836",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "created_at": "2024-05-10T11:40:07Z"
    },
    {
      "event": "reviewed",
      "id": 2049866191,
      "node_id": "PRR_kwDOABII5856LnnP",
      "url": null,
      "actor": null,
      "commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Ok I have split the first commit into:\r\n- net processing change to stop querying by txid\r\n- 2 refactors changing the TxOrphanage methods to be by Wtxid only\r\n- TxOrphanage change to index by wtxid and thus allow entries with the same txid\r\n\r\nHopefully in review, we can convince ourselves that the first commit is the right thing to do, separately from the other changes. The tests may help with that - also added one for invs that helps illustrate what the cases are, and added unit tests.\r\n\r\nI thought a bit about whether we should check for same-txid-different-witness but from the same peer and replace that in orphanage. Given that a Bitcoin Core node doesn't ever do witness replacement, this seems like unnecessary complexity that won't ever get used between normally-operating nodes. So I did not add this.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2049866191",
      "submitted_at": "2024-05-10T11:40:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "reviewed",
      "id": 2050241117,
      "node_id": "PRR_kwDOABII5856NDJd",
      "url": null,
      "actor": null,
      "commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reviewed through 65f69bf533f66ecfb2695b03204bd437f1fe692d\r\n\r\n> Given that a Bitcoin Core node doesn't ever do witness replacement, this seems like unnecessary complexity that won't ever get used between normally-operating nodes. So I did not add this.\r\n\r\nMakes sense, seems unlikely to ever be used in a 20 minute window lifetime of an orphan given that we don't do these kinds of replacements.\r\n\r\nalso opened https://github.com/bitcoin/bitcoin/pull/30082 seeing we're touching `EraseForPeer` et al a bit in not quite \"trivial\" ways",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2050241117",
      "submitted_at": "2024-05-10T16:53:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "reviewed",
      "id": 2051463502,
      "node_id": "PRR_kwDOABII5856RtlO",
      "url": null,
      "actor": null,
      "commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nCode changes look good at first glance, still thinking about the implications of 9d2e9054134cedbf688368445eb6d2de14e2a8bd (w.r.t. discussion in https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1586713579). Verified that both the unit tests and each of the newly introduced functional sub-tests fail without the main commit 4206ba3a36b329d1cc41df93cf59b685912d6d94, as expected.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2051463502",
      "submitted_at": "2024-05-12T22:28:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12787878985,
      "node_id": "HRFPE_lADOABII586HTPTkzwAAAAL6N4xJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12787878985",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "822b2f147791e01ab041238d4cbc8bc7a2bb3069",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/822b2f147791e01ab041238d4cbc8bc7a2bb3069",
      "created_at": "2024-05-13T13:57:49Z"
    },
    {
      "event": "commented",
      "id": 2107656257,
      "node_id": "IC_kwDOABII5859oEhB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2107656257",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T14:00:26Z",
      "updated_at": "2024-05-13T14:00:26Z",
      "author_association": "MEMBER",
      "body": "Thanks @instagibbs @theStack @sr-gi! Addressed the comments and added a few minor log improvements.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2107656257",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "mentioned",
      "id": 12787919086,
      "node_id": "MEE_lADOABII586HTPTkzwAAAAL6OCju",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12787919086",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T14:00:28Z"
    },
    {
      "event": "subscribed",
      "id": 12787919103,
      "node_id": "SE_lADOABII586HTPTkzwAAAAL6OCj_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12787919103",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T14:00:28Z"
    },
    {
      "event": "mentioned",
      "id": 12787919125,
      "node_id": "MEE_lADOABII586HTPTkzwAAAAL6OCkV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12787919125",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T14:00:28Z"
    },
    {
      "event": "subscribed",
      "id": 12787919145,
      "node_id": "SE_lADOABII586HTPTkzwAAAAL6OCkp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12787919145",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T14:00:28Z"
    },
    {
      "event": "mentioned",
      "id": 12787919170,
      "node_id": "MEE_lADOABII586HTPTkzwAAAAL6OClC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12787919170",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T14:00:28Z"
    },
    {
      "event": "subscribed",
      "id": 12787919187,
      "node_id": "SE_lADOABII586HTPTkzwAAAAL6OClT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12787919187",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T14:00:28Z"
    },
    {
      "event": "labeled",
      "id": 12790394800,
      "node_id": "LE_lADOABII586HTPTkzwAAAAL6Xe-w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12790394800",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T16:57:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12790451511,
      "node_id": "HRFPE_lADOABII586HTPTkzwAAAAL6Xs03",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12790451511",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "created_at": "2024-05-13T17:02:13Z"
    },
    {
      "event": "commented",
      "id": 2108249084,
      "node_id": "IC_kwDOABII5859qVP8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2108249084",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T17:03:10Z",
      "updated_at": "2024-05-13T17:03:10Z",
      "author_association": "MEMBER",
      "body": "Ah, p2p_invalid_tx.py failed because `assert_debug_log` didn't match anymore (those should be unit tests!)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2108249084",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "reviewed",
      "id": 2053233269,
      "node_id": "PRR_kwDOABII5856Ydp1",
      "url": null,
      "actor": null,
      "commit_id": "16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reviewed through 16483fee7c6d93722bfb79fce9efbe841ec13d6a\r\n\r\n`git range-diff master 65f69bf 16483fee7c6d93722bfb79fce9efbe841ec13d6a`",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2053233269",
      "submitted_at": "2024-05-13T17:19:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "reviewed",
      "id": 2053871488,
      "node_id": "PRR_kwDOABII5856a5eA",
      "url": null,
      "actor": null,
      "commit_id": "16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tACK 16483fee7c6d93722bfb79fce9efbe841ec13d6a with some nits",
      "user": {
        "login": "AngusP",
        "id": 1328814,
        "node_id": "MDQ6VXNlcjEzMjg4MTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1328814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AngusP",
        "html_url": "https://github.com/AngusP",
        "followers_url": "https://api.github.com/users/AngusP/followers",
        "following_url": "https://api.github.com/users/AngusP/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AngusP/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AngusP/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AngusP/subscriptions",
        "organizations_url": "https://api.github.com/users/AngusP/orgs",
        "repos_url": "https://api.github.com/users/AngusP/repos",
        "events_url": "https://api.github.com/users/AngusP/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AngusP/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2053871488",
      "submitted_at": "2024-05-13T22:04:32Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "review_requested",
      "id": 12793452286,
      "node_id": "RRE_lADOABII586HTPTkzwAAAAL6jJb-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12793452286",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T22:04:35Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12793452374,
      "node_id": "RRE_lADOABII586HTPTkzwAAAAL6jJdW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12793452374",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T22:04:36Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12793452463,
      "node_id": "RRE_lADOABII586HTPTkzwAAAAL6jJev",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12793452463",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T22:04:36Z",
      "requested_reviewer": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12793452531,
      "node_id": "RRE_lADOABII586HTPTkzwAAAAL6jJfz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12793452531",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T22:04:37Z",
      "requested_reviewer": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12793452625,
      "node_id": "RRE_lADOABII586HTPTkzwAAAAL6jJhR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12793452625",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-13T22:04:38Z",
      "requested_reviewer": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2053800837,
      "node_id": "PRR_kwDOABII5856aoOF",
      "url": null,
      "actor": null,
      "commit_id": "16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK 16483fee7c6d93722bfb79fce9efbe841ec13d6a\r\n\r\nI was at first skeptical about the first commit for similar reasons as stickies-v above, but after thinking about it more and reading the discussion it makes sense to me to cast a `Txid` to a `Wtxid` here.\r\nI also played with the functional tests a bit (e.g. giving the parent in `test_orphan_txid_inv` a low fee and testing that everything still works if 1p1c package validation is used).\r\n",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2053800837",
      "submitted_at": "2024-05-13T23:17:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "unlabeled",
      "id": 12794267246,
      "node_id": "UNLE_lADOABII586HTPTkzwAAAAL6mQZu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12794267246",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T00:14:42Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdlNDc1Yjk2NDhiYmVlMDRmNTgyNWI5MjJiYTAzOTkzNzNlYWE1YTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e475b9648bbee04f5825b922ba0399373eaa5a9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7e475b9648bbee04f5825b922ba0399373eaa5a9",
      "tree": {
        "sha": "9a90818933c279bc00843cd5c9ba80889cfa94b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a90818933c279bc00843cd5c9ba80889cfa94b3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/842f7fdf786fcbbdf3df40522945813404f8a397",
          "sha": "842f7fdf786fcbbdf3df40522945813404f8a397",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/842f7fdf786fcbbdf3df40522945813404f8a397"
        }
      ],
      "message": "[p2p] don't query orphanage by txid",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-14T09:31:56Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-10T08:23:18Z"
      },
      "sha": "7e475b9648bbee04f5825b922ba0399373eaa5a9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVmY2M1OTMwMTc1ZjMxYjY4NWFkYjQ2MjdhMDM4ZDlmMDg0OGViMWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efcc5930175f31b685adb4627a038d9f0848eb1f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/efcc5930175f31b685adb4627a038d9f0848eb1f",
      "tree": {
        "sha": "2437c1e04f26b3475591148c14b0635c2e7b1159",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2437c1e04f26b3475591148c14b0635c2e7b1159"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e475b9648bbee04f5825b922ba0399373eaa5a9",
          "sha": "7e475b9648bbee04f5825b922ba0399373eaa5a9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7e475b9648bbee04f5825b922ba0399373eaa5a9"
        }
      ],
      "message": "[refactor] TxOrphanage::HaveTx only by wtxid",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-14T09:32:27Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-10T09:55:39Z"
      },
      "sha": "efcc5930175f31b685adb4627a038d9f0848eb1f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMzMWYxNDgxNjZmMDFhOTE2N2Q4MjUwMWE3NzgyMzc4NWQyOGE4NDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c31f148166f01a9167d82501a77823785d28a841",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c31f148166f01a9167d82501a77823785d28a841",
      "tree": {
        "sha": "b1b87ab54e666c9044250230e0f1528981130f34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1b87ab54e666c9044250230e0f1528981130f34"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efcc5930175f31b685adb4627a038d9f0848eb1f",
          "sha": "efcc5930175f31b685adb4627a038d9f0848eb1f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/efcc5930175f31b685adb4627a038d9f0848eb1f"
        }
      ],
      "message": "[refactor] TxOrphanage::EraseTx by wtxid\n\nNo behavior change right now, as transactions in the orphanage are\nunique by txid. This makes the next commit easier to review.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-14T09:32:28Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-10T11:04:50Z"
      },
      "sha": "c31f148166f01a9167d82501a77823785d28a841"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg5MjNlZGZjMWYxMmViYzZhMDc0NjUxYzA4NGJhN2QyNDkwNzQ3OTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8923edfc1f12ebc6a074651c084ba7d249074799",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8923edfc1f12ebc6a074651c084ba7d249074799",
      "tree": {
        "sha": "2d5267b67f068bbdd8d2eef9cd85b48909f233e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d5267b67f068bbdd8d2eef9cd85b48909f233e9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c31f148166f01a9167d82501a77823785d28a841",
          "sha": "c31f148166f01a9167d82501a77823785d28a841",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c31f148166f01a9167d82501a77823785d28a841"
        }
      ],
      "message": "[p2p] allow entries with the same txid in TxOrphanage\n\nIndex by wtxid instead of txid to allow entries with the same txid but\ndifferent witnesses in orphanage. This prevents an attacker from\nblocking a transaction from entering the orphanage by sending a mutated\nversion of it.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-14T09:32:28Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-29T15:40:28Z"
      },
      "sha": "8923edfc1f12ebc6a074651c084ba7d249074799"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY2NzVmNjQyOGQ2NTNiZjdhNTM1MzdiZDc3MzExNGY0ZmI1YmE1M2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6675f6428d653bf7a53537bd773114f4fb5ba53f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6675f6428d653bf7a53537bd773114f4fb5ba53f",
      "tree": {
        "sha": "32e62bb055a074295b2ef4ae8926fa277a197e7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32e62bb055a074295b2ef4ae8926fa277a197e7a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8923edfc1f12ebc6a074651c084ba7d249074799",
          "sha": "8923edfc1f12ebc6a074651c084ba7d249074799",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8923edfc1f12ebc6a074651c084ba7d249074799"
        }
      ],
      "message": "[unit test] TxOrphanage handling of same-txid-different-witness txns",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-14T09:32:28Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-10T11:38:03Z"
      },
      "sha": "6675f6428d653bf7a53537bd773114f4fb5ba53f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12799078791,
      "node_id": "HRFPE_lADOABII586HTPTkzwAAAAL64nGH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12799078791",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "51c73a08817c78c97c817f3a3302d745f1829239",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/51c73a08817c78c97c817f3a3302d745f1829239",
      "created_at": "2024-05-14T09:34:30Z"
    },
    {
      "event": "reviewed",
      "id": 2054751541,
      "node_id": "PRR_kwDOABII5856eQU1",
      "url": null,
      "actor": null,
      "commit_id": "16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks @mzumsande @AngusP @instagibbs! Addressed comments. I've also expanded the \"cast from txid to wtxid\" part to be slightly more verbose but hopefully easier to understand.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2054751541",
      "submitted_at": "2024-05-14T09:36:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIxNmRhN2VkYTc2OTQ0NzE5NzEzYmU2OGI2MWYwM2Q0YWNkZDNlMTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b16da7eda76944719713be68b61f03d4acdd3e16",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b16da7eda76944719713be68b61f03d4acdd3e16",
      "tree": {
        "sha": "ba7114d6c291666ba0a2d576f1a8a0c6fc235d05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba7114d6c291666ba0a2d576f1a8a0c6fc235d05"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6675f6428d653bf7a53537bd773114f4fb5ba53f",
          "sha": "6675f6428d653bf7a53537bd773114f4fb5ba53f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6675f6428d653bf7a53537bd773114f4fb5ba53f"
        }
      ],
      "message": "[functional test] attackers sending mutated orphans",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-14T09:38:57Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-04-29T15:06:17Z"
      },
      "sha": "b16da7eda76944719713be68b61f03d4acdd3e16"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBmYjE3YmY2MWE0MGI3M2EyYjgxYTE4ZTcwYjNkZTE4MGM5MTdmMjI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "tree": {
        "sha": "c8386776402aba1e65096c1f03b487b82a1f98d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8386776402aba1e65096c1f03b487b82a1f98d0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b16da7eda76944719713be68b61f03d4acdd3e16",
          "sha": "b16da7eda76944719713be68b61f03d4acdd3e16",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b16da7eda76944719713be68b61f03d4acdd3e16"
        }
      ],
      "message": "[log] updates in TxOrphanage\n\n- Add elapsed time in \"remove orphan\" log\n- Add size in \"stored orphan\" log\n- grammar edit",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-14T09:38:57Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2024-05-13T13:54:13Z"
      },
      "sha": "0fb17bf61a40b73a2b81a18e70b3de180c917f22"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12799145649,
      "node_id": "HRFPE_lADOABII586HTPTkzwAAAAL643ax",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12799145649",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "commit_url": "https://api.github.com/repos/glozow/bitcoin/commits/0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "created_at": "2024-05-14T09:39:02Z"
    },
    {
      "event": "labeled",
      "id": 12799146746,
      "node_id": "LE_lADOABII586HTPTkzwAAAAL643r6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12799146746",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T09:39:06Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2109744175,
      "node_id": "IC_kwDOABII5859wCQv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2109744175",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T09:39:07Z",
      "updated_at": "2024-05-14T11:53:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24941257406</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2109744175",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "unlabeled",
      "id": 12800632622,
      "node_id": "UNLE_lADOABII586HTPTkzwAAAAL6-icu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12800632622",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T11:36:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2055134670,
      "node_id": "PRR_kwDOABII5856ft3O",
      "url": null,
      "actor": null,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 0fb17bf61a40b73a2b81a18e70b3de180c917f22\r\n\r\nreviewed via `git range-diff master 16483fee7c6d93722bfb79fce9efbe841ec13d6a 0fb17bf61a40b73a2b81a18e70b3de180c917f22`",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2055134670",
      "submitted_at": "2024-05-14T11:57:03Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "review_requested",
      "id": 12800873370,
      "node_id": "RRE_lADOABII586HTPTkzwAAAAL6_dOa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12800873370",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T11:57:07Z",
      "requested_reviewer": {
        "login": "AngusP",
        "id": 1328814,
        "node_id": "MDQ6VXNlcjEzMjg4MTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1328814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AngusP",
        "html_url": "https://github.com/AngusP",
        "followers_url": "https://api.github.com/users/AngusP/followers",
        "following_url": "https://api.github.com/users/AngusP/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AngusP/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AngusP/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AngusP/subscriptions",
        "organizations_url": "https://api.github.com/users/AngusP/orgs",
        "repos_url": "https://api.github.com/users/AngusP/repos",
        "events_url": "https://api.github.com/users/AngusP/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AngusP/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12800873664,
      "node_id": "RRE_lADOABII586HTPTkzwAAAAL6_dTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12800873664",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T11:57:08Z",
      "requested_reviewer": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2055731535,
      "node_id": "PRR_kwDOABII5856h_lP",
      "url": null,
      "actor": null,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2055731535",
      "submitted_at": "2024-05-14T15:20:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "commented",
      "id": 2110638042,
      "node_id": "IC_kwDOABII5859zcfa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2110638042",
      "actor": {
        "login": "AngusP",
        "id": 1328814,
        "node_id": "MDQ6VXNlcjEzMjg4MTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1328814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AngusP",
        "html_url": "https://github.com/AngusP",
        "followers_url": "https://api.github.com/users/AngusP/followers",
        "following_url": "https://api.github.com/users/AngusP/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AngusP/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AngusP/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AngusP/subscriptions",
        "organizations_url": "https://api.github.com/users/AngusP/orgs",
        "repos_url": "https://api.github.com/users/AngusP/repos",
        "events_url": "https://api.github.com/users/AngusP/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AngusP/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T16:20:10Z",
      "updated_at": "2024-05-14T16:20:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "user": {
        "login": "AngusP",
        "id": 1328814,
        "node_id": "MDQ6VXNlcjEzMjg4MTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1328814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AngusP",
        "html_url": "https://github.com/AngusP",
        "followers_url": "https://api.github.com/users/AngusP/followers",
        "following_url": "https://api.github.com/users/AngusP/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AngusP/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AngusP/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AngusP/subscriptions",
        "organizations_url": "https://api.github.com/users/AngusP/orgs",
        "repos_url": "https://api.github.com/users/AngusP/repos",
        "events_url": "https://api.github.com/users/AngusP/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AngusP/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2110638042",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "reviewed",
      "id": 2055922168,
      "node_id": "PRR_kwDOABII5856iuH4",
      "url": null,
      "actor": null,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 0fb17bf61a40b73a2b81a18e70b3de180c917f22\r\n\r\nI like the latest, more verbose version of the first commit (7e475b9648bbee04f5825b922ba0399373eaa5a9), as it was significantly easier to grasp what's going on and convince myself that this is the behaviour we want. The only small drawback I see that it looks odd if both the if- and else-branch do exactly the same thing, and it could invite people to open deduplication refactor PRs (or leave them wondering if it's a bug). Maybe adding some \"this is intended\" comment would make sense for a follow-up.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2055922168",
      "submitted_at": "2024-05-14T16:55:21Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "commented",
      "id": 2110795746,
      "node_id": "IC_kwDOABII58590C_i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2110795746",
      "actor": {
        "login": "AngusP",
        "id": 1328814,
        "node_id": "MDQ6VXNlcjEzMjg4MTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1328814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AngusP",
        "html_url": "https://github.com/AngusP",
        "followers_url": "https://api.github.com/users/AngusP/followers",
        "following_url": "https://api.github.com/users/AngusP/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AngusP/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AngusP/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AngusP/subscriptions",
        "organizations_url": "https://api.github.com/users/AngusP/orgs",
        "repos_url": "https://api.github.com/users/AngusP/repos",
        "events_url": "https://api.github.com/users/AngusP/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AngusP/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T17:48:37Z",
      "updated_at": "2024-05-14T17:48:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Maybe adding some \"this is intended\" comment would make sense for a follow-up.\r\n\r\nCould make the 'cast' explicit in the second branch, though there's already the comment making it pretty clear this is intentional so may be unnecessary\r\n\r\n```c++\r\nconst auto guessed_wtxid = Wtxid::FromUint256(hash);\r\nif (m_orphanage.HaveTx(guessed_wtxid)) return true;\r\n```",
      "user": {
        "login": "AngusP",
        "id": 1328814,
        "node_id": "MDQ6VXNlcjEzMjg4MTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1328814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AngusP",
        "html_url": "https://github.com/AngusP",
        "followers_url": "https://api.github.com/users/AngusP/followers",
        "following_url": "https://api.github.com/users/AngusP/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AngusP/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AngusP/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AngusP/subscriptions",
        "organizations_url": "https://api.github.com/users/AngusP/orgs",
        "repos_url": "https://api.github.com/users/AngusP/repos",
        "events_url": "https://api.github.com/users/AngusP/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AngusP/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2110795746",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "reviewed",
      "id": 2056028500,
      "node_id": "PRR_kwDOABII5856jIFU",
      "url": null,
      "actor": null,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "crACK [0fb17bf](https://github.com/bitcoin/bitcoin/pull/30000/commits/0fb17bf61a40b73a2b81a18e70b3de180c917f22)\r\n\r\nNon-blocking comments",
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2056028500",
      "submitted_at": "2024-05-14T17:48:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "reviewed",
      "id": 2053065161,
      "node_id": "PRR_kwDOABII5856X0nJ",
      "url": null,
      "actor": null,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 0fb17bf61a40b73a2b81a18e70b3de180c917f22\r\n\r\nIt took me a while to grok the implications of this PR, but the latest version of this PR makes it much more reviewable and I'm now comfortable that the changes are safe and desired. Also, nice work on the tests!\r\n\r\nWhat I missed/misunderstood in my earlier review is that the reduced orphanage hit rate  is a goal, and not a bug/something to minimize. Related nit: perhaps the commit message of 7e475b9648bbee04f5825b922ba0399373eaa5a9 could be explicit about this reduction and why we want it?\r\n\r\nI [remain uneasy](https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1600159941) about `AlreadyHaveTx()` not really doing what the name indicates (because of the `GenTxid` ambiguity), but is not a huge concern and I think should not block this PR / can be addressed separately if it is desired.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2053065161",
      "submitted_at": "2024-05-14T18:34:17Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
    },
    {
      "event": "commented",
      "id": 2110867498,
      "node_id": "IC_kwDOABII58590Ugq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2110867498",
      "actor": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T18:34:42Z",
      "updated_at": "2024-05-14T18:34:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "trACK 0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2110867498",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "assigned",
      "id": 12817234533,
      "node_id": "AE_lADOABII586HTPTkzwAAAAL793pl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12817234533",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T13:00:43Z",
      "assignee": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "merged",
      "id": 12818366015,
      "node_id": "ME_lADOABII586HTPTkzwAAAAL8CL4_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12818366015",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "33303b2b296cdb21b6ade3e95663e9ed58c08753",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33303b2b296cdb21b6ade3e95663e9ed58c08753",
      "created_at": "2024-05-15T13:56:28Z"
    },
    {
      "event": "closed",
      "id": 12818366060,
      "node_id": "CE_lADOABII586HTPTkzwAAAAL8CL5s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12818366060",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T13:56:28Z"
    },
    {
      "event": "commented",
      "id": 2112626070,
      "node_id": "IC_kwDOABII58597B2W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2112626070",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T13:58:55Z",
      "updated_at": "2024-05-15T13:58:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "I merged this as-is since it has so many acks, but it probably makes sense to follow up on the last few comments and suggestions.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#issuecomment-2112626070",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30000"
    },
    {
      "event": "head_ref_deleted",
      "id": 12820054717,
      "node_id": "HRDE_lADOABII586HTPTkzwAAAAL8IoK9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12820054717",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T15:43:35Z"
    },
    {
      "event": "referenced",
      "id": 13575258284,
      "node_id": "REFE_lADOABII586HTPTkzwAAAAMpJgCs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13575258284",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e7ca7c17ac734c49ae756316cd48d4521f0add11",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/e7ca7c17ac734c49ae756316cd48d4521f0add11",
      "created_at": "2024-07-19T14:11:24Z"
    },
    {
      "event": "referenced",
      "id": 13730252824,
      "node_id": "REFE_lADOABII586HTPTkzwAAAAMyYwgY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13730252824",
      "actor": {
        "login": "roqqit",
        "id": 172419468,
        "node_id": "U_kgDOCkbpjA",
        "avatar_url": "https://avatars.githubusercontent.com/u/172419468?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/roqqit",
        "html_url": "https://github.com/roqqit",
        "followers_url": "https://api.github.com/users/roqqit/followers",
        "following_url": "https://api.github.com/users/roqqit/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/roqqit/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/roqqit/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/roqqit/subscriptions",
        "organizations_url": "https://api.github.com/users/roqqit/orgs",
        "repos_url": "https://api.github.com/users/roqqit/repos",
        "events_url": "https://api.github.com/users/roqqit/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/roqqit/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "39ac7a7cf76667253031836da4de04804ac303ff",
      "commit_url": "https://api.github.com/repos/doged-io/doged/commits/39ac7a7cf76667253031836da4de04804ac303ff",
      "created_at": "2024-08-01T18:26:10Z"
    },
    {
      "event": "referenced",
      "id": 13769912556,
      "node_id": "REFE_lADOABII586HTPTkzwAAAAM0wDDs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13769912556",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dd7e12a3de6b8827ab101db4eca7c34358ce1954",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd7e12a3de6b8827ab101db4eca7c34358ce1954",
      "created_at": "2024-08-05T21:26:03Z"
    },
    {
      "event": "locked",
      "id": 18183484291,
      "node_id": "LOE_lADOABII586HTPTkzwAAAAQ70fOD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18183484291",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-17T06:17:42Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586372606",
      "pull_request_review_id": 2033751635,
      "id": 1586372606,
      "node_id": "PRRC_kwDOABII585ejh_-",
      "diff_hunk": "@@ -24,7 +24,7 @@ class TxOrphanage {\n     bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n \n     /** Check if we already have an orphan transaction (by txid or wtxid) */",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 3,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    /** Check if we already have an orphan transaction */\r\n```",
      "created_at": "2024-05-01T14:43:09Z",
      "updated_at": "2024-05-01T19:25:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1586372606",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586372606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586410875",
      "pull_request_review_id": 2033751635,
      "id": 1586410875,
      "node_id": "PRRC_kwDOABII585ejrV7",
      "diff_hunk": "@@ -54,18 +52,19 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n     return true;\n }\n \n-int TxOrphanage::EraseTx(const Txid& txid)\n+int TxOrphanage::EraseTx(const Wtxid& wtxid)\n {\n     LOCK(m_mutex);\n-    return EraseTxNoLock(txid);\n+    return EraseTxNoLock(wtxid);\n }\n \n-int TxOrphanage::EraseTxNoLock(const Txid& txid)\n+int TxOrphanage::EraseTxNoLock(const Wtxid& wtxid)\n {\n     AssertLockHeld(m_mutex);\n-    std::map<Txid, OrphanTx>::iterator it = m_orphans.find(txid);\n+    std::map<Wtxid, OrphanTx>::iterator it = m_orphans.find(wtxid);\n     if (it == m_orphans.end())\n         return 0;\n+    const auto& txid = it->second.tx->GetHash();",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: looks like this is only used for logging (and thus can be declared right before the logging) - do we still want/need to log the txid? I'd think wtxid suffices? But nvm if that's contentious.",
      "created_at": "2024-05-01T15:14:59Z",
      "updated_at": "2024-05-01T19:25:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1586410875",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586410875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586417487",
      "pull_request_review_id": 2033751635,
      "id": 1586417487,
      "node_id": "PRRC_kwDOABII585ejs9P",
      "diff_hunk": "@@ -101,13 +98,13 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n     m_peer_work_set.erase(peer);\n \n     int nErased = 0;\n-    std::map<Txid, OrphanTx>::iterator iter = m_orphans.begin();\n+    std::map<Wtxid, OrphanTx>::iterator iter = m_orphans.begin();\n     while (iter != m_orphans.end())\n     {\n-        std::map<Txid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        std::map<Wtxid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n-            nErased += EraseTxNoLock(maybeErase->second.tx->GetHash());\n+            nErased += EraseTxNoLock(maybeErase->second.tx->GetWitnessHash());",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: can't we just use `first`?\r\n```suggestion\r\n            nErased += EraseTxNoLock(maybeErase->first);\r\n```",
      "created_at": "2024-05-01T15:21:51Z",
      "updated_at": "2024-05-01T19:25:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1586417487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586417487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586473749",
      "pull_request_review_id": 2033911780,
      "id": 1586473749,
      "node_id": "PRRC_kwDOABII585ej6sV",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "646aa4da91c03a0e72d086cae281aa0688f2f41d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```Suggestion\r\n    if (m_orphanage.HaveTx(Wtxid::FromUint256(hash))) return true;\r\n```",
      "created_at": "2024-05-01T16:19:56Z",
      "updated_at": "2024-05-01T16:33:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1586473749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586473749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586533521",
      "pull_request_review_id": 2033751635,
      "id": 1586533521,
      "node_id": "PRRC_kwDOABII585ekJSR",
      "diff_hunk": "@@ -112,21 +112,21 @@ FUZZ_TARGET(txorphan, .init = initialize_orphanage)\n                     {\n                         CTransactionRef ref = orphanage.GetTxToReconsider(peer_id);\n                         if (ref) {\n-                            bool have_tx = orphanage.HaveTx(GenTxid::Txid(ref->GetHash())) || orphanage.HaveTx(GenTxid::Wtxid(ref->GetWitnessHash()));\n+                            bool have_tx = orphanage.HaveTx(ref->GetWitnessHash());\n                             Assert(have_tx);",
      "path": "src/test/fuzz/txorphan.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: can just one-line\r\n```suggestion\r\n                            Assert(orphanage.HaveTx(ref->GetWitnessHash()));\r\n```",
      "created_at": "2024-05-01T17:20:10Z",
      "updated_at": "2024-05-01T19:25:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1586533521",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586533521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586638555",
      "pull_request_review_id": 2033751635,
      "id": 1586638555,
      "node_id": "PRRC_kwDOABII585eki7b",
      "diff_hunk": "@@ -101,13 +98,13 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n     m_peer_work_set.erase(peer);\n \n     int nErased = 0;\n-    std::map<Txid, OrphanTx>::iterator iter = m_orphans.begin();\n+    std::map<Wtxid, OrphanTx>::iterator iter = m_orphans.begin();\n     while (iter != m_orphans.end())\n     {\n-        std::map<Txid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        std::map<Wtxid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n-            nErased += EraseTxNoLock(maybeErase->second.tx->GetHash());\n+            nErased += EraseTxNoLock(maybeErase->second.tx->GetWitnessHash());",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586417487,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Or alternatively:\r\n\r\n<details>\r\n<summary>git diff on 4b4dfaa8f3</summary>\r\n\r\n```diff\r\ndiff --git a/src/txorphanage.cpp b/src/txorphanage.cpp\r\nindex 504a1f7ec3..bed92e6b32 100644\r\n--- a/src/txorphanage.cpp\r\n+++ b/src/txorphanage.cpp\r\n@@ -98,13 +98,11 @@ void TxOrphanage::EraseForPeer(NodeId peer)\r\n     m_peer_work_set.erase(peer);\r\n \r\n     int nErased = 0;\r\n-    std::map<Wtxid, OrphanTx>::iterator iter = m_orphans.begin();\r\n-    while (iter != m_orphans.end())\r\n-    {\r\n-        std::map<Wtxid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\r\n-        if (maybeErase->second.fromPeer == peer)\r\n+    for (auto iter = m_orphans.begin(); iter != m_orphans.end(); ) {\r\n+        const auto& [wtxid, tx] = *iter++; // increment to avoid iterator becoming invalid\r\n+        if (tx.fromPeer == peer)\r\n         {\r\n-            nErased += EraseTxNoLock(maybeErase->second.tx->GetWitnessHash());\r\n+            nErased += EraseTxNoLock(wtxid);\r\n         }\r\n     }\r\n     if (nErased > 0) LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2024-05-01T18:45:17Z",
      "updated_at": "2024-05-01T19:25:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1586638555",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586638555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586713579",
      "pull_request_review_id": 2033751635,
      "id": 1586713579,
      "node_id": "PRRC_kwDOABII585ek1Pr",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's not immediately obvious to me why it is safe to just convert any `gtxid` into a `Wtxid` here, especially since there are callsites of `AlreadyHaveTx` where a ` GenTxId::Txid` is passed, such as e.g. [here](https://github.com/bitcoin/bitcoin/blob/d73245abc70346a0e8805d50a1f395706084294c/src/net_processing.cpp#L4632). If it is indeed safe, I think it could be a better approach to update `AlreadyHaveTx` to take a `Wtxid` and push the conversion further to the edge, so it can be reviewed on a case-by-case basis?",
      "created_at": "2024-05-01T19:24:21Z",
      "updated_at": "2024-05-01T19:25:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1586713579",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586713579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586884665",
      "pull_request_review_id": 2034556058,
      "id": 1586884665,
      "node_id": "PRRC_kwDOABII585elfA5",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586713579,
      "user": {
        "login": "AngusP",
        "id": 1328814,
        "node_id": "MDQ6VXNlcjEzMjg4MTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1328814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AngusP",
        "html_url": "https://github.com/AngusP",
        "followers_url": "https://api.github.com/users/AngusP/followers",
        "following_url": "https://api.github.com/users/AngusP/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AngusP/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AngusP/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AngusP/subscriptions",
        "organizations_url": "https://api.github.com/users/AngusP/orgs",
        "repos_url": "https://api.github.com/users/AngusP/repos",
        "events_url": "https://api.github.com/users/AngusP/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AngusP/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Ignore me if I'm understanding) -- coinbase transactions are [required to have all `0` Wtxids](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure) (`0x0000....0000`) which means for an `INV` message for a witness coinbase you have to use the non-witness txid to reference the transaction? - so `AlreadyHaveTx` in that case is explicitly *not* using a Wtxid? (Or are coinbases never `INV`'d?)\r\n\r\nAlso perhaps not great/confusing to treat Wtxid and Txids as always interchangeable (though the types allow it) because of the coinbase Wtxid caveat?",
      "created_at": "2024-05-01T22:22:51Z",
      "updated_at": "2024-05-02T08:32:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1586884665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586884665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587460520",
      "pull_request_review_id": 2035457852,
      "id": 1587460520,
      "node_id": "PRRC_kwDOABII585enrmo",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586713579,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> It's not immediately obvious to me why it is safe to just convert any gtxid into a Wtxid here\r\n\r\nThe argument I'm making in this PR is that in all the places we are checking by txid, we shouldn't be doing that, because we're missing same-txid-different-witness cases. But yeah totally fair to say it's difficult to review it together, so I'll split the first commit to make it more explicit where the change is happening and why that's ok.\r\n\r\n>  I think it could be a better approach to update AlreadyHaveTx to take a Wtxid\r\n\r\nfwiw I disagree, as we do want to check txids in the other data structures.\r\n\r\n> coinbase transactions are [required to have all 0 Wtxids](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#commitment-structure) (0x0000....0000) which means for an INV message for a witness coinbase you have to use the non-witness txid to reference the transaction? - so AlreadyHaveTx in that case is explicitly not using a Wtxid? (Or are coinbases never INV'd?)\r\n\r\nThat link is referring to the wtxid of the coinbase transaction when calculating the witness commitment; that's not the case in any other situation. Also, yes, if we get a coinbase transaction in tx relay we'd drop that pretty much immediately and wouldn't be putting it in orphanage:\r\nhttps://github.com/bitcoin/bitcoin/blob/9d1a286f20b8a602ffe72928bcd79be09fdbf9d0/src/validation.cpp#L735-L742",
      "created_at": "2024-05-02T11:12:16Z",
      "updated_at": "2024-05-02T11:12:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1587460520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587460520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587694422",
      "pull_request_review_id": 2035842164,
      "id": 1587694422,
      "node_id": "PRRC_kwDOABII585eoktW",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586713579,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> The argument I'm making in this PR is that in all the places we are checking by txid, we shouldn't be doing that, because we're missing same-txid-different-witness cases.\r\n\r\nI agree, the rationale makes sense. My concern is about segwit txs (`txid != wtxid`) where we check by txid (for whatever reason: intentional because we don't have witness data, legacy and we never updated it, buggy, ...): just creating a wtxid from the txid hash as is done here seems like it has potential to start missing things we previously wouldn't - since `TxOrphanage` now _only_ indexes by `wtxid`?\r\n\r\nI've made a [branch](https://github.com/glozow/bitcoin/compare/2024-04-orphan-use-wtxid...stickies-v:bitcoin:pr/30000) where I've created 2 overloads of `AlreadyHaveTx`: one that takes `Wtxid` and one that takes `Txid`, to force all the conversions to the edges. I implemented the `Txid` to perform less checks, based on the documentation (didn't verify the code) that `m_recent_rejects_reconsiderable` and `m_recent_rejects` uses `wtxid`, whereas `m_recent_confirmed_transactions` uses both `txid` and `wtxid`.\r\n\r\nThere are 4 callsites of `AlreadyHaveTx`. For 2 of them, [1) here](https://github.com/glozow/bitcoin/compare/2024-04-orphan-use-wtxid...stickies-v:bitcoin:pr/30000#diff-6875de769e90cec84d2e8a9c1b962cdbcda44d870d42e4215827e599e11e90e3R4255-R4256) and [2) here](https://github.com/glozow/bitcoin/compare/2024-04-orphan-use-wtxid...stickies-v:bitcoin:pr/30000#diff-6875de769e90cec84d2e8a9c1b962cdbcda44d870d42e4215827e599e11e90e3R4561), the conversion seems trivial/sensible.\r\n\r\nA third is more confusing to me. [3) Here in `ProcessMessage`](https://github.com/glozow/bitcoin/compare/2024-04-orphan-use-wtxid...stickies-v:bitcoin:pr/30000#diff-6875de769e90cec84d2e8a9c1b962cdbcda44d870d42e4215827e599e11e90e3R4663), I initially used the `Txid` overload, but that fails the `p2p_orphan_handling.py::test_orphan_of_orphan` test. Switching to `Wtxid` makes it pass, but I don't understand why. Since with this pull, `TxOrphanage` indexes on `Wtxid`, calling `HaveTx` on a blind conversion of `parent_txid` into a `Wtxid` seems like it shouldn't find anything in the orphanage, unless we're dealing with non-segwit transaction?\r\n\r\nFinally, for the [4) fourth here](https://github.com/glozow/bitcoin/compare/2024-04-orphan-use-wtxid...stickies-v:bitcoin:pr/30000#diff-6875de769e90cec84d2e8a9c1b962cdbcda44d870d42e4215827e599e11e90e3R6319-R6341), I think my refactoring is a no-op, we just blindly call the different function signatures based on `GenTxid::IsWtxid()`, no real difference with the current implementation except perhaps for making things more explicit.",
      "created_at": "2024-05-02T14:03:35Z",
      "updated_at": "2024-05-02T14:10:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1587694422",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587694422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587705035",
      "pull_request_review_id": 2035860350,
      "id": 1587705035,
      "node_id": "PRRC_kwDOABII585eonTL",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586713579,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "To be clear: I'm not saying this PR needs to overhaul `AlreadyHaveTx` like I did, and I think having `TxOrphanage` index on `Wtxid` instead of `Txid` is better. I just think that if we're going to be calling `TxOrphanage` methods with (what are in fact) txids, we should probably have `TxOrphanage` _also_ keep a `Txid` index and not do blind conversion such as is happening here? I think that would address my concerns and make things easier to review?",
      "created_at": "2024-05-02T14:08:54Z",
      "updated_at": "2024-05-02T14:09:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1587705035",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587705035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587705703",
      "pull_request_review_id": 2035861475,
      "id": 1587705703,
      "node_id": "PRRC_kwDOABII585eondn",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586713579,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fwiw, I think the in-orphanage txid==wtixd case seems pretty rare all things considered. I had 4 over a 24 hour period, vs about 400 times where we fetched a segwit parent via txid though that particular txid was in the orphanage already.\r\n\r\niow I'm not sure extra complexity is worth it, vs just dropping it altogether(and eating a tiny bit more of bandwidth?)",
      "created_at": "2024-05-02T14:09:22Z",
      "updated_at": "2024-05-02T14:11:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1587705703",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587705703"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587730485",
      "pull_request_review_id": 2035904439,
      "id": 1587730485,
      "node_id": "PRRC_kwDOABII585eotg1",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586713579,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> iow I'm not sure extra complexity is worth it,\r\n\r\nOh, fair enough. I don't have a good enough view of the attack vectors here. In my review, I was operating on the assumption that we wouldn't want to miss anything we're currently doing. If it's okay to relax that, that could make sense - but it should probably be made explicit then?",
      "created_at": "2024-05-02T14:23:52Z",
      "updated_at": "2024-05-02T14:23:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1587730485",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587730485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587742487",
      "pull_request_review_id": 2035924068,
      "id": 1587742487,
      "node_id": "PRRC_kwDOABII585eowcX",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586713579,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "IIUC If the check is removed, you'll waste bandwidth when you get orphan chains that are non-segwit, but you won't keep or relay them, so it shouldn't churn the orphanage.\r\n\r\nWould it help if the comment was touched up to be explicit about what it's saving us from doing?",
      "created_at": "2024-05-02T14:31:36Z",
      "updated_at": "2024-05-02T14:31:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1587742487",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587742487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589529436",
      "pull_request_review_id": 2038712299,
      "id": 1589529436,
      "node_id": "PRRC_kwDOABII585evktc",
      "diff_hunk": "@@ -23,7 +23,7 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n \n     const Txid& hash = tx->GetHash();",
      "path": "src/txorphanage.cpp",
      "position": 2,
      "original_position": 2,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "646aa4da91c03a0e72d086cae281aa0688f2f41d",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 646aa4da91c03a0e72d086cae281aa0688f2f41d\r\n\r\nThis is only used for logging now. Do we care about logging the `txid` now that the map is keyed by `wtxid`?",
      "created_at": "2024-05-03T17:40:57Z",
      "updated_at": "2024-05-03T19:51:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1589529436",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589529436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589547282",
      "pull_request_review_id": 2038712299,
      "id": 1589547282,
      "node_id": "PRRC_kwDOABII585evpES",
      "diff_hunk": "@@ -101,13 +98,13 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n     m_peer_work_set.erase(peer);\n \n     int nErased = 0;\n-    std::map<Txid, OrphanTx>::iterator iter = m_orphans.begin();\n+    std::map<Wtxid, OrphanTx>::iterator iter = m_orphans.begin();\n     while (iter != m_orphans.end())\n     {\n-        std::map<Txid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        std::map<Wtxid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n-            nErased += EraseTxNoLock(maybeErase->second.tx->GetHash());\n+            nErased += EraseTxNoLock(maybeErase->second.tx->GetWitnessHash());\n         }\n     }\n     if (nErased > 0) LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "646aa4da91c03a0e72d086cae281aa0688f2f41d",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 646aa4da91c03a0e72d086cae281aa0688f2f41d\r\n\r\nnit: `nErased` is a counter right? Shouldn't this read `txs` instead?",
      "created_at": "2024-05-03T17:54:15Z",
      "updated_at": "2024-05-03T19:51:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1589547282",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589547282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589549760",
      "pull_request_review_id": 2038712299,
      "id": 1589549760,
      "node_id": "PRRC_kwDOABII585evprA",
      "diff_hunk": "@@ -159,7 +156,7 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx)\n             for (const auto& elem : it_by_prev->second) {\n                 // Get this source peer's work set, emplacing an empty set if it didn't exist\n                 // (note: if this peer wasn't still connected, we would have removed the orphan tx already)\n-                std::set<Txid>& orphan_work_set = m_peer_work_set.try_emplace(elem->second.fromPeer).first->second;\n+                std::set<Wtxid>& orphan_work_set = m_peer_work_set.try_emplace(elem->second.fromPeer).first->second;\n                 // Add this tx to the work set\n                 orphan_work_set.insert(elem->first);\n                 LogPrint(BCLog::TXPACKAGES, \"added %s (wtxid=%s) to peer %d workset\\n\",",
      "path": "src/txorphanage.cpp",
      "position": 118,
      "original_position": 98,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "646aa4da91c03a0e72d086cae281aa0688f2f41d",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 646aa4da91c03a0e72d086cae281aa0688f2f41d\r\n\r\nSame here, do we still care about logging `txids`? I guess this applies to all the file, so not pointing it out again",
      "created_at": "2024-05-03T17:56:16Z",
      "updated_at": "2024-05-03T19:51:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1589549760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589549760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 165,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589569008",
      "pull_request_review_id": 2038712299,
      "id": 1589569008,
      "node_id": "PRRC_kwDOABII585evuXw",
      "diff_hunk": "@@ -226,7 +219,7 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const auto& orphanHash = orphanTx.GetHash();\n+                const auto& orphanHash = orphanTx.GetWitnessHash();\n                 vOrphanErase.push_back(orphanHash);",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "646aa4da91c03a0e72d086cae281aa0688f2f41d",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 646aa4da91c03a0e72d086cae281aa0688f2f41d\r\n\r\nThis should not be called `orphanHash` anymore, but also, this could be inlined",
      "created_at": "2024-05-03T18:10:27Z",
      "updated_at": "2024-05-03T19:51:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1589569008",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589569008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 222,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589571339",
      "pull_request_review_id": 2038712299,
      "id": 1589571339,
      "node_id": "PRRC_kwDOABII585evu8L",
      "diff_hunk": "@@ -226,7 +219,7 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const auto& orphanHash = orphanTx.GetHash();\n+                const auto& orphanHash = orphanTx.GetWitnessHash();\n                 vOrphanErase.push_back(orphanHash);",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "646aa4da91c03a0e72d086cae281aa0688f2f41d",
      "in_reply_to_id": 1589569008,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also, in L231:\r\n\r\n`for (const auto& orphanHash : vOrphanErase)` -> `for (const auto& wtxid : vOrphanErase)`",
      "created_at": "2024-05-03T18:12:19Z",
      "updated_at": "2024-05-03T19:51:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1589571339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589571339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 222,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589584199",
      "pull_request_review_id": 2038776284,
      "id": 1589584199,
      "node_id": "PRRC_kwDOABII585evyFH",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586713579,
      "user": {
        "login": "itornaza",
        "id": 11520757,
        "node_id": "MDQ6VXNlcjExNTIwNzU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/11520757?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/itornaza",
        "html_url": "https://github.com/itornaza",
        "followers_url": "https://api.github.com/users/itornaza/followers",
        "following_url": "https://api.github.com/users/itornaza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/itornaza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/itornaza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/itornaza/subscriptions",
        "organizations_url": "https://api.github.com/users/itornaza/orgs",
        "repos_url": "https://api.github.com/users/itornaza/repos",
        "events_url": "https://api.github.com/users/itornaza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/itornaza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "imo `wtxid` and `txid` being double SHA256 outputs and `wtxid` being essentially a superset of `txid`, makes this blind conversion legitimate in this case.",
      "created_at": "2024-05-03T18:21:58Z",
      "updated_at": "2024-05-03T18:47:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1589584199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1589584199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596607638",
      "pull_request_review_id": 2049834162,
      "id": 1596607638,
      "node_id": "PRRC_kwDOABII585fKkyW",
      "diff_hunk": "@@ -23,7 +23,7 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n \n     const Txid& hash = tx->GetHash();",
      "path": "src/txorphanage.cpp",
      "position": 2,
      "original_position": 2,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "646aa4da91c03a0e72d086cae281aa0688f2f41d",
      "in_reply_to_id": 1589529436,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I would definitely say to log both txid and wtxid when we have it. A lot of things use txid only, e.g. if you want to trace a tx through logs or look it up in mempool. Would be a pain to not have txid imo.",
      "created_at": "2024-05-10T10:53:13Z",
      "updated_at": "2024-05-10T10:56:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596607638",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596607638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596607978",
      "pull_request_review_id": 2049834162,
      "id": 1596607978,
      "node_id": "PRRC_kwDOABII585fKk3q",
      "diff_hunk": "@@ -54,18 +52,19 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n     return true;\n }\n \n-int TxOrphanage::EraseTx(const Txid& txid)\n+int TxOrphanage::EraseTx(const Wtxid& wtxid)\n {\n     LOCK(m_mutex);\n-    return EraseTxNoLock(txid);\n+    return EraseTxNoLock(wtxid);\n }\n \n-int TxOrphanage::EraseTxNoLock(const Txid& txid)\n+int TxOrphanage::EraseTxNoLock(const Wtxid& wtxid)\n {\n     AssertLockHeld(m_mutex);\n-    std::map<Txid, OrphanTx>::iterator it = m_orphans.find(txid);\n+    std::map<Wtxid, OrphanTx>::iterator it = m_orphans.find(wtxid);\n     if (it == m_orphans.end())\n         return 0;\n+    const auto& txid = it->second.tx->GetHash();",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586410875,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same as above, imo definitely want to log txid if we have it.",
      "created_at": "2024-05-10T10:53:38Z",
      "updated_at": "2024-05-10T10:56:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596607978",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596607978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596610435",
      "pull_request_review_id": 2049834162,
      "id": 1596610435,
      "node_id": "PRRC_kwDOABII585fKleD",
      "diff_hunk": "@@ -159,7 +156,7 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx)\n             for (const auto& elem : it_by_prev->second) {\n                 // Get this source peer's work set, emplacing an empty set if it didn't exist\n                 // (note: if this peer wasn't still connected, we would have removed the orphan tx already)\n-                std::set<Txid>& orphan_work_set = m_peer_work_set.try_emplace(elem->second.fromPeer).first->second;\n+                std::set<Wtxid>& orphan_work_set = m_peer_work_set.try_emplace(elem->second.fromPeer).first->second;\n                 // Add this tx to the work set\n                 orphan_work_set.insert(elem->first);\n                 LogPrint(BCLog::TXPACKAGES, \"added %s (wtxid=%s) to peer %d workset\\n\",",
      "path": "src/txorphanage.cpp",
      "position": 118,
      "original_position": 98,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "646aa4da91c03a0e72d086cae281aa0688f2f41d",
      "in_reply_to_id": 1589549760,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes",
      "created_at": "2024-05-10T10:56:23Z",
      "updated_at": "2024-05-10T10:56:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596610435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596610435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 165,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596626751",
      "pull_request_review_id": 2049866191,
      "id": 1596626751,
      "node_id": "PRRC_kwDOABII585fKpc_",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "646aa4da91c03a0e72d086cae281aa0688f2f41d",
      "in_reply_to_id": 1586473749,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-10T11:15:01Z",
      "updated_at": "2024-05-10T11:40:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596626751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596626751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596626910",
      "pull_request_review_id": 2049866191,
      "id": 1596626910,
      "node_id": "PRRC_kwDOABII585fKpfe",
      "diff_hunk": "@@ -112,21 +112,21 @@ FUZZ_TARGET(txorphan, .init = initialize_orphanage)\n                     {\n                         CTransactionRef ref = orphanage.GetTxToReconsider(peer_id);\n                         if (ref) {\n-                            bool have_tx = orphanage.HaveTx(GenTxid::Txid(ref->GetHash())) || orphanage.HaveTx(GenTxid::Wtxid(ref->GetWitnessHash()));\n+                            bool have_tx = orphanage.HaveTx(ref->GetWitnessHash());\n                             Assert(have_tx);",
      "path": "src/test/fuzz/txorphan.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586533521,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-10T11:15:12Z",
      "updated_at": "2024-05-10T11:40:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596626910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596626910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 115,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596628093",
      "pull_request_review_id": 2049866191,
      "id": 1596628093,
      "node_id": "PRRC_kwDOABII585fKpx9",
      "diff_hunk": "@@ -226,7 +219,7 @@ void TxOrphanage::EraseForBlock(const CBlock& block)\n             if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const auto& orphanHash = orphanTx.GetHash();\n+                const auto& orphanHash = orphanTx.GetWitnessHash();\n                 vOrphanErase.push_back(orphanHash);",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "646aa4da91c03a0e72d086cae281aa0688f2f41d",
      "in_reply_to_id": 1589569008,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "inlined. didn't do the rename as I don't think it's incorrect and want to minimize diff",
      "created_at": "2024-05-10T11:16:29Z",
      "updated_at": "2024-05-10T11:40:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596628093",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596628093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 222,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596628218",
      "pull_request_review_id": 2049866191,
      "id": 1596628218,
      "node_id": "PRRC_kwDOABII585fKpz6",
      "diff_hunk": "@@ -24,7 +24,7 @@ class TxOrphanage {\n     bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\n \n     /** Check if we already have an orphan transaction (by txid or wtxid) */",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 3,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586372606,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed thanks",
      "created_at": "2024-05-10T11:16:37Z",
      "updated_at": "2024-05-10T11:40:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596628218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596628218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596649444",
      "pull_request_review_id": 2049904786,
      "id": 1596649444,
      "node_id": "PRRC_kwDOABII585fKu_k",
      "diff_hunk": "@@ -2295,7 +2295,9 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Orphanage is checked by wtxid. However, even if this is a txid, look up the same hash in\n+    // case this is a non-segwit transaction in the orphanage.\n+    if (m_orphanage.HaveTx(Wtxid::FromUint256(gtxid.GetHash()))) return true;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586713579,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Split up the commit, hope it helps (https://github.com/bitcoin/bitcoin/pull/30000#pullrequestreview-2049866191)",
      "created_at": "2024-05-10T11:41:11Z",
      "updated_at": "2024-05-10T11:41:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596649444",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596649444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596853749",
      "pull_request_review_id": 2050241117,
      "id": 1596853749,
      "node_id": "PRRC_kwDOABII585fLg31",
      "diff_hunk": "@@ -101,13 +98,13 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n     m_peer_work_set.erase(peer);\n \n     int nErased = 0;\n-    std::map<Txid, OrphanTx>::iterator iter = m_orphans.begin();\n+    std::map<Wtxid, OrphanTx>::iterator iter = m_orphans.begin();\n     while (iter != m_orphans.end())\n     {\n-        std::map<Txid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        std::map<Wtxid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n-            nErased += EraseTxNoLock(maybeErase->second.tx->GetHash());\n+            nErased += EraseTxNoLock(maybeErase->second.tx->GetWitnessHash());",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586417487,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this could still happen",
      "created_at": "2024-05-10T14:47:16Z",
      "updated_at": "2024-05-10T16:53:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596853749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596853749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596929262",
      "pull_request_review_id": 2050241117,
      "id": 1596929262,
      "node_id": "PRRC_kwDOABII585fLzTu",
      "diff_hunk": "@@ -57,10 +61,20 @@ def wrapper(self):\n \n class PeerTxRelayer(P2PTxInvStore):\n     \"\"\"A P2PTxInvStore that also remembers all of the getdata and tx messages it receives.\"\"\"\n-    def __init__(self):\n+    def __init__(self, wtxidrelay=True):\n         super().__init__()\n         self._tx_received = []\n         self._getdata_received = []\n+        self._wtxidrelay = wtxidrelay\n+\n+    def on_version(self, message):\n+        # Avoid sending verack in response to version.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 37,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "but you are sending verack just below?",
      "created_at": "2024-05-10T15:55:34Z",
      "updated_at": "2024-05-10T16:53:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596929262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596929262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596930516",
      "pull_request_review_id": 2050241117,
      "id": 1596930516,
      "node_id": "PRRC_kwDOABII585fLznU",
      "diff_hunk": "@@ -57,10 +61,20 @@ def wrapper(self):\n \n class PeerTxRelayer(P2PTxInvStore):\n     \"\"\"A P2PTxInvStore that also remembers all of the getdata and tx messages it receives.\"\"\"\n-    def __init__(self):\n+    def __init__(self, wtxidrelay=True):\n         super().__init__()\n         self._tx_received = []\n         self._getdata_received = []\n+        self._wtxidrelay = wtxidrelay\n+\n+    def on_version(self, message):\n+        # Avoid sending verack in response to version.\n+        # When calling add_p2p_connection, wait_for_verack=False must be set (see",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 38,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "but `wait_for_verack=False` isn't being set?",
      "created_at": "2024-05-10T15:56:43Z",
      "updated_at": "2024-05-10T16:53:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596930516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596930516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596947704",
      "pull_request_review_id": 2050241117,
      "id": 1596947704,
      "node_id": "PRRC_kwDOABII585fL3z4",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 110,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "might want to note this line is necessary for the reconsideration step to always happen",
      "created_at": "2024-05-10T16:13:24Z",
      "updated_at": "2024-05-10T16:53:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596947704",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596947704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 467,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596966608",
      "pull_request_review_id": 2050241117,
      "id": 1596966608,
      "node_id": "PRRC_kwDOABII585fL8bQ",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 142,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```Suggestion\r\n        # 2. Node requests tx_grandparent by txid.\r\n```",
      "created_at": "2024-05-10T16:31:07Z",
      "updated_at": "2024-05-10T16:53:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596966608",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596966608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 499,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596969302",
      "pull_request_review_id": 2050241117,
      "id": 1596969302,
      "node_id": "PRRC_kwDOABII585fL9FW",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 148,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```Suggestion\r\n        # exists in orphanage, but should be re-requested due to having witness data.\r\n```",
      "created_at": "2024-05-10T16:33:57Z",
      "updated_at": "2024-05-10T16:53:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596969302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596969302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596975768",
      "pull_request_review_id": 2050241117,
      "id": 1596975768,
      "node_id": "PRRC_kwDOABII585fL-qY",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+\n+        # 5. The parent is requested. Honest peer sends it.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 160,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```Suggestion\r\n        assert_equal(node.getrawmempool(), [])\r\n\r\n        # 5. The parent is requested. Honest peer sends it.\r\n```",
      "created_at": "2024-05-10T16:40:50Z",
      "updated_at": "2024-05-10T16:53:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596975768",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596975768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 517,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596977375",
      "pull_request_review_id": 2050241117,
      "id": 1596977375,
      "node_id": "PRRC_kwDOABII585fL_Df",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+\n+        # 5. The parent is requested. Honest peer sends it.\n+        honest_peer.send_message(msg_tx(tx_grandparent[\"tx\"]))\n+        honest_peer.sync_with_ping()",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 162,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "is `send_message` + `sync_with_ping` always enough to resolve two generations of orphans to ensure we hit the mempool?",
      "created_at": "2024-05-10T16:42:25Z",
      "updated_at": "2024-05-10T16:53:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596977375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596977375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 519,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596981173",
      "pull_request_review_id": 2050241117,
      "id": 1596981173,
      "node_id": "PRRC_kwDOABII585fL_-1",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+\n+        # 5. The parent is requested. Honest peer sends it.\n+        honest_peer.send_message(msg_tx(tx_grandparent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check what happens when node receives announcement with same txid as tx in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child and fake version\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(PeerTxRelayer())\n+        # Must not send wtxidrelay because otherwise the inv(TX) will be ignored later\n+        honest_peer = node.add_p2p_connection(PeerTxRelayer(wtxidrelay=False))\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer announces the real parent, by txid (this isn't common but the node should",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 195,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```Suggestion\r\n        # 3. Honest peer announces the real child by txid (this isn't common but the node should\r\n```",
      "created_at": "2024-05-10T16:44:47Z",
      "updated_at": "2024-05-10T16:53:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596981173",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596981173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 552,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596986213",
      "pull_request_review_id": 2050241117,
      "id": 1596986213,
      "node_id": "PRRC_kwDOABII585fMBNl",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+\n+        # 5. The parent is requested. Honest peer sends it.\n+        honest_peer.send_message(msg_tx(tx_grandparent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check what happens when node receives announcement with same txid as tx in orphanage\")",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 174,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "micronit to sound more prescriptive\r\n```Suggestion\r\n        self.log.info(\"Check node handles receiving announcement with same txid as tx in orphanage\")\r\n```",
      "created_at": "2024-05-10T16:48:28Z",
      "updated_at": "2024-05-10T16:53:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596986213",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596986213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596988905",
      "pull_request_review_id": 2050241117,
      "id": 1596988905,
      "node_id": "PRRC_kwDOABII585fMB3p",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+\n+        # 5. The parent is requested. Honest peer sends it.\n+        honest_peer.send_message(msg_tx(tx_grandparent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check what happens when node receives announcement with same txid as tx in orphanage\")",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 174,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1596986213,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "note for readers: If the child tx ended up being the same wtxid, and in that case the node would simply not add to the orphanage or request anything further.",
      "created_at": "2024-05-10T16:50:13Z",
      "updated_at": "2024-05-10T16:53:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1596988905",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596988905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597723673",
      "pull_request_review_id": 2051463502,
      "id": 1597723673,
      "node_id": "PRRC_kwDOABII585fO1QZ",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+\n+        # 5. The parent is requested. Honest peer sends it.\n+        honest_peer.send_message(msg_tx(tx_grandparent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check what happens when node receives announcement with same txid as tx in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child and fake version\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(PeerTxRelayer())\n+        # Must not send wtxidrelay because otherwise the inv(TX) will be ignored later\n+        honest_peer = node.add_p2p_connection(PeerTxRelayer(wtxidrelay=False))\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer announces the real parent, by txid (this isn't common but the node should\n+        # still keep track of it).\n+        child_txid_int = int(tx_child[\"txid\"], 16)\n+        honest_peer.send_and_ping(msg_inv([CInv(t=MSG_TX, h=child_txid_int)]))\n+\n+        # 4. The child is requested. Honest peer sends it.\n+        node.bumpmocktime(TXREQUEST_TIME_SKIP)\n+        honest_peer.wait_for_getdata([child_txid_int])\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_message(msg_tx(tx_child[\"tx\"]))\n+\n+        # 5. After first parent request times out, the node sends another one for the missing parent\n+        # of the real orphan child.\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 217,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\r\n```",
      "created_at": "2024-05-12T22:07:21Z",
      "updated_at": "2024-05-12T22:28:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1597723673",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597723673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 574,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597725786",
      "pull_request_review_id": 2051463502,
      "id": 1597725786,
      "node_id": "PRRC_kwDOABII585fO1xa",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 117,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\r\n```",
      "created_at": "2024-05-12T22:23:32Z",
      "updated_at": "2024-05-12T22:28:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1597725786",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1597725786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 474,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598332839",
      "pull_request_review_id": 2052452333,
      "id": 1598332839,
      "node_id": "PRRC_kwDOABII585fRJ-n",
      "diff_hunk": "@@ -57,10 +61,20 @@ def wrapper(self):\n \n class PeerTxRelayer(P2PTxInvStore):\n     \"\"\"A P2PTxInvStore that also remembers all of the getdata and tx messages it receives.\"\"\"\n-    def __init__(self):\n+    def __init__(self, wtxidrelay=True):\n         super().__init__()\n         self._tx_received = []\n         self._getdata_received = []\n+        self._wtxidrelay = wtxidrelay\n+\n+    def on_version(self, message):\n+        # Avoid sending verack in response to version.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 37,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1596929262,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oops, this is a bad copy-paste. I forgot to delete this comment I copied over.",
      "created_at": "2024-05-13T11:42:35Z",
      "updated_at": "2024-05-13T11:42:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598332839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598332839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598333278",
      "pull_request_review_id": 2052453250,
      "id": 1598333278,
      "node_id": "PRRC_kwDOABII585fRKFe",
      "diff_hunk": "@@ -57,10 +61,20 @@ def wrapper(self):\n \n class PeerTxRelayer(P2PTxInvStore):\n     \"\"\"A P2PTxInvStore that also remembers all of the getdata and tx messages it receives.\"\"\"\n-    def __init__(self):\n+    def __init__(self, wtxidrelay=True):\n         super().__init__()\n         self._tx_received = []\n         self._getdata_received = []\n+        self._wtxidrelay = wtxidrelay\n+\n+    def on_version(self, message):\n+        # Avoid sending verack in response to version.\n+        # When calling add_p2p_connection, wait_for_verack=False must be set (see",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 38,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1596930516,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same - forgot to delete, sorry",
      "created_at": "2024-05-13T11:43:01Z",
      "updated_at": "2024-05-13T11:43:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598333278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598333278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598461107",
      "pull_request_review_id": 2052675039,
      "id": 1598461107,
      "node_id": "PRRC_kwDOABII585fRpSz",
      "diff_hunk": "@@ -57,10 +61,20 @@ def wrapper(self):\n \n class PeerTxRelayer(P2PTxInvStore):\n     \"\"\"A P2PTxInvStore that also remembers all of the getdata and tx messages it receives.\"\"\"\n-    def __init__(self):\n+    def __init__(self, wtxidrelay=True):\n         super().__init__()\n         self._tx_received = []\n         self._getdata_received = []\n+        self._wtxidrelay = wtxidrelay\n+\n+    def on_version(self, message):\n+        # Avoid sending verack in response to version.\n+        # When calling add_p2p_connection, wait_for_verack=False must be set (see",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 38,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1596930516,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2024-05-13T13:16:24Z",
      "updated_at": "2024-05-13T13:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598461107",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598461107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598461970",
      "pull_request_review_id": 2052675039,
      "id": 1598461970,
      "node_id": "PRRC_kwDOABII585fRpgS",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 110,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1596947704,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added comment",
      "created_at": "2024-05-13T13:17:04Z",
      "updated_at": "2024-05-13T13:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598461970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598461970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 467,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598462421",
      "pull_request_review_id": 2052675039,
      "id": 1598462421,
      "node_id": "PRRC_kwDOABII585fRpnV",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 117,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1597725786,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-13T13:17:23Z",
      "updated_at": "2024-05-13T13:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598462421",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598462421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 474,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598463139",
      "pull_request_review_id": 2052675039,
      "id": 1598463139,
      "node_id": "PRRC_kwDOABII585fRpyj",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 142,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1596966608,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-13T13:17:49Z",
      "updated_at": "2024-05-13T13:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598463139",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598463139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 499,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598465418",
      "pull_request_review_id": 2052675039,
      "id": 1598465418,
      "node_id": "PRRC_kwDOABII585fRqWK",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 148,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1596969302,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "elaborated",
      "created_at": "2024-05-13T13:19:12Z",
      "updated_at": "2024-05-13T13:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598465418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598465418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 505,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598466023",
      "pull_request_review_id": 2052675039,
      "id": 1598466023,
      "node_id": "PRRC_kwDOABII585fRqfn",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+\n+        # 5. The parent is requested. Honest peer sends it.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 160,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1596975768,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added",
      "created_at": "2024-05-13T13:19:36Z",
      "updated_at": "2024-05-13T13:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598466023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598466023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 517,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598496074",
      "pull_request_review_id": 2052675039,
      "id": 1598496074,
      "node_id": "PRRC_kwDOABII585fRx1K",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+\n+        # 5. The parent is requested. Honest peer sends it.\n+        honest_peer.send_message(msg_tx(tx_grandparent[\"tx\"]))\n+        honest_peer.sync_with_ping()",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 162,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1596977375,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I would say so. We do all `ProcessOrphanTx` before processing the ping; the child will be added to workset when the parent is accepted through `ProcessOrphanTx`",
      "created_at": "2024-05-13T13:39:05Z",
      "updated_at": "2024-05-13T13:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598496074",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598496074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 519,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598497584",
      "pull_request_review_id": 2052675039,
      "id": 1598497584,
      "node_id": "PRRC_kwDOABII585fRyMw",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+\n+        # 5. The parent is requested. Honest peer sends it.\n+        honest_peer.send_message(msg_tx(tx_grandparent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check what happens when node receives announcement with same txid as tx in orphanage\")",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 174,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1596986213,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "changed to be more perscriptive",
      "created_at": "2024-05-13T13:39:58Z",
      "updated_at": "2024-05-13T13:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598497584",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598497584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598498581",
      "pull_request_review_id": 2052675039,
      "id": 1598498581,
      "node_id": "PRRC_kwDOABII585fRycV",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+\n+        # 5. The parent is requested. Honest peer sends it.\n+        honest_peer.send_message(msg_tx(tx_grandparent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check what happens when node receives announcement with same txid as tx in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child and fake version\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(PeerTxRelayer())\n+        # Must not send wtxidrelay because otherwise the inv(TX) will be ignored later\n+        honest_peer = node.add_p2p_connection(PeerTxRelayer(wtxidrelay=False))\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer announces the real parent, by txid (this isn't common but the node should",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 195,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1596981173,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "gah thanks",
      "created_at": "2024-05-13T13:40:36Z",
      "updated_at": "2024-05-13T13:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598498581",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598498581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 552,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598499228",
      "pull_request_review_id": 2052675039,
      "id": 1598499228,
      "node_id": "PRRC_kwDOABII585fRymc",
      "diff_hunk": "@@ -398,6 +428,152 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+\n+        # 5. The parent is requested. Honest peer sends it.\n+        honest_peer.send_message(msg_tx(tx_grandparent[\"tx\"]))\n+        honest_peer.sync_with_ping()\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check what happens when node receives announcement with same txid as tx in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child and fake version\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(PeerTxRelayer())\n+        # Must not send wtxidrelay because otherwise the inv(TX) will be ignored later\n+        honest_peer = node.add_p2p_connection(PeerTxRelayer(wtxidrelay=False))\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer announces the real parent, by txid (this isn't common but the node should\n+        # still keep track of it).\n+        child_txid_int = int(tx_child[\"txid\"], 16)\n+        honest_peer.send_and_ping(msg_inv([CInv(t=MSG_TX, h=child_txid_int)]))\n+\n+        # 4. The child is requested. Honest peer sends it.\n+        node.bumpmocktime(TXREQUEST_TIME_SKIP)\n+        honest_peer.wait_for_getdata([child_txid_int])\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_message(msg_tx(tx_child[\"tx\"]))\n+\n+        # 5. After first parent request times out, the node sends another one for the missing parent\n+        # of the real orphan child.\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"] == tx_child[\"wtxid\"]",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 217,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "65f69bf533f66ecfb2695b03204bd437f1fe692d",
      "in_reply_to_id": 1597723673,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-13T13:41:02Z",
      "updated_at": "2024-05-13T13:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598499228",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598499228"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 574,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598526584",
      "pull_request_review_id": 2052675039,
      "id": 1598526584,
      "node_id": "PRRC_kwDOABII585fR5R4",
      "diff_hunk": "@@ -101,13 +98,13 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n     m_peer_work_set.erase(peer);\n \n     int nErased = 0;\n-    std::map<Txid, OrphanTx>::iterator iter = m_orphans.begin();\n+    std::map<Wtxid, OrphanTx>::iterator iter = m_orphans.begin();\n     while (iter != m_orphans.end())\n     {\n-        std::map<Txid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        std::map<Wtxid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n-            nErased += EraseTxNoLock(maybeErase->second.tx->GetHash());\n+            nErased += EraseTxNoLock(maybeErase->second.tx->GetWitnessHash());\n         }\n     }\n     if (nErased > 0) LogPrint(BCLog::TXPACKAGES, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "646aa4da91c03a0e72d086cae281aa0688f2f41d",
      "in_reply_to_id": 1589547282,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok I've added a commit to fix this and another log to say \"transaction(s)\". I took the opportunity to add a few nice things to the logs as well.",
      "created_at": "2024-05-13T13:58:43Z",
      "updated_at": "2024-05-13T13:58:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598526584",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598526584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598532513",
      "pull_request_review_id": 2052800274,
      "id": 1598532513,
      "node_id": "PRRC_kwDOABII585fR6uh",
      "diff_hunk": "@@ -101,13 +98,13 @@ void TxOrphanage::EraseForPeer(NodeId peer)\n     m_peer_work_set.erase(peer);\n \n     int nErased = 0;\n-    std::map<Txid, OrphanTx>::iterator iter = m_orphans.begin();\n+    std::map<Wtxid, OrphanTx>::iterator iter = m_orphans.begin();\n     while (iter != m_orphans.end())\n     {\n-        std::map<Txid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        std::map<Wtxid, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n-            nErased += EraseTxNoLock(maybeErase->second.tx->GetHash());\n+            nErased += EraseTxNoLock(maybeErase->second.tx->GetWitnessHash());",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "4b4dfaa8f3fb98696ab19962e07db51046137542",
      "in_reply_to_id": 1586417487,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this was (mostly) taken",
      "created_at": "2024-05-13T14:02:40Z",
      "updated_at": "2024-05-13T14:02:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598532513",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598532513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598686662",
      "pull_request_review_id": 2053065161,
      "id": 1598686662,
      "node_id": "PRRC_kwDOABII585fSgXG",
      "diff_hunk": "@@ -54,16 +54,19 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n     return true;\n }\n \n-int TxOrphanage::EraseTx(const Txid& txid)\n+int TxOrphanage::EraseTx(const Wtxid& wtxid)\n {\n     LOCK(m_mutex);\n-    return EraseTxNoLock(txid);\n+    return EraseTxNoLock(wtxid);\n }\n \n-int TxOrphanage::EraseTxNoLock(const Txid& txid)\n+int TxOrphanage::EraseTxNoLock(const Wtxid& wtxid)\n {\n     AssertLockHeld(m_mutex);\n-    std::map<Txid, OrphanTx>::iterator it = m_orphans.find(txid);\n+    auto it_by_wtxid = m_wtxid_to_orphan_it.find(wtxid);\n+    if (it_by_wtxid == m_wtxid_to_orphan_it.end()) return 0;\n+\n+    std::map<Txid, OrphanTx>::iterator it = it_by_wtxid->second;\n     if (it == m_orphans.end())\n         return 0;",
      "path": "src/txorphanage.cpp",
      "position": 44,
      "original_position": 22,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "838f63e2f4978d34e9d1bbdecc8fb7b0aef8b039",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In c31f148166f01a9167d82501a77823785d28a841:\r\n\r\nIf this is indeed a refactor commit, I think this line should never be hit. I ran the unit and functional tests with the below diff and didn't get any errors locally. Still, perhaps worth updating the commit like this to make that explicit, and then remove the assertion again in the next commit?\r\n\r\n<details>\r\n<summary>git diff on c31f148166</summary>\r\n\r\n```diff\r\ndiff --git a/src/txorphanage.cpp b/src/txorphanage.cpp\r\nindex ca8a0e3a92..7132660695 100644\r\n--- a/src/txorphanage.cpp\r\n+++ b/src/txorphanage.cpp\r\n@@ -68,7 +68,7 @@ int TxOrphanage::EraseTxNoLock(const Wtxid& wtxid)\r\n \r\n     std::map<Txid, OrphanTx>::iterator it = it_by_wtxid->second;\r\n     if (it == m_orphans.end())\r\n-        return 0;\r\n+        Assert(false);  // we should have already returned early based on it_by_wtxid.\r\n     for (const CTxIn& txin : it->second.tx->vin)\r\n     {\r\n         auto itPrev = m_outpoint_to_orphan_it.find(txin.prevout);\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2024-05-13T15:41:52Z",
      "updated_at": "2024-05-14T18:34:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598686662",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598686662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598764600",
      "pull_request_review_id": 2053065161,
      "id": 1598764600,
      "node_id": "PRRC_kwDOABII585fSzY4",
      "diff_hunk": "@@ -180,6 +190,49 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n     BOOST_CHECK(orphanage.CountOrphans() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(same_txid_diff_witness)\n+{\n+    FastRandomContext det_rand{true};",
      "path": "src/test/orphanage_tests.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "822b2f147791e01ab041238d4cbc8bc7a2bb3069",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "tidy nit:\r\n```suggestion\r\n    FastRandomContext det_rand{/*fDeterministic=*/true};\r\n```",
      "created_at": "2024-05-13T16:43:40Z",
      "updated_at": "2024-05-14T18:34:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598764600",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598764600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 195,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598780909",
      "pull_request_review_id": 2053233269,
      "id": 1598780909,
      "node_id": "PRRC_kwDOABII585fS3Xt",
      "diff_hunk": "@@ -398,6 +427,154 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        # This ensures the peer's orphans were reconsidered.\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests missing tx_grandparent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested because the node shouldn't assume that the\n+        # witness data is the same. In this case, a same-txid-different-witness transaction exists!\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # 5. Hondest peer sends tx_grandparent",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 162,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "1aea9f21571470a37cc0a776bc16b9c2855a81d9",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hondest",
      "created_at": "2024-05-13T16:58:15Z",
      "updated_at": "2024-05-13T17:19:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598780909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598780909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 519,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598790197",
      "pull_request_review_id": 2053233269,
      "id": 1598790197,
      "node_id": "PRRC_kwDOABII585fS5o1",
      "diff_hunk": "@@ -398,6 +427,154 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        # This ensures the peer's orphans were reconsidered.\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests missing tx_grandparent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested because the node shouldn't assume that the\n+        # witness data is the same. In this case, a same-txid-different-witness transaction exists!\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # 5. Hondest peer sends tx_grandparent\n+        honest_peer.send_and_ping(msg_tx(tx_grandparent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check node does not ignore announcement with same txid as tx in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child and fake version\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(PeerTxRelayer())\n+        # Must not send wtxidrelay because otherwise the inv(TX) will be ignored later\n+        honest_peer = node.add_p2p_connection(PeerTxRelayer(wtxidrelay=False))",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 186,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "1aea9f21571470a37cc0a776bc16b9c2855a81d9",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think either of these need to be `PeerTxRelayer`, just use `P2PInterface` and pass in `wtxidrelay` to remove the custom `on_version` handshake?",
      "created_at": "2024-05-13T17:06:53Z",
      "updated_at": "2024-05-13T17:19:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598790197",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598790197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 543,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598792832",
      "pull_request_review_id": 2053233269,
      "id": 1598792832,
      "node_id": "PRRC_kwDOABII585fS6SA",
      "diff_hunk": "@@ -47,7 +47,7 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n         m_outpoint_to_orphan_it[txin.prevout].insert(ret.first);\n     }\n \n-    LogPrint(BCLog::TXPACKAGES, \"stored orphan tx %s (wtxid=%s) (mapsz %u outsz %u)\\n\", hash.ToString(), wtxid.ToString(),\n+    LogPrint(BCLog::TXPACKAGES, \"stored orphan tx %s (wtxid=%s), size: %u (mapsz %u outsz %u)\\n\", hash.ToString(), wtxid.ToString(), sz,",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "weight no \"size\"? :pleading_face: ",
      "created_at": "2024-05-13T17:08:57Z",
      "updated_at": "2024-05-13T17:19:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1598792832",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598792832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599064530",
      "pull_request_review_id": 2053800837,
      "id": 1599064530,
      "node_id": "PRRC_kwDOABII585fT8nS",
      "diff_hunk": "@@ -398,6 +427,154 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        # This ensures the peer's orphans were reconsidered.\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests missing tx_grandparent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested because the node shouldn't assume that the\n+        # witness data is the same. In this case, a same-txid-different-witness transaction exists!\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # 5. Hondest peer sends tx_grandparent\n+        honest_peer.send_and_ping(msg_tx(tx_grandparent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check node does not ignore announcement with same txid as tx in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child and fake version\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(PeerTxRelayer())\n+        # Must not send wtxidrelay because otherwise the inv(TX) will be ignored later\n+        honest_peer = node.add_p2p_connection(PeerTxRelayer(wtxidrelay=False))\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer announces the real child, by txid (this isn't common but the node should\n+        # still keep track of it).\n+        child_txid_int = int(tx_child[\"txid\"], 16)\n+        honest_peer.send_and_ping(msg_inv([CInv(t=MSG_TX, h=child_txid_int)]))\n+\n+        # 4. The child is requested. Honest peer sends it.\n+        node.bumpmocktime(TXREQUEST_TIME_SKIP)\n+        honest_peer.wait_for_getdata([child_txid_int])\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_message(msg_tx(tx_child[\"tx\"]))\n+\n+        # 5. After first parent request times out, the node sends another one for the missing parent\n+        # of the real orphan child.\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 214,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "1aea9f21571470a37cc0a776bc16b9c2855a81d9",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "i don't think that's a problem, just mentioning that whether we disconnect the  bad peer for misbehavior depends on the order in which the `ProcessOrphanTx` is called, so it could be random:\r\nIf the valid pair of txns is processed first, the invalid tx is removed with \"txn-same-nonwitness-data-in-mempool\" and no punishment. If the invalid pair is processed first, the bad peer is disconnected.",
      "created_at": "2024-05-13T20:48:50Z",
      "updated_at": "2024-05-13T23:17:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1599064530",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599064530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 571,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599118360",
      "pull_request_review_id": 2053871488,
      "id": 1599118360,
      "node_id": "PRRC_kwDOABII585fUJwY",
      "diff_hunk": "@@ -2295,7 +2295,12 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Always query by wtxid, even if gtxid has a Txid type.\n+    // It is possible that the transaction in the orphanage has the same txid but a different\n+    // witness (e.g. malleated by an attacker) and we don't want to return false positives.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "in_reply_to_id": null,
      "user": {
        "login": "AngusP",
        "id": 1328814,
        "node_id": "MDQ6VXNlcjEzMjg4MTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1328814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AngusP",
        "html_url": "https://github.com/AngusP",
        "followers_url": "https://api.github.com/users/AngusP/followers",
        "following_url": "https://api.github.com/users/AngusP/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AngusP/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AngusP/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AngusP/subscriptions",
        "organizations_url": "https://api.github.com/users/AngusP/orgs",
        "repos_url": "https://api.github.com/users/AngusP/repos",
        "events_url": "https://api.github.com/users/AngusP/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AngusP/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: given the discussion in the PR, you could extend this with a note on why we might still want to keep multiple same-txid-diff-witness transactions in the orphanage\r\n\r\n```suggestion\r\n    // It is possible that the transaction in the orphanage has the same txid but a different\r\n    // witness (e.g. malleated by an attacker) and we don't want to return false positives,\r\n    // nor can we tell which of the same-txid-different-witness transactions in the orphanage\r\n    // could be evicted without seeing their parent transactions.\r\n```",
      "created_at": "2024-05-13T21:40:39Z",
      "updated_at": "2024-05-13T22:04:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1599118360",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599118360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2299,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599138412",
      "pull_request_review_id": 2053871488,
      "id": 1599138412,
      "node_id": "PRRC_kwDOABII585fUOps",
      "diff_hunk": "@@ -398,6 +427,154 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        # This ensures the peer's orphans were reconsidered.\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests missing tx_grandparent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 147,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "in_reply_to_id": null,
      "user": {
        "login": "AngusP",
        "id": 1328814,
        "node_id": "MDQ6VXNlcjEzMjg4MTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1328814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AngusP",
        "html_url": "https://github.com/AngusP",
        "followers_url": "https://api.github.com/users/AngusP/followers",
        "following_url": "https://api.github.com/users/AngusP/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AngusP/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AngusP/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AngusP/subscriptions",
        "organizations_url": "https://api.github.com/users/AngusP/orgs",
        "repos_url": "https://api.github.com/users/AngusP/repos",
        "events_url": "https://api.github.com/users/AngusP/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AngusP/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        # 3. Honest peer relays the grandchild, which is missing a parent. The parent by txid already\r\n```",
      "created_at": "2024-05-13T22:02:02Z",
      "updated_at": "2024-05-13T22:04:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1599138412",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599138412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 504,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599193199",
      "pull_request_review_id": 2053800837,
      "id": 1599193199,
      "node_id": "PRRC_kwDOABII585fUcBv",
      "diff_hunk": "@@ -398,6 +427,154 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 108,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "1aea9f21571470a37cc0a776bc16b9c2855a81d9",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: could use `send_and_ping` here too (as in the other subtests).",
      "created_at": "2024-05-13T23:07:37Z",
      "updated_at": "2024-05-13T23:17:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1599193199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599193199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599660492",
      "pull_request_review_id": 2054751541,
      "id": 1599660492,
      "node_id": "PRRC_kwDOABII585fWOHM",
      "diff_hunk": "@@ -398,6 +427,154 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 108,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "1aea9f21571470a37cc0a776bc16b9c2855a81d9",
      "in_reply_to_id": 1599193199,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-14T09:04:22Z",
      "updated_at": "2024-05-14T09:36:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1599660492",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599660492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599660844",
      "pull_request_review_id": 2054751541,
      "id": 1599660844,
      "node_id": "PRRC_kwDOABII585fWOMs",
      "diff_hunk": "@@ -398,6 +427,154 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        # This ensures the peer's orphans were reconsidered.\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests missing tx_grandparent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 147,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "in_reply_to_id": 1599138412,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2024-05-14T09:04:39Z",
      "updated_at": "2024-05-14T09:36:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1599660844",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599660844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 504,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599660982",
      "pull_request_review_id": 2054751541,
      "id": 1599660982,
      "node_id": "PRRC_kwDOABII585fWOO2",
      "diff_hunk": "@@ -398,6 +427,154 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        # This ensures the peer's orphans were reconsidered.\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests missing tx_grandparent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested because the node shouldn't assume that the\n+        # witness data is the same. In this case, a same-txid-different-witness transaction exists!\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # 5. Hondest peer sends tx_grandparent",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 162,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "1aea9f21571470a37cc0a776bc16b9c2855a81d9",
      "in_reply_to_id": 1598780909,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "haha fixed",
      "created_at": "2024-05-14T09:04:44Z",
      "updated_at": "2024-05-14T09:36:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1599660982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599660982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 519,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599661537",
      "pull_request_review_id": 2054751541,
      "id": 1599661537,
      "node_id": "PRRC_kwDOABII585fWOXh",
      "diff_hunk": "@@ -398,6 +427,154 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        # This ensures the peer's orphans were reconsidered.\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests missing tx_grandparent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested because the node shouldn't assume that the\n+        # witness data is the same. In this case, a same-txid-different-witness transaction exists!\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # 5. Hondest peer sends tx_grandparent\n+        honest_peer.send_and_ping(msg_tx(tx_grandparent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check node does not ignore announcement with same txid as tx in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child and fake version\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(PeerTxRelayer())\n+        # Must not send wtxidrelay because otherwise the inv(TX) will be ignored later\n+        honest_peer = node.add_p2p_connection(PeerTxRelayer(wtxidrelay=False))",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 186,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "1aea9f21571470a37cc0a776bc16b9c2855a81d9",
      "in_reply_to_id": 1598790197,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah I missed that `P2PInterface` already had that! Thanks, deleted the unnecessary stuff.",
      "created_at": "2024-05-14T09:05:03Z",
      "updated_at": "2024-05-14T09:36:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1599661537",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599661537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 543,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599667375",
      "pull_request_review_id": 2054751541,
      "id": 1599667375,
      "node_id": "PRRC_kwDOABII585fWPyv",
      "diff_hunk": "@@ -398,6 +427,154 @@ def test_orphan_inherit_rejection(self):\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_message(msg_tx(tx_parent[\"tx\"]))\n+        # This ensures the peer's orphans were reconsidered.\n+        honest_peer.sync_with_ping()\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests missing tx_grandparent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the granchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested because the node shouldn't assume that the\n+        # witness data is the same. In this case, a same-txid-different-witness transaction exists!\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # 5. Hondest peer sends tx_grandparent\n+        honest_peer.send_and_ping(msg_tx(tx_grandparent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check node does not ignore announcement with same txid as tx in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child and fake version\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(PeerTxRelayer())\n+        # Must not send wtxidrelay because otherwise the inv(TX) will be ignored later\n+        honest_peer = node.add_p2p_connection(PeerTxRelayer(wtxidrelay=False))\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer announces the real child, by txid (this isn't common but the node should\n+        # still keep track of it).\n+        child_txid_int = int(tx_child[\"txid\"], 16)\n+        honest_peer.send_and_ping(msg_inv([CInv(t=MSG_TX, h=child_txid_int)]))\n+\n+        # 4. The child is requested. Honest peer sends it.\n+        node.bumpmocktime(TXREQUEST_TIME_SKIP)\n+        honest_peer.wait_for_getdata([child_txid_int])\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_message(msg_tx(tx_child[\"tx\"]))\n+\n+        # 5. After first parent request times out, the node sends another one for the missing parent\n+        # of the real orphan child.\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": null,
      "original_position": 214,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "1aea9f21571470a37cc0a776bc16b9c2855a81d9",
      "in_reply_to_id": 1599064530,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, I've added a comment to help explain why we aren't asserting the exact error/disconnection.",
      "created_at": "2024-05-14T09:09:23Z",
      "updated_at": "2024-05-14T09:36:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1599667375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599667375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 571,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599669435",
      "pull_request_review_id": 2054751541,
      "id": 1599669435,
      "node_id": "PRRC_kwDOABII585fWQS7",
      "diff_hunk": "@@ -47,7 +47,7 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n         m_outpoint_to_orphan_it[txin.prevout].insert(ret.first);\n     }\n \n-    LogPrint(BCLog::TXPACKAGES, \"stored orphan tx %s (wtxid=%s) (mapsz %u outsz %u)\\n\", hash.ToString(), wtxid.ToString(),\n+    LogPrint(BCLog::TXPACKAGES, \"stored orphan tx %s (wtxid=%s), size: %u (mapsz %u outsz %u)\\n\", hash.ToString(), wtxid.ToString(), sz,",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "in_reply_to_id": 1598792832,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "changed to \"weight\" !",
      "created_at": "2024-05-14T09:10:45Z",
      "updated_at": "2024-05-14T09:36:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1599669435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599669435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599702152",
      "pull_request_review_id": 2054751541,
      "id": 1599702152,
      "node_id": "PRRC_kwDOABII585fWYSI",
      "diff_hunk": "@@ -2295,7 +2295,12 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    // Always query by wtxid, even if gtxid has a Txid type.\n+    // It is possible that the transaction in the orphanage has the same txid but a different\n+    // witness (e.g. malleated by an attacker) and we don't want to return false positives.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "16483fee7c6d93722bfb79fce9efbe841ec13d6a",
      "in_reply_to_id": 1599118360,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a sentence to the comment, though slightly different wording. I've also expanded it in general.",
      "created_at": "2024-05-14T09:33:42Z",
      "updated_at": "2024-05-14T09:36:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1599702152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1599702152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2299,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600159941",
      "pull_request_review_id": 2053065161,
      "id": 1600159941,
      "node_id": "PRRC_kwDOABII585fYIDF",
      "diff_hunk": "@@ -2295,7 +2295,20 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    if (gtxid.IsWtxid()) {\n+        // Normal query by wtxid.\n+        if (m_orphanage.HaveTx(gtxid)) return true;\n+    } else {\n+        // Never query by txid: it is possible that the transaction in the orphanage has the same\n+        // txid but a different witness, which would give us a false positive result. If we decided\n+        // not to request the transaction based on this result, an attacker could prevent us from\n+        // downloading a transaction by intentionally creating a malleated version of it.\n+        //\n+        // While we won't query by txid, we can try to \"guess\" what the wtxid is based on the txid.\n+        // A non-segwit transaction's txid == wtxid. Query this txid \"casted\" to a wtxid. This will\n+        // help us find non-segwit transactions, saving bandwidth, and should have no false positives.\n+        if (m_orphanage.HaveTx(GenTxid::Wtxid(hash))) return true;\n+    }",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "7e475b9648bbee04f5825b922ba0399373eaa5a9",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 7e475b9648bbee04f5825b922ba0399373eaa5a9:\r\n\r\nI think having the `if/else` path in this commit is helpful, since it distinguishes between when we cast the txid and when we don't.\r\n\r\nnit: I think this already works pretty well, but some bits (e.g. \"guess what the wtxid is\") are not super clear imo. I've summarized my understanding into the below, feel free to use what you like.\r\n\r\n```\r\n        // Never query by txid: it is possible that an existing transaction in the orphanage has the\r\n        // same txid but a different witness, which would give us a false positive result. If we\r\n        // don't request the transaction based on this result, an attacker could prevent us from\r\n        // downloading a transaction by intentionally creating a malleated version of it.\r\n        //\r\n        // False positive are unsafe and must be avoided.False negatives are acceptable and just\r\n        // lead to increased bandwidth usage.\r\n        //\r\n        // When gtxid is a txid it means when we don't have enough information to query by wtxid,\r\n        // e.g. because the transaction was announced by a non-wtxid-relay peer, or because we're\r\n        // checking the prevouts of a transaction. It doesn't mean that the transaction has no\r\n        // witness data, so we need to distinguish between those cases.\r\n        //\r\n        // If the transaction:\r\n        // 1) does not have witness data, we can safely query the orphanage by casting a txid to a\r\n        //    wtxid because they are equivalent. False positives and false negatives are impossible.\r\n        // 2) has witness data, the txid and wtxid are different by definition, making this query a\r\n        //    no-op. False positives are not possible, but we may have false negatives.\r\n        //\r\n        // So, by querying for a txid cast to a wtxid, we avoid false positives entirely, but we\r\n        // save bandwidth for the case where txid == wtxid.\r\n```\r\n\r\nside-note rant: I think the fact that we need such a verbose comment is a pretty strong sign `AlreadyHaveTx` should be refactored, e.g. using `{Wt,T}xid` types as I suggested [here](https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1587694422), but I appreciate that it's mostly orthogonal to this PR. Renaming `AlreadyHaveTx` to e.g. `ShouldRequestTx` or something would probably already clarify quite a bit, too (although also not blocking for this PR either).",
      "created_at": "2024-05-14T14:36:23Z",
      "updated_at": "2024-05-14T18:34:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1600159941",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600159941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600233020",
      "pull_request_review_id": 2055731535,
      "id": 1600233020,
      "node_id": "PRRC_kwDOABII585fYZ48",
      "diff_hunk": "@@ -2295,7 +2295,23 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    if (gtxid.IsWtxid()) {\n+        // Normal query by wtxid.\n+        if (m_orphanage.HaveTx(Wtxid::FromUint256(hash))) return true;\n+    } else {\n+        // Never query by txid: it is possible that the transaction in the orphanage has the same\n+        // txid but a different witness, which would give us a false positive result. If we decided\n+        // not to request the transaction based on this result, an attacker could prevent us from\n+        // downloading a transaction by intentionally creating a malleated version of it.  While\n+        // only one (or none!) of these transactions can ultimately be confirmed, we have no way of\n+        // discerning which one that is, so the orphanage can store multiple transactions with the\n+        // same txid.\n+        //\n+        // While we won't query by txid, we can try to \"guess\" what the wtxid is based on the txid.\n+        // A non-segwit transaction's txid == wtxid. Query this txid \"casted\" to a wtxid. This will\n+        // help us find non-segwit transactions, saving bandwidth, and should have no false positives.\n+        if (m_orphanage.HaveTx(Wtxid::FromUint256(hash))) return true;\n+    }",
      "path": "src/net_processing.cpp",
      "position": 21,
      "original_position": 21,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(since @sr-gi mentioned this offline) Yes, the last push turned this 1 line into 2 identical lines. The purpose is to illustrate to current reviewers and future readers more clearly... if wtxid, we do this. if txid, we also do this, but notice that we are actually doing a \"cast\" and that's ok because we are *guessing* what the wtxid is.\r\n\r\nAlso, perhaps these will diverge again in the future if `GenTxid` becomes a `std::variant<Txid, Wtxid>`.",
      "created_at": "2024-05-14T15:20:20Z",
      "updated_at": "2024-05-14T15:20:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1600233020",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600233020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": 2298,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": 2314,
      "original_line": 2314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600235258",
      "pull_request_review_id": 2053065161,
      "id": 1600235258,
      "node_id": "PRRC_kwDOABII585fYab6",
      "diff_hunk": "@@ -23,7 +23,7 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n \n     const Txid& hash = tx->GetHash();\n     const Wtxid& wtxid = tx->GetWitnessHash();\n-    if (m_orphans.count(hash))\n+    if (m_orphans.count(wtxid))",
      "path": "src/txorphanage.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "c++-20 nit:\r\n```suggestion\r\n    if (m_orphans.contains(wtxid))\r\n```",
      "created_at": "2024-05-14T15:21:56Z",
      "updated_at": "2024-05-14T18:34:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1600235258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600235258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600235908",
      "pull_request_review_id": 2053065161,
      "id": 1600235908,
      "node_id": "PRRC_kwDOABII585fYamE",
      "diff_hunk": "@@ -169,14 +169,10 @@ void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx)\n     }\n }\n \n-bool TxOrphanage::HaveTx(const GenTxid& gtxid) const\n+bool TxOrphanage::HaveTx(const Wtxid& wtxid) const\n {\n     LOCK(m_mutex);\n-    if (gtxid.IsWtxid()) {\n-        return m_wtxid_to_orphan_it.count(Wtxid::FromUint256(gtxid.GetHash()));\n-    } else {\n-        return m_orphans.count(Txid::FromUint256(gtxid.GetHash()));\n-    }\n+    return m_orphans.count(wtxid);",
      "path": "src/txorphanage.cpp",
      "position": 132,
      "original_position": 132,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "c++20-nit:\r\n```suggestion\r\n    return m_orphans.contains(wtxid);\r\n```",
      "created_at": "2024-05-14T15:22:24Z",
      "updated_at": "2024-05-14T18:34:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1600235908",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600235908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 175,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600252935",
      "pull_request_review_id": 2053065161,
      "id": 1600252935,
      "node_id": "PRRC_kwDOABII585fYewH",
      "diff_hunk": "@@ -2302,7 +2302,10 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n         // Never query by txid: it is possible that the transaction in the orphanage has the same\n         // txid but a different witness, which would give us a false positive result. If we decided\n         // not to request the transaction based on this result, an attacker could prevent us from\n-        // downloading a transaction by intentionally creating a malleated version of it.\n+        // downloading a transaction by intentionally creating a malleated version of it.  While\n+        // only one (or none!) of these transactions can ultimately be confirmed, we have no way of\n+        // discerning which one that is, so the orphanage can store multiple transactions with the\n+        // same txid.",
      "path": "src/net_processing.cpp",
      "position": 15,
      "original_position": 8,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "8923edfc1f12ebc6a074651c084ba7d249074799",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 8923edfc1f12ebc6a074651c084ba7d249074799:\r\n\r\nnit: I feel like documentation on why `TxOrphanage` indexes by wtxid/allows multiple versions of the same transaction should be documented in `TxOrphanage` instead of here.",
      "created_at": "2024-05-14T15:32:50Z",
      "updated_at": "2024-05-14T18:34:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1600252935",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600252935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": 2305,
      "original_start_line": 2305,
      "start_side": "RIGHT",
      "line": 2308,
      "original_line": 2308,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600337905",
      "pull_request_review_id": 2053065161,
      "id": 1600337905,
      "node_id": "PRRC_kwDOABII585fYzfx",
      "diff_hunk": "@@ -394,10 +412,161 @@ def test_orphan_inherit_rejection(self):\n         peer2.assert_never_requested(child[\"tx\"].getwtxid())\n \n         # The child should never be requested, even if announced again with potentially different witness.\n+        # Sync with ping to ensure orphans are reconsidered\n         peer3.send_and_ping(msg_inv([CInv(t=MSG_TX, h=int(child[\"txid\"], 16))]))\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": 74,
      "original_position": 74,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I first interpreted that as that an input had been removed from the transaction, perhaps better to use \"parent\" as to stay consistent with the language in the next steps?\r\n```suggestion\r\n        # 1. Fake orphan is received first, the parent is not yet broadcast.\r\n```",
      "created_at": "2024-05-14T16:31:35Z",
      "updated_at": "2024-05-14T18:34:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1600337905",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600337905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 436,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600351923",
      "pull_request_review_id": 2055922168,
      "id": 1600351923,
      "node_id": "PRRC_kwDOABII585fY26z",
      "diff_hunk": "@@ -394,10 +412,161 @@ def test_orphan_inherit_rejection(self):\n         peer2.assert_never_requested(child[\"tx\"].getwtxid())\n \n         # The child should never be requested, even if announced again with potentially different witness.\n+        # Sync with ping to ensure orphans are reconsidered\n         peer3.send_and_ping(msg_inv([CInv(t=MSG_TX, h=int(child[\"txid\"], 16))]))\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": 69,
      "original_position": 69,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "b16da7eda76944719713be68b61f03d4acdd3e16",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit, potential follow-up material: the test is imho a bit easier to follow if the naming refers to the original (non-malleated) counter-part:\r\n```suggestion\r\n        tx_child_bad_wit = self.create_malleated_version(tx_child)\r\n```\r\n(same as for the other two sub-tests below)",
      "created_at": "2024-05-14T16:42:15Z",
      "updated_at": "2024-05-14T16:55:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1600351923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600351923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 431,
      "original_line": 431,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600356156",
      "pull_request_review_id": 2053065161,
      "id": 1600356156,
      "node_id": "PRRC_kwDOABII585fY388",
      "diff_hunk": "@@ -394,10 +412,161 @@ def test_orphan_inherit_rejection(self):\n         peer2.assert_never_requested(child[\"tx\"].getwtxid())\n \n         # The child should never be requested, even if announced again with potentially different witness.\n+        # Sync with ping to ensure orphans are reconsidered\n         peer3.send_and_ping(msg_inv([CInv(t=MSG_TX, h=int(child[\"txid\"], 16))]))\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        # Sync with ping to ensure orphans are reconsidered\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": 114,
      "original_position": 114,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: would `tx_middle_bad_wit` be more consistent naming here?",
      "created_at": "2024-05-14T16:45:48Z",
      "updated_at": "2024-05-14T18:34:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1600356156",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600356156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 476,
      "original_line": 476,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600417106",
      "pull_request_review_id": 2056028500,
      "id": 1600417106,
      "node_id": "PRRC_kwDOABII585fZG1S",
      "diff_hunk": "@@ -394,10 +412,161 @@ def test_orphan_inherit_rejection(self):\n         peer2.assert_never_requested(child[\"tx\"].getwtxid())\n \n         # The child should never be requested, even if announced again with potentially different witness.\n+        # Sync with ping to ensure orphans are reconsidered\n         peer3.send_and_ping(msg_inv([CInv(t=MSG_TX, h=int(child[\"txid\"], 16))]))\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        # Sync with ping to ensure orphans are reconsidered\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": 97,
      "original_position": 97,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In b16da7eda76944719713be68b61f03d4acdd3e16\r\n\r\nThe fake one is not really rejected, is it? It'll stay in the orphanage until a new block is mined (or until it times out)",
      "created_at": "2024-05-14T17:36:41Z",
      "updated_at": "2024-05-14T17:48:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1600417106",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600417106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 459,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600431768",
      "pull_request_review_id": 2056028500,
      "id": 1600431768,
      "node_id": "PRRC_kwDOABII585fZKaY",
      "diff_hunk": "@@ -394,10 +412,161 @@ def test_orphan_inherit_rejection(self):\n         peer2.assert_never_requested(child[\"tx\"].getwtxid())\n \n         # The child should never be requested, even if announced again with potentially different witness.\n+        # Sync with ping to ensure orphans are reconsidered\n         peer3.send_and_ping(msg_inv([CInv(t=MSG_TX, h=int(child[\"txid\"], 16))]))\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        # Sync with ping to ensure orphans are reconsidered\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests missing tx_grandparent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the grandchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested because the node shouldn't assume that the\n+        # witness data is the same. In this case, a same-txid-different-witness transaction exists!\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # 5. Honest peer sends tx_grandparent\n+        honest_peer.send_and_ping(msg_tx(tx_grandparent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check node does not ignore announcement with same txid as tx in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child and fake version\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(PeerTxRelayer())\n+        # Must not send wtxidrelay because otherwise the inv(TX) will be ignored later\n+        honest_peer = node.add_p2p_connection(P2PInterface(wtxidrelay=False))\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer announces the real child, by txid (this isn't common but the node should\n+        # still keep track of it).\n+        child_txid_int = int(tx_child[\"txid\"], 16)\n+        honest_peer.send_and_ping(msg_inv([CInv(t=MSG_TX, h=child_txid_int)]))\n+\n+        # 4. The child is requested. Honest peer sends it.\n+        node.bumpmocktime(TXREQUEST_TIME_SKIP)\n+        honest_peer.wait_for_getdata([child_txid_int])\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # 5. After first parent request times out, the node sends another one for the missing parent\n+        # of the real orphan child.\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected. This may happen in either\n+        # order since the message-processing is randomized. If tx_orphan_bad_wit is validated first,\n+        # its consensus error leads to disconnection of bad_peer. If tx_child is validated first,\n+        # tx_orphan_bad_wit is rejected for txn-same-nonwitness-data-in-mempool (no punishment).",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": 201,
      "original_position": 201,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "in_reply_to_id": null,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In b16da7eda76944719713be68b61f03d4acdd3e16\r\n\r\nIs this the case? Didn't we prioritize children from the same peer, so given the parent was given by the honest, and he also has presented a child, we will pick that one?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/dbb3113082a75035b14d20021036d2166171976e/src/net_processing.cpp#L3341-L3344\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/dbb3113082a75035b14d20021036d2166171976e/src/net_processing.cpp#L3361-L3363\r\n\r\n",
      "created_at": "2024-05-14T17:47:07Z",
      "updated_at": "2024-05-14T17:48:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1600431768",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1600431768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": 559,
      "original_start_line": 559,
      "start_side": "RIGHT",
      "line": 563,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1601351165",
      "pull_request_review_id": 2057529200,
      "id": 1601351165,
      "node_id": "PRRC_kwDOABII585fcq39",
      "diff_hunk": "@@ -394,10 +412,161 @@ def test_orphan_inherit_rejection(self):\n         peer2.assert_never_requested(child[\"tx\"].getwtxid())\n \n         # The child should never be requested, even if announced again with potentially different witness.\n+        # Sync with ping to ensure orphans are reconsidered\n         peer3.send_and_ping(msg_inv([CInv(t=MSG_TX, h=int(child[\"txid\"], 16))]))\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        # Sync with ping to ensure orphans are reconsidered\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests missing tx_grandparent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the grandchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested because the node shouldn't assume that the\n+        # witness data is the same. In this case, a same-txid-different-witness transaction exists!\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # 5. Honest peer sends tx_grandparent\n+        honest_peer.send_and_ping(msg_tx(tx_grandparent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check node does not ignore announcement with same txid as tx in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child and fake version\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(PeerTxRelayer())\n+        # Must not send wtxidrelay because otherwise the inv(TX) will be ignored later\n+        honest_peer = node.add_p2p_connection(P2PInterface(wtxidrelay=False))\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer announces the real child, by txid (this isn't common but the node should\n+        # still keep track of it).\n+        child_txid_int = int(tx_child[\"txid\"], 16)\n+        honest_peer.send_and_ping(msg_inv([CInv(t=MSG_TX, h=child_txid_int)]))\n+\n+        # 4. The child is requested. Honest peer sends it.\n+        node.bumpmocktime(TXREQUEST_TIME_SKIP)\n+        honest_peer.wait_for_getdata([child_txid_int])\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # 5. After first parent request times out, the node sends another one for the missing parent\n+        # of the real orphan child.\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected. This may happen in either\n+        # order since the message-processing is randomized. If tx_orphan_bad_wit is validated first,\n+        # its consensus error leads to disconnection of bad_peer. If tx_child is validated first,\n+        # tx_orphan_bad_wit is rejected for txn-same-nonwitness-data-in-mempool (no punishment).",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": 201,
      "original_position": 201,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "in_reply_to_id": 1600431768,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You're referring to the 1p1c logic, which isn't executed here (notice that all of the feerates are \"normal\" feerates).\r\nHere, the orphans are reconsidered with `ProcessOrphanTx`, which is called at the top of `ProcessMessages`.\r\nhttps://github.com/bitcoin/bitcoin/blob/dbb3113082a75035b14d20021036d2166171976e/src/net_processing.cpp#L5355-L5369\r\n\r\n`ProcessMessages` is called for each peer in a random order\r\nhttps://github.com/bitcoin/bitcoin/blob/dbb3113082a75035b14d20021036d2166171976e/src/net.cpp#L2945-L2955",
      "created_at": "2024-05-15T10:08:12Z",
      "updated_at": "2024-05-15T10:08:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1601351165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1601351165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": 559,
      "original_start_line": 559,
      "start_side": "RIGHT",
      "line": 563,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1601354578",
      "pull_request_review_id": 2057534574,
      "id": 1601354578,
      "node_id": "PRRC_kwDOABII585fcrtS",
      "diff_hunk": "@@ -394,10 +412,161 @@ def test_orphan_inherit_rejection(self):\n         peer2.assert_never_requested(child[\"tx\"].getwtxid())\n \n         # The child should never be requested, even if announced again with potentially different witness.\n+        # Sync with ping to ensure orphans are reconsidered\n         peer3.send_and_ping(msg_inv([CInv(t=MSG_TX, h=int(child[\"txid\"], 16))]))\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        # Sync with ping to ensure orphans are reconsidered\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": 97,
      "original_position": 97,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "in_reply_to_id": 1600417106,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is rejected. The acceptance of the parent triggers the node to reconsider all children in orphanage (grep `AddChildrenToWorkset`. If the failure isn't `TX_MISSING_INPUTS`, it is removed from orphanage.\r\nhttps://github.com/bitcoin/bitcoin/blob/dbb3113082a75035b14d20021036d2166171976e/src/net_processing.cpp#L3402-L3414",
      "created_at": "2024-05-15T10:10:53Z",
      "updated_at": "2024-05-15T10:10:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1601354578",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1601354578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 459,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1601615548",
      "pull_request_review_id": 2057967098,
      "id": 1601615548,
      "node_id": "PRRC_kwDOABII585fdra8",
      "diff_hunk": "@@ -394,10 +412,161 @@ def test_orphan_inherit_rejection(self):\n         peer2.assert_never_requested(child[\"tx\"].getwtxid())\n \n         # The child should never be requested, even if announced again with potentially different witness.\n+        # Sync with ping to ensure orphans are reconsidered\n         peer3.send_and_ping(msg_inv([CInv(t=MSG_TX, h=int(child[\"txid\"], 16))]))\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        # Sync with ping to ensure orphans are reconsidered\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": 97,
      "original_position": 97,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "in_reply_to_id": 1600417106,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh my bad, I was thinking about children that may have multiple missing parents, not only the conflicting one.",
      "created_at": "2024-05-15T13:09:15Z",
      "updated_at": "2024-05-15T13:09:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1601615548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1601615548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 459,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1601615800",
      "pull_request_review_id": 2057967493,
      "id": 1601615800,
      "node_id": "PRRC_kwDOABII585fdre4",
      "diff_hunk": "@@ -394,10 +412,161 @@ def test_orphan_inherit_rejection(self):\n         peer2.assert_never_requested(child[\"tx\"].getwtxid())\n \n         # The child should never be requested, even if announced again with potentially different witness.\n+        # Sync with ping to ensure orphans are reconsidered\n         peer3.send_and_ping(msg_inv([CInv(t=MSG_TX, h=int(child[\"txid\"], 16))]))\n         self.nodes[0].bumpmocktime(TXREQUEST_TIME_SKIP)\n         peer3.assert_never_requested(child[\"txid\"])\n \n+    @cleanup\n+    def test_same_txid_orphan(self):\n+        self.log.info(\"Check what happens when orphan with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+\n+        # Create a fake version of the child\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"missingorspent\", \"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # Time out the previous request for the parent (node will not request the same transaction\n+        # from multiple nodes at the same time)\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+\n+        # 4. The parent is requested. Honest peer sends it.\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        # Sync with ping to ensure orphans are reconsidered\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 5. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_parent[\"txid\"] in node_mempool\n+        assert tx_child[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_child[\"txid\"])[\"wtxid\"], tx_child[\"wtxid\"])\n+\n+    @cleanup\n+    def test_same_txid_orphan_of_orphan(self):\n+        self.log.info(\"Check what happens when orphan's parent with same txid is already in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_grandparent = self.wallet.create_self_transfer()\n+\n+        # Create middle tx (both parent and child) which will be in orphanage.\n+        tx_middle = self.wallet.create_self_transfer(utxo_to_spend=tx_grandparent[\"new_utxo\"])\n+\n+        # Create a fake version of the middle tx\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_middle)\n+\n+        # Create grandchild spending from tx_middle (and spending from tx_orphan_bad_wit since they\n+        # have the same txid).\n+        tx_grandchild = self.wallet.create_self_transfer(utxo_to_spend=tx_middle[\"new_utxo\"])\n+\n+        bad_peer = node.add_p2p_connection(P2PInterface())\n+        honest_peer = node.add_p2p_connection(P2PInterface())\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests missing tx_grandparent by txid.\n+        grandparent_txid_int = int(tx_grandparent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([grandparent_txid_int])\n+\n+        # 3. Honest peer relays the grandchild, which is missing a parent. The parent by txid already\n+        # exists in orphanage, but should be re-requested because the node shouldn't assume that the\n+        # witness data is the same. In this case, a same-txid-different-witness transaction exists!\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_grandchild[\"tx\"]))\n+        middle_txid_int = int(tx_middle[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        honest_peer.wait_for_getdata([middle_txid_int])\n+\n+        # 4. Honest peer relays the real child, which is also missing parents and should be placed\n+        # in the orphanage.\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_middle[\"tx\"]))\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # 5. Honest peer sends tx_grandparent\n+        honest_peer.send_and_ping(msg_tx(tx_grandparent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected.\n+        node_mempool = node.getrawmempool()\n+        assert tx_grandparent[\"txid\"] in node_mempool\n+        assert tx_middle[\"txid\"] in node_mempool\n+        assert tx_grandchild[\"txid\"] in node_mempool\n+        assert_equal(node.getmempoolentry(tx_middle[\"txid\"])[\"wtxid\"], tx_middle[\"wtxid\"])\n+\n+    @cleanup\n+    def test_orphan_txid_inv(self):\n+        self.log.info(\"Check node does not ignore announcement with same txid as tx in orphanage\")\n+        node = self.nodes[0]\n+\n+        tx_parent = self.wallet.create_self_transfer()\n+\n+        # Create the real child and fake version\n+        tx_child = self.wallet.create_self_transfer(utxo_to_spend=tx_parent[\"new_utxo\"])\n+        tx_orphan_bad_wit = self.create_malleated_version(tx_child)\n+\n+        bad_peer = node.add_p2p_connection(PeerTxRelayer())\n+        # Must not send wtxidrelay because otherwise the inv(TX) will be ignored later\n+        honest_peer = node.add_p2p_connection(P2PInterface(wtxidrelay=False))\n+\n+        # 1. Fake orphan is received first. It is missing an input.\n+        bad_peer.send_and_ping(msg_tx(tx_orphan_bad_wit))\n+\n+        # 2. Node requests the missing parent by txid.\n+        parent_txid_int = int(tx_parent[\"txid\"], 16)\n+        node.bumpmocktime(NONPREF_PEER_TX_DELAY + TXID_RELAY_DELAY)\n+        bad_peer.wait_for_getdata([parent_txid_int])\n+\n+        # 3. Honest peer announces the real child, by txid (this isn't common but the node should\n+        # still keep track of it).\n+        child_txid_int = int(tx_child[\"txid\"], 16)\n+        honest_peer.send_and_ping(msg_inv([CInv(t=MSG_TX, h=child_txid_int)]))\n+\n+        # 4. The child is requested. Honest peer sends it.\n+        node.bumpmocktime(TXREQUEST_TIME_SKIP)\n+        honest_peer.wait_for_getdata([child_txid_int])\n+        with node.assert_debug_log([\"stored orphan tx\"]):\n+            honest_peer.send_and_ping(msg_tx(tx_child[\"tx\"]))\n+\n+        # 5. After first parent request times out, the node sends another one for the missing parent\n+        # of the real orphan child.\n+        node.bumpmocktime(GETDATA_TX_INTERVAL)\n+        honest_peer.wait_for_getdata([parent_txid_int])\n+        honest_peer.send_and_ping(msg_tx(tx_parent[\"tx\"]))\n+\n+        # 6. After parent is accepted, orphans should be reconsidered.\n+        # The real child should be accepted and the fake one rejected. This may happen in either\n+        # order since the message-processing is randomized. If tx_orphan_bad_wit is validated first,\n+        # its consensus error leads to disconnection of bad_peer. If tx_child is validated first,\n+        # tx_orphan_bad_wit is rejected for txn-same-nonwitness-data-in-mempool (no punishment).",
      "path": "test/functional/p2p_orphan_handling.py",
      "position": 201,
      "original_position": 201,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "in_reply_to_id": 1600431768,
      "user": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yep, my bad, nvm ",
      "created_at": "2024-05-15T13:09:23Z",
      "updated_at": "2024-05-15T13:09:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1601615800",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1601615800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": 559,
      "original_start_line": 559,
      "start_side": "RIGHT",
      "line": 563,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602821815",
      "pull_request_review_id": 2059920901,
      "id": 1602821815,
      "node_id": "PRRC_kwDOABII585fiR63",
      "diff_hunk": "@@ -54,16 +54,19 @@ bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n     return true;\n }\n \n-int TxOrphanage::EraseTx(const Txid& txid)\n+int TxOrphanage::EraseTx(const Wtxid& wtxid)\n {\n     LOCK(m_mutex);\n-    return EraseTxNoLock(txid);\n+    return EraseTxNoLock(wtxid);\n }\n \n-int TxOrphanage::EraseTxNoLock(const Txid& txid)\n+int TxOrphanage::EraseTxNoLock(const Wtxid& wtxid)\n {\n     AssertLockHeld(m_mutex);\n-    std::map<Txid, OrphanTx>::iterator it = m_orphans.find(txid);\n+    auto it_by_wtxid = m_wtxid_to_orphan_it.find(wtxid);\n+    if (it_by_wtxid == m_wtxid_to_orphan_it.end()) return 0;\n+\n+    std::map<Txid, OrphanTx>::iterator it = it_by_wtxid->second;\n     if (it == m_orphans.end())\n         return 0;",
      "path": "src/txorphanage.cpp",
      "position": 44,
      "original_position": 22,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "838f63e2f4978d34e9d1bbdecc8fb7b0aef8b039",
      "in_reply_to_id": 1598686662,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good idea. Though it seems that this doesn't apply anymore since the commit is already merged, so resolving.",
      "created_at": "2024-05-16T08:10:42Z",
      "updated_at": "2024-05-16T08:10:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1602821815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602821815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602865868",
      "pull_request_review_id": 2059985654,
      "id": 1602865868,
      "node_id": "PRRC_kwDOABII585ficrM",
      "diff_hunk": "@@ -2295,7 +2295,20 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, bool include_reconside\n \n     const uint256& hash = gtxid.GetHash();\n \n-    if (m_orphanage.HaveTx(gtxid)) return true;\n+    if (gtxid.IsWtxid()) {\n+        // Normal query by wtxid.\n+        if (m_orphanage.HaveTx(gtxid)) return true;\n+    } else {\n+        // Never query by txid: it is possible that the transaction in the orphanage has the same\n+        // txid but a different witness, which would give us a false positive result. If we decided\n+        // not to request the transaction based on this result, an attacker could prevent us from\n+        // downloading a transaction by intentionally creating a malleated version of it.\n+        //\n+        // While we won't query by txid, we can try to \"guess\" what the wtxid is based on the txid.\n+        // A non-segwit transaction's txid == wtxid. Query this txid \"casted\" to a wtxid. This will\n+        // help us find non-segwit transactions, saving bandwidth, and should have no false positives.\n+        if (m_orphanage.HaveTx(GenTxid::Wtxid(hash))) return true;\n+    }",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "0fb17bf61a40b73a2b81a18e70b3de180c917f22",
      "original_commit_id": "7e475b9648bbee04f5825b922ba0399373eaa5a9",
      "in_reply_to_id": 1600159941,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I've summarized my understanding into the below\r\n\r\nLooks correct to me\r\n\r\n> I think the fact that we need such a verbose comment is a pretty strong sign AlreadyHaveTx should be refactored, e.g. using {Wt,T}xid types as I suggested https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1587694422, but I appreciate that it's mostly orthogonal to this PR.\r\n\r\nI think it's really a sign to ban txid-based transaction relay. Just kidding. I agree it's hard to reason about logic dealing with a hash that can be txid, wtxid, or bot. I think it's just one of the common things that trips people in tx relay, just like everybody's mempool fuzzer gets snagged on CPFP carve out, and that `for` loop in init.cpp that claims reviewer victims every time it's touched.\r\n\r\n> Renaming AlreadyHaveTx to e.g. ShouldRequestTx or something would probably already clarify quite a bit, too (although also not blocking for this PR either).\r\n\r\nYeah, `AlreadyHaveTx` should probably have a name that reflects its purpose of \"should I bother {requesting, downloading, validating} this tx\".\r\n\r\nDo note that #30110 makes `AlreadyHaveTx` a function internal to the `TxDownloadImpl`, i.e. no longer something that peerman knows about. Funnily, `TxDownloadImpl::AlreadyHaveTx` might be a fine name when it's in that context. I get that it's confusing, but I'd ask that we defer renaming until after that PR since it would conflict + maybe be less problematic afterwards.",
      "created_at": "2024-05-16T08:28:52Z",
      "updated_at": "2024-05-16T08:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30000#discussion_r1602865868",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1602865868"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30000"
        }
      },
      "start_line": null,
      "original_start_line": 2298,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2311,
      "side": "RIGHT"
    }
  ]
}