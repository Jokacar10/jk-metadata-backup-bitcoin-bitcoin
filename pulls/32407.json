{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32407",
    "id": 2496159606,
    "node_id": "PR_kwDOABII586UyF92",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32407",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32407.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32407.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32407",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32407/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32407/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32407/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/5a1669f648fbe5659b7a328d11776e083589d5d1",
    "number": 32407,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": ".",
    "user": {
      "login": "AlnetharyT",
      "id": 143851675,
      "node_id": "U_kgDOCJMAmw",
      "avatar_url": "https://avatars.githubusercontent.com/u/143851675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlnetharyT",
      "html_url": "https://github.com/AlnetharyT",
      "followers_url": "https://api.github.com/users/AlnetharyT/followers",
      "following_url": "https://api.github.com/users/AlnetharyT/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/AlnetharyT/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/AlnetharyT/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/AlnetharyT/subscriptions",
      "organizations_url": "https://api.github.com/users/AlnetharyT/orgs",
      "repos_url": "https://api.github.com/users/AlnetharyT/repos",
      "events_url": "https://api.github.com/users/AlnetharyT/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/AlnetharyT/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": ".",
    "labels": [],
    "active_lock_reason": "spam",
    "created_at": "2025-05-02T18:10:27Z",
    "updated_at": "2025-05-02T18:29:21Z",
    "closed_at": "2025-05-02T18:12:14Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "80bd5bd405b8d3064ada8a6a4c149488a87b8e78",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "AlnetharyT:master",
      "ref": "master",
      "sha": "5a1669f648fbe5659b7a328d11776e083589d5d1",
      "user": {
        "login": "AlnetharyT",
        "id": 143851675,
        "node_id": "U_kgDOCJMAmw",
        "avatar_url": "https://avatars.githubusercontent.com/u/143851675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AlnetharyT",
        "html_url": "https://github.com/AlnetharyT",
        "followers_url": "https://api.github.com/users/AlnetharyT/followers",
        "following_url": "https://api.github.com/users/AlnetharyT/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/AlnetharyT/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/AlnetharyT/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/AlnetharyT/subscriptions",
        "organizations_url": "https://api.github.com/users/AlnetharyT/orgs",
        "repos_url": "https://api.github.com/users/AlnetharyT/repos",
        "events_url": "https://api.github.com/users/AlnetharyT/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/AlnetharyT/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 968810486,
        "node_id": "R_kgDOOb7f9g",
        "name": "bitcoin",
        "full_name": "AlnetharyT/bitcoin",
        "owner": {
          "login": "AlnetharyT",
          "id": 143851675,
          "node_id": "U_kgDOCJMAmw",
          "avatar_url": "https://avatars.githubusercontent.com/u/143851675?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/AlnetharyT",
          "html_url": "https://github.com/AlnetharyT",
          "followers_url": "https://api.github.com/users/AlnetharyT/followers",
          "following_url": "https://api.github.com/users/AlnetharyT/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/AlnetharyT/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/AlnetharyT/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/AlnetharyT/subscriptions",
          "organizations_url": "https://api.github.com/users/AlnetharyT/orgs",
          "repos_url": "https://api.github.com/users/AlnetharyT/repos",
          "events_url": "https://api.github.com/users/AlnetharyT/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/AlnetharyT/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/AlnetharyT/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/AlnetharyT/bitcoin",
        "archive_url": "https://api.github.com/repos/AlnetharyT/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/AlnetharyT/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/AlnetharyT/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/AlnetharyT/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/AlnetharyT/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/AlnetharyT/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/AlnetharyT/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/AlnetharyT/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/AlnetharyT/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/AlnetharyT/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/AlnetharyT/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/AlnetharyT/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/AlnetharyT/bitcoin/events",
        "forks_url": "https://api.github.com/repos/AlnetharyT/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/AlnetharyT/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/AlnetharyT/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/AlnetharyT/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/AlnetharyT/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/AlnetharyT/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/AlnetharyT/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/AlnetharyT/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/AlnetharyT/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/AlnetharyT/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/AlnetharyT/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/AlnetharyT/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/AlnetharyT/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/AlnetharyT/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/AlnetharyT/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/AlnetharyT/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:AlnetharyT/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/AlnetharyT/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/AlnetharyT/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/AlnetharyT/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/AlnetharyT/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/AlnetharyT/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/AlnetharyT/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/AlnetharyT/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/AlnetharyT/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/AlnetharyT/bitcoin/hooks",
        "svn_url": "https://github.com/AlnetharyT/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 279879,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-02T18:00:35Z",
        "created_at": "2025-04-18T19:22:32Z",
        "updated_at": "2025-05-02T18:00:49Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "5b8046a6e893b7fad5a93631e6d1e70db31878af",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37153,
        "stargazers_count": 83282,
        "watchers_count": 83282,
        "size": 280717,
        "default_branch": "master",
        "open_issues_count": 720,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-01T19:11:52Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-05-02T18:40:53Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32407"
      }
    },
    "author_association": "NONE",
    "draft": false,
    "additions": 2459,
    "deletions": 6610,
    "changed_files": 213,
    "commits": 1,
    "review_comments": 0,
    "comments": 1
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVhMTY2OWY2NDhmYmU1NjU5YjdhMzI4ZDExNzc2ZTA4MzU4OWQ1ZDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a1669f648fbe5659b7a328d11776e083589d5d1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5a1669f648fbe5659b7a328d11776e083589d5d1",
      "tree": {
        "sha": "452f37a7043be1e196c3c217dc7cdc91690643a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/452f37a7043be1e196c3c217dc7cdc91690643a2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 452f37a7043be1e196c3c217dc7cdc91690643a2\nparent 247e9de62228bd1cb0e2fb5e3bd9a906b3056167\nauthor Tamim Salah Alnethary <143851675+AlnetharyT@users.noreply.github.com> 1746208835 +0300\ncommitter GitHub <noreply@github.com> 1746208835 +0300\n\nالنظاري (#1)\n\n* versionbits: Use std::array instead of C-style arrays\n\n* versionbits: Remove params from AbstractThresholdConditionChecker\n\nFor an abstract class, specifying parameters in detail serves no point;\nand for the concrete implementation, changing the consensus parameters\nbetween invocations doesn't make sense. So simplify the class by removing\nthe consensus params from the method arguments, and just make it a member\nvariable in the concrete object where needed. This also allows dropping\ndummy parameters from the unit/fuzz tests.\n\n* test: chainstate write test for periodic chainstate flush\n\n* consensus/params: Move version bits period/threshold to bip9 param\n\nRather than having the rule change period/threshold be constant for all\npotential deployments on a chain, have it be specific to the deployment\nitself. This both matches history (BIP 9 specified a 2016 block period\nand 1916 block threshold; BIP 91 specified a 336 block period and 269\nblock threshold; and BIP 341 specified a 2016 block period and 1815\nblock threshold), and allows the code to be simplified, as only the\nBIP9Deployment structure is needed, not the full Consensus::Params\nstructure.\n\n* versionbits: Change BIP9Stats to uint32_t types\n\n* versionbits: Move WarningBits logic from validation to versionbits\n\n* versionbits: Move getdeploymentinfo logic to versionbits\n\nRather than having the RPC code have knowledge about how BIP9 is\nimplemented, create a reporting function in the versionbits code, and\nlimit the RPC code to coverting the result of that into Univalue/JSON.\n\n* versionbits: Move BIP9 status logic for getblocktemplate to versionbits\n\nRather than having the RPC code have knowledge about how BIP9 is\nimplemented, create a reporting function in the versionbits code, and\nlimit the RPC code to coverting the result of that into the appropriate\noutput for getblocktemplate.\n\n* versionbits: Simplify VersionBitsCache API\n\nReplaces State() (which returned ACTIVE/STARTED/etc) with IsActiveAfter()\nwhich just returns a bool, as this was all State was actually used\nfor. Drops Mask(), which was only used in tests and can be replaced with\n`1<<bit`, and also drops StateSinceHeight() and Statistics(), which are\nnow only used internally for Info().\n\n* versionbits: Split out internal details into impl header\n\n* versionbits: Expose StateName function\n\nRather than essentially duplicating StateName in the unit tests, expose\nit via the impl header.\n\n* versionbits: Expose VersionBitsConditionChecker via impl header\n\n* tests: refactor versionbits unit test\n\nBase the unit test directly on `VersionBitsConditionChecker`, slightly\nimproving coverage, in particular adding coverage for the the logic\nregarding setting the TOP_BITS.\n\n* tests: refactor versionbits fuzz test\n\nTest `VersionBitsConditionChecker` behaviour directly, rather than\nreimplementing it, thus slightly improving fuzz test coverage of the\nreal code.\n\n* wallet: doc: remove mentions of unavailable scrypt derivation method\n\nThese comments are there since wallet encryption was first introduced\n(see commit 4e87d341f75f13bbd7d108c31c03886fbc4df56f, PR #352), but scrypt\nwas actually never implemented as a derivation method.\n\n* wallet: refactor: introduce `CMasterKey::DEFAULT_DERIVE_ITERATIONS` constant\n\nThis gets rid of the magic number used in both the `CMasterKey` ctor\nand the wallet encryption / passphrase change methods.\n\n* wallet: refactor: dedup master key encryption / derivation rounds setting\n\n* wallet: refactor: dedup master key decryption\n\n* scripted-diff: wallet: rename plain and encrypted master key variables\n\n-BEGIN VERIFY SCRIPT-\nsed -i s/_vMasterKey/plain_master_key/g ./src/wallet/wallet.cpp\nsed -i s/kMasterKey/master_key/g ./src/wallet/wallet.cpp\nsed -i \"s/const MasterKeyMap::value_type& pMasterKey/const auto\\& \\[_, master_key\\]/g\" ./src/wallet/wallet.cpp\nsed -i s/pMasterKey\\.second/master_key/g ./src/wallet/wallet.cpp\nsed -i \"s/MasterKeyMap::value_type& pMasterKey/auto\\& \\[master_key_id, master_key\\]/g\" ./src/wallet/wallet.cpp\nsed -i s/pMasterKey\\.first/master_key_id/g ./src/wallet/wallet.cpp\n-END VERIFY SCRIPT-\n\n* net: Use GetAdaptersAddresses to get local addresses on Windows\n\nInstead of a `gethostname` hack, use the official way of calling\n`GetAdaptersAddresses` to get local network addresses on Windows.\n\nAs additional cleanup, move out `FromSockAddr` from MacOS and use it\neverywhere appropriate.\n\nSuggested by Ava Chow.\n\n* versionbits: docstrings for BIP9Info\n\n* test: add IsActiveAfter tests for versionbits\n\n* removed duplicate calling of GetDescriptorScriptPubKeyMan\n\nRemoved duplicate call to GetDescriptorScriptPubKeyMan and\nInstead of checking linearly I have used find method so time complexity reduced significantly for GetDescriptorScriptPubKeyMan\nafter this fix improved performance of importdescriptor part refs #32013.\n\n* build: Use `-z noseparate-code` on NetBSD < 11.0\n\nThis can be dropped once Bitcoin Core no longer supports NetBSD 10.0 or\nif upstream fix is backported.\n\nNetBSD's dynamic linker ld.elf_so < 11.0 supports exactly 2 `PT_LOAD`\nsegments and binaries linked with `-z separate-code` have 4 `PT_LOAD`\nsegments.\n\nhttps://github.com/bitcoin/bitcoin/pull/28724#issuecomment-2589347934\nhttps://mail-index.netbsd.org/tech-userlevel/2023/01/05/msg013666.html\n\n* build: Drop option for disabling hardening\n\nBuilding unhardened executables is not a supported use case that should\nbe maintained and those that want unhardened executables can still\noverride them by appending disable flags.\n\nFor example:\n\ncmake -B build -DAPPEND_CPPFLAGS='-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector -fcf-protection=none -fno-stack-clash-protection' -DAPPEND_LDFLAGS='-Wl,-z,lazy -Wl,-z,norelro -Wl,-z,noseparate-code'\n\n* build: refactor: hardening flags -> core_interface\n\n* test: Ensures test fails if witness is not hex\n\nThis commit ensures that we do not fail silently when the test script encounters a witness string in the JSON test data that can not be parsed as hex.\n\n* validation: fix traversal condition to mark BLOCK_FAILED_CHILD\n\nthis block of code is not reached on master since other than\ninitialisation, all other iterations have invalid_walk_tip\nand to_mark_failed pointers in some form of this layout\nwhere 1, 2, 3 and 4 are block heights.\n\n\tinvalid_walk_tip\n\t  ↓\n1 <- 2 <- 3 <- 4\n\t       ↑\n\t      to_mark_failed\n\nfix it so that blocks are correctly marked as BLOCK_FAILED_CHILD\nif it's a descendant of BLOCK_FAILED_VALID block.\n\n* test: check BlockStatus when InvalidateBlock is used\n\nwhen a block is invalidated using InvalidateBlock, check that:\n1. it's status is BLOCK_FAILED_VALID\n2. it's children's status is BLOCK_FAILED_CHILD\n   and not BLOCK_FAILED_VALID\n3. it's ancestors are valid\n\n* validation: correctly update BlockStatus for invalid block descendants\n\ninvalid_block ----------> block_index\n\n- before this commit, only if block_index is not invalid, it will mark\n  block_index as BLOCK_FAILED_CHILD\n- it's possible that block_index encountered is invalid and was marked\n  as BLOCK_FAILED_VALID previously\n- in this case, correctly update BlockStatus of block_index by\n  clearing BLOCK_FAILED_VALID and then setting it to BLOCK_FAILED_CHILD\n\n* validation: clarify final |= BLOCK_FAILED_VALID in InvalidateBlock\n\nThis has no functional affect, as the any CBlockIndex*s which\nto_mark_failed is set to will already have been marked failed.\n\nAlso prevents a situation where block already marked as\nBLOCK_FAILED_CHILD is again unconditionally marked as\nBLOCK_FAILED_VALID in the final |= BLOCK_FAILED_VALID.\n\n* build, msvc: Update vcpkg manifest baseline\n\nThis change updates the vcpkg manifest baseline from the \"2024.09.30\nRelease\" to the \"2025.03.19 Release\", with the following package\nchanges:\n - boost: 1.85.0#1,2 --> 1.87.0\n - qtbase: 6.7.2#3 -> 6.8.2#1\n - qttools: 6.7.2#1 -> 6.8.2\n - sqlite3: 3.46.1 --> 3.49.1\n\n* build, msvc: Build only required `qtbase` features\n\nThis change makes vcpkg skip unused features such as `dnslookup`,\n`openssl`, etc.\n\n* depends: Specify Objective C/C++ compilers for `native_qt` package\n\nThis change fixes cross-compilation from macOS to macOS with another\narchitecture.\n\n* depends: Fix `mv` command compatibility with macOS\n\n* wallet, rpc: Only allow keypool import from single key descriptors\n\nLegacy wallets should only import keys to the keypool if they came in a\nsingle key descriptor. Instead of relying on assumptions about the\ndescriptor based on how many pubkeys show up after expanding the\ndescriptor, explicitly mark descriptors as being single key type and use\nthat for the check.\n\n* descriptor: Remove unused parent_info from BIP32PUbKeyProvider::GetPubKey\n\n* descriptors: Have GetPubKey fill origins directly\n\nInstead of having ExpandHelper fill in the origins in the\nFlatSigningProvider output, have GetPubKey do it by itself. This reduces\nthe extra variables needed in order to track and set origins in\nExpandHelper.\n\nAlso changes GetPubKey to return a std::optional<CPubKey> rather than\nusing a bool and output parameters.\n\n* descriptors: Move FlatSigningProvider pubkey filling to GetPubKey\n\nInstead of MakeScripts inconsistently filling the output\nFlatSigningProvider with the pubkeys involved, just do it in GetPubKey.\n\n* descriptors: Have GetPrivKey fill keys directly\n\nInstead of GetPrivKey returning a key and having the caller fill the\nFlatSigningProvider, have GetPrivKey take the FlatSigningProvider and\nfill it by itself. This will be necessary for descriptors such as\nmusig() where there are private keys that need to be added to the\nFlatSigningProvider but do not directly appear in any resulting scripts.\n\nGetPrivKey is now changed to void as the caller no longer cares whether\nit succeeds or fails.\n\n* Log block header in net_processing\n\nPreviously ChainstateManager::AcceptBlockHeader would log when it\nsaw a new header. This commit moves logging to the call site(s) in\nnet_processing. The next commits will then log which peer sent it\nand whether it was part of a compact block.\n\nThis commit changes behavior:\n- when multiple headers are received in a single message, only the\n  last one is logged\n- if any of the headers are invalid, the valid ones are not logged\n\nThis happens because net_processing calls ProcessNewBlockHeaders\nwith multiple headers, which then calls AcceptBlockHeader one\nheader at a time.\n\nAdditionally:\n- when the header is received via a compact block, there's no more\n  duplicate log (a later commit also unifies logging code paths)\n\n* Log which peer sent us a header\n\nThis also supports -logips.\n\n* Use LogBlockHeader for compact blocks\n\nThe only behavior change is that the block height is now added to the log message.\n\n* doc: release note for #27826\n\n* torcontrol: Fix addrOnion outdate comment\n\nSigned-off-by: Eval EXEC <execvy@gmail.com>\n\n* guix: Remove unused `file` package\n\nThe `file` utility has not been required since Guix builds were\nintroduced.\n\n* rpc: Allow fullrbf fee bump\n\nAlso, fix the incorrect documention of the 'replaceable' RPC argument\nwith respect to sequence number handling. The docs were incorrect\nbefore, so the fix could be extracted, but it seems fine to include here\nas well.\n\n* doc: Add deps install notes for multiprocess\n\nThese just mirror the content in src/ipc/libmultiprocess/doc/install.md\n\n* feefrac: avoid integer overflow in temporary\n\n* psbt: Implement un/ser of musig2 fields\n\n* rpc: Include MuSig2 fields in decodepsbt\n\n* tests: Add BIP 373 test vectors\n\n* ci: Temporarily disable `WalletMigration` benchmark\n\n* ci: Drop no longer necessary `-Wno-error=array-bounds`\n\n* test: improves tapscript unit tests\n\nThis commit creates new test utilities for future Taproot script\ntests within script_tests.json. The key features of this commit are the\naddition of three new tags: `#SCRIPT#`, `#CONTROLBLOCK#`, and\n`#TAPROOTOUTPUT#`. These tags streamline the test creation process by\neliminating the need to manually generate these components outside the\ntest suite.\n\n* `#SCRIPT#`: Parses Tapscript and outputs a byte string of opcodes.\n* `#CONTROLBLOCK#`: Automatically generates the control block for a given\nTaproot output.\n* `#TAPROOTOUTPUT#`: Generates the final Taproot scriptPubKey.\n\nUpdate src/test/script_tests.cpp\n\nCo-authored-by: Jan B <608446+janb84@users.noreply.github.com>\n\n* fuzz: enable running fuzz test cases in Debug mode\n\nWhen building with\n\n BUILD_FOR_FUZZING=OFF\n BUILD_FUZZ_BINARY=ON\n CMAKE_BUILD_TYPE=Debug\n\nallow the fuzz binary to execute given test cases (without actual\nfuzzing) to make it easier to reproduce fuzz test failures in a more\nnormal debug build.\n\nIn Debug builds, deterministic fuzz behaviour is controlled via a runtime\nvariable, which is normally false, but set to true automatically in the\nfuzz binary, unless the FUZZ_NONDETERMINISM environment variable is set.\n\n* doc: Document fuzz build options\n\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>\n\n* bench: clean up migrated descriptor wallets via loader teardown\n\n`MigrateLegacyToDescriptor` returns both a spendable descriptor wallet and a watch‑only wallet.\nIf these remain attached, their files stay open and on Windows this can hang CI when removing the test directory.\n\nBy constructing them via `MakeWalletLoader` (which owns the `WalletContext`), both wallets are automatically unloaded when the loader is destroyed at the end.\nThis ensures no lingering handles or resource leaks when running the benchmark on CI with `-sanity-check`.\n\nCo-authored-by: furszy <matiasfurszyfer@protonmail.com>\n\n* ci: re-enable all benchmark runs\n\nDrop the temporary `-filter` that excluded the `WalletMigration` benchmark.\n\n* bench: ensure wallet migration benchmark runs exactly once\n\nThe migration benchmark crashes if run more than once, because of `std::move(wallet)` and leaves subsequent iterations in an undefined state - avoiding `UndefinedBehaviorSanitizer` null‑dereference error.\n\n* refactor: starts/ends_with changes for clang-tidy 20\n\n* ci: clang-tidy 20\n\n* ci: Add missing -Wno-error=array-bounds to valgrind fuzz\n\n* test: Add missing check for empty stderr in util tester\n\n* test: Run all benchmarks in the sanity check\n\n* tests, gui: Use descriptors watchonly wallet for watchonly test\n\n* test: Remove legacy wallet unit tests\n\n* test: wallet_signer.py bdb will be removed\n\n* test: Remove legacy wallet tests from wallet_backwards_compatibility.py\n\n* test: Remove legacy wallet tests from wallet_reindex.py\n\n* test: remove legacy wallet functional tests\n\nRemoves all legacy wallet specific functional tests.\n\nAlso removes the --descriptor and --legacy-wallet options as these are\nno longer necessary with the legacy wallet removed.\n\n* wallet: Remove -format and bdb from wallet tool's createfromdump\n\n* wallet: Remove wallettool salvage\n\nSalvage is bdb only which is about to be removed.\n\n* bench: Remove WalletLoadingLegacy benchmark\n\n* wallet: Disallow legacy wallet creation from the wallet tool\n\n* wallet: Disallow creating legacy wallets\n\nRemove the option to set descriptors=False when creating a wallet, and\nenforce this in RPC and in CreateWallet\n\n* wallet: Disallow loading legacy wallets\n\nLegacy wallets do not have the descriptors flag set. Don't load wallets\nwithout the descriptors flag.\n\nAt the same time, we will no longer load BDB databases since they are\nonly used for legacy wallets.\n\n* test: Add imports for util bpf_cflags\n\nThis is required for the next commit.\n\n* scripted-diff: Use bpf_cflags\n\n-BEGIN VERIFY SCRIPT-\n\n ren() { sed --regexp-extended -i \"s/$1/$2/g\" $( git grep --extended-regexp -l \"$1\" ) ; }\n\n ren 'cflags=\\[\"-Wno-error=implicit-function-declaration\"\\]' 'cflags=bpf_cflags()'\n\n-END VERIFY SCRIPT-\n\n* qt: Replace stray tfm::format to cerr with qWarning\n\nGUI warnings should go to the log, not to the console (which may not be\nconnected at all).\n\n* Fix failing util_time_GetTime test on Windows\n\nRemove unreliable steady clock time checking from the test that was causing\nCI failures primarily on Windows. The test previously tried to verify that\nsteady_clock time increases after a 1ms sleep, but this approach is not reliable\non all platforms where such a short sleep interval may not consistently result\nin observable clock changes.\n\nThis addresses issue #32197 where the test was reporting failures in the\ncross-built Windows CI environment. As noted in the discussion, the test is not\ncritical to the functionality of Bitcoin Core, and removing the unreliable part\nis the most straightforward solution.\n\nRename and refocus util_time_GetTime test to util_mocktime\n\nCo-Authored-By: maflcko <6399679+maflcko@users.noreply.github.com>\n\n* gui: crash fix, disconnect numBlocksChanged() signal during shutdown\n\nThe crash stems from the order of the shutdown procedure:\nWe first unset the client model, then destroy the wallet controller—but we leave\nthe internal wallet models ('m_wallets') untouched for a brief period. As a result,\nthere’s a point in time where views still have connected signals and access to\nwallet models that are not connected to any wallet controller.\nNow.. since the clientModel is only replaced with nullptr locally and not destroyed\nyet, signals like numBlocksChanged can still emit. Thus, when wallet views receive\nthem, they see a non-null wallet model ptr, and proceed to call backend functions\nfrom a model that is being torn down.\n\nAs the shutdown procedure begins by unsetting clientModel from all views. It’s safe\nto ignore events when clientModel is nullptr.\n\n* net: remove unnecessary check from AlreadyConnectedToAddress()\n\n`CConnman::AlreadyConnectedToAddress()` searches the existent nodes by\naddress or by address-and-port:\n\n```cpp\nFindNode(static_cast<CNetAddr>(addr)) || FindNode(addr.ToStringAddrPort())\n```\n\nbut:\n\n* if there is a match by just the address, then the address-and-port\n  search will not be evaluated and the whole condition will be `true`\n* if the there is no node with the same address, then the second search\n  by address-and-port will not find a match either.\n\nThe search by address-and-port is comparing against `CNode::m_addr_name`\nwhich could be a hostname, e.g. `\"node.foobar.com:8333\"`, but\n`addr.ToStringAddrPort()` is always going to be numeric.\n\n* test: Same addr, diff port is already connected\n\n* test: Slim down previous releases bdb check\n\n* tests: Test migration cleans up bad inactive chain derivation path\n\nA bug in 0.21.x and 22.x resulted in some wallets having invalid\nderivation paths that are the concatenation of two derivation paths.\nThese appear only when inactive hd chains are topped up.\n\nSince key metadata is a legacy wallet only record, migrating legacy\nwallets to descriptor wallets will fix this issue as all key metadata\nrecords are deleted. The derivation path information is derived\non-the-fly from the descriptor that is produced for the inactive hd\nchain.\n\nThus we only need a test to verify that the derivation paths are good,\nand that all key metadata records are deleted from the migrated wallet.\n\n* doc: Fix fuzz test_runner.py path\n\nThis commit fixes the path listed in the documentation for the fuzz\ntesting test_runner.py. Previously the --help option worked but running\nfuzz tests from the documented path did not.\n\n* Bugfix: Miner: Don't reuse block_reserved_weight for \"block is full enough to give up\" weight delta\n\nPR #30356 incorrectly changed a constant of `4000` to `m_options.coinbase_max_additional_weight` in the check for when to give up finding another transaction to fill the block:\n\n```diff\n             if (nConsecutiveFailed > MAX_CONSECUTIVE_FAILURES && nBlockWeight >\n-                    m_options.nBlockMaxWeight - 4000) {\n+                    m_options.nBlockMaxWeight - m_options.block_reserved_weight) {\n                 // Give up if we're close to full and haven't succeeded in a while\n                 break;\n             }\n```\n\nBut this constant did not deal with the reserved weight at all. It was in fact simply checking if the block was close to full, and if so, giving up finding another transaction to pad it with after `MAX_CONSECUTIVE_FAILURES` failed attempts.\n\nIt doesn't seem very logical to reuse the reserve weight for this purpose, and it would be overcomplicated to add yet another setting, so this PR changes it to a new constexpr.\n\n* depends: Fix cross-compiling `qt` package from macOS to Windows\n\n* test: Remove unused RPCOverloadWrapper is_cli field\n\n* test: Remove unused createwallet_passthrough\n\n* test: Force named args for RPCOverloadWrapper optional args\n\nThis can avoid bugs and makes the test code easier to read, because the\norder of positional args does not have to be known or assumed.\n\n* test: avoid stack overflow in `FindChallenges` via manual iteration\n\nThe original recursive `FindChallenges` explores the Miniscript node tree using depth-first search. Specifically, it performs a pre-order traversal (processing the node's data, then recursively visiting children from left-to-right). This recursion uses the call stack, which can lead to stack overflows on platforms with limited stack space, particularly noticeable in Windows debug builds.\n\nThis change replaces the recursive implementation with an iterative version using an explicit stack. The iterative version also performs a depth-first search and processes the node's data before exploring children (preserving pre-order characteristics), although the children are explored in right-to-left order due to the LIFO nature of the explicit stack.\nCritically, both versions collect challenges into a `std::set`, which automatically deduplicates and sorts elements. This ensures that not only the final result, but the actual state of the set at any equivalent point in traversal remains identical, despite the difference in insertion order.\n\nThis iterative approach is an alternative to increasing the default stack size (as proposed in #32349) and directly addresses the stack overflow issue reported in #32341 by avoiding deep recursion.\n\nThe change is done in two commits:\n* add a new iterative `FindChallenges` method and rename the old method to `*_recursive` (to simplify removal in the next commit), asserting that its result matches the original;\n* Remove the original recursive implementation.\n\nThis approach avoids needing to suppress `misc-no-recursion` warnings and provides a portable, low-risk fix.\n\nUsing a `std::set` is necessary for deduplication, matching the original function's behavior. An experiment using an `std::vector` showed duplicate challenges being added, confirming the need for the set:\nExample failure with vector:\n  Recursive (set):\n    (6, 9070746)\n    (6, 19532513)\n    (6, 3343376967)\n  Iterative (vector attempt):\n    (6, 19532513)\n    (6, 9070746)\n    (6, 3343376967)\n    (6, 9070746) // Duplicate\n\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>\n\n* test: remove old recursive `FindChallenges_recursive` implementation\n\nThe performance of the test is the same as before, with the recursive method.\n\n* refactor: simplify repeated comparisons in `FindChallenges`\n\nThis obviates that the LHS of the comparison is always the same\n\n* refactor: Fix Sonar rule `cpp:S4998` - avoid unique_ptr const& as parameter\n\nChanged `FindChallenges()` parameter from `const std::unique_ptr<const Node<Key>>&` to const `Node*`.\n\nSonar rule `cpp:S4998` - https://sonarcloud.io/project/issues?issueStatuses=OPEN%2CCONFIRMED&branch=32351-8c0e673c4ac31c1c04750756de749fb813b2c33f&id=aureleoules_bitcoin&open=AZZ2q88IvFhp-eMuMy96:\n> Replace this use of \"unique_ptr\" by a raw pointer or a reference (possibly const).\n> Function parameters should not be of type \"std::unique_ptr<T> const &\" cpp:S4998\n> Software qualities impacted: Maintainability\n\n* descriptors: Reject + sign in ParseKeyPathNum\n\n* descriptors: Reject + sign when parsing multi threshold\n\n* test: [refactor] Use ToIntegral in CheckInferDescriptor\n\n* test: Use the correct node for doubled keypath test\n\n* util: Remove `fsbridge::get_filesystem_error_message()`\n\nThe `fsbridge::get_filesystem_error_message()` function exhibits several\ndrawbacks:\n\n1. It was introduced in https://github.com/bitcoin/bitcoin/pull/14192 to\naccount for platform-specific variations in\n`boost::filesystem::filesystem_error::what()`. Since migrating to\n`std::filesystem`, those discrepancies no longer exist.\n\n2. It fails to display UTF-8 paths correctly on Windows.\n\n3. It relies on `std::wstring_convert`, which was deprecated in C++17\nand removed in C++26.\n\nThis change removes the `fsbridge::get_filesystem_error_message()`\nfunction, thereby resolving all of the above issues.\n\nAdditionally, filesystem error messages now use the \"Warning\" log level.\n\n* validation: write chainstate to disk every hour\n\nRemove the 24 hour periodic flush interval and\nwrite the chainstate along with blocks and block\nindex every hour\n\n* refactor: rename fDoFullFlush to should_write\n\n* refactor: replace m_last_write with m_next_write\n\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>\n\n* validation: add randomness to periodic write interval\n\nCo-Authored-By: Pieter Wuille <pieter@wuille.net>\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>\n\n* doc: Fix test_bitcoin path\n\nThis commit fixes a couple command paths for interacting with the\ntest_bitcoin binary within the Unit Test documentation.\n\n---------\n\nSigned-off-by: Eval EXEC <execvy@gmail.com>\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\nCo-authored-by: Andrew Toth <andrewstoth@gmail.com>\nCo-authored-by: Sebastian Falbesoner <sebastian.falbesoner@gmail.com>\nCo-authored-by: laanwj <126646+laanwj@users.noreply.github.com>\nCo-authored-by: Saikiran <saikirannadipilli@gmail.com>\nCo-authored-by: David Gumberg <davidzgumberg@gmail.com>\nCo-authored-by: Ethan Heilman <ethan.r.heilman@gmail.com>\nCo-authored-by: stratospher <44024636+stratospher@users.noreply.github.com>\nCo-authored-by: Matt Corallo <git@bluematt.me>\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>\nCo-authored-by: Ava Chow <github@achow101.com>\nCo-authored-by: Sjors Provoost <sjors@sprovoost.nl>\nCo-authored-by: Eval EXEC <execvy@gmail.com>\nCo-authored-by: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\nCo-authored-by: TheCharlatan <seb.kung@gmail.com>\nCo-authored-by: Pieter Wuille <pieter@wuille.net>\nCo-authored-by: merge-script <gloriajzhao@gmail.com>\nCo-authored-by: Jan B <608446+janb84@users.noreply.github.com>\nCo-authored-by: Ryan Ofsky <ryan@ofsky.org>\nCo-authored-by: Lőrinc <pap.lorinc@gmail.com>\nCo-authored-by: furszy <matiasfurszyfer@protonmail.com>\nCo-authored-by: merge-script <fanquake@gmail.com>\nCo-authored-by: VolodymyrBg <aqdrgg19@gmail.com>\nCo-authored-by: maflcko <6399679+maflcko@users.noreply.github.com>\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\nCo-authored-by: monlovesmango <monlovesmango@users.noreply.github.com>\nCo-authored-by: Luke Dashjr <luke-jr+git@utopios.org>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoFQhDCRC1aQ7uu5UhlAAAVD8QABCr32YWfwIq/LL8pn1e4Q4h\nFaM335PZhKn9WwL/Ncf69IjCk6xUl7v0FdwG/LyaUAwdkXN7F1yjYA2NWiHBK27d\nDpK9xrPQo8R9HVuuFwGnC1WURfS27yIYvgtIzuCCQ4eyJHNj5Kpr7tF4Zwwe5U/n\nsHNc3eamm6zf/1//mLAWeQbn8PfFIV/xdr0Ot/W4AGtLz2u50TUb4haSC4we9VYF\n0GkShXncUhvDhdxQXWx4VcV3OGb/saub5rjAU4luySNF/u1/sHyu3b7ZFIP9otHw\nLqXkg5b1eJ6+oLCJhf2tLbY4wCc0Kee4XiMw4kEIeD5vzP2svDUUi8DivYoccbF3\n/I2CwazTCD9ixwO9fM5USdtG7z6qwNCesCkiUIs+/I4S8cT8aLgDEvVCb40MInk1\nTmRdXdHBCLZuPlGBUwUYYaN7i4fZdUQ4FyvkoQ2oYecT8+Ft1UuqgK3SOE/Zc+Ay\n4Z5MKELmNtVJEziTGtdgV8sW6BMScUNp6hmBG6QftxY1PA9dm+rNsjoqGihSg/MI\nksUKahpqHzPQBxaiBqHIjVfbAJBinTQ3tGTMcJg5t6XvR4KDnFa7y+HjLxO9Dagr\nneRBbAPVCW3vjeiwvrMUIzT6OHXRuCOLHZGHXGSXHFiekVkoRM8LS1xmWyK30F8Y\ngfUWCGU1tYEEodxq3o0M\n=gyzj\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/247e9de62228bd1cb0e2fb5e3bd9a906b3056167",
          "sha": "247e9de62228bd1cb0e2fb5e3bd9a906b3056167",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/247e9de62228bd1cb0e2fb5e3bd9a906b3056167"
        }
      ],
      "message": "النظاري (#1)\n\n* versionbits: Use std::array instead of C-style arrays\n\n* versionbits: Remove params from AbstractThresholdConditionChecker\n\nFor an abstract class, specifying parameters in detail serves no point;\nand for the concrete implementation, changing the consensus parameters\nbetween invocations doesn't make sense. So simplify the class by removing\nthe consensus params from the method arguments, and just make it a member\nvariable in the concrete object where needed. This also allows dropping\ndummy parameters from the unit/fuzz tests.\n\n* test: chainstate write test for periodic chainstate flush\n\n* consensus/params: Move version bits period/threshold to bip9 param\n\nRather than having the rule change period/threshold be constant for all\npotential deployments on a chain, have it be specific to the deployment\nitself. This both matches history (BIP 9 specified a 2016 block period\nand 1916 block threshold; BIP 91 specified a 336 block period and 269\nblock threshold; and BIP 341 specified a 2016 block period and 1815\nblock threshold), and allows the code to be simplified, as only the\nBIP9Deployment structure is needed, not the full Consensus::Params\nstructure.\n\n* versionbits: Change BIP9Stats to uint32_t types\n\n* versionbits: Move WarningBits logic from validation to versionbits\n\n* versionbits: Move getdeploymentinfo logic to versionbits\n\nRather than having the RPC code have knowledge about how BIP9 is\nimplemented, create a reporting function in the versionbits code, and\nlimit the RPC code to coverting the result of that into Univalue/JSON.\n\n* versionbits: Move BIP9 status logic for getblocktemplate to versionbits\n\nRather than having the RPC code have knowledge about how BIP9 is\nimplemented, create a reporting function in the versionbits code, and\nlimit the RPC code to coverting the result of that into the appropriate\noutput for getblocktemplate.\n\n* versionbits: Simplify VersionBitsCache API\n\nReplaces State() (which returned ACTIVE/STARTED/etc) with IsActiveAfter()\nwhich just returns a bool, as this was all State was actually used\nfor. Drops Mask(), which was only used in tests and can be replaced with\n`1<<bit`, and also drops StateSinceHeight() and Statistics(), which are\nnow only used internally for Info().\n\n* versionbits: Split out internal details into impl header\n\n* versionbits: Expose StateName function\n\nRather than essentially duplicating StateName in the unit tests, expose\nit via the impl header.\n\n* versionbits: Expose VersionBitsConditionChecker via impl header\n\n* tests: refactor versionbits unit test\n\nBase the unit test directly on `VersionBitsConditionChecker`, slightly\nimproving coverage, in particular adding coverage for the the logic\nregarding setting the TOP_BITS.\n\n* tests: refactor versionbits fuzz test\n\nTest `VersionBitsConditionChecker` behaviour directly, rather than\nreimplementing it, thus slightly improving fuzz test coverage of the\nreal code.\n\n* wallet: doc: remove mentions of unavailable scrypt derivation method\n\nThese comments are there since wallet encryption was first introduced\n(see commit 4e87d341f75f13bbd7d108c31c03886fbc4df56f, PR #352), but scrypt\nwas actually never implemented as a derivation method.\n\n* wallet: refactor: introduce `CMasterKey::DEFAULT_DERIVE_ITERATIONS` constant\n\nThis gets rid of the magic number used in both the `CMasterKey` ctor\nand the wallet encryption / passphrase change methods.\n\n* wallet: refactor: dedup master key encryption / derivation rounds setting\n\n* wallet: refactor: dedup master key decryption\n\n* scripted-diff: wallet: rename plain and encrypted master key variables\n\n-BEGIN VERIFY SCRIPT-\nsed -i s/_vMasterKey/plain_master_key/g ./src/wallet/wallet.cpp\nsed -i s/kMasterKey/master_key/g ./src/wallet/wallet.cpp\nsed -i \"s/const MasterKeyMap::value_type& pMasterKey/const auto\\& \\[_, master_key\\]/g\" ./src/wallet/wallet.cpp\nsed -i s/pMasterKey\\.second/master_key/g ./src/wallet/wallet.cpp\nsed -i \"s/MasterKeyMap::value_type& pMasterKey/auto\\& \\[master_key_id, master_key\\]/g\" ./src/wallet/wallet.cpp\nsed -i s/pMasterKey\\.first/master_key_id/g ./src/wallet/wallet.cpp\n-END VERIFY SCRIPT-\n\n* net: Use GetAdaptersAddresses to get local addresses on Windows\n\nInstead of a `gethostname` hack, use the official way of calling\n`GetAdaptersAddresses` to get local network addresses on Windows.\n\nAs additional cleanup, move out `FromSockAddr` from MacOS and use it\neverywhere appropriate.\n\nSuggested by Ava Chow.\n\n* versionbits: docstrings for BIP9Info\n\n* test: add IsActiveAfter tests for versionbits\n\n* removed duplicate calling of GetDescriptorScriptPubKeyMan\n\nRemoved duplicate call to GetDescriptorScriptPubKeyMan and\nInstead of checking linearly I have used find method so time complexity reduced significantly for GetDescriptorScriptPubKeyMan\nafter this fix improved performance of importdescriptor part refs #32013.\n\n* build: Use `-z noseparate-code` on NetBSD < 11.0\n\nThis can be dropped once Bitcoin Core no longer supports NetBSD 10.0 or\nif upstream fix is backported.\n\nNetBSD's dynamic linker ld.elf_so < 11.0 supports exactly 2 `PT_LOAD`\nsegments and binaries linked with `-z separate-code` have 4 `PT_LOAD`\nsegments.\n\nhttps://github.com/bitcoin/bitcoin/pull/28724#issuecomment-2589347934\nhttps://mail-index.netbsd.org/tech-userlevel/2023/01/05/msg013666.html\n\n* build: Drop option for disabling hardening\n\nBuilding unhardened executables is not a supported use case that should\nbe maintained and those that want unhardened executables can still\noverride them by appending disable flags.\n\nFor example:\n\ncmake -B build -DAPPEND_CPPFLAGS='-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector -fcf-protection=none -fno-stack-clash-protection' -DAPPEND_LDFLAGS='-Wl,-z,lazy -Wl,-z,norelro -Wl,-z,noseparate-code'\n\n* build: refactor: hardening flags -> core_interface\n\n* test: Ensures test fails if witness is not hex\n\nThis commit ensures that we do not fail silently when the test script encounters a witness string in the JSON test data that can not be parsed as hex.\n\n* validation: fix traversal condition to mark BLOCK_FAILED_CHILD\n\nthis block of code is not reached on master since other than\ninitialisation, all other iterations have invalid_walk_tip\nand to_mark_failed pointers in some form of this layout\nwhere 1, 2, 3 and 4 are block heights.\n\n\tinvalid_walk_tip\n\t  ↓\n1 <- 2 <- 3 <- 4\n\t       ↑\n\t      to_mark_failed\n\nfix it so that blocks are correctly marked as BLOCK_FAILED_CHILD\nif it's a descendant of BLOCK_FAILED_VALID block.\n\n* test: check BlockStatus when InvalidateBlock is used\n\nwhen a block is invalidated using InvalidateBlock, check that:\n1. it's status is BLOCK_FAILED_VALID\n2. it's children's status is BLOCK_FAILED_CHILD\n   and not BLOCK_FAILED_VALID\n3. it's ancestors are valid\n\n* validation: correctly update BlockStatus for invalid block descendants\n\ninvalid_block ----------> block_index\n\n- before this commit, only if block_index is not invalid, it will mark\n  block_index as BLOCK_FAILED_CHILD\n- it's possible that block_index encountered is invalid and was marked\n  as BLOCK_FAILED_VALID previously\n- in this case, correctly update BlockStatus of block_index by\n  clearing BLOCK_FAILED_VALID and then setting it to BLOCK_FAILED_CHILD\n\n* validation: clarify final |= BLOCK_FAILED_VALID in InvalidateBlock\n\nThis has no functional affect, as the any CBlockIndex*s which\nto_mark_failed is set to will already have been marked failed.\n\nAlso prevents a situation where block already marked as\nBLOCK_FAILED_CHILD is again unconditionally marked as\nBLOCK_FAILED_VALID in the final |= BLOCK_FAILED_VALID.\n\n* build, msvc: Update vcpkg manifest baseline\n\nThis change updates the vcpkg manifest baseline from the \"2024.09.30\nRelease\" to the \"2025.03.19 Release\", with the following package\nchanges:\n - boost: 1.85.0#1,2 --> 1.87.0\n - qtbase: 6.7.2#3 -> 6.8.2#1\n - qttools: 6.7.2#1 -> 6.8.2\n - sqlite3: 3.46.1 --> 3.49.1\n\n* build, msvc: Build only required `qtbase` features\n\nThis change makes vcpkg skip unused features such as `dnslookup`,\n`openssl`, etc.\n\n* depends: Specify Objective C/C++ compilers for `native_qt` package\n\nThis change fixes cross-compilation from macOS to macOS with another\narchitecture.\n\n* depends: Fix `mv` command compatibility with macOS\n\n* wallet, rpc: Only allow keypool import from single key descriptors\n\nLegacy wallets should only import keys to the keypool if they came in a\nsingle key descriptor. Instead of relying on assumptions about the\ndescriptor based on how many pubkeys show up after expanding the\ndescriptor, explicitly mark descriptors as being single key type and use\nthat for the check.\n\n* descriptor: Remove unused parent_info from BIP32PUbKeyProvider::GetPubKey\n\n* descriptors: Have GetPubKey fill origins directly\n\nInstead of having ExpandHelper fill in the origins in the\nFlatSigningProvider output, have GetPubKey do it by itself. This reduces\nthe extra variables needed in order to track and set origins in\nExpandHelper.\n\nAlso changes GetPubKey to return a std::optional<CPubKey> rather than\nusing a bool and output parameters.\n\n* descriptors: Move FlatSigningProvider pubkey filling to GetPubKey\n\nInstead of MakeScripts inconsistently filling the output\nFlatSigningProvider with the pubkeys involved, just do it in GetPubKey.\n\n* descriptors: Have GetPrivKey fill keys directly\n\nInstead of GetPrivKey returning a key and having the caller fill the\nFlatSigningProvider, have GetPrivKey take the FlatSigningProvider and\nfill it by itself. This will be necessary for descriptors such as\nmusig() where there are private keys that need to be added to the\nFlatSigningProvider but do not directly appear in any resulting scripts.\n\nGetPrivKey is now changed to void as the caller no longer cares whether\nit succeeds or fails.\n\n* Log block header in net_processing\n\nPreviously ChainstateManager::AcceptBlockHeader would log when it\nsaw a new header. This commit moves logging to the call site(s) in\nnet_processing. The next commits will then log which peer sent it\nand whether it was part of a compact block.\n\nThis commit changes behavior:\n- when multiple headers are received in a single message, only the\n  last one is logged\n- if any of the headers are invalid, the valid ones are not logged\n\nThis happens because net_processing calls ProcessNewBlockHeaders\nwith multiple headers, which then calls AcceptBlockHeader one\nheader at a time.\n\nAdditionally:\n- when the header is received via a compact block, there's no more\n  duplicate log (a later commit also unifies logging code paths)\n\n* Log which peer sent us a header\n\nThis also supports -logips.\n\n* Use LogBlockHeader for compact blocks\n\nThe only behavior change is that the block height is now added to the log message.\n\n* doc: release note for #27826\n\n* torcontrol: Fix addrOnion outdate comment\n\nSigned-off-by: Eval EXEC <execvy@gmail.com>\n\n* guix: Remove unused `file` package\n\nThe `file` utility has not been required since Guix builds were\nintroduced.\n\n* rpc: Allow fullrbf fee bump\n\nAlso, fix the incorrect documention of the 'replaceable' RPC argument\nwith respect to sequence number handling. The docs were incorrect\nbefore, so the fix could be extracted, but it seems fine to include here\nas well.\n\n* doc: Add deps install notes for multiprocess\n\nThese just mirror the content in src/ipc/libmultiprocess/doc/install.md\n\n* feefrac: avoid integer overflow in temporary\n\n* psbt: Implement un/ser of musig2 fields\n\n* rpc: Include MuSig2 fields in decodepsbt\n\n* tests: Add BIP 373 test vectors\n\n* ci: Temporarily disable `WalletMigration` benchmark\n\n* ci: Drop no longer necessary `-Wno-error=array-bounds`\n\n* test: improves tapscript unit tests\n\nThis commit creates new test utilities for future Taproot script\ntests within script_tests.json. The key features of this commit are the\naddition of three new tags: `#SCRIPT#`, `#CONTROLBLOCK#`, and\n`#TAPROOTOUTPUT#`. These tags streamline the test creation process by\neliminating the need to manually generate these components outside the\ntest suite.\n\n* `#SCRIPT#`: Parses Tapscript and outputs a byte string of opcodes.\n* `#CONTROLBLOCK#`: Automatically generates the control block for a given\nTaproot output.\n* `#TAPROOTOUTPUT#`: Generates the final Taproot scriptPubKey.\n\nUpdate src/test/script_tests.cpp\n\nCo-authored-by: Jan B <608446+janb84@users.noreply.github.com>\n\n* fuzz: enable running fuzz test cases in Debug mode\n\nWhen building with\n\n BUILD_FOR_FUZZING=OFF\n BUILD_FUZZ_BINARY=ON\n CMAKE_BUILD_TYPE=Debug\n\nallow the fuzz binary to execute given test cases (without actual\nfuzzing) to make it easier to reproduce fuzz test failures in a more\nnormal debug build.\n\nIn Debug builds, deterministic fuzz behaviour is controlled via a runtime\nvariable, which is normally false, but set to true automatically in the\nfuzz binary, unless the FUZZ_NONDETERMINISM environment variable is set.\n\n* doc: Document fuzz build options\n\nCo-Authored-By: Ryan Ofsky <ryan@ofsky.org>\n\n* bench: clean up migrated descriptor wallets via loader teardown\n\n`MigrateLegacyToDescriptor` returns both a spendable descriptor wallet and a watch‑only wallet.\nIf these remain attached, their files stay open and on Windows this can hang CI when removing the test directory.\n\nBy constructing them via `MakeWalletLoader` (which owns the `WalletContext`), both wallets are automatically unloaded when the loader is destroyed at the end.\nThis ensures no lingering handles or resource leaks when running the benchmark on CI with `-sanity-check`.\n\nCo-authored-by: furszy <matiasfurszyfer@protonmail.com>\n\n* ci: re-enable all benchmark runs\n\nDrop the temporary `-filter` that excluded the `WalletMigration` benchmark.\n\n* bench: ensure wallet migration benchmark runs exactly once\n\nThe migration benchmark crashes if run more than once, because of `std::move(wallet)` and leaves subsequent iterations in an undefined state - avoiding `UndefinedBehaviorSanitizer` null‑dereference error.\n\n* refactor: starts/ends_with changes for clang-tidy 20\n\n* ci: clang-tidy 20\n\n* ci: Add missing -Wno-error=array-bounds to valgrind fuzz\n\n* test: Add missing check for empty stderr in util tester\n\n* test: Run all benchmarks in the sanity check\n\n* tests, gui: Use descriptors watchonly wallet for watchonly test\n\n* test: Remove legacy wallet unit tests\n\n* test: wallet_signer.py bdb will be removed\n\n* test: Remove legacy wallet tests from wallet_backwards_compatibility.py\n\n* test: Remove legacy wallet tests from wallet_reindex.py\n\n* test: remove legacy wallet functional tests\n\nRemoves all legacy wallet specific functional tests.\n\nAlso removes the --descriptor and --legacy-wallet options as these are\nno longer necessary with the legacy wallet removed.\n\n* wallet: Remove -format and bdb from wallet tool's createfromdump\n\n* wallet: Remove wallettool salvage\n\nSalvage is bdb only which is about to be removed.\n\n* bench: Remove WalletLoadingLegacy benchmark\n\n* wallet: Disallow legacy wallet creation from the wallet tool\n\n* wallet: Disallow creating legacy wallets\n\nRemove the option to set descriptors=False when creating a wallet, and\nenforce this in RPC and in CreateWallet\n\n* wallet: Disallow loading legacy wallets\n\nLegacy wallets do not have the descriptors flag set. Don't load wallets\nwithout the descriptors flag.\n\nAt the same time, we will no longer load BDB databases since they are\nonly used for legacy wallets.\n\n* test: Add imports for util bpf_cflags\n\nThis is required for the next commit.\n\n* scripted-diff: Use bpf_cflags\n\n-BEGIN VERIFY SCRIPT-\n\n ren() { sed --regexp-extended -i \"s/$1/$2/g\" $( git grep --extended-regexp -l \"$1\" ) ; }\n\n ren 'cflags=\\[\"-Wno-error=implicit-function-declaration\"\\]' 'cflags=bpf_cflags()'\n\n-END VERIFY SCRIPT-\n\n* qt: Replace stray tfm::format to cerr with qWarning\n\nGUI warnings should go to the log, not to the console (which may not be\nconnected at all).\n\n* Fix failing util_time_GetTime test on Windows\n\nRemove unreliable steady clock time checking from the test that was causing\nCI failures primarily on Windows. The test previously tried to verify that\nsteady_clock time increases after a 1ms sleep, but this approach is not reliable\non all platforms where such a short sleep interval may not consistently result\nin observable clock changes.\n\nThis addresses issue #32197 where the test was reporting failures in the\ncross-built Windows CI environment. As noted in the discussion, the test is not\ncritical to the functionality of Bitcoin Core, and removing the unreliable part\nis the most straightforward solution.\n\nRename and refocus util_time_GetTime test to util_mocktime\n\nCo-Authored-By: maflcko <6399679+maflcko@users.noreply.github.com>\n\n* gui: crash fix, disconnect numBlocksChanged() signal during shutdown\n\nThe crash stems from the order of the shutdown procedure:\nWe first unset the client model, then destroy the wallet controller—but we leave\nthe internal wallet models ('m_wallets') untouched for a brief period. As a result,\nthere’s a point in time where views still have connected signals and access to\nwallet models that are not connected to any wallet controller.\nNow.. since the clientModel is only replaced with nullptr locally and not destroyed\nyet, signals like numBlocksChanged can still emit. Thus, when wallet views receive\nthem, they see a non-null wallet model ptr, and proceed to call backend functions\nfrom a model that is being torn down.\n\nAs the shutdown procedure begins by unsetting clientModel from all views. It’s safe\nto ignore events when clientModel is nullptr.\n\n* net: remove unnecessary check from AlreadyConnectedToAddress()\n\n`CConnman::AlreadyConnectedToAddress()` searches the existent nodes by\naddress or by address-and-port:\n\n```cpp\nFindNode(static_cast<CNetAddr>(addr)) || FindNode(addr.ToStringAddrPort())\n```\n\nbut:\n\n* if there is a match by just the address, then the address-and-port\n  search will not be evaluated and the whole condition will be `true`\n* if the there is no node with the same address, then the second search\n  by address-and-port will not find a match either.\n\nThe search by address-and-port is comparing against `CNode::m_addr_name`\nwhich could be a hostname, e.g. `\"node.foobar.com:8333\"`, but\n`addr.ToStringAddrPort()` is always going to be numeric.\n\n* test: Same addr, diff port is already connected\n\n* test: Slim down previous releases bdb check\n\n* tests: Test migration cleans up bad inactive chain derivation path\n\nA bug in 0.21.x and 22.x resulted in some wallets having invalid\nderivation paths that are the concatenation of two derivation paths.\nThese appear only when inactive hd chains are topped up.\n\nSince key metadata is a legacy wallet only record, migrating legacy\nwallets to descriptor wallets will fix this issue as all key metadata\nrecords are deleted. The derivation path information is derived\non-the-fly from the descriptor that is produced for the inactive hd\nchain.\n\nThus we only need a test to verify that the derivation paths are good,\nand that all key metadata records are deleted from the migrated wallet.\n\n* doc: Fix fuzz test_runner.py path\n\nThis commit fixes the path listed in the documentation for the fuzz\ntesting test_runner.py. Previously the --help option worked but running\nfuzz tests from the documented path did not.\n\n* Bugfix: Miner: Don't reuse block_reserved_weight for \"block is full enough to give up\" weight delta\n\nPR #30356 incorrectly changed a constant of `4000` to `m_options.coinbase_max_additional_weight` in the check for when to give up finding another transaction to fill the block:\n\n```diff\n             if (nConsecutiveFailed > MAX_CONSECUTIVE_FAILURES && nBlockWeight >\n-                    m_options.nBlockMaxWeight - 4000) {\n+                    m_options.nBlockMaxWeight - m_options.block_reserved_weight) {\n                 // Give up if we're close to full and haven't succeeded in a while\n                 break;\n             }\n```\n\nBut this constant did not deal with the reserved weight at all. It was in fact simply checking if the block was close to full, and if so, giving up finding another transaction to pad it with after `MAX_CONSECUTIVE_FAILURES` failed attempts.\n\nIt doesn't seem very logical to reuse the reserve weight for this purpose, and it would be overcomplicated to add yet another setting, so this PR changes it to a new constexpr.\n\n* depends: Fix cross-compiling `qt` package from macOS to Windows\n\n* test: Remove unused RPCOverloadWrapper is_cli field\n\n* test: Remove unused createwallet_passthrough\n\n* test: Force named args for RPCOverloadWrapper optional args\n\nThis can avoid bugs and makes the test code easier to read, because the\norder of positional args does not have to be known or assumed.\n\n* test: avoid stack overflow in `FindChallenges` via manual iteration\n\nThe original recursive `FindChallenges` explores the Miniscript node tree using depth-first search. Specifically, it performs a pre-order traversal (processing the node's data, then recursively visiting children from left-to-right). This recursion uses the call stack, which can lead to stack overflows on platforms with limited stack space, particularly noticeable in Windows debug builds.\n\nThis change replaces the recursive implementation with an iterative version using an explicit stack. The iterative version also performs a depth-first search and processes the node's data before exploring children (preserving pre-order characteristics), although the children are explored in right-to-left order due to the LIFO nature of the explicit stack.\nCritically, both versions collect challenges into a `std::set`, which automatically deduplicates and sorts elements. This ensures that not only the final result, but the actual state of the set at any equivalent point in traversal remains identical, despite the difference in insertion order.\n\nThis iterative approach is an alternative to increasing the default stack size (as proposed in #32349) and directly addresses the stack overflow issue reported in #32341 by avoiding deep recursion.\n\nThe change is done in two commits:\n* add a new iterative `FindChallenges` method and rename the old method to `*_recursive` (to simplify removal in the next commit), asserting that its result matches the original;\n* Remove the original recursive implementation.\n\nThis approach avoids needing to suppress `misc-no-recursion` warnings and provides a portable, low-risk fix.\n\nUsing a `std::set` is necessary for deduplication, matching the original function's behavior. An experiment using an `std::vector` showed duplicate challenges being added, confirming the need for the set:\nExample failure with vector:\n  Recursive (set):\n    (6, 9070746)\n    (6, 19532513)\n    (6, 3343376967)\n  Iterative (vector attempt):\n    (6, 19532513)\n    (6, 9070746)\n    (6, 3343376967)\n    (6, 9070746) // Duplicate\n\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>\n\n* test: remove old recursive `FindChallenges_recursive` implementation\n\nThe performance of the test is the same as before, with the recursive method.\n\n* refactor: simplify repeated comparisons in `FindChallenges`\n\nThis obviates that the LHS of the comparison is always the same\n\n* refactor: Fix Sonar rule `cpp:S4998` - avoid unique_ptr const& as parameter\n\nChanged `FindChallenges()` parameter from `const std::unique_ptr<const Node<Key>>&` to const `Node*`.\n\nSonar rule `cpp:S4998` - https://sonarcloud.io/project/issues?issueStatuses=OPEN%2CCONFIRMED&branch=32351-8c0e673c4ac31c1c04750756de749fb813b2c33f&id=aureleoules_bitcoin&open=AZZ2q88IvFhp-eMuMy96:\n> Replace this use of \"unique_ptr\" by a raw pointer or a reference (possibly const).\n> Function parameters should not be of type \"std::unique_ptr<T> const &\" cpp:S4998\n> Software qualities impacted: Maintainability\n\n* descriptors: Reject + sign in ParseKeyPathNum\n\n* descriptors: Reject + sign when parsing multi threshold\n\n* test: [refactor] Use ToIntegral in CheckInferDescriptor\n\n* test: Use the correct node for doubled keypath test\n\n* util: Remove `fsbridge::get_filesystem_error_message()`\n\nThe `fsbridge::get_filesystem_error_message()` function exhibits several\ndrawbacks:\n\n1. It was introduced in https://github.com/bitcoin/bitcoin/pull/14192 to\naccount for platform-specific variations in\n`boost::filesystem::filesystem_error::what()`. Since migrating to\n`std::filesystem`, those discrepancies no longer exist.\n\n2. It fails to display UTF-8 paths correctly on Windows.\n\n3. It relies on `std::wstring_convert`, which was deprecated in C++17\nand removed in C++26.\n\nThis change removes the `fsbridge::get_filesystem_error_message()`\nfunction, thereby resolving all of the above issues.\n\nAdditionally, filesystem error messages now use the \"Warning\" log level.\n\n* validation: write chainstate to disk every hour\n\nRemove the 24 hour periodic flush interval and\nwrite the chainstate along with blocks and block\nindex every hour\n\n* refactor: rename fDoFullFlush to should_write\n\n* refactor: replace m_last_write with m_next_write\n\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>\n\n* validation: add randomness to periodic write interval\n\nCo-Authored-By: Pieter Wuille <pieter@wuille.net>\nCo-Authored-By: l0rinc <pap.lorinc@gmail.com>\n\n* doc: Fix test_bitcoin path\n\nThis commit fixes a couple command paths for interacting with the\ntest_bitcoin binary within the Unit Test documentation.\n\n---------\n\nSigned-off-by: Eval EXEC <execvy@gmail.com>\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\nCo-authored-by: Andrew Toth <andrewstoth@gmail.com>\nCo-authored-by: Sebastian Falbesoner <sebastian.falbesoner@gmail.com>\nCo-authored-by: laanwj <126646+laanwj@users.noreply.github.com>\nCo-authored-by: Saikiran <saikirannadipilli@gmail.com>\nCo-authored-by: David Gumberg <davidzgumberg@gmail.com>\nCo-authored-by: Ethan Heilman <ethan.r.heilman@gmail.com>\nCo-authored-by: stratospher <44024636+stratospher@users.noreply.github.com>\nCo-authored-by: Matt Corallo <git@bluematt.me>\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>\nCo-authored-by: Ava Chow <github@achow101.com>\nCo-authored-by: Sjors Provoost <sjors@sprovoost.nl>\nCo-authored-by: Eval EXEC <execvy@gmail.com>\nCo-authored-by: MarcoFalke <*~=`'#}+{/-|&$^_@721217.xyz>\nCo-authored-by: TheCharlatan <seb.kung@gmail.com>\nCo-authored-by: Pieter Wuille <pieter@wuille.net>\nCo-authored-by: merge-script <gloriajzhao@gmail.com>\nCo-authored-by: Jan B <608446+janb84@users.noreply.github.com>\nCo-authored-by: Ryan Ofsky <ryan@ofsky.org>\nCo-authored-by: Lőrinc <pap.lorinc@gmail.com>\nCo-authored-by: furszy <matiasfurszyfer@protonmail.com>\nCo-authored-by: merge-script <fanquake@gmail.com>\nCo-authored-by: VolodymyrBg <aqdrgg19@gmail.com>\nCo-authored-by: maflcko <6399679+maflcko@users.noreply.github.com>\nCo-authored-by: Vasil Dimov <vd@FreeBSD.org>\nCo-authored-by: monlovesmango <monlovesmango@users.noreply.github.com>\nCo-authored-by: Luke Dashjr <luke-jr+git@utopios.org>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2025-05-02T18:00:35Z"
      },
      "author": {
        "name": "Tamim Salah Alnethary",
        "email": "143851675+AlnetharyT@users.noreply.github.com",
        "date": "2025-05-02T18:00:35Z"
      },
      "sha": "5a1669f648fbe5659b7a328d11776e083589d5d1"
    },
    {
      "event": "commented",
      "id": 2847811833,
      "node_id": "IC_kwDOABII586pvij5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2847811833",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-02T18:10:30Z",
      "updated_at": "2025-05-02T18:10:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32407.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32407#issuecomment-2847811833",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32407"
    },
    {
      "event": "closed",
      "id": 17503250133,
      "node_id": "CE_lADOABII5860_lgtzwAAAAQTRmbV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17503250133",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-02T18:12:14Z"
    },
    {
      "event": "renamed",
      "id": 17503410424,
      "node_id": "RTE_lADOABII5860_lgtzwAAAAQTSNj4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17503410424",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-02T18:29:10Z",
      "rename": {
        "from": "النظاري (#1)",
        "to": "."
      }
    },
    {
      "event": "locked",
      "id": 17503412085,
      "node_id": "LOE_lADOABII5860_lgtzwAAAAQTSN91",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17503412085",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-02T18:29:21Z",
      "lock_reason": "spam"
    }
  ],
  "comments": []
}