{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236",
    "id": 1465933647,
    "node_id": "PR_kwDOABII585XYF9P",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28236",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28236.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28236.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
    "number": 28236,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "fuzz: wallet, add target for Spend",
    "user": {
      "login": "Ayush170-Future",
      "id": 76209654,
      "node_id": "MDQ6VXNlcjc2MjA5NjU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ayush170-Future",
      "html_url": "https://github.com/Ayush170-Future",
      "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
      "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
      "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
      "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
      "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This PR adds fuzz coverage for `wallet/spend`.\r\n\r\nMotivation: Issue [27272](https://github.com/bitcoin/bitcoin/issues/27272#issue-1628327906)\r\n\r\nThis PR adds Fuzz coverage to the whole concept of Creating a New Transaction as well as other sections of the Spend file.  Because `CreateTransaction` is one of the most frequently used functions in the wallet codebase, merging this PR will significantly improve the wallet codebase's Fuzz testing!\r\n\r\nI also used the `Singleton Class` concept for creating Wallet instances because it assures that only one instance of it is created during all Fuzz runs, which significantly boosts the file's `exec/sec`.\r\n",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2023-08-07T21:25:27Z",
    "updated_at": "2025-07-16T11:40:21Z",
    "closed_at": "2024-07-16T19:31:09Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merged": false,
    "merge_commit_sha": "16b6d367982e015b62ec9d1fa06413415aefb11c",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "Ayush170-Future:fuzz-coverage-spend",
      "ref": "fuzz-coverage-spend",
      "sha": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 648833047,
        "node_id": "R_kgDOJqxoFw",
        "name": "bitcoin",
        "full_name": "Ayush170-Future/bitcoin",
        "owner": {
          "login": "Ayush170-Future",
          "id": 76209654,
          "node_id": "MDQ6VXNlcjc2MjA5NjU0",
          "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Ayush170-Future",
          "html_url": "https://github.com/Ayush170-Future",
          "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
          "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
          "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
          "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
          "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Ayush170-Future/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Ayush170-Future/bitcoin",
        "archive_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Ayush170-Future/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Ayush170-Future/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Ayush170-Future/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/hooks",
        "svn_url": "https://github.com/Ayush170-Future/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 217878,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-05-01T19:45:04Z",
        "created_at": "2023-06-03T00:02:13Z",
        "updated_at": "2024-04-30T21:37:39Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d9007f51a7480246abe4c16f2e3d190988470bec",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37525,
        "stargazers_count": 84588,
        "watchers_count": 84588,
        "size": 289145,
        "default_branch": "master",
        "open_issues_count": 750,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-15T13:46:35Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-07-16T11:17:03Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 261,
    "deletions": 1,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 17,
    "comments": 13
  },
  "events": [
    {
      "event": "commented",
      "id": 1668596559,
      "node_id": "IC_kwDOABII585jdMNP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1668596559",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-07T21:25:30Z",
      "updated_at": "2024-04-23T07:49:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28236).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29936](https://github.com/bitcoin/bitcoin/pull/29936) (fuzz: wallet: add target for `CreateTransaction` by brunoerg)\n* [#26606](https://github.com/bitcoin/bitcoin/pull/26606) (wallet: Implement independent BDB parser by achow101)\n* [#26596](https://github.com/bitcoin/bitcoin/pull/26596) (wallet: Migrate legacy wallets to descriptor wallets without requiring BDB by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1668596559",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "labeled",
      "id": 10028858728,
      "node_id": "LE_lADOABII585tr6hwzwAAAAJVxD1o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10028858728",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-07T21:25:32Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 1566215643,
      "node_id": "PRR_kwDOABII585dWo3b",
      "url": null,
      "actor": null,
      "commit_id": "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#pullrequestreview-1566215643",
      "submitted_at": "2023-08-07T22:17:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
    },
    {
      "event": "reviewed",
      "id": 1566216191,
      "node_id": "PRR_kwDOABII585dWo__",
      "url": null,
      "actor": null,
      "commit_id": "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#pullrequestreview-1566216191",
      "submitted_at": "2023-08-07T22:18:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
    },
    {
      "event": "reviewed",
      "id": 1566218244,
      "node_id": "PRR_kwDOABII585dWpgE",
      "url": null,
      "actor": null,
      "commit_id": "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#pullrequestreview-1566218244",
      "submitted_at": "2023-08-07T22:20:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
    },
    {
      "event": "commented",
      "id": 1668752812,
      "node_id": "IC_kwDOABII585jdyWs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1668752812",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-08T00:48:16Z",
      "updated_at": "2023-08-08T00:48:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "From lint:\r\n```diff\r\n+ test/lint/all-lint.py\r\nThis diff appears to have added new lines with trailing whitespace.\r\nThe following changes were suspected:\r\n\r\ndiff --git a/src/wallet/test/fuzz/spend.cpp b/src/wallet/test/fuzz/spend.cpp\r\n@@ -0,0 +1,254 @@\r\n+namespace wallet { \r\n+ * Singleton wallet class ensures that only one \r\n+ * instance of CWallet is created and reused as required. \r\n+ * of creating a new `Descriptor Wallet` each time and deletes \r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins) \r\n+    \r\n+    // Because none of the UTXO will ever be used (marked as spent), mining this many should be sufficient. \r\n+                                        /*nAmount=*/ConsumeMoney(fuzzed_data_provider), \r\n+                const CTxOut tx_out{ConsumeMoney(fuzzed_data_provider), ConsumeScript(fuzzed_data_provider)}; \r\n+    \r\n+                // Taking a random sub-sequence from available coins \r\n+}   \r\nSuccess: no issues found in 269 source files\r\n^---- failure generated from lint-whitespace.py\r\n```",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1668752812",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "labeled",
      "id": 10033351502,
      "node_id": "LE_lADOABII585tr6hwzwAAAAJWCMtO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10033351502",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-08T09:40:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10063501126,
      "node_id": "HRFPE_lADOABII585tr6hwzwAAAAJX1NdG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10063501126",
      "actor": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "885b0379863c54540aeb5755959c369d17d4672e",
      "commit_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/commits/885b0379863c54540aeb5755959c369d17d4672e",
      "created_at": "2023-08-10T19:58:58Z"
    },
    {
      "event": "commented",
      "id": 1673851694,
      "node_id": "IC_kwDOABII585jxPMu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1673851694",
      "actor": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T20:15:56Z",
      "updated_at": "2023-08-10T23:30:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, @brunoerg for your reviews! In the recent push, I've addressed most of your reviews.\r\n\r\n- `clang-format` to fix the lint's issue.\r\n- Changed `PickValueFromArray` to the `PickValue` approach.\r\n- Fixed one grammar mistake.\r\n\r\nThis [comment](https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1286425941) is really interesting, but I'm not sure whether the `non-determinism` in this case might pose a significant issue or not.\r\nSo, I'll wait for more people to give their thoughts on this and we can write a new `CreateSyncedWallet` specific for Fuzzing purposes if felt necessary.\r\n",
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1673851694",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "mentioned",
      "id": 10063644096,
      "node_id": "MEE_lADOABII585tr6hwzwAAAAJX1wXA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10063644096",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T20:15:57Z"
    },
    {
      "event": "subscribed",
      "id": 10063644106,
      "node_id": "SE_lADOABII585tr6hwzwAAAAJX1wXK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10063644106",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T20:15:57Z"
    },
    {
      "event": "unlabeled",
      "id": 10064240352,
      "node_id": "UNLE_lADOABII585tr6hwzwAAAAJX4B7g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10064240352",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-10T21:37:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10269245280,
      "node_id": "LE_lADOABII585tr6hwzwAAAAJkGD9g",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10269245280",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-04T04:31:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 10286982629,
      "node_id": "UNLE_lADOABII585tr6hwzwAAAAJlJuXl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10286982629",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-09-05T18:45:32Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 10765242305,
      "node_id": "LE_lADOABII585tr6hwzwAAAAKBqI_B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10765242305",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-10-25T10:16:19Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1791356580,
      "node_id": "IC_kwDOABII585qxe6k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1791356580",
      "actor": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-02T18:52:41Z",
      "updated_at": "2023-11-02T18:52:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "The `fuzzer` logs are unclear, I'm not sure why it failed suddenly. Maybe some issue with the Fuzzer again?",
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1791356580",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "commented",
      "id": 1791381061,
      "node_id": "IC_kwDOABII585qxk5F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1791381061",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-02T19:02:35Z",
      "updated_at": "2023-11-02T19:02:35Z",
      "author_association": "MEMBER",
      "body": "You'll need to rebase on current master in any case",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1791381061",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10863244432,
      "node_id": "HRFPE_lADOABII585tr6hwzwAAAAKHf_SQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10863244432",
      "actor": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dff12560fadfd0d6c40c89a770cd5fab476e26a5",
      "commit_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/commits/dff12560fadfd0d6c40c89a770cd5fab476e26a5",
      "created_at": "2023-11-04T17:11:50Z"
    },
    {
      "event": "commented",
      "id": 1793499068,
      "node_id": "IC_kwDOABII585q5p-8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793499068",
      "actor": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-04T17:13:15Z",
      "updated_at": "2023-11-04T17:23:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "- Force-pushed rebasing on the current master branch.\r\n\r\nPS - There is one change in `CRecipient` that I didn't know about. Will update this PR against that change soon!",
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1793499068",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE3YTU5MDUzZWZiN2FiMmVjNTVjZWIzYWFhMjI4OGVjZWYwMTZlYjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "tree": {
        "sha": "fd5425b77add601219216dfc49d1a949afe07284",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd5425b77add601219216dfc49d1a949afe07284"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9007f51a7480246abe4c16f2e3d190988470bec",
          "sha": "d9007f51a7480246abe4c16f2e3d190988470bec",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d9007f51a7480246abe4c16f2e3d190988470bec"
        }
      ],
      "message": "fuzz: add target for Spend",
      "committer": {
        "name": "Ayush Singh",
        "email": "ayushsingh.as1700@gmail.com",
        "date": "2023-11-04T17:32:07Z"
      },
      "author": {
        "name": "Ayush Singh",
        "email": "ayushsingh.as1700@gmail.com",
        "date": "2023-07-26T17:57:43Z"
      },
      "sha": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 10863275387,
      "node_id": "HRFPE_lADOABII585tr6hwzwAAAAKHgG17",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10863275387",
      "actor": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "commit_url": "https://api.github.com/repos/Ayush170-Future/bitcoin/commits/17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "created_at": "2023-11-04T17:32:28Z"
    },
    {
      "event": "unlabeled",
      "id": 10863354345,
      "node_id": "UNLE_lADOABII585tr6hwzwAAAAKHgaHp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10863354345",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-04T18:19:37Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1793526872,
      "node_id": "IC_kwDOABII585q5wxY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1793526872",
      "actor": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-04T19:03:55Z",
      "updated_at": "2023-11-04T19:03:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "- Force-pushed updating the `CRecipient` wrt [28246](https://github.com/bitcoin/bitcoin/pull/28246).\r\n\r\nAll CI checks passed now 💪",
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1793526872",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "reviewed",
      "id": 1726964487,
      "node_id": "PRR_kwDOABII585m72MH",
      "url": null,
      "actor": null,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Coverage looks decent: https://dergoegge.github.io/bitcoin-coverage/pr28236/fuzz.coverage/index.html",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#pullrequestreview-1726964487",
      "submitted_at": "2023-11-13T10:13:20Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
    },
    {
      "event": "labeled",
      "id": 10985136363,
      "node_id": "LE_lADOABII585tr6hwzwAAAAKOw-Dr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/10985136363",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-11-16T19:12:21Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1755504090,
      "node_id": "PRR_kwDOABII585oot3a",
      "url": null,
      "actor": null,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#pullrequestreview-1755504090",
      "submitted_at": "2023-11-29T15:08:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
    },
    {
      "event": "reviewed",
      "id": 1767252938,
      "node_id": "PRR_kwDOABII585pViPK",
      "url": null,
      "actor": null,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Spend.cpp coverage is not too bad already: https://maflcko.github.io/b-c-cov/fuzz.coverage/src/wallet/spend.cpp.gcov.html\r\n\r\nIt may be good to clarify the new coverage a bit.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#pullrequestreview-1767252938",
      "submitted_at": "2023-12-06T10:51:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
    },
    {
      "event": "commented",
      "id": 1883240915,
      "node_id": "IC_kwDOABII585wP_nT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883240915",
      "actor": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T15:16:02Z",
      "updated_at": "2024-01-09T15:16:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Spend.cpp coverage is not too bad already: https://maflcko.github.io/b-c-cov/fuzz.coverage/src/wallet/spend.cpp.gcov.html\r\n> \r\n> It may be good to clarify the new coverage a bit.\r\n\r\nI didn't understand. Are you suggesting that I reconsider what I want to increase coverage of in this file?\r\n\r\nAlso, I have a question about the blue lines in the coverage reports. Do they represent the line coverage of the code during fuzzing? For instance, if these functions are encountered in the process of running any fuzz file, the fuzz coverage will display them in blue. If I'm understanding this correctly, wouldn't it still make sense to have a separate fuzz file for `Creating Transaction` so that we can explore more test cases and code flows? These might not be tested if the coverage is coming from another fuzz file designed for a different purpose or codebase.\r\n\r\n https://maflcko.github.io/b-c-cov/fuzz.coverage/src/wallet/spend.cpp.gcov.html",
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-1883240915",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "review_requested",
      "id": 12408701075,
      "node_id": "RRE_lADOABII585tr6hwzwAAAALjncCT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12408701075",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-09T15:16:42Z",
      "requested_reviewer": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12408701096,
      "node_id": "RRE_lADOABII585tr6hwzwAAAALjncCo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12408701096",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-09T15:16:42Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2006620250,
      "node_id": "PRR_kwDOABII5853mpha",
      "url": null,
      "actor": null,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Hey,\r\n\r\nJust did a quick pass. What is the status of this PR?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#pullrequestreview-2006620250",
      "submitted_at": "2024-04-17T17:03:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
    },
    {
      "event": "commented",
      "id": 2061935258,
      "node_id": "IC_kwDOABII58565qKa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2061935258",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-17T18:20:40Z",
      "updated_at": "2024-04-17T18:20:40Z",
      "author_association": "MEMBER",
      "body": "Are you still working on this?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-2061935258",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "reviewed",
      "id": 2007011057,
      "node_id": "PRR_kwDOABII5853oI7x",
      "url": null,
      "actor": null,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#pullrequestreview-2007011057",
      "submitted_at": "2024-04-17T19:54:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
    },
    {
      "event": "commented",
      "id": 2063026719,
      "node_id": "IC_kwDOABII585690of",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2063026719",
      "actor": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-18T05:26:34Z",
      "updated_at": "2024-04-18T05:34:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Are you still working on this?\r\n\r\nSorry I got a little occupied with some other things and would want to continue working on this. I've the approach in mind and will force push the update by the end of this month.\r\n\r\n- Will create a new file for `CoinsResult ` and remove global Singleton from the `Spend` file.",
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-2063026719",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "labeled",
      "id": 12878477764,
      "node_id": "LE_lADOABII585tr6hwzwAAAAL_nfnE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12878477764",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-21T11:06:55Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2122383164,
      "node_id": "IC_kwDOABII585-gP88",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2122383164",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-21T11:06:56Z",
      "updated_at": "2024-05-21T11:06:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-2122383164",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "convert_to_draft",
      "id": 13283587651,
      "node_id": "CTDE_lADOABII585tr6hwzwAAAAMXw3ZD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13283587651",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-25T15:40:55Z"
    },
    {
      "event": "commented",
      "id": 2189297229,
      "node_id": "IC_kwDOABII586CfgZN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2189297229",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-25T15:41:09Z",
      "updated_at": "2024-06-25T15:41:09Z",
      "author_association": "MEMBER",
      "body": "> I've the approach in mind and will force push the update by the end of this month.\r\n\r\nMoved to draft for now.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-2189297229",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "commented",
      "id": 2231686907,
      "node_id": "IC_kwDOABII586FBNb7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2231686907",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T19:31:10Z",
      "updated_at": "2024-07-16T19:31:10Z",
      "author_association": "MEMBER",
      "body": "Picked up in https://github.com/bitcoin/bitcoin/pull/30461",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#issuecomment-2231686907",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28236"
    },
    {
      "event": "closed",
      "id": 13526178178,
      "node_id": "CE_lADOABII585tr6hwzwAAAAMmORmC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13526178178",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-16T19:31:10Z"
    },
    {
      "event": "locked",
      "id": 18657575887,
      "node_id": "LOE_lADOABII585tr6hwzwAAAARYFAPP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18657575887",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-16T11:40:20Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286425941",
      "pull_request_review_id": 1566215643,
      "id": 1286425941,
      "node_id": "PRRC_kwDOABII585MrU1V",
      "diff_hunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet { \r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one \r\n+ * instance of CWallet is created and reused as required. \r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes \r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton {\r\n+public:\r\n+    static WalletSingleton& GetInstance() {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton() {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton() {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet() {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 72,
      "original_position": 65,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think that `CreateSyncedWallet` will call `SetupDescriptorScriptPubKeyMans()` which internally will make a seed.\r\n```cpp\r\nvoid CWallet::SetupDescriptorScriptPubKeyMans()\r\n{\r\n    AssertLockHeld(cs_wallet);\r\n\r\n    if (!IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\r\n        // Make a seed\r\n        CKey seed_key;\r\n        seed_key.MakeNewKey(true);\r\n        CPubKey seed = seed_key.GetPubKey();\r\n        assert(seed_key.VerifyPubKey(seed));\r\n\r\n        // Get the extended key\r\n        CExtKey master_key;\r\n        master_key.SetSeed(seed_key);\r\n\r\n        SetupDescriptorScriptPubKeyMans(master_key);\r\n    }\r\n```\r\n\r\nNot sure, but wouldn't it be non-deterministic? A solution would be to have a fuzz version of `CreateSyncedWallet` which calls `SetupDescriptorScriptPubKeyMans` passing a key that we created using buf.",
      "created_at": "2023-08-07T22:17:29Z",
      "updated_at": "2023-08-07T22:17:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1286425941",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286425941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 72,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286426350",
      "pull_request_review_id": 1566216191,
      "id": 1286426350,
      "node_id": "PRRC_kwDOABII585MrU7u",
      "diff_hunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet { \r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one \r\n+ * instance of CWallet is created and reused as required. \r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes \r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton {\r\n+public:\r\n+    static WalletSingleton& GetInstance() {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton() {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton() {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet() {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r\n+\r\n+        // This is placed here because Available Coins will never be updated while fuzzing.\r\n+        LOCK(wallet->cs_wallet);\r\n+        available_coins = AvailableCoins(*wallet);\r\n+    }\r\n+\r\n+    std::unique_ptr<CWallet> wallet;\r\n+    CoinsResult available_coins;\r\n+};\r\n+\r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins) \r\n+{\r\n+    CCoinControl new_coin_control;\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        const CTxDestination tx_destination{ConsumeTxDestination(fuzzed_data_provider)};\r\n+        new_coin_control.destChange = tx_destination;\r\n+    }\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_change_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\r\n+    }\r\n+    new_coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_allow_other_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n+    }\r\n+    new_coin_control.m_signal_bip125_rbf = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_avoid_partial_spends = fuzzed_data_provider.ConsumeBool();\r\n+    \r\n+    // Taking a random sub-sequence from available coins.\r\n+    for (const COutput& coin : coins) {\r\n+        if(fuzzed_data_provider.ConsumeBool()) {\r\n+            new_coin_control.Select(coin.outpoint);\r\n+        }\r\n+    }\r\n+\r\n+    // Occasionally, some random `CCoutPoint` are also selected.\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        for(int i = 0; i < 10; ++i) {\r\n+            std::optional<COutPoint> optional_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\r\n+            if (!optional_out_point) {\r\n+                continue;\r\n+            }\r\n+            new_coin_control.Select(*optional_out_point);\r\n+        }\r\n+    }\r\n+    return new_coin_control;\r\n+}\r\n+\r\n+void initialize_spend()\r\n+{\r\n+    static auto testing_setup = MakeNoLogFileContext<TestChain100Setup>();\r\n+    g_setup = testing_setup.get();\r\n+\r\n+    // Add 50 spendable UTXO, 50 BTC each, to the wallet (total balance 5000 BTC)\r\n+    // Because none of the UTXO will ever be used (marked as spent), mining this many should be sufficient. \r\n+    for (int i = 0; i < 50; ++i) {\r\n+        g_setup->CreateAndProcessBlock({}, GetScriptForRawPubKey(g_setup->coinbaseKey.GetPubKey()));\r\n+    }\r\n+}\r\n+\r\n+FUZZ_TARGET(spend, .init = initialize_spend)\r\n+{\r\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n+    CWallet& wallet = WalletSingleton::GetInstance().GetWallet();\r\n+    CoinsResult& available_coins = WalletSingleton::GetInstance().GetCoins();\r\n+\r\n+    // Asserting if the `wallet` has no funds.\r\n+    std::vector<COutput> coins = available_coins.All();\r\n+    assert(!coins.empty());\r\n+\r\n+    CCoinControl coin_control;\r\n+    CMutableTransaction mtx;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 505)\r\n+    {\r\n+        CallOneOf(\r\n+            fuzzed_data_provider,\r\n+            [&] {\r\n+                // Creates a new `CoinControl`.\r\n+                coin_control = GetNewCoinControl(fuzzed_data_provider, wallet, coins);\r\n+            },\r\n+            [&] {\r\n+                // Creates a new Transaction using `CreateTransaction`.\r\n+                std::vector<CRecipient> recipients;\r\n+                unsigned int recipients_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 100);\r\n+                for (unsigned int i = 0; i < recipients_size; ++i) {\r\n+                    recipients.push_back({/*scriptPubKey=*/ConsumeScript(fuzzed_data_provider),\r\n+                                        /*nAmount=*/ConsumeMoney(fuzzed_data_provider), \r\n+                                        /*fSubtractFeeFromAmount=*/fuzzed_data_provider.ConsumeBool()});\r\n+                }\r\n+                // Equally likely to chose one of the three values.\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": null,
      "original_position": 156,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "s/chose/choose",
      "created_at": "2023-08-07T22:18:17Z",
      "updated_at": "2023-08-07T22:18:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1286426350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286426350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 156,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286427767",
      "pull_request_review_id": 1566218244,
      "id": 1286427767,
      "node_id": "PRRC_kwDOABII585MrVR3",
      "diff_hunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet { \r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one \r\n+ * instance of CWallet is created and reused as required. \r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes \r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton {\r\n+public:\r\n+    static WalletSingleton& GetInstance() {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins() {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton() {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton() {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet() {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r\n+\r\n+        // This is placed here because Available Coins will never be updated while fuzzing.\r\n+        LOCK(wallet->cs_wallet);\r\n+        available_coins = AvailableCoins(*wallet);\r\n+    }\r\n+\r\n+    std::unique_ptr<CWallet> wallet;\r\n+    CoinsResult available_coins;\r\n+};\r\n+\r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins) \r\n+{\r\n+    CCoinControl new_coin_control;\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        const CTxDestination tx_destination{ConsumeTxDestination(fuzzed_data_provider)};\r\n+        new_coin_control.destChange = tx_destination;\r\n+    }\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_change_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\r\n+    }\r\n+    new_coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_allow_other_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n+    }\r\n+    new_coin_control.m_signal_bip125_rbf = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_avoid_partial_spends = fuzzed_data_provider.ConsumeBool();\r\n+    \r\n+    // Taking a random sub-sequence from available coins.\r\n+    for (const COutput& coin : coins) {\r\n+        if(fuzzed_data_provider.ConsumeBool()) {\r\n+            new_coin_control.Select(coin.outpoint);\r\n+        }\r\n+    }\r\n+\r\n+    // Occasionally, some random `CCoutPoint` are also selected.\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        for(int i = 0; i < 10; ++i) {\r\n+            std::optional<COutPoint> optional_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\r\n+            if (!optional_out_point) {\r\n+                continue;\r\n+            }\r\n+            new_coin_control.Select(*optional_out_point);\r\n+        }\r\n+    }\r\n+    return new_coin_control;\r\n+}\r\n+\r\n+void initialize_spend()\r\n+{\r\n+    static auto testing_setup = MakeNoLogFileContext<TestChain100Setup>();\r\n+    g_setup = testing_setup.get();\r\n+\r\n+    // Add 50 spendable UTXO, 50 BTC each, to the wallet (total balance 5000 BTC)\r\n+    // Because none of the UTXO will ever be used (marked as spent), mining this many should be sufficient. \r\n+    for (int i = 0; i < 50; ++i) {\r\n+        g_setup->CreateAndProcessBlock({}, GetScriptForRawPubKey(g_setup->coinbaseKey.GetPubKey()));\r\n+    }\r\n+}\r\n+\r\n+FUZZ_TARGET(spend, .init = initialize_spend)\r\n+{\r\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n+    CWallet& wallet = WalletSingleton::GetInstance().GetWallet();\r\n+    CoinsResult& available_coins = WalletSingleton::GetInstance().GetCoins();\r\n+\r\n+    // Asserting if the `wallet` has no funds.\r\n+    std::vector<COutput> coins = available_coins.All();\r\n+    assert(!coins.empty());\r\n+\r\n+    CCoinControl coin_control;\r\n+    CMutableTransaction mtx;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 505)\r\n+    {\r\n+        CallOneOf(\r\n+            fuzzed_data_provider,\r\n+            [&] {\r\n+                // Creates a new `CoinControl`.\r\n+                coin_control = GetNewCoinControl(fuzzed_data_provider, wallet, coins);\r\n+            },\r\n+            [&] {\r\n+                // Creates a new Transaction using `CreateTransaction`.\r\n+                std::vector<CRecipient> recipients;\r\n+                unsigned int recipients_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 100);\r\n+                for (unsigned int i = 0; i < recipients_size; ++i) {\r\n+                    recipients.push_back({/*scriptPubKey=*/ConsumeScript(fuzzed_data_provider),\r\n+                                        /*nAmount=*/ConsumeMoney(fuzzed_data_provider), \r\n+                                        /*fSubtractFeeFromAmount=*/fuzzed_data_provider.ConsumeBool()});\r\n+                }\r\n+                // Equally likely to chose one of the three values.\r\n+                std::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, recipients_size), fuzzed_data_provider.ConsumeIntegral<int>()};\r\n+                int change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n+\r\n+                auto res = CreateTransaction(wallet, recipients, change_pos, coin_control, /*sign=*/fuzzed_data_provider.ConsumeBool());\r\n+                if (!res) return;\r\n+                mtx = CMutableTransaction(*(res->tx));\r\n+            },\r\n+            [&] {\r\n+                // Occasionally, creating a random Transaction for Fuzzing.\r\n+                auto new_mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\r\n+                if (!new_mtx) return;\r\n+                mtx = *new_mtx;\r\n+            },\r\n+            [&] {\r\n+                LOCK(wallet.cs_wallet);\r\n+                if (fuzzed_data_provider.ConsumeBool()) {\r\n+                    (void)CalculateMaximumSignedTxSize(CTransaction(mtx), &wallet);\r\n+                } else {\r\n+                    (void)CalculateMaximumSignedTxSize(CTransaction(mtx), &wallet, &coin_control);\r\n+                }\r\n+            },\r\n+            [&] {\r\n+                const CTxOut tx_out{ConsumeMoney(fuzzed_data_provider), ConsumeScript(fuzzed_data_provider)}; \r\n+                CalculateMaximumSignedInputSize(tx_out, &wallet, &coin_control);\r\n+            },\r\n+            [&] {\r\n+                CAmount fee;\r\n+                int random_positions[3] = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, mtx.vout.size()), fuzzed_data_provider.ConsumeIntegral<int>()};\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": null,
      "original_position": 184,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "b8121896a05f8e894f250b4ce6f28c79df34a3d1",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think you could keep same pattern as you had previously:\r\n```cpp\r\nstd::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, recipients_size), fuzzed_data_provider.ConsumeIntegral<int>()};\r\nint change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n```\r\n\r\ninstead of \r\n```cpp\r\nint random_positions[3] = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, mtx.vout.size()), fuzzed_data_provider.ConsumeIntegral<int>()};\r\nint change_pos = fuzzed_data_provider.PickValueInArray(random_positions);\r\n```",
      "created_at": "2023-08-07T22:20:56Z",
      "updated_at": "2023-08-07T22:20:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1286427767",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1286427767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1390888668",
      "pull_request_review_id": 1726964487,
      "id": 1390888668,
      "node_id": "PRRC_kwDOABII585S50bc",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    const CWallet& GetWallet()\r\n\r\n```\r\n\r\nIt's otherwise hard to tell if the global wallet instance is mutated. Same for `GetCoins()`.\r\n\r\nIf the global instance is mutated, the target is likely to be non-deterministic which hurts fuzzer efficiency. The target should behave exactly the same when given the same input, but that might not be the case if global state is used and modified.\r\n\r\n(The suggested change might not compile if `wallet` or `available_coins` are used as non-const/mutated)",
      "created_at": "2023-11-13T10:05:13Z",
      "updated_at": "2023-11-13T10:13:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1390888668",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1390888668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391438669",
      "pull_request_review_id": 1727830192,
      "id": 1391438669,
      "node_id": "PRRC_kwDOABII585S76tN",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": 1390888668,
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, this should make it more deterministic. As you said, it's causing some compilation errors with other code. I'll force-push once I've fixed them.",
      "created_at": "2023-11-13T17:20:19Z",
      "updated_at": "2023-11-13T17:20:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1391438669",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1391438669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392492963",
      "pull_request_review_id": 1729595017,
      "id": 1392492963,
      "node_id": "PRRC_kwDOABII585S_8Gj",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": 1390888668,
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `CreateTransaction()` and `FundTransaction()` want the `CWallet` parameter to be non-const. I'm struggling to find a work around but I'm trying.\r\n\r\nJust wanted to clear this, I think the `CWallet` instance inside these functions doesn't seem to be directly mutated or changed anytime. So, do we really want to make it to const. Am I understanding this correct?",
      "created_at": "2023-11-14T12:10:31Z",
      "updated_at": "2023-11-14T12:10:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1392492963",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392492963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392514354",
      "pull_request_review_id": 1729622663,
      "id": 1392514354,
      "node_id": "PRRC_kwDOABII585TABUy",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": 1390888668,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If  `CreateTransaction()` and  `FundTransaction()` do not mutate the wallet, then they should probably take a const reference instead. But glancing at `FundTransaction`, it calls `CWallet::LockCoin` which is not a const method and could probably lead to non-determinism since it appears to be modifying internal state of a wallet.\r\nhttps://github.com/bitcoin/bitcoin/blob/fb85bb277670aad28fef51b7313d4a96cdaa760f/src/wallet/spend.cpp#L1388\r\n\r\n> Just wanted to clear this, I think the CWallet instance inside these functions doesn't seem to be directly mutated or changed anytime. So, do we really want to make it to const.\r\n\r\nMarking things that should not be mutated as `const` will make this a compile time check, giving us more confidence that the test is working properly.\r\n\r\nYou could try to refactor `CreateTransaction` and/or  `FundTransaction` to take a `const CWallet&` and see what happens when you compile. The `LockCoin` issue mentioned above should be one of the things the compiler complains about.",
      "created_at": "2023-11-14T12:27:37Z",
      "updated_at": "2023-11-14T12:27:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1392514354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1392514354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409425962",
      "pull_request_review_id": 1755504090,
      "id": 1409425962,
      "node_id": "PRRC_kwDOABII585UAiIq",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton()\r\n+    {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton()\r\n+    {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet()\r\n+    {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r\n+\r\n+        // This is placed here because Available Coins will never be updated while fuzzing.\r\n+        LOCK(wallet->cs_wallet);\r\n+        available_coins = AvailableCoins(*wallet);\r\n+    }\r\n+\r\n+    std::unique_ptr<CWallet> wallet;\r\n+    CoinsResult available_coins;\r\n+};\r\n+\r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins)\r\n+{\r\n+    CCoinControl new_coin_control;\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        const CTxDestination tx_destination{ConsumeTxDestination(fuzzed_data_provider)};\r\n+        new_coin_control.destChange = tx_destination;\r\n+    }\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_change_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\r\n+    }\r\n+    new_coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_allow_other_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n+    }\r\n+    new_coin_control.m_signal_bip125_rbf = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_avoid_partial_spends = fuzzed_data_provider.ConsumeBool();\r\n+\r\n+    // Taking a random sub-sequence from available coins.\r\n+    for (const COutput& coin : coins) {\r\n+        if (fuzzed_data_provider.ConsumeBool()) {\r\n+            new_coin_control.Select(coin.outpoint);\r\n+        }\r\n+    }\r\n+\r\n+    // Occasionally, some random `CCoutPoint` are also selected.\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        for (int i = 0; i < 10; ++i) {\r\n+            std::optional<COutPoint> optional_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\r\n+            if (!optional_out_point) {\r\n+                continue;\r\n+            }\r\n+            new_coin_control.Select(*optional_out_point);\r\n+        }\r\n+    }\r\n+    return new_coin_control;\r\n+}\r\n+\r\n+void initialize_spend()\r\n+{\r\n+    static auto testing_setup = MakeNoLogFileContext<TestChain100Setup>();\r\n+    g_setup = testing_setup.get();\r\n+\r\n+    // Add 50 spendable UTXO, 50 BTC each, to the wallet (total balance 5000 BTC)\r\n+    // Because none of the UTXO will ever be used (marked as spent), mining this many should be sufficient.\r\n+    for (int i = 0; i < 50; ++i) {\r\n+        g_setup->CreateAndProcessBlock({}, GetScriptForRawPubKey(g_setup->coinbaseKey.GetPubKey()));\r\n+    }\r\n+}\r\n+\r\n+FUZZ_TARGET(spend, .init = initialize_spend)\r\n+{\r\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n+    CWallet& wallet = WalletSingleton::GetInstance().GetWallet();\r\n+    CoinsResult& available_coins = WalletSingleton::GetInstance().GetCoins();\r\n+\r\n+    // Asserting if the `wallet` has no funds.\r\n+    std::vector<COutput> coins = available_coins.All();\r\n+    assert(!coins.empty());\r\n+\r\n+    CCoinControl coin_control;\r\n+    CMutableTransaction mtx;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 505)\r\n+    {\r\n+        CallOneOf(\r\n+            fuzzed_data_provider,\r\n+            [&] {\r\n+                // Creates a new `CoinControl`.\r\n+                coin_control = GetNewCoinControl(fuzzed_data_provider, wallet, coins);\r\n+            },\r\n+            [&] {\r\n+                // Creates a new Transaction using `CreateTransaction`.\r\n+                std::vector<CRecipient> recipients;\r\n+                unsigned int recipients_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 100);\r\n+                for (unsigned int i = 0; i < recipients_size; ++i) {\r\n+                    recipients.push_back({/*dest=*/ConsumeTxDestination(fuzzed_data_provider),\r\n+                                          /*nAmount=*/ConsumeMoney(fuzzed_data_provider),\r\n+                                          /*fSubtractFeeFromAmount=*/fuzzed_data_provider.ConsumeBool()});\r\n+                }\r\n+                // Equally likely to choose one of the three values.\r\n+                std::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, recipients_size), fuzzed_data_provider.ConsumeIntegral<int>()};\r\n+                int change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n+\r\n+                auto res = CreateTransaction(wallet, recipients, change_pos, coin_control, /*sign=*/fuzzed_data_provider.ConsumeBool());\r\n+                if (!res) return;\r\n+                mtx = CMutableTransaction(*(res->tx));\r\n+            },\r\n+            [&] {\r\n+                // Occasionally, creating a random Transaction for Fuzzing.\r\n+                auto new_mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 173,
      "original_position": 173,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "missing ser-params? See compile failure due to silent merge conflict.\r\n\r\nNeeds rebase",
      "created_at": "2023-11-29T15:08:00Z",
      "updated_at": "2023-11-29T15:08:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1409425962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1409425962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414077590",
      "pull_request_review_id": 1762734732,
      "id": 1414077590,
      "node_id": "PRRC_kwDOABII585USRyW",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": 1390888668,
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, I believe the `LockCoin` function does mutate the global `wallet`. I'll need to figure out how to make this deterministic then.\r\n\r\nI apologize for the delayed response, I was/am occupied with something else. But, I'm looking forward to brainstorming this and finding a solution as soon as possible.",
      "created_at": "2023-12-04T15:30:37Z",
      "updated_at": "2023-12-04T15:30:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1414077590",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414077590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414079147",
      "pull_request_review_id": 1762737316,
      "id": 1414079147,
      "node_id": "PRRC_kwDOABII585USSKr",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton()\r\n+    {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton()\r\n+    {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet()\r\n+    {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r\n+\r\n+        // This is placed here because Available Coins will never be updated while fuzzing.\r\n+        LOCK(wallet->cs_wallet);\r\n+        available_coins = AvailableCoins(*wallet);\r\n+    }\r\n+\r\n+    std::unique_ptr<CWallet> wallet;\r\n+    CoinsResult available_coins;\r\n+};\r\n+\r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins)\r\n+{\r\n+    CCoinControl new_coin_control;\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        const CTxDestination tx_destination{ConsumeTxDestination(fuzzed_data_provider)};\r\n+        new_coin_control.destChange = tx_destination;\r\n+    }\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_change_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\r\n+    }\r\n+    new_coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_allow_other_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n+    }\r\n+    new_coin_control.m_signal_bip125_rbf = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_avoid_partial_spends = fuzzed_data_provider.ConsumeBool();\r\n+\r\n+    // Taking a random sub-sequence from available coins.\r\n+    for (const COutput& coin : coins) {\r\n+        if (fuzzed_data_provider.ConsumeBool()) {\r\n+            new_coin_control.Select(coin.outpoint);\r\n+        }\r\n+    }\r\n+\r\n+    // Occasionally, some random `CCoutPoint` are also selected.\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        for (int i = 0; i < 10; ++i) {\r\n+            std::optional<COutPoint> optional_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\r\n+            if (!optional_out_point) {\r\n+                continue;\r\n+            }\r\n+            new_coin_control.Select(*optional_out_point);\r\n+        }\r\n+    }\r\n+    return new_coin_control;\r\n+}\r\n+\r\n+void initialize_spend()\r\n+{\r\n+    static auto testing_setup = MakeNoLogFileContext<TestChain100Setup>();\r\n+    g_setup = testing_setup.get();\r\n+\r\n+    // Add 50 spendable UTXO, 50 BTC each, to the wallet (total balance 5000 BTC)\r\n+    // Because none of the UTXO will ever be used (marked as spent), mining this many should be sufficient.\r\n+    for (int i = 0; i < 50; ++i) {\r\n+        g_setup->CreateAndProcessBlock({}, GetScriptForRawPubKey(g_setup->coinbaseKey.GetPubKey()));\r\n+    }\r\n+}\r\n+\r\n+FUZZ_TARGET(spend, .init = initialize_spend)\r\n+{\r\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n+    CWallet& wallet = WalletSingleton::GetInstance().GetWallet();\r\n+    CoinsResult& available_coins = WalletSingleton::GetInstance().GetCoins();\r\n+\r\n+    // Asserting if the `wallet` has no funds.\r\n+    std::vector<COutput> coins = available_coins.All();\r\n+    assert(!coins.empty());\r\n+\r\n+    CCoinControl coin_control;\r\n+    CMutableTransaction mtx;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 505)\r\n+    {\r\n+        CallOneOf(\r\n+            fuzzed_data_provider,\r\n+            [&] {\r\n+                // Creates a new `CoinControl`.\r\n+                coin_control = GetNewCoinControl(fuzzed_data_provider, wallet, coins);\r\n+            },\r\n+            [&] {\r\n+                // Creates a new Transaction using `CreateTransaction`.\r\n+                std::vector<CRecipient> recipients;\r\n+                unsigned int recipients_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 100);\r\n+                for (unsigned int i = 0; i < recipients_size; ++i) {\r\n+                    recipients.push_back({/*dest=*/ConsumeTxDestination(fuzzed_data_provider),\r\n+                                          /*nAmount=*/ConsumeMoney(fuzzed_data_provider),\r\n+                                          /*fSubtractFeeFromAmount=*/fuzzed_data_provider.ConsumeBool()});\r\n+                }\r\n+                // Equally likely to choose one of the three values.\r\n+                std::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, recipients_size), fuzzed_data_provider.ConsumeIntegral<int>()};\r\n+                int change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n+\r\n+                auto res = CreateTransaction(wallet, recipients, change_pos, coin_control, /*sign=*/fuzzed_data_provider.ConsumeBool());\r\n+                if (!res) return;\r\n+                mtx = CMutableTransaction(*(res->tx));\r\n+            },\r\n+            [&] {\r\n+                // Occasionally, creating a random Transaction for Fuzzing.\r\n+                auto new_mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 173,
      "original_position": 173,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": 1409425962,
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thank you! I'll rebase in the next force push.",
      "created_at": "2023-12-04T15:31:45Z",
      "updated_at": "2023-12-04T15:31:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1414079147",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414079147"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1417093434",
      "pull_request_review_id": 1767252938,
      "id": 1417093434,
      "node_id": "PRRC_kwDOABII585UdyE6",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton()\r\n+    {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton()\r\n+    {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet()\r\n+    {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r\n+\r\n+        // This is placed here because Available Coins will never be updated while fuzzing.\r\n+        LOCK(wallet->cs_wallet);\r\n+        available_coins = AvailableCoins(*wallet);\r\n+    }\r\n+\r\n+    std::unique_ptr<CWallet> wallet;\r\n+    CoinsResult available_coins;\r\n+};\r\n+\r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins)\r\n+{\r\n+    CCoinControl new_coin_control;\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        const CTxDestination tx_destination{ConsumeTxDestination(fuzzed_data_provider)};\r\n+        new_coin_control.destChange = tx_destination;\r\n+    }\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_change_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\r\n+    }\r\n+    new_coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_allow_other_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n+    }\r\n+    new_coin_control.m_signal_bip125_rbf = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_avoid_partial_spends = fuzzed_data_provider.ConsumeBool();\r\n+\r\n+    // Taking a random sub-sequence from available coins.\r\n+    for (const COutput& coin : coins) {\r\n+        if (fuzzed_data_provider.ConsumeBool()) {\r\n+            new_coin_control.Select(coin.outpoint);\r\n+        }\r\n+    }\r\n+\r\n+    // Occasionally, some random `CCoutPoint` are also selected.\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        for (int i = 0; i < 10; ++i) {\r\n+            std::optional<COutPoint> optional_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\r\n+            if (!optional_out_point) {\r\n+                continue;\r\n+            }\r\n+            new_coin_control.Select(*optional_out_point);\r\n+        }\r\n+    }\r\n+    return new_coin_control;\r\n+}\r\n+\r\n+void initialize_spend()\r\n+{\r\n+    static auto testing_setup = MakeNoLogFileContext<TestChain100Setup>();\r\n+    g_setup = testing_setup.get();\r\n+\r\n+    // Add 50 spendable UTXO, 50 BTC each, to the wallet (total balance 5000 BTC)\r\n+    // Because none of the UTXO will ever be used (marked as spent), mining this many should be sufficient.\r\n+    for (int i = 0; i < 50; ++i) {\r\n+        g_setup->CreateAndProcessBlock({}, GetScriptForRawPubKey(g_setup->coinbaseKey.GetPubKey()));\r\n+    }\r\n+}\r\n+\r\n+FUZZ_TARGET(spend, .init = initialize_spend)\r\n+{\r\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n+    CWallet& wallet = WalletSingleton::GetInstance().GetWallet();\r\n+    CoinsResult& available_coins = WalletSingleton::GetInstance().GetCoins();\r\n+\r\n+    // Asserting if the `wallet` has no funds.\r\n+    std::vector<COutput> coins = available_coins.All();\r\n+    assert(!coins.empty());\r\n+\r\n+    CCoinControl coin_control;\r\n+    CMutableTransaction mtx;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 505)\r\n+    {\r\n+        CallOneOf(\r\n+            fuzzed_data_provider,\r\n+            [&] {\r\n+                // Creates a new `CoinControl`.\r\n+                coin_control = GetNewCoinControl(fuzzed_data_provider, wallet, coins);\r\n+            },\r\n+            [&] {\r\n+                // Creates a new Transaction using `CreateTransaction`.\r\n+                std::vector<CRecipient> recipients;\r\n+                unsigned int recipients_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 100);\r\n+                for (unsigned int i = 0; i < recipients_size; ++i) {\r\n+                    recipients.push_back({/*dest=*/ConsumeTxDestination(fuzzed_data_provider),\r\n+                                          /*nAmount=*/ConsumeMoney(fuzzed_data_provider),\r\n+                                          /*fSubtractFeeFromAmount=*/fuzzed_data_provider.ConsumeBool()});\r\n+                }\r\n+                // Equally likely to choose one of the three values.\r\n+                std::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, recipients_size), fuzzed_data_provider.ConsumeIntegral<int>()};\r\n+                int change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n+\r\n+                auto res = CreateTransaction(wallet, recipients, change_pos, coin_control, /*sign=*/fuzzed_data_provider.ConsumeBool());\r\n+                if (!res) return;\r\n+                mtx = CMutableTransaction(*(res->tx));\r\n+            },\r\n+            [&] {\r\n+                // Occasionally, creating a random Transaction for Fuzzing.\r\n+                auto new_mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\r\n+                if (!new_mtx) return;\r\n+                mtx = *new_mtx;\r\n+            },\r\n+            [&] {\r\n+                LOCK(wallet.cs_wallet);\r\n+                if (fuzzed_data_provider.ConsumeBool()) {\r\n+                    (void)CalculateMaximumSignedTxSize(CTransaction(mtx), &wallet);\r\n+                } else {\r\n+                    (void)CalculateMaximumSignedTxSize(CTransaction(mtx), &wallet, &coin_control);\r\n+                }\r\n+            },\r\n+            [&] {\r\n+                const CTxOut tx_out{ConsumeMoney(fuzzed_data_provider), ConsumeScript(fuzzed_data_provider)};\r\n+                CalculateMaximumSignedInputSize(tx_out, &wallet, &coin_control);\r\n+            },\r\n+            [&] {\r\n+                CAmount fee;\r\n+                std::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, mtx.vout.size()), fuzzed_data_provider.ConsumeIntegral<int>()};\r\n+                int change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n+                bilingual_str error;\r\n+                std::set<int> setSubtractFeeFromOutputs;\r\n+                for (size_t i = 0; i < mtx.vout.size(); ++i) {\r\n+                    if (fuzzed_data_provider.ConsumeBool()) {\r\n+                        setSubtractFeeFromOutputs.insert(i);\r\n+                    }\r\n+                }\r\n+                FundTransaction(wallet, mtx, fee, change_pos, error, false, setSubtractFeeFromOutputs, coin_control);\r\n+            });\r\n+    }\r\n+\r\n+    // Plays with the `CoinsResult`\r\n+    CoinsResult wallet_coins;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 50)\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 207,
      "original_position": 207,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems like this should be a separate fuzz target?",
      "created_at": "2023-12-06T10:50:27Z",
      "updated_at": "2023-12-06T10:51:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1417093434",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1417093434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": 205,
      "original_start_line": 205,
      "start_side": "RIGHT",
      "line": 207,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427877760",
      "pull_request_review_id": 1783688791,
      "id": 1427877760,
      "node_id": "PRRC_kwDOABII585VG6-A",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton()\r\n+    {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton()\r\n+    {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet()\r\n+    {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r\n+\r\n+        // This is placed here because Available Coins will never be updated while fuzzing.\r\n+        LOCK(wallet->cs_wallet);\r\n+        available_coins = AvailableCoins(*wallet);\r\n+    }\r\n+\r\n+    std::unique_ptr<CWallet> wallet;\r\n+    CoinsResult available_coins;\r\n+};\r\n+\r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins)\r\n+{\r\n+    CCoinControl new_coin_control;\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        const CTxDestination tx_destination{ConsumeTxDestination(fuzzed_data_provider)};\r\n+        new_coin_control.destChange = tx_destination;\r\n+    }\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_change_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\r\n+    }\r\n+    new_coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_allow_other_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n+    }\r\n+    new_coin_control.m_signal_bip125_rbf = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_avoid_partial_spends = fuzzed_data_provider.ConsumeBool();\r\n+\r\n+    // Taking a random sub-sequence from available coins.\r\n+    for (const COutput& coin : coins) {\r\n+        if (fuzzed_data_provider.ConsumeBool()) {\r\n+            new_coin_control.Select(coin.outpoint);\r\n+        }\r\n+    }\r\n+\r\n+    // Occasionally, some random `CCoutPoint` are also selected.\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        for (int i = 0; i < 10; ++i) {\r\n+            std::optional<COutPoint> optional_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\r\n+            if (!optional_out_point) {\r\n+                continue;\r\n+            }\r\n+            new_coin_control.Select(*optional_out_point);\r\n+        }\r\n+    }\r\n+    return new_coin_control;\r\n+}\r\n+\r\n+void initialize_spend()\r\n+{\r\n+    static auto testing_setup = MakeNoLogFileContext<TestChain100Setup>();\r\n+    g_setup = testing_setup.get();\r\n+\r\n+    // Add 50 spendable UTXO, 50 BTC each, to the wallet (total balance 5000 BTC)\r\n+    // Because none of the UTXO will ever be used (marked as spent), mining this many should be sufficient.\r\n+    for (int i = 0; i < 50; ++i) {\r\n+        g_setup->CreateAndProcessBlock({}, GetScriptForRawPubKey(g_setup->coinbaseKey.GetPubKey()));\r\n+    }\r\n+}\r\n+\r\n+FUZZ_TARGET(spend, .init = initialize_spend)\r\n+{\r\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n+    CWallet& wallet = WalletSingleton::GetInstance().GetWallet();\r\n+    CoinsResult& available_coins = WalletSingleton::GetInstance().GetCoins();\r\n+\r\n+    // Asserting if the `wallet` has no funds.\r\n+    std::vector<COutput> coins = available_coins.All();\r\n+    assert(!coins.empty());\r\n+\r\n+    CCoinControl coin_control;\r\n+    CMutableTransaction mtx;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 505)\r\n+    {\r\n+        CallOneOf(\r\n+            fuzzed_data_provider,\r\n+            [&] {\r\n+                // Creates a new `CoinControl`.\r\n+                coin_control = GetNewCoinControl(fuzzed_data_provider, wallet, coins);\r\n+            },\r\n+            [&] {\r\n+                // Creates a new Transaction using `CreateTransaction`.\r\n+                std::vector<CRecipient> recipients;\r\n+                unsigned int recipients_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 100);\r\n+                for (unsigned int i = 0; i < recipients_size; ++i) {\r\n+                    recipients.push_back({/*dest=*/ConsumeTxDestination(fuzzed_data_provider),\r\n+                                          /*nAmount=*/ConsumeMoney(fuzzed_data_provider),\r\n+                                          /*fSubtractFeeFromAmount=*/fuzzed_data_provider.ConsumeBool()});\r\n+                }\r\n+                // Equally likely to choose one of the three values.\r\n+                std::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, recipients_size), fuzzed_data_provider.ConsumeIntegral<int>()};\r\n+                int change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n+\r\n+                auto res = CreateTransaction(wallet, recipients, change_pos, coin_control, /*sign=*/fuzzed_data_provider.ConsumeBool());\r\n+                if (!res) return;\r\n+                mtx = CMutableTransaction(*(res->tx));\r\n+            },\r\n+            [&] {\r\n+                // Occasionally, creating a random Transaction for Fuzzing.\r\n+                auto new_mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\r\n+                if (!new_mtx) return;\r\n+                mtx = *new_mtx;\r\n+            },\r\n+            [&] {\r\n+                LOCK(wallet.cs_wallet);\r\n+                if (fuzzed_data_provider.ConsumeBool()) {\r\n+                    (void)CalculateMaximumSignedTxSize(CTransaction(mtx), &wallet);\r\n+                } else {\r\n+                    (void)CalculateMaximumSignedTxSize(CTransaction(mtx), &wallet, &coin_control);\r\n+                }\r\n+            },\r\n+            [&] {\r\n+                const CTxOut tx_out{ConsumeMoney(fuzzed_data_provider), ConsumeScript(fuzzed_data_provider)};\r\n+                CalculateMaximumSignedInputSize(tx_out, &wallet, &coin_control);\r\n+            },\r\n+            [&] {\r\n+                CAmount fee;\r\n+                std::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, mtx.vout.size()), fuzzed_data_provider.ConsumeIntegral<int>()};\r\n+                int change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n+                bilingual_str error;\r\n+                std::set<int> setSubtractFeeFromOutputs;\r\n+                for (size_t i = 0; i < mtx.vout.size(); ++i) {\r\n+                    if (fuzzed_data_provider.ConsumeBool()) {\r\n+                        setSubtractFeeFromOutputs.insert(i);\r\n+                    }\r\n+                }\r\n+                FundTransaction(wallet, mtx, fee, change_pos, error, false, setSubtractFeeFromOutputs, coin_control);\r\n+            });\r\n+    }\r\n+\r\n+    // Plays with the `CoinsResult`\r\n+    CoinsResult wallet_coins;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 50)\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 207,
      "original_position": 207,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": 1417093434,
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, I can create a separate PR for this immediately. Once it's ready, we can get it merged, and I can continue working on this. Thanks!",
      "created_at": "2023-12-15T11:37:57Z",
      "updated_at": "2023-12-15T11:38:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1427877760",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1427877760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": 205,
      "original_start_line": 205,
      "start_side": "RIGHT",
      "line": 207,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446205449",
      "pull_request_review_id": 1811345295,
      "id": 1446205449,
      "node_id": "PRRC_kwDOABII585WM1gJ",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": 1390888668,
      "user": {
        "login": "Ayush170-Future",
        "id": 76209654,
        "node_id": "MDQ6VXNlcjc2MjA5NjU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/76209654?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ayush170-Future",
        "html_url": "https://github.com/Ayush170-Future",
        "followers_url": "https://api.github.com/users/Ayush170-Future/followers",
        "following_url": "https://api.github.com/users/Ayush170-Future/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ayush170-Future/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ayush170-Future/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ayush170-Future/subscriptions",
        "organizations_url": "https://api.github.com/users/Ayush170-Future/orgs",
        "repos_url": "https://api.github.com/users/Ayush170-Future/repos",
        "events_url": "https://api.github.com/users/Ayush170-Future/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ayush170-Future/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've thought about it, and I think a global Singleton might not be the smartest way to save resources. The `wallet` object definitely mutates during execution. I think I've to remove the Singleton pattern, but doing so will make the file very slow, as creating the `Descriptor Wallet` is really time-consuming.",
      "created_at": "2024-01-09T15:02:18Z",
      "updated_at": "2024-01-09T15:19:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1446205449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446205449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569162422",
      "pull_request_review_id": 2006620250,
      "id": 1569162422,
      "node_id": "PRRC_kwDOABII585dh4S2",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton()\r\n+    {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton()\r\n+    {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet()\r\n+    {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r\n+\r\n+        // This is placed here because Available Coins will never be updated while fuzzing.\r\n+        LOCK(wallet->cs_wallet);\r\n+        available_coins = AvailableCoins(*wallet);\r\n+    }\r\n+\r\n+    std::unique_ptr<CWallet> wallet;\r\n+    CoinsResult available_coins;\r\n+};\r\n+\r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins)\r\n+{\r\n+    CCoinControl new_coin_control;\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        const CTxDestination tx_destination{ConsumeTxDestination(fuzzed_data_provider)};\r\n+        new_coin_control.destChange = tx_destination;\r\n+    }\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_change_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\r\n+    }\r\n+    new_coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_allow_other_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n+    }\r\n+    new_coin_control.m_signal_bip125_rbf = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_avoid_partial_spends = fuzzed_data_provider.ConsumeBool();\r\n+\r\n+    // Taking a random sub-sequence from available coins.\r\n+    for (const COutput& coin : coins) {\r\n+        if (fuzzed_data_provider.ConsumeBool()) {\r\n+            new_coin_control.Select(coin.outpoint);\r\n+        }\r\n+    }\r\n+\r\n+    // Occasionally, some random `CCoutPoint` are also selected.\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        for (int i = 0; i < 10; ++i) {\r\n+            std::optional<COutPoint> optional_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\r\n+            if (!optional_out_point) {\r\n+                continue;\r\n+            }\r\n+            new_coin_control.Select(*optional_out_point);\r\n+        }\r\n+    }\r\n+    return new_coin_control;\r\n+}\r\n+\r\n+void initialize_spend()\r\n+{\r\n+    static auto testing_setup = MakeNoLogFileContext<TestChain100Setup>();\r\n+    g_setup = testing_setup.get();\r\n+\r\n+    // Add 50 spendable UTXO, 50 BTC each, to the wallet (total balance 5000 BTC)\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 126,
      "original_position": 126,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This comment is inconsistent:\r\n\r\n```suggestion\r\n    // Add 50 spendable UTXO, 50 BTC each, to the wallet (total balance 2500 BTC)\r\n```\r\n\r\nA variable set of available coins might be desirable. Smaller amounts could for example trigger behavior regarding negative effective value or having insufficient funds to create a transaction.",
      "created_at": "2024-04-17T16:53:28Z",
      "updated_at": "2024-04-17T17:03:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1569162422",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569162422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569167950",
      "pull_request_review_id": 2006620250,
      "id": 1569167950,
      "node_id": "PRRC_kwDOABII585dh5pO",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": 1390888668,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If you removed the Singleton, did you perhaps not push the latest state of this PR?",
      "created_at": "2024-04-17T16:58:10Z",
      "updated_at": "2024-04-17T17:03:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1569167950",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569167950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569173834",
      "pull_request_review_id": 2006620250,
      "id": 1569173834,
      "node_id": "PRRC_kwDOABII585dh7FK",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton()\r\n+    {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton()\r\n+    {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet()\r\n+    {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r\n+\r\n+        // This is placed here because Available Coins will never be updated while fuzzing.\r\n+        LOCK(wallet->cs_wallet);\r\n+        available_coins = AvailableCoins(*wallet);\r\n+    }\r\n+\r\n+    std::unique_ptr<CWallet> wallet;\r\n+    CoinsResult available_coins;\r\n+};\r\n+\r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins)\r\n+{\r\n+    CCoinControl new_coin_control;\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        const CTxDestination tx_destination{ConsumeTxDestination(fuzzed_data_provider)};\r\n+        new_coin_control.destChange = tx_destination;\r\n+    }\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_change_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\r\n+    }\r\n+    new_coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_allow_other_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n+    }\r\n+    new_coin_control.m_signal_bip125_rbf = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_avoid_partial_spends = fuzzed_data_provider.ConsumeBool();\r\n+\r\n+    // Taking a random sub-sequence from available coins.\r\n+    for (const COutput& coin : coins) {\r\n+        if (fuzzed_data_provider.ConsumeBool()) {\r\n+            new_coin_control.Select(coin.outpoint);\r\n+        }\r\n+    }\r\n+\r\n+    // Occasionally, some random `CCoutPoint` are also selected.\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        for (int i = 0; i < 10; ++i) {\r\n+            std::optional<COutPoint> optional_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\r\n+            if (!optional_out_point) {\r\n+                continue;\r\n+            }\r\n+            new_coin_control.Select(*optional_out_point);\r\n+        }\r\n+    }\r\n+    return new_coin_control;\r\n+}\r\n+\r\n+void initialize_spend()\r\n+{\r\n+    static auto testing_setup = MakeNoLogFileContext<TestChain100Setup>();\r\n+    g_setup = testing_setup.get();\r\n+\r\n+    // Add 50 spendable UTXO, 50 BTC each, to the wallet (total balance 5000 BTC)\r\n+    // Because none of the UTXO will ever be used (marked as spent), mining this many should be sufficient.\r\n+    for (int i = 0; i < 50; ++i) {\r\n+        g_setup->CreateAndProcessBlock({}, GetScriptForRawPubKey(g_setup->coinbaseKey.GetPubKey()));\r\n+    }\r\n+}\r\n+\r\n+FUZZ_TARGET(spend, .init = initialize_spend)\r\n+{\r\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\r\n+    CWallet& wallet = WalletSingleton::GetInstance().GetWallet();\r\n+    CoinsResult& available_coins = WalletSingleton::GetInstance().GetCoins();\r\n+\r\n+    // Asserting if the `wallet` has no funds.\r\n+    std::vector<COutput> coins = available_coins.All();\r\n+    assert(!coins.empty());\r\n+\r\n+    CCoinControl coin_control;\r\n+    CMutableTransaction mtx;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 505)\r\n+    {\r\n+        CallOneOf(\r\n+            fuzzed_data_provider,\r\n+            [&] {\r\n+                // Creates a new `CoinControl`.\r\n+                coin_control = GetNewCoinControl(fuzzed_data_provider, wallet, coins);\r\n+            },\r\n+            [&] {\r\n+                // Creates a new Transaction using `CreateTransaction`.\r\n+                std::vector<CRecipient> recipients;\r\n+                unsigned int recipients_size = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, 100);\r\n+                for (unsigned int i = 0; i < recipients_size; ++i) {\r\n+                    recipients.push_back({/*dest=*/ConsumeTxDestination(fuzzed_data_provider),\r\n+                                          /*nAmount=*/ConsumeMoney(fuzzed_data_provider),\r\n+                                          /*fSubtractFeeFromAmount=*/fuzzed_data_provider.ConsumeBool()});\r\n+                }\r\n+                // Equally likely to choose one of the three values.\r\n+                std::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, recipients_size), fuzzed_data_provider.ConsumeIntegral<int>()};\r\n+                int change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n+\r\n+                auto res = CreateTransaction(wallet, recipients, change_pos, coin_control, /*sign=*/fuzzed_data_provider.ConsumeBool());\r\n+                if (!res) return;\r\n+                mtx = CMutableTransaction(*(res->tx));\r\n+            },\r\n+            [&] {\r\n+                // Occasionally, creating a random Transaction for Fuzzing.\r\n+                auto new_mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\r\n+                if (!new_mtx) return;\r\n+                mtx = *new_mtx;\r\n+            },\r\n+            [&] {\r\n+                LOCK(wallet.cs_wallet);\r\n+                if (fuzzed_data_provider.ConsumeBool()) {\r\n+                    (void)CalculateMaximumSignedTxSize(CTransaction(mtx), &wallet);\r\n+                } else {\r\n+                    (void)CalculateMaximumSignedTxSize(CTransaction(mtx), &wallet, &coin_control);\r\n+                }\r\n+            },\r\n+            [&] {\r\n+                const CTxOut tx_out{ConsumeMoney(fuzzed_data_provider), ConsumeScript(fuzzed_data_provider)};\r\n+                CalculateMaximumSignedInputSize(tx_out, &wallet, &coin_control);\r\n+            },\r\n+            [&] {\r\n+                CAmount fee;\r\n+                std::vector<int> random_positions = {-1, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, mtx.vout.size()), fuzzed_data_provider.ConsumeIntegral<int>()};\r\n+                int change_pos = PickValue(fuzzed_data_provider, random_positions);\r\n+                bilingual_str error;\r\n+                std::set<int> setSubtractFeeFromOutputs;\r\n+                for (size_t i = 0; i < mtx.vout.size(); ++i) {\r\n+                    if (fuzzed_data_provider.ConsumeBool()) {\r\n+                        setSubtractFeeFromOutputs.insert(i);\r\n+                    }\r\n+                }\r\n+                FundTransaction(wallet, mtx, fee, change_pos, error, false, setSubtractFeeFromOutputs, coin_control);\r\n+            });\r\n+    }\r\n+\r\n+    // Plays with the `CoinsResult`\r\n+    CoinsResult wallet_coins;\r\n+\r\n+    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 50)\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 207,
      "original_position": 207,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": 1417093434,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree wtih @maflcko, since the seeds are created per target, it would be better to have a separate target for `CoinsResult`.",
      "created_at": "2024-04-17T17:02:35Z",
      "updated_at": "2024-04-17T17:03:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1569173834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569173834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": 205,
      "original_start_line": 205,
      "start_side": "RIGHT",
      "line": 207,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569435685",
      "pull_request_review_id": 2007011057,
      "id": 1569435685,
      "node_id": "PRRC_kwDOABII585di7Al",
      "diff_hunk": "@@ -0,0 +1,259 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\r\n+// Distributed under the MIT software license, see the accompanying\r\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n+\r\n+#include <key_io.h>\r\n+#include <outputtype.h>\r\n+#include <script/script.h>\r\n+#include <test/fuzz/FuzzedDataProvider.h>\r\n+#include <test/fuzz/fuzz.h>\r\n+#include <test/fuzz/util.h>\r\n+#include <test/util/setup_common.h>\r\n+#include <validation.h>\r\n+#include <wallet/coincontrol.h>\r\n+#include <wallet/spend.h>\r\n+#include <wallet/test/util.h>\r\n+#include <wallet/wallet.h>\r\n+\r\n+namespace wallet {\r\n+namespace {\r\n+\r\n+TestChain100Setup* g_setup;\r\n+\r\n+/**\r\n+ * Singleton wallet class ensures that only one\r\n+ * instance of CWallet is created and reused as required.\r\n+ * This increases Fuzzing efficiency by reducing the expense\r\n+ * of creating a new `Descriptor Wallet` each time and deletes\r\n+ * the pointer safely using the destructor.\r\n+ */\r\n+class WalletSingleton\r\n+{\r\n+public:\r\n+    static WalletSingleton& GetInstance()\r\n+    {\r\n+        static WalletSingleton instance;\r\n+        return instance;\r\n+    }\r\n+\r\n+    CWallet& GetWallet()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return *wallet;\r\n+    }\r\n+    CoinsResult& GetCoins()\r\n+    {\r\n+        if (!wallet) {\r\n+            InitializeWallet();\r\n+        }\r\n+        return available_coins;\r\n+    }\r\n+\r\n+private:\r\n+    WalletSingleton()\r\n+    {\r\n+        InitializeWallet();\r\n+    }\r\n+\r\n+    ~WalletSingleton()\r\n+    {\r\n+        wallet.reset();\r\n+        available_coins.coins.clear();\r\n+    }\r\n+\r\n+    WalletSingleton(const WalletSingleton&) = delete;\r\n+    WalletSingleton& operator=(const WalletSingleton&) = delete;\r\n+\r\n+    void InitializeWallet()\r\n+    {\r\n+        auto& node{g_setup->m_node};\r\n+        wallet = CreateSyncedWallet(*node.chain, WITH_LOCK(Assert(node.chainman)->GetMutex(), return node.chainman->ActiveChain()), g_setup->coinbaseKey);\r\n+\r\n+        // This is placed here because Available Coins will never be updated while fuzzing.\r\n+        LOCK(wallet->cs_wallet);\r\n+        available_coins = AvailableCoins(*wallet);\r\n+    }\r\n+\r\n+    std::unique_ptr<CWallet> wallet;\r\n+    CoinsResult available_coins;\r\n+};\r\n+\r\n+CCoinControl GetNewCoinControl(FuzzedDataProvider& fuzzed_data_provider, CWallet& wallet, std::vector<COutput>& coins)\r\n+{\r\n+    CCoinControl new_coin_control;\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        const CTxDestination tx_destination{ConsumeTxDestination(fuzzed_data_provider)};\r\n+        new_coin_control.destChange = tx_destination;\r\n+    }\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_change_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\r\n+    }\r\n+    new_coin_control.m_include_unsafe_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_allow_other_inputs = fuzzed_data_provider.ConsumeBool();\r\n+    if (fuzzed_data_provider.ConsumeBool()) {\r\n+        new_coin_control.m_feerate = CFeeRate{ConsumeMoney(fuzzed_data_provider, /*max=*/COIN)};\r\n+    }\r\n+    new_coin_control.m_signal_bip125_rbf = fuzzed_data_provider.ConsumeBool();\r\n+    new_coin_control.m_avoid_partial_spends = fuzzed_data_provider.ConsumeBool();\r\n+\r\n+    // Taking a random sub-sequence from available coins.\r\n+    for (const COutput& coin : coins) {\r\n+        if (fuzzed_data_provider.ConsumeBool()) {\r\n+            new_coin_control.Select(coin.outpoint);\r\n+        }\r\n+    }\r\n+\r\n+    // Occasionally, some random `CCoutPoint` are also selected.\r",
      "path": "src/wallet/test/fuzz/spend.cpp",
      "position": 108,
      "original_position": 108,
      "commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "original_commit_id": "17a59053efb7ab2ec55ceb3aaa2288ecef016eb9",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    // Occasionally, some random `COutPoint` are also selected.\r\n\r\n```",
      "created_at": "2024-04-17T19:54:28Z",
      "updated_at": "2024-04-17T19:54:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28236#discussion_r1569435685",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569435685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28236"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 108,
      "original_line": 108,
      "side": "RIGHT"
    }
  ]
}