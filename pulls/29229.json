{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229",
    "id": 1674736258,
    "node_id": "PR_kwDOABII585j0nKC",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/29229",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/29229.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/29229.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/f9b134e2b2534aac21a9df43cad0c6283dd78be9",
    "number": 29229,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Make (Read/Write)BinaryFile work with char vector, use AutoFile",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "ReadBinaryFile and WriteBinaryFile current work with `std::string`. This PR adds support for `std::vector<unsigned char>>`.\r\n\r\nIt also uses `AutoFile` now.\r\n\r\nThis is [update: probably _not_] used in #28983 to store the static key for the Template Provider, in a manner very similar to how we store the Tor v3 and i2p key. However it made no sense to me to store a `CKey` as plain text. See commit \"Persist static key for Template Provider\" for how it's used.\r\n\r\nIt uses a template and leverages the fact that both `std::string` and `std::vector<unsigned char>>` have an `insert()` method that can take a char array.\r\n\r\nThe `unsigned char` support is not used in this PR, but tests do cover it.",
    "labels": [
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2024-01-11T15:10:56Z",
    "updated_at": "2025-04-09T07:45:02Z",
    "closed_at": "2024-04-09T15:29:38Z",
    "mergeable_state": "unknown",
    "merged": false,
    "merge_commit_sha": "2513074e380732c25b42867eb55bd8df327a9660",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "Sjors:2024/01/rw-binary-file",
      "ref": "2024/01/rw-binary-file",
      "sha": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 92390696,
        "node_id": "MDEwOlJlcG9zaXRvcnk5MjM5MDY5Ng==",
        "name": "bitcoin",
        "full_name": "Sjors/bitcoin",
        "owner": {
          "login": "Sjors",
          "id": 10217,
          "node_id": "MDQ6VXNlcjEwMjE3",
          "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Sjors",
          "html_url": "https://github.com/Sjors",
          "followers_url": "https://api.github.com/users/Sjors/followers",
          "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
          "organizations_url": "https://api.github.com/users/Sjors/orgs",
          "repos_url": "https://api.github.com/users/Sjors/repos",
          "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Sjors/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Sjors/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Sjors/bitcoin",
        "archive_url": "https://api.github.com/repos/Sjors/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Sjors/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Sjors/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Sjors/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Sjors/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Sjors/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Sjors/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Sjors/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Sjors/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Sjors/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Sjors/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Sjors/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Sjors/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Sjors/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Sjors/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Sjors/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Sjors/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Sjors/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Sjors/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Sjors/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Sjors/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Sjors/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Sjors/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Sjors/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Sjors/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Sjors/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Sjors/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Sjors/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Sjors/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Sjors/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Sjors/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Sjors/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Sjors/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Sjors/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Sjors/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Sjors/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Sjors/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Sjors/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Sjors/bitcoin/hooks",
        "svn_url": "https://github.com/Sjors/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 13,
        "watchers_count": 13,
        "size": 260974,
        "default_branch": "sv2",
        "open_issues_count": 13,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": false,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-08T18:50:39Z",
        "created_at": "2017-05-25T10:05:54Z",
        "updated_at": "2025-04-08T18:37:39Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "651fb034d85eb5db561bfd24b74f7271417defa5",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37016,
        "stargazers_count": 82823,
        "watchers_count": 82823,
        "size": 279446,
        "default_branch": "master",
        "open_issues_count": 695,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-08T21:27:02Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-04-09T06:17:47Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 138,
    "deletions": 93,
    "changed_files": 7,
    "commits": 1,
    "review_comments": 26,
    "comments": 20
  },
  "events": [
    {
      "event": "commented",
      "id": 1887384915,
      "node_id": "IC_kwDOABII585wfzVT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1887384915",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T15:11:00Z",
      "updated_at": "2024-04-02T02:19:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/29229).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1887384915",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "commented",
      "id": 1887392642,
      "node_id": "IC_kwDOABII585wf1OC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1887392642",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T15:15:16Z",
      "updated_at": "2024-01-11T15:15:16Z",
      "author_association": "MEMBER",
      "body": "cc @vasild ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1887392642",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "mentioned",
      "id": 11458003247,
      "node_id": "MEE_lADOABII5857y0tezwAAAAKq80Ev",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11458003247",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T15:15:16Z"
    },
    {
      "event": "subscribed",
      "id": 11458003273,
      "node_id": "SE_lADOABII5857y0tezwAAAAKq80FJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11458003273",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T15:15:17Z"
    },
    {
      "event": "reviewed",
      "id": 1815862283,
      "node_id": "PRR_kwDOABII585sO9wL",
      "url": null,
      "actor": null,
      "commit_id": "634f29f2efa96263a2b108b9b5532d19a1d64e48",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#pullrequestreview-1815862283",
      "submitted_at": "2024-01-11T15:26:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11458459273,
      "node_id": "HRFPE_lADOABII5857y0tezwAAAAKq-jaJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11458459273",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9b7be63fd17bd506a7ec00d6d6a859a31f21d55d",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/9b7be63fd17bd506a7ec00d6d6a859a31f21d55d",
      "created_at": "2024-01-11T15:51:49Z"
    },
    {
      "event": "commented",
      "id": 1887460716,
      "node_id": "IC_kwDOABII585wgF1s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1887460716",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T15:51:52Z",
      "updated_at": "2024-01-11T16:19:24Z",
      "author_association": "MEMBER",
      "body": "Added `extern template ...` to the header to prevent \"implicit instantiation of undefined template\" error on the \"no wallet, libbitcoinkernel\" CI (https://cirrus-ci.com/task/6254856449556480)\r\n\r\nThat error doesn't happen on my machine running macOS clang 15, nor on Ubuntu gcc 13.2 - maybe a specific configure warning flag?\r\n\r\nUpdate: that didn't work, still not sure how to reproduce.\r\n\r\n```\r\n util/readwritefile.cpp:23:84: error: implicit instantiation of undefined template 'std::vector<unsigned char>'\r\n        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - output.size()), f);\r\n```",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1887460716",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "labeled",
      "id": 11458460690,
      "node_id": "LE_lADOABII5857y0tezwAAAAKq-jwS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11458460690",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T15:51:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1887460825,
      "node_id": "IC_kwDOABII585wgF3Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1887460825",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-11T15:51:55Z",
      "updated_at": "2024-01-11T15:51:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/20390186031</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1887460825",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11465972232,
      "node_id": "HRFPE_lADOABII5857y0tezwAAAAKrbNoI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11465972232",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "18d18ac7e25a5767122bbb713425ccc15c1f652e",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/18d18ac7e25a5767122bbb713425ccc15c1f652e",
      "created_at": "2024-01-12T08:20:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11466034721,
      "node_id": "HRFPE_lADOABII5857y0tezwAAAAKrbc4h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11466034721",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "257b14c6611e73bb98226be3c3426c8d9bea148b",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/257b14c6611e73bb98226be3c3426c8d9bea148b",
      "created_at": "2024-01-12T08:26:14Z"
    },
    {
      "event": "commented",
      "id": 1888644663,
      "node_id": "IC_kwDOABII585wkm43",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888644663",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T08:26:32Z",
      "updated_at": "2024-01-12T08:26:32Z",
      "author_association": "MEMBER",
      "body": "I switched to using `std::optional` as the return type. It happily compiles on my end, we'll see what CI thinks...",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1888644663",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11466166298,
      "node_id": "HRFPE_lADOABII5857y0tezwAAAAKrb9Aa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11466166298",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "21618ea71745fa06136c9e43c7ba281cae8c3dca",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/21618ea71745fa06136c9e43c7ba281cae8c3dca",
      "created_at": "2024-01-12T08:39:06Z"
    },
    {
      "event": "commented",
      "id": 1888672189,
      "node_id": "IC_kwDOABII585wktm9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1888672189",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T08:47:01Z",
      "updated_at": "2024-01-12T08:47:01Z",
      "author_association": "MEMBER",
      "body": "Had to `#include <vector>` to please clang13 (should have included it anyway since it's used).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1888672189",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "unlabeled",
      "id": 11466628222,
      "node_id": "UNLE_lADOABII5857y0tezwAAAAKrdtx-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11466628222",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T09:21:16Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 11483645610,
      "node_id": "LE_lADOABII5857y0tezwAAAAKseoaq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11483645610",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-15T04:56:33Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11490480964,
      "node_id": "HRFPE_lADOABII5857y0tezwAAAAKs4tNE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11490480964",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ac5a83b91f28a1bb2948c576c3796234c17f392f",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/ac5a83b91f28a1bb2948c576c3796234c17f392f",
      "created_at": "2024-01-15T16:52:26Z"
    },
    {
      "event": "unlabeled",
      "id": 11491156582,
      "node_id": "UNLE_lADOABII5857y0tezwAAAAKs7SJm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11491156582",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-15T18:22:44Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1898668856,
      "node_id": "IC_kwDOABII585xK2M4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1898668856",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T15:12:43Z",
      "updated_at": "2024-01-18T15:12:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "> However it made no sense to me to store a `CKey` as plain text\r\n\r\nI guess that by \"plain text\" here you mean `std::string`, right? `std::string` can store arbitrary non-ASCII characters, including `'\\0'`, so it is technically ok to use it for binary data.\r\n\r\nMore relevant in this case is that `CKey` stores sensitive data and takes care to wipe it from memory when freed. In https://github.com/bitcoin/bitcoin/pull/28983 `Read/WriteBinaryData()` is used in a way that defeats that - the sensitive data will be copied to a temporary variable (ordinary `std::vector`) for IO. Can we change `Read/WriteBinaryData()` to operate directly on `CKey` in such a way that data goes directly from `CKey` to the disk?",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1898668856",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "reviewed",
      "id": 1829642426,
      "node_id": "PRR_kwDOABII585tDiC6",
      "url": null,
      "actor": null,
      "commit_id": "ac5a83b91f28a1bb2948c576c3796234c17f392f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#pullrequestreview-1829642426",
      "submitted_at": "2024-01-18T15:13:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
    },
    {
      "event": "commented",
      "id": 1898681016,
      "node_id": "IC_kwDOABII585xK5K4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1898681016",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-18T15:19:11Z",
      "updated_at": "2024-01-18T15:19:11Z",
      "author_association": "MEMBER",
      "body": "> Can we change `Read/WriteBinaryData()` to operate directly on `CKey` in such a way that data goes directly from `CKey` to the disk?\r\n\r\nI haven't looked in detail, but writing bytes to a file can be achieved with one line of code:\r\n\r\n```cpp\r\nCAutoFile{...} << Span{data};",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1898681016",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "commented",
      "id": 1903550684,
      "node_id": "IC_kwDOABII585xdeDc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1903550684",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T09:11:09Z",
      "updated_at": "2024-01-22T09:12:13Z",
      "author_association": "MEMBER",
      "body": "I like the idea of operating on `CKey` directly. I'll try to add that, though not sure how to implement that securely.\r\n\r\nThe keys used in #28983 are not as important as wallet keys, but if we add a generic method to store a `CKey` on disk, then it should do so securely - so that future devs using that function don't shoot themselves in the foot. At least the current `std::vector<unsigned char>>` does not pretend to be secure.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1903550684",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "commented",
      "id": 1903561636,
      "node_id": "IC_kwDOABII585xdguk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1903561636",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T09:15:59Z",
      "updated_at": "2024-01-22T09:15:59Z",
      "author_association": "MEMBER",
      "body": "> I guess that by \"plain text\" here you mean `std::string`, right? `std::string` can store arbitrary non-ASCII characters, including `'\\0'`, so it is technically ok to use it for binary data.\r\n\r\nI think the way `WriteBinaryFile` was initially used with Tor was that we parse the JSON returned by the Tor daemon and store the `PrivateKey` key field (UTF8 encoced?) in a file.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1903561636",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "commented",
      "id": 1903570460,
      "node_id": "IC_kwDOABII585xdi4c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1903570460",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T09:20:46Z",
      "updated_at": "2024-01-22T09:20:46Z",
      "author_association": "MEMBER",
      "body": "> I haven't looked in detail, but writing bytes to a file can be achieved with one line of code\r\n\r\nThat would be a nice simplification. Almost (?) to the point of not needing these helper functions.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1903570460",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "commented",
      "id": 1903992967,
      "node_id": "IC_kwDOABII585xfKCH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1903992967",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-22T13:20:11Z",
      "updated_at": "2024-01-22T13:20:11Z",
      "author_association": "MEMBER",
      "body": "> > I haven't looked in detail, but writing bytes to a file can be achieved with one line of code\r\n> \r\n> That would be a nice simplification. Almost (?) to the point of not needing these helper functions.\r\n\r\nWriteBinaryFile is unused right now either way outside of tests, so I guess this could be removed regardless, as future code can just use the in-line one-liner?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1903992967",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "commented",
      "id": 1905560370,
      "node_id": "IC_kwDOABII585xlIsy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1905560370",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T08:38:10Z",
      "updated_at": "2024-01-23T08:38:10Z",
      "author_association": "MEMBER",
      "body": "@maflcko `WriteBinaryFile` is used by Tor and I2P to cache the service private key.\r\n\r\nBut I might still close this PR if all that's needed is one-liner. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1905560370",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "mentioned",
      "id": 11566739598,
      "node_id": "MEE_lADOABII5857y0tezwAAAAKxbnCO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11566739598",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T08:38:11Z"
    },
    {
      "event": "subscribed",
      "id": 11566739622,
      "node_id": "SE_lADOABII5857y0tezwAAAAKxbnCm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11566739622",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T08:38:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11567672615,
      "node_id": "HRFPE_lADOABII5857y0tezwAAAAKxfK0n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11567672615",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7eb6fa4d57a3ab5a9d5a4f2dda82934a3e78ff98",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/7eb6fa4d57a3ab5a9d5a4f2dda82934a3e78ff98",
      "created_at": "2024-01-23T09:50:26Z"
    },
    {
      "event": "convert_to_draft",
      "id": 11567680600,
      "node_id": "CTDE_lADOABII5857y0tezwAAAAKxfMxY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11567680600",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T09:51:06Z"
    },
    {
      "event": "commented",
      "id": 1905684497,
      "node_id": "IC_kwDOABII585xlnAR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1905684497",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T09:53:08Z",
      "updated_at": "2024-01-23T09:53:08Z",
      "author_association": "MEMBER",
      "body": "It's not quite a one-liner because you still need to open a close a `FILE` and deal with various errors. So instead I modified  `[Write/Write]BinaryFile` to use `AutoFile` instead of `fwrite` / `fread`.\r\n\r\nHowever, `AutoFile{f} >> output` only returns a fraction of the file in the test...",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1905684497",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "commented",
      "id": 1905703500,
      "node_id": "IC_kwDOABII585xlrpM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1905703500",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T10:03:37Z",
      "updated_at": "2024-01-23T10:03:37Z",
      "author_association": "MEMBER",
      "body": "> However, `AutoFile{f} >> output` only returns a fraction of the file in the test...\r\n\r\n(De)serialization of vectors or strings assumes the run-time length to be encoded first. Only arrays and spans assume no length, because it is assumed to be known at compile-time.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1905703500",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11568192895,
      "node_id": "HRFPE_lADOABII5857y0tezwAAAAKxhJ1_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11568192895",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5e82c4566ccee013d713b52a4041956d46376b90",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/5e82c4566ccee013d713b52a4041956d46376b90",
      "created_at": "2024-01-23T10:32:39Z"
    },
    {
      "event": "labeled",
      "id": 11568193707,
      "node_id": "LE_lADOABII5857y0tezwAAAAKxhKCr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11568193707",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T10:32:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1905752383,
      "node_id": "IC_kwDOABII585xl3k_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1905752383",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T10:32:44Z",
      "updated_at": "2024-01-23T10:32:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/20764871422</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1905752383",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "commented",
      "id": 1905760878,
      "node_id": "IC_kwDOABII585xl5pu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1905760878",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T10:37:47Z",
      "updated_at": "2024-01-23T10:40:39Z",
      "author_association": "MEMBER",
      "body": "Ok, fixed that issue by first getting the file size and then resizing the `std::vector` / `std::string`.\r\n\r\nThat doesn't generalise nicely to known-size things like `CKey`. The `maxsize` argument also makes no sense for things with known size. So I might make a separate method for that. Which in turn makes this PR just a refactor with unused, but tested, support for `std::vector<unsigned char>`.\r\n\r\n(this is ready for review even without CKey support, which I'll add in a separate commit and/or PR when I get to it)",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1905760878",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "ready_for_review",
      "id": 11568273899,
      "node_id": "RFRE_lADOABII5857y0tezwAAAAKxhdnr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11568273899",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T10:39:44Z"
    },
    {
      "event": "renamed",
      "id": 11568289079,
      "node_id": "RTE_lADOABII5857y0tezwAAAAKxhhU3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11568289079",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T10:41:03Z",
      "rename": {
        "from": "Make (Read/Write)BinaryFile work with char vector",
        "to": "Make (Read/Write)BinaryFile work with char vector, use AutoFile"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11568338650,
      "node_id": "HRFPE_lADOABII5857y0tezwAAAAKxhtba",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11568338650",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e4d0e3decd662aeded8c03bf9084ba8c0449036e",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/e4d0e3decd662aeded8c03bf9084ba8c0449036e",
      "created_at": "2024-01-23T10:45:18Z"
    },
    {
      "event": "commented",
      "id": 1905800964,
      "node_id": "IC_kwDOABII585xmDcE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1905800964",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T11:01:04Z",
      "updated_at": "2024-01-23T11:05:09Z",
      "author_association": "MEMBER",
      "body": "I tried to find some existing code that could use the `std::vector<unsigned char>` variant. Didn't find it at first glance. It seems we almost always know what size to expect (per object).\r\n\r\nSo that might be a good reason to kill that variant and only support loading an std::string of unknown size for now.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1905800964",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "reviewed",
      "id": 1838537092,
      "node_id": "PRR_kwDOABII585tldmE",
      "url": null,
      "actor": null,
      "commit_id": "e4d0e3decd662aeded8c03bf9084ba8c0449036e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#pullrequestreview-1838537092",
      "submitted_at": "2024-01-23T11:33:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
    },
    {
      "event": "unlabeled",
      "id": 11568950389,
      "node_id": "UNLE_lADOABII5857y0tezwAAAAKxkCx1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11568950389",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T11:40:00Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY5YjEzNGUyYjI1MzRhYWMyMWE5ZGY0M2NhZDBjNjI4M2RkNzhiZTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "tree": {
        "sha": "0b74bc12ad13c9e65ba6173255b668b0cbee6543",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b74bc12ad13c9e65ba6173255b668b0cbee6543"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0b74bc12ad13c9e65ba6173255b668b0cbee6543\nparent 05c4c5a4347018d6d0e81b8f12cf5bdcaa8b4a89\nauthor Sjors Provoost <sjors@sprovoost.nl> 1706012365 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1706012366 +0100\n\nMake (Read/Write)BinaryFile work with char vector\n\nReadBinaryFile and WriteBinaryFile currently work with std::string.\nThis commit adds support for std::vector<unsigned char>>.\n\nIt uses a template and leverages the fact that both std::string and\nstd::vector<unsigned char>> have an insert() method that can take\na char array.\n\nAlso switch to using AutoFile.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmWvrs8ACgkQV/+b28ww\nEAmPwA//bVdPdhK3aP33gWiOrfvseCZ6nYEbfHGyfxZw0d2HaFgJFY1mpv5ls5dr\nZMuwhwxUyKg6dbJlgkK0G5eOybzAVHqoR43/idoJJjyh7Ug93qTswP7siMojYdng\nrcutnu63qVcAoVz2lzbrDfU0FrrK4zfQMhVcRZPBl83Ksy9NaC3BfUuaIN3y5iia\n6R7qoDCN4D7//pKs57iuV/VFUNqecwB7Vr0TdKW7uy7GnCV/fkzSbuXjoup+ANQP\n1FPcLHbXolMCwmqm6Q9RAPYwXY2QpqP8IoNyVvt8YAQ5QVApTtXw4EcEdtncpl1f\nkYN+njAlfzwVdRdmlnG33kKIzM5JDtut3VDwgzTecWWHgxkC3wkGj39OBFFkOLno\ngkdxj4E5I+2BsiOrc/MmkEQqjTCJhmTjkKo2yVrqLGNxZB7GPDzEwP5aeBmS+9hM\nRSTVxNFFUW2HPZ0zCNzfC7NTkEMt/k/j0MahtaKUhBG//d+nGctZmLpu2OoH4oDO\n/6rzbkSqdeCv6iVggKguNIK9uulpjoe873698EemuUG9tswT++9alMvfHoi/CMKB\nyrQc9oAm8VskXzoVeVRc6vfnW35qVTHa97JilKJSc7LcBNVXAwyR+xWG54OL9zbB\n46VUxUMfQiZlJ5Vd9uf+oON3gpcmagpC8o8kG0mMS9V9kSmgjwE=\n=sJvt\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05c4c5a4347018d6d0e81b8f12cf5bdcaa8b4a89",
          "sha": "05c4c5a4347018d6d0e81b8f12cf5bdcaa8b4a89",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/05c4c5a4347018d6d0e81b8f12cf5bdcaa8b4a89"
        }
      ],
      "message": "Make (Read/Write)BinaryFile work with char vector\n\nReadBinaryFile and WriteBinaryFile currently work with std::string.\nThis commit adds support for std::vector<unsigned char>>.\n\nIt uses a template and leverages the fact that both std::string and\nstd::vector<unsigned char>> have an insert() method that can take\na char array.\n\nAlso switch to using AutoFile.",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2024-01-23T12:19:26Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2024-01-23T12:19:25Z"
      },
      "sha": "f9b134e2b2534aac21a9df43cad0c6283dd78be9"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11569516799,
      "node_id": "HRFPE_lADOABII5857y0tezwAAAAKxmND_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11569516799",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "created_at": "2024-01-23T12:19:46Z"
    },
    {
      "event": "commented",
      "id": 1906105122,
      "node_id": "IC_kwDOABII585xnNsi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1906105122",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-23T13:52:18Z",
      "updated_at": "2024-01-23T13:53:21Z",
      "author_association": "MEMBER",
      "body": "I opened #29295 for `CKey`.\r\n\r\nI also refactored #28983 to use AutoFile directly, see https://github.com/Sjors/bitcoin/pull/32. So I no longer need this PR myself, but happy to continue it.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-1906105122",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "reviewed",
      "id": 1839138436,
      "node_id": "PRR_kwDOABII585tnwaE",
      "url": null,
      "actor": null,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#pullrequestreview-1839138436",
      "submitted_at": "2024-01-23T15:50:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
    },
    {
      "event": "labeled",
      "id": 11589311474,
      "node_id": "LE_lADOABII5857y0tezwAAAAKyxtvy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11589311474",
      "actor": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-24T20:38:22Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 2045487138,
      "node_id": "IC_kwDOABII585566gi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2045487138",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-09T15:29:38Z",
      "updated_at": "2024-04-09T15:29:38Z",
      "author_association": "MEMBER",
      "body": "The PR didn't seem to attract much attention in the past. Also, the issue seems not important enough right now to keep it sitting around idle in the list of open PRs.\r\n\r\nClosing due to lack of interest.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#issuecomment-2045487138",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29229"
    },
    {
      "event": "closed",
      "id": 12408909602,
      "node_id": "CE_lADOABII5857y0tezwAAAALjoO8i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12408909602",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-09T15:29:38Z"
    },
    {
      "event": "locked",
      "id": 17183793230,
      "node_id": "LOE_lADOABII5857y0tezwAAAAQAO-BO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17183793230",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-09T07:45:02Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449027121",
      "pull_request_review_id": 1815862283,
      "id": 1449027121,
      "node_id": "PRRC_kwDOABII585WXmYx",
      "diff_hunk": "@@ -11,18 +11,24 @@\n #include <string>\n #include <utility>\n \n-/** Read full contents of a file and return them in a std::string.\n- * Returns a pair <status, string>.\n- * If an error occurred, status will be false, otherwise status will be true and the data will be returned in string.\n+/**\n+ * Read full contents of a file and return one of the following formats:\n+ * 1. std::vector<unsigned char>\n+ * 2. std::string\n  *\n- * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n- *         (with len > maxsize) will be returned.\n+ * @param[in] filename Filename. Returns false it doesn't exist.\n+ * @param[out] output  Result\n+ * @param[in] maxsize  Puts a maximum size limit on the file that is read. If the file\n+ *                 is larger than this, truncated data (with len > maxsize) will be returned.\n+ * @return true if successful, false if an error occured.\n  */\n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max());\n+template <typename T>\n+bool ReadBinaryFile(const fs::path& filename, T& output, size_t maxsize=std::numeric_limits<size_t>::max());",
      "path": "src/util/readwritefile.h",
      "position": null,
      "original_position": 22,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "634f29f2efa96263a2b108b9b5532d19a1d64e48",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If you change the return type, why not use `std::optional`? Otherwise, it seems better to keep it untouched?",
      "created_at": "2024-01-11T15:26:16Z",
      "updated_at": "2024-01-11T15:26:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1449027121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449027121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449031987",
      "pull_request_review_id": 1815870327,
      "id": 1449031987,
      "node_id": "PRRC_kwDOABII585WXnkz",
      "diff_hunk": "@@ -11,18 +11,24 @@\n #include <string>\n #include <utility>\n \n-/** Read full contents of a file and return them in a std::string.\n- * Returns a pair <status, string>.\n- * If an error occurred, status will be false, otherwise status will be true and the data will be returned in string.\n+/**\n+ * Read full contents of a file and return one of the following formats:\n+ * 1. std::vector<unsigned char>\n+ * 2. std::string\n  *\n- * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n- *         (with len > maxsize) will be returned.\n+ * @param[in] filename Filename. Returns false it doesn't exist.\n+ * @param[out] output  Result\n+ * @param[in] maxsize  Puts a maximum size limit on the file that is read. If the file\n+ *                 is larger than this, truncated data (with len > maxsize) will be returned.\n+ * @return true if successful, false if an error occured.\n  */\n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max());\n+template <typename T>\n+bool ReadBinaryFile(const fs::path& filename, T& output, size_t maxsize=std::numeric_limits<size_t>::max());",
      "path": "src/util/readwritefile.h",
      "position": null,
      "original_position": 22,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "634f29f2efa96263a2b108b9b5532d19a1d64e48",
      "in_reply_to_id": 1449027121,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I had to change it because AFAIK you can't differentiate functions only by their return type. It's also more readable imo, no more `->first` ... `->second`.\r\n\r\n`std::optional<T>` won't work, unless someone can explain how...",
      "created_at": "2024-01-11T15:29:36Z",
      "updated_at": "2024-01-11T15:29:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1449031987",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449031987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449035810",
      "pull_request_review_id": 1815876640,
      "id": 1449035810,
      "node_id": "PRRC_kwDOABII585WXogi",
      "diff_hunk": "@@ -11,18 +11,24 @@\n #include <string>\n #include <utility>\n \n-/** Read full contents of a file and return them in a std::string.\n- * Returns a pair <status, string>.\n- * If an error occurred, status will be false, otherwise status will be true and the data will be returned in string.\n+/**\n+ * Read full contents of a file and return one of the following formats:\n+ * 1. std::vector<unsigned char>\n+ * 2. std::string\n  *\n- * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n- *         (with len > maxsize) will be returned.\n+ * @param[in] filename Filename. Returns false it doesn't exist.\n+ * @param[out] output  Result\n+ * @param[in] maxsize  Puts a maximum size limit on the file that is read. If the file\n+ *                 is larger than this, truncated data (with len > maxsize) will be returned.\n+ * @return true if successful, false if an error occured.\n  */\n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max());\n+template <typename T>\n+bool ReadBinaryFile(const fs::path& filename, T& output, size_t maxsize=std::numeric_limits<size_t>::max());",
      "path": "src/util/readwritefile.h",
      "position": null,
      "original_position": 22,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "634f29f2efa96263a2b108b9b5532d19a1d64e48",
      "in_reply_to_id": 1449027121,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> However, functions can not be overloaded if they differ only in the return type.\r\n\r\nhttps://www.geeksforgeeks.org/function-overloading-and-return-type-in-cpp/",
      "created_at": "2024-01-11T15:32:09Z",
      "updated_at": "2024-01-11T15:32:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1449035810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449035810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449048489",
      "pull_request_review_id": 1815897161,
      "id": 1449048489,
      "node_id": "PRRC_kwDOABII585WXrmp",
      "diff_hunk": "@@ -11,18 +11,24 @@\n #include <string>\n #include <utility>\n \n-/** Read full contents of a file and return them in a std::string.\n- * Returns a pair <status, string>.\n- * If an error occurred, status will be false, otherwise status will be true and the data will be returned in string.\n+/**\n+ * Read full contents of a file and return one of the following formats:\n+ * 1. std::vector<unsigned char>\n+ * 2. std::string\n  *\n- * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n- *         (with len > maxsize) will be returned.\n+ * @param[in] filename Filename. Returns false it doesn't exist.\n+ * @param[out] output  Result\n+ * @param[in] maxsize  Puts a maximum size limit on the file that is read. If the file\n+ *                 is larger than this, truncated data (with len > maxsize) will be returned.\n+ * @return true if successful, false if an error occured.\n  */\n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max());\n+template <typename T>\n+bool ReadBinaryFile(const fs::path& filename, T& output, size_t maxsize=std::numeric_limits<size_t>::max());",
      "path": "src/util/readwritefile.h",
      "position": null,
      "original_position": 22,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "634f29f2efa96263a2b108b9b5532d19a1d64e48",
      "in_reply_to_id": 1449027121,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> `std::optional<T>` won't work, unless someone can explain how...\r\n\r\nWhat about this:\r\n\r\n```cpp\r\n#include <vector>\r\n#include <optional>\r\n#include <string>\r\n#include <cstdint>\r\n\r\ntemplate<class T>\r\nstd::optional<T> ReadBinaryFile()\r\n{\r\n    return {};\r\n}\r\n \r\nint main()\r\n{\r\n    auto a{ReadBinaryFile<std::string>()};\r\n    auto b{ReadBinaryFile<std::vector<uint8_t>>()};\r\n}",
      "created_at": "2024-01-11T15:41:49Z",
      "updated_at": "2024-01-11T15:41:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1449048489",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449048489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449063112",
      "pull_request_review_id": 1815920975,
      "id": 1449063112,
      "node_id": "PRRC_kwDOABII585WXvLI",
      "diff_hunk": "@@ -11,18 +11,24 @@\n #include <string>\n #include <utility>\n \n-/** Read full contents of a file and return them in a std::string.\n- * Returns a pair <status, string>.\n- * If an error occurred, status will be false, otherwise status will be true and the data will be returned in string.\n+/**\n+ * Read full contents of a file and return one of the following formats:\n+ * 1. std::vector<unsigned char>\n+ * 2. std::string\n  *\n- * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n- *         (with len > maxsize) will be returned.\n+ * @param[in] filename Filename. Returns false it doesn't exist.\n+ * @param[out] output  Result\n+ * @param[in] maxsize  Puts a maximum size limit on the file that is read. If the file\n+ *                 is larger than this, truncated data (with len > maxsize) will be returned.\n+ * @return true if successful, false if an error occured.\n  */\n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max());\n+template <typename T>\n+bool ReadBinaryFile(const fs::path& filename, T& output, size_t maxsize=std::numeric_limits<size_t>::max());",
      "path": "src/util/readwritefile.h",
      "position": null,
      "original_position": 22,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "634f29f2efa96263a2b108b9b5532d19a1d64e48",
      "in_reply_to_id": 1449027121,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'll give that a try tomorrow.",
      "created_at": "2024-01-11T15:52:44Z",
      "updated_at": "2024-01-11T15:52:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1449063112",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1449063112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1457418125",
      "pull_request_review_id": 1829642426,
      "id": 1457418125,
      "node_id": "PRRC_kwDOABII585W3m-N",
      "diff_hunk": "@@ -126,6 +126,7 @@ BITCOIN_TESTS =\\\n   test/raii_event_tests.cpp \\\n   test/random_tests.cpp \\\n   test/rbf_tests.cpp \\\n+  test/readwritefile_tests.cpp \\",
      "path": "src/Makefile.test.include",
      "position": 4,
      "original_position": 4,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "ac5a83b91f28a1bb2948c576c3796234c17f392f",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: in the commit message:\r\n\r\n> ReadBinaryFile and WriteBinaryFile current work with std::string\r\n\r\ns/current/currently/\r\n\r\nWould be nice to wrap lines in the commit message at [72 columns](https://duckduckgo.com/?q=commit+message+50%2F72).",
      "created_at": "2024-01-18T13:09:39Z",
      "updated_at": "2024-01-18T15:13:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1457418125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1457418125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 129,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1457430349",
      "pull_request_review_id": 1829642426,
      "id": 1457430349,
      "node_id": "PRRC_kwDOABII585W3p9N",
      "diff_hunk": "@@ -8,21 +8,27 @@\n #include <util/fs.h>\n \n #include <limits>\n+#include <optional>\n #include <string>\n #include <utility>\n \n-/** Read full contents of a file and return them in a std::string.\n- * Returns a pair <status, string>.\n- * If an error occurred, status will be false, otherwise status will be true and the data will be returned in string.\n+/**\n+ * Read full contents of a file and return one of the following formats:\n+ * 1. std::vector<unsigned char>\n+ * 2. std::string\n  *\n- * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n- *         (with len > maxsize) will be returned.\n+ * @param[in] filename Filename. Returns false it doesn't exist.\n+ * @param[in] maxsize  Puts a maximum size limit on the file that is read. If the file\n+ *                 is larger than this, truncated data (with len > maxsize) will be returned.\n+ * @return result successful, {} otherwise",
      "path": "src/util/readwritefile.h",
      "position": null,
      "original_position": 21,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "ac5a83b91f28a1bb2948c576c3796234c17f392f",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n * @return result if successful, std::nullopt otherwise\r\n```",
      "created_at": "2024-01-18T13:20:15Z",
      "updated_at": "2024-01-18T15:13:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1457430349",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1457430349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463138328",
      "pull_request_review_id": 1838537092,
      "id": 1463138328,
      "node_id": "PRRC_kwDOABII585XNbgY",
      "diff_hunk": "@@ -5,46 +5,47 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};\n+    } catch (const std::ios_base::failure&) {\n+        return {};\n+    }\n+    return output;\n }\n \n-bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+template std::optional<std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+template std::optional<std::vector<unsigned char>> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+\n+template <typename T>\n+bool WriteBinaryFile(const fs::path& filename, const T& data)\n {\n-    FILE *f = fsbridge::fopen(filename, \"wb\");\n-    if (f == nullptr)\n-        return false;\n-    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n-        fclose(f);\n-        return false;\n-    }\n-    if (fclose(f) != 0) {\n+    std::FILE *f = fsbridge::fopen(filename, \"wb\");\n+    if (f == nullptr) return false;\n+    try {\n+        AutoFile{f} << Span{data};",
      "path": "src/util/readwritefile.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "e4d0e3decd662aeded8c03bf9084ba8c0449036e",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    try {\r\n        AutoFile{fsbridge::fopen(filename, \"wb\")} << Span{data};\r\n```\r\n\r\nnit: Can be written shorter",
      "created_at": "2024-01-23T11:33:54Z",
      "updated_at": "2024-01-23T11:33:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1463138328",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463138328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": 40,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463183042",
      "pull_request_review_id": 1838613089,
      "id": 1463183042,
      "node_id": "PRRC_kwDOABII585XNmbC",
      "diff_hunk": "@@ -5,46 +5,47 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};\n+    } catch (const std::ios_base::failure&) {\n+        return {};\n+    }\n+    return output;\n }\n \n-bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+template std::optional<std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+template std::optional<std::vector<unsigned char>> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+\n+template <typename T>\n+bool WriteBinaryFile(const fs::path& filename, const T& data)\n {\n-    FILE *f = fsbridge::fopen(filename, \"wb\");\n-    if (f == nullptr)\n-        return false;\n-    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n-        fclose(f);\n-        return false;\n-    }\n-    if (fclose(f) != 0) {\n+    std::FILE *f = fsbridge::fopen(filename, \"wb\");\n+    if (f == nullptr) return false;\n+    try {\n+        AutoFile{f} << Span{data};",
      "path": "src/util/readwritefile.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "e4d0e3decd662aeded8c03bf9084ba8c0449036e",
      "in_reply_to_id": 1463138328,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Took me a while to wrap my head around the various calls involved, but I guess the nullptr check is handled in `read()`, which is called by the various `ser_read...` functions in `seralize.h`, which is called by the `Unserialize` implementations, which is called by `<<`. (presumably the same for writing)",
      "created_at": "2024-01-23T12:14:24Z",
      "updated_at": "2024-01-23T12:15:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1463183042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463183042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": 40,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463199231",
      "pull_request_review_id": 1838649435,
      "id": 1463199231,
      "node_id": "PRRC_kwDOABII585XNqX_",
      "diff_hunk": "@@ -5,46 +5,47 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};\n+    } catch (const std::ios_base::failure&) {\n+        return {};\n+    }\n+    return output;\n }\n \n-bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+template std::optional<std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+template std::optional<std::vector<unsigned char>> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+\n+template <typename T>\n+bool WriteBinaryFile(const fs::path& filename, const T& data)\n {\n-    FILE *f = fsbridge::fopen(filename, \"wb\");\n-    if (f == nullptr)\n-        return false;\n-    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n-        fclose(f);\n-        return false;\n-    }\n-    if (fclose(f) != 0) {\n+    std::FILE *f = fsbridge::fopen(filename, \"wb\");\n+    if (f == nullptr) return false;\n+    try {\n+        AutoFile{f} << Span{data};",
      "path": "src/util/readwritefile.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "e4d0e3decd662aeded8c03bf9084ba8c0449036e",
      "in_reply_to_id": 1463138328,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "On the read side I'm keeping the explicit nullptr check for now, so I don't have to catch `fs::file_size` failure.",
      "created_at": "2024-01-23T12:21:11Z",
      "updated_at": "2024-01-23T12:21:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1463199231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463199231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": 40,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463205250",
      "pull_request_review_id": 1838663528,
      "id": 1463205250,
      "node_id": "PRRC_kwDOABII585XNr2C",
      "diff_hunk": "@@ -5,46 +5,47 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};\n+    } catch (const std::ios_base::failure&) {\n+        return {};\n+    }\n+    return output;\n }\n \n-bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+template std::optional<std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+template std::optional<std::vector<unsigned char>> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+\n+template <typename T>\n+bool WriteBinaryFile(const fs::path& filename, const T& data)\n {\n-    FILE *f = fsbridge::fopen(filename, \"wb\");\n-    if (f == nullptr)\n-        return false;\n-    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n-        fclose(f);\n-        return false;\n-    }\n-    if (fclose(f) != 0) {\n+    std::FILE *f = fsbridge::fopen(filename, \"wb\");\n+    if (f == nullptr) return false;\n+    try {\n+        AutoFile{f} << Span{data};",
      "path": "src/util/readwritefile.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "e4d0e3decd662aeded8c03bf9084ba8c0449036e",
      "in_reply_to_id": 1463138328,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "At the point `WriteBinaryFile` is so small you might as well have the called do the try - catch. But might as well keep if around as long as `ReadBinaryFile` can't be made smaller.",
      "created_at": "2024-01-23T12:23:18Z",
      "updated_at": "2024-01-23T12:23:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1463205250",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463205250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": 40,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463486871",
      "pull_request_review_id": 1839138436,
      "id": 1463486871,
      "node_id": "PRRC_kwDOABII585XOwmX",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};",
      "path": "src/util/readwritefile.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I liked more the previous version which called `fread(3)` here. It was simple stupid. This `>>` is now hard to follow, especially given that it depends on `T`. For `vector` it ends up calling `AutoFile::detail_fread()`. It does not check whether `ferror(3)` occurred.",
      "created_at": "2024-01-23T15:40:40Z",
      "updated_at": "2024-01-23T15:50:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1463486871",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463486871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463498321",
      "pull_request_review_id": 1839138436,
      "id": 1463498321,
      "node_id": "PRRC_kwDOABII585XOzZR",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};\n+    } catch (const std::ios_base::failure&) {\n+        return {};\n+    }\n+    return output;\n }\n \n-bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+template std::optional<std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+template std::optional<std::vector<unsigned char>> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+\n+template <typename T>\n+bool WriteBinaryFile(const fs::path& filename, const T& data)\n {\n-    FILE *f = fsbridge::fopen(filename, \"wb\");\n-    if (f == nullptr)\n-        return false;\n-    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n-        fclose(f);\n-        return false;\n-    }\n-    if (fclose(f) != 0) {\n+    try {\n+        AutoFile{fsbridge::fopen(filename, \"wb\")} << Span{data};",
      "path": "src/util/readwritefile.cpp",
      "position": 64,
      "original_position": 64,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same as above, the [dumb](https://en.wikipedia.org/wiki/KISS_principle) version was easier to follow. The new one does not check whether `fclose(3)` failed, but it should. I think that is a serious deficiency in `AutoFile` itself.\r\n\r\n`fwrite(3)` may succeed, but if a subsequent `fclose(3)` fails we should consider the data did not make it safely to disk and that the file is corrupted (`fclose(3)` writes any buffered data to disk using `fflush(3)`, so a failure at `fclose(3)` is as bad as failure at `fwrite(3)`).",
      "created_at": "2024-01-23T15:48:11Z",
      "updated_at": "2024-01-23T15:50:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1463498321",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463498321"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463592487",
      "pull_request_review_id": 1839312074,
      "id": 1463592487,
      "node_id": "PRRC_kwDOABII585XPKYn",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};",
      "path": "src/util/readwritefile.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463486871,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> For vector it ends up calling AutoFile::detail_fread(). It does not check whether ferror(3) occurred.\r\n\r\nIt does. If the return value of `detail_fread` is not `output.size()`, `operator>>` will fail.",
      "created_at": "2024-01-23T16:40:12Z",
      "updated_at": "2024-01-23T16:40:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1463592487",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1463592487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1464705680",
      "pull_request_review_id": 1841052862,
      "id": 1464705680,
      "node_id": "PRRC_kwDOABII585XTaKQ",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};",
      "path": "src/util/readwritefile.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463486871,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > It does not check whether ferror(3) occurred.\r\n> \r\n> It does.\r\n\r\nWhere? There is no `ferror(3)` call. From the man page: \"The function fread() does not distinguish between end-of-file and error, and callers must use feof(3) and ferror(3) to determine which occurred.\"\r\n\r\n> If the return value of `detail_fread` is not `output.size()`, `operator>>` will fail.\r\n\r\nYes, but it can be equal to the desired size under two conditions: eof, or error. The previous code distinguished between both.",
      "created_at": "2024-01-24T10:35:43Z",
      "updated_at": "2024-01-24T10:35:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1464705680",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1464705680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1464749909",
      "pull_request_review_id": 1841115674,
      "id": 1464749909,
      "node_id": "PRRC_kwDOABII585XTk9V",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};",
      "path": "src/util/readwritefile.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463486871,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > If the return value of `detail_fread` is not `output.size()`, `operator>>` will fail.\r\n> \r\n> Yes, but it can be equal to the desired size under two conditions: eof, or error.\r\n\r\nNo, the eof-error would only be raised if read *past* the desired size, not *to* it. Unless I am missing something?\r\n\r\nI am asking, because if there was a bug, it should be fixed, or at least an issue should be filed.",
      "created_at": "2024-01-24T11:05:27Z",
      "updated_at": "2024-01-24T11:05:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1464749909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1464749909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1464774469",
      "pull_request_review_id": 1841154287,
      "id": 1464774469,
      "node_id": "PRRC_kwDOABII585XTq9F",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};",
      "path": "src/util/readwritefile.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463486871,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That \"must\" in the man page is pretty clear: \"callers must use feof(3) and ferror(3) to determine which occurred\". A `ferror(3)` check can't hurt and it is better to have an extra check that always returns \"no error\" than a missing check, failing to detect an IO error. The previous code was doing that - a dumb `fread(3)` followed by an unconditional `ferror(3)`.",
      "created_at": "2024-01-24T11:27:31Z",
      "updated_at": "2024-01-24T11:27:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1464774469",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1464774469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1464781909",
      "pull_request_review_id": 1841166823,
      "id": 1464781909,
      "node_id": "PRRC_kwDOABII585XTsxV",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};",
      "path": "src/util/readwritefile.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463486871,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, it is called to determine which error occurred, see https://github.com/bitcoin/bitcoin/blob/e69796c79c0aa202087a13ba62d9fbcc1c8754d4/src/streams.cpp#L27\r\n\r\nAgain, if there is a bug in the current code in master, it should be fixed.",
      "created_at": "2024-01-24T11:33:43Z",
      "updated_at": "2024-01-24T11:33:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1464781909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1464781909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1464821741",
      "pull_request_review_id": 1841225882,
      "id": 1464821741,
      "node_id": "PRRC_kwDOABII585XT2ft",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};",
      "path": "src/util/readwritefile.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463486871,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I would extend the check to:\r\n\r\n```diff\r\n void AutoFile::read(Span<std::byte> dst)\r\n {\r\n-    if (detail_fread(dst) != dst.size()) {\r\n+    if (detail_fread(dst) != dst.size() || std::ferror(m_file)) {\r\n         throw std::ios_base::failure(feof() ? \"AutoFile::read: end of file\" : \"AutoFile::read: fread failed\");\r\n```",
      "created_at": "2024-01-24T12:08:45Z",
      "updated_at": "2024-01-24T12:08:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1464821741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1464821741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465007760",
      "pull_request_review_id": 1841530529,
      "id": 1465007760,
      "node_id": "PRRC_kwDOABII585XUj6Q",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};\n+    } catch (const std::ios_base::failure&) {\n+        return {};\n+    }\n+    return output;\n }\n \n-bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+template std::optional<std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+template std::optional<std::vector<unsigned char>> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+\n+template <typename T>\n+bool WriteBinaryFile(const fs::path& filename, const T& data)\n {\n-    FILE *f = fsbridge::fopen(filename, \"wb\");\n-    if (f == nullptr)\n-        return false;\n-    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n-        fclose(f);\n-        return false;\n-    }\n-    if (fclose(f) != 0) {\n+    try {\n+        AutoFile{fsbridge::fopen(filename, \"wb\")} << Span{data};",
      "path": "src/util/readwritefile.cpp",
      "position": 64,
      "original_position": 64,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463498321,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think that is a serious deficiency in `AutoFile` itself\r\n\r\nLogged as https://github.com/bitcoin/bitcoin/pull/29307",
      "created_at": "2024-01-24T14:36:08Z",
      "updated_at": "2024-01-24T14:36:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1465007760",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465007760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465009114",
      "pull_request_review_id": 1841532681,
      "id": 1465009114,
      "node_id": "PRRC_kwDOABII585XUkPa",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};",
      "path": "src/util/readwritefile.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463486871,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> if there is a bug in the current code in master, it should be fixed.\r\n\r\nDone in https://github.com/bitcoin/bitcoin/pull/29307",
      "created_at": "2024-01-24T14:37:05Z",
      "updated_at": "2024-01-24T14:37:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1465009114",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1465009114"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466158963",
      "pull_request_review_id": 1843353988,
      "id": 1466158963,
      "node_id": "PRRC_kwDOABII585XY89z",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};",
      "path": "src/util/readwritefile.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463486871,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Glad something useful came out of this PR :-)",
      "created_at": "2024-01-25T10:27:22Z",
      "updated_at": "2024-01-25T10:27:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1466158963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466158963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466160913",
      "pull_request_review_id": 1843357292,
      "id": 1466160913,
      "node_id": "PRRC_kwDOABII585XY9cR",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};\n+    } catch (const std::ios_base::failure&) {\n+        return {};\n+    }\n+    return output;\n }\n \n-bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+template std::optional<std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+template std::optional<std::vector<unsigned char>> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+\n+template <typename T>\n+bool WriteBinaryFile(const fs::path& filename, const T& data)\n {\n-    FILE *f = fsbridge::fopen(filename, \"wb\");\n-    if (f == nullptr)\n-        return false;\n-    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n-        fclose(f);\n-        return false;\n-    }\n-    if (fclose(f) != 0) {\n+    try {\n+        AutoFile{fsbridge::fopen(filename, \"wb\")} << Span{data};",
      "path": "src/util/readwritefile.cpp",
      "position": 64,
      "original_position": 64,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463498321,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@vasild I would also prefer to fix things in AutoFile, but perhaps add a few comments to explain what happens under the hood?",
      "created_at": "2024-01-25T10:28:57Z",
      "updated_at": "2024-01-25T10:29:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1466160913",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466160913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466212055",
      "pull_request_review_id": 1843441249,
      "id": 1466212055,
      "node_id": "PRRC_kwDOABII585XZJ7X",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};\n+    } catch (const std::ios_base::failure&) {\n+        return {};\n+    }\n+    return output;\n }\n \n-bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+template std::optional<std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+template std::optional<std::vector<unsigned char>> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+\n+template <typename T>\n+bool WriteBinaryFile(const fs::path& filename, const T& data)\n {\n-    FILE *f = fsbridge::fopen(filename, \"wb\");\n-    if (f == nullptr)\n-        return false;\n-    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n-        fclose(f);\n-        return false;\n-    }\n-    if (fclose(f) != 0) {\n+    try {\n+        AutoFile{fsbridge::fopen(filename, \"wb\")} << Span{data};",
      "path": "src/util/readwritefile.cpp",
      "position": 64,
      "original_position": 64,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463498321,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This could happen:\r\n\r\n1. fwrite() succeeds, returns ok the caller, some of the data is buffered in the OS and not yet on disk\r\n2. fclose() is called, it tries to fflush() the buffered data to disk but fails due to IO error. The caller ignores the error returned by fclose()\r\n3. the program continues with the wrong assumption that the data is safely on disk",
      "created_at": "2024-01-25T11:10:50Z",
      "updated_at": "2024-01-25T11:10:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1466212055",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466212055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466268617",
      "pull_request_review_id": 1843551327,
      "id": 1466268617,
      "node_id": "PRRC_kwDOABII585XZXvJ",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};\n+    } catch (const std::ios_base::failure&) {\n+        return {};\n+    }\n+    return output;\n }\n \n-bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+template std::optional<std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+template std::optional<std::vector<unsigned char>> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+\n+template <typename T>\n+bool WriteBinaryFile(const fs::path& filename, const T& data)\n {\n-    FILE *f = fsbridge::fopen(filename, \"wb\");\n-    if (f == nullptr)\n-        return false;\n-    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n-        fclose(f);\n-        return false;\n-    }\n-    if (fclose(f) != 0) {\n+    try {\n+        AutoFile{fsbridge::fopen(filename, \"wb\")} << Span{data};",
      "path": "src/util/readwritefile.cpp",
      "position": 64,
      "original_position": 64,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463498321,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's not good. I guess we also don't want to sync to disk, and block for that to complete, for every field that's `>>`'d to a file though. ",
      "created_at": "2024-01-25T12:01:49Z",
      "updated_at": "2024-01-25T12:02:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1466268617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466268617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466321697",
      "pull_request_review_id": 1843637855,
      "id": 1466321697,
      "node_id": "PRRC_kwDOABII585XZksh",
      "diff_hunk": "@@ -5,46 +5,45 @@\n \n #include <util/readwritefile.h>\n \n+#include <streams.h>\n #include <util/fs.h>\n \n #include <algorithm>\n #include <cstdio>\n #include <limits>\n #include <string>\n #include <utility>\n+#include <vector>\n \n-std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize)\n+template <typename T>\n+std::optional<T> ReadBinaryFile(const fs::path& filename, size_t maxsize)\n {\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    do {\n-        const size_t n = fread(buffer, 1, std::min(sizeof(buffer), maxsize - retval.size()), f);\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-    } while (!feof(f) && retval.size() < maxsize);\n-    fclose(f);\n-    return std::make_pair(true,retval);\n+    std::FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr) return {};\n+    T output{};\n+    size_t file_size = fs::file_size(filename);\n+    output.resize(std::min(file_size, maxsize));\n+    try {\n+        AutoFile{f} >> Span{output};\n+    } catch (const std::ios_base::failure&) {\n+        return {};\n+    }\n+    return output;\n }\n \n-bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+template std::optional<std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+template std::optional<std::vector<unsigned char>> ReadBinaryFile(const fs::path &filename, size_t maxsize);\n+\n+template <typename T>\n+bool WriteBinaryFile(const fs::path& filename, const T& data)\n {\n-    FILE *f = fsbridge::fopen(filename, \"wb\");\n-    if (f == nullptr)\n-        return false;\n-    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n-        fclose(f);\n-        return false;\n-    }\n-    if (fclose(f) != 0) {\n+    try {\n+        AutoFile{fsbridge::fopen(filename, \"wb\")} << Span{data};",
      "path": "src/util/readwritefile.cpp",
      "position": 64,
      "original_position": 64,
      "commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "original_commit_id": "f9b134e2b2534aac21a9df43cad0c6283dd78be9",
      "in_reply_to_id": 1463498321,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right. That's why I don't see a good solution. It is a design issue with `AutoFile` to flush/close from the destructor which can't signal the failure to the caller.",
      "created_at": "2024-01-25T12:47:31Z",
      "updated_at": "2024-01-25T12:47:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/29229#discussion_r1466321697",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1466321697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/29229"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    }
  ]
}