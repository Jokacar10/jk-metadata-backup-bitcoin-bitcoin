{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579",
    "id": 2534470522,
    "node_id": "PR_kwDOABII586XEPN6",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32579",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32579.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32579.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/bbe5609b84211c49a522da9dd5d987ab454ef912",
    "number": 32579,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "headerssync: Keep tests ahead of increasing params",
    "user": {
      "login": "hodlinator",
      "id": 172445034,
      "node_id": "U_kgDOCkdNag",
      "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hodlinator",
      "html_url": "https://github.com/hodlinator",
      "followers_url": "https://api.github.com/users/hodlinator/followers",
      "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
      "organizations_url": "https://api.github.com/users/hodlinator/orgs",
      "repos_url": "https://api.github.com/users/hodlinator/repos",
      "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/hodlinator/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "### Background\r\n\r\nEach release we run *contrib/devtools/headerssync-params.py* and increase the values of the Headers Sync constants `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` in *src/headerssync.cpp* as per *doc/release-process.md*.\r\n\r\n### Problem\r\n\r\nIn the next (v30) or following release, it is very likely that `REDOWNLOAD_BUFFER_SIZE` (`14827` as of v29) will exceed the `target_blocks` value used to test Headers Sync (`15000`, *headers_sync_chainwork_tests.cpp*). This would result in the `HeadersSyncState::m_redownloaded_headers`-buffer not reaching the `REDOWNLOAD_BUFFER_SIZE`-threshold during the *headers_sync_chainwork_tests.cpp* unit tests.\r\n\r\n(It would have been nice to have a test that failed because of not reaching the `REDOWNLOAD_BUFFER_SIZE`-threshold, but `HeadersSyncState::PopHeadersReadyForAcceptance()` will return all headers anyway due to `m_process_all_remaining_headers` being set when we reach the PoW threshold regardless of whether the buffer threshold is met).\r\n\r\n### Solution\r\n\r\nPreempt the tests from only testing this unnatural condition of succeeding before reaching `REDOWNLOAD_BUFFER_SIZE` by making the test depend upon the constant being updated + additional padding. Then also add tests that verify the behavior around that boundary threshold.\r\n\r\n### Commits\r\n\r\nInitial commits refactor and improve the unit tests. We then extract the section from *headerssync.cpp* containing the constants to a new header-file and add that as a dependency of the tests. Finally we add tests for the behavior around the threshold as the value is now available to the tests.\r\n\r\n### Calculation\r\n\r\nDate at time of calculation: 2025-05-21\r\nCurrent block height: `897'662`\r\nAvg block time: `~9.8min` (<https://mempool.space>).\r\nAdded 6 months to `TIME` constant in *headerssync-params.py*: `datetime(2028, 4, 6)`\r\nIncreased block height in *headerssync-params.py* (`MINCHAINWORK_HEADERS`) to: `920'000`\r\nBlock height difference: `22'338`\r\nDays: `22'338 * 9.8min / (60min * 24h) = ~152`\r\nEstimated date for block height `920'000`: 2025-10-20\r\n`REDOWNLOAD_BUFFER_SIZE` value calculated by *headerssync-params.py*: `15002`",
    "labels": [],
    "created_at": "2025-05-21T13:48:16Z",
    "updated_at": "2025-06-02T19:27:09Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "c5dd77e2b4269185b1b8fc26666cb52d6965f19b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "hodlinator:2025/05/headerssync_params",
      "ref": "2025/05/headerssync_params",
      "sha": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 813856282,
        "node_id": "R_kgDOMIJ2Gg",
        "name": "bitcoin",
        "full_name": "hodlinator/bitcoin",
        "owner": {
          "login": "hodlinator",
          "id": 172445034,
          "node_id": "U_kgDOCkdNag",
          "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/hodlinator",
          "html_url": "https://github.com/hodlinator",
          "followers_url": "https://api.github.com/users/hodlinator/followers",
          "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
          "organizations_url": "https://api.github.com/users/hodlinator/orgs",
          "repos_url": "https://api.github.com/users/hodlinator/repos",
          "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/hodlinator/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/hodlinator/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/hodlinator/bitcoin",
        "archive_url": "https://api.github.com/repos/hodlinator/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/hodlinator/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/hodlinator/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/hodlinator/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/hodlinator/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/hodlinator/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/hodlinator/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/hodlinator/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/hodlinator/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/hodlinator/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/hodlinator/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/hodlinator/bitcoin/events",
        "forks_url": "https://api.github.com/repos/hodlinator/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/hodlinator/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/hodlinator/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/hodlinator/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/hodlinator/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/hodlinator/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/hodlinator/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/hodlinator/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/hodlinator/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/hodlinator/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/hodlinator/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/hodlinator/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/hodlinator/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:hodlinator/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/hodlinator/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/hodlinator/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/hodlinator/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/hodlinator/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/hodlinator/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/hodlinator/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/hodlinator/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/hodlinator/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/hodlinator/bitcoin/hooks",
        "svn_url": "https://github.com/hodlinator/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 240925,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-30T21:40:28Z",
        "created_at": "2024-06-11T22:00:51Z",
        "updated_at": "2025-03-09T08:58:35Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "4b1d48a6866b24f0ed027334c6de642fc848d083",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37307,
        "stargazers_count": 83935,
        "watchers_count": 83935,
        "size": 283234,
        "default_branch": "master",
        "open_issues_count": 744,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-06-02T13:46:06Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-06-02T19:55:08Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 204,
    "deletions": 115,
    "changed_files": 7,
    "commits": 8,
    "review_comments": 38,
    "comments": 4
  },
  "events": [
    {
      "event": "commented",
      "id": 2898039292,
      "node_id": "IC_kwDOABII586svJH8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2898039292",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T13:48:19Z",
      "updated_at": "2025-06-02T17:55:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32579.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [l0rinc](https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2857912770), [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2921899092), [jonatack](https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2931826727) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2898039292",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17754814597,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAQiRPiF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17754814597",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "created_at": "2025-05-21T14:14:33Z"
    },
    {
      "event": "labeled",
      "id": 17754823710,
      "node_id": "LE_lADOABII5863mcpzzwAAAAQiRRwe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17754823710",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T14:15:02Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2898132507,
      "node_id": "IC_kwDOABII586svf4b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2898132507",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T14:15:04Z",
      "updated_at": "2025-05-21T14:15:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/42636718296</sub>\n<sub>LLM reason (✨ experimental): The CI failure is due to a missing include guard in the `src/headerssync-params.h` file, as reported by the lint checks.\n</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2898132507",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "unlabeled",
      "id": 17759263704,
      "node_id": "UNLE_lADOABII5863mcpzzwAAAAQiiNvY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17759263704",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-21T18:49:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unsubscribed",
      "id": 17795020980,
      "node_id": "UE_lADOABII5863mcpzzwAAAAQkqni0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17795020980",
      "actor": {
        "login": "deehochberg",
        "id": 185879065,
        "node_id": "U_kgDOCxRKGQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/185879065?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/deehochberg",
        "html_url": "https://github.com/deehochberg",
        "followers_url": "https://api.github.com/users/deehochberg/followers",
        "following_url": "https://api.github.com/users/deehochberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/deehochberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/deehochberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/deehochberg/subscriptions",
        "organizations_url": "https://api.github.com/users/deehochberg/orgs",
        "repos_url": "https://api.github.com/users/deehochberg/repos",
        "events_url": "https://api.github.com/users/deehochberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/deehochberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T18:59:28Z"
    },
    {
      "event": "reviewed",
      "id": 2857912770,
      "node_id": "PRR_kwDOABII586qWEnC",
      "url": null,
      "actor": null,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK – this PR replaces the imminently outdated hard-coded test target of 15'000 headers with a value derived from the live `REDOWNLOAD_BUFFER_SIZE` constant.\r\nMoving both header-sync tuning constants into a shared header, and making the unit test reference them, keeps the test exercising the 'buffer-full' path as the parameters grow each release.\r\n\r\nRecommendations:\r\n* split the series into more commits, separating low-risk refactors from ones that change behaviour: strict move-only; refactor / cleanup with no behavioural change; extra assertions; wiring the test to the new parameter header;\r\n* in the test file, wrap each independent `ProcessNextHeaders` call inside `{}` blocks and use structured bindings so temporary variables aren’t reused accidentally;\r\n* rename the new file to `headerssync_params.h` (underscore instead of `-`) for consistency with other similar headers;\r\n* update `contrib/devtools/README.md` to reference the header instead of the .cpp;\r\n* Tweak a few comments whose wording is unclear or slightly misleading.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2857912770",
      "submitted_at": "2025-05-27T11:35:26Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "commented",
      "id": 2921899092,
      "node_id": "IC_kwDOABII586uKKRU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2921899092",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-30T10:09:35Z",
      "updated_at": "2025-05-30T10:09:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2921899092",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17891371614,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAQqaKpe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17891371614",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "486e8caab01c5a129f0269d846fa4b7191afd389",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/486e8caab01c5a129f0269d846fa4b7191afd389",
      "created_at": "2025-05-30T20:35:03Z"
    },
    {
      "event": "reviewed",
      "id": 2881152192,
      "node_id": "PRR_kwDOABII586ruuTA",
      "url": null,
      "actor": null,
      "commit_id": "486e8caab01c5a129f0269d846fa4b7191afd389",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for your feedback so far @l0rinc! Took most of your suggestions (https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2857912770).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#pullrequestreview-2881152192",
      "submitted_at": "2025-05-30T20:37:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZhYjZmNTllMmU2ZTE2MWRmNDEzMmI1MGNmYzUxZGU3MjY2ZDhmYTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab6f59e2e6e161df4132b50cfc51de7266d8fa4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fab6f59e2e6e161df4132b50cfc51de7266d8fa4",
      "tree": {
        "sha": "6f7a7ec02579ab0d87d7f5eecb1c8389bccbb17c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f7a7ec02579ab0d87d7f5eecb1c8389bccbb17c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6f7a7ec02579ab0d87d7f5eecb1c8389bccbb17c\nparent 9a887baadebce7c2e76df831fad54c5fa81d309e\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748633802 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748640987 +0200\n\nrefactor(test): Extract constants ahead of breakup into functions\n\nNeeded to make arith_uint256 constexpr-constructible.\n\nCo-authored-by: Lőrinc <pap.lorinc@gmail.com>\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQB5a2j1UZA4Su7iD9G+lKdIWviwENIhiZc79PMaI/TGpC3o3KF4xUy9v2MjjsUWZBG\nr7vbOhkVwHG37Kr8n0qAQ=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a887baadebce7c2e76df831fad54c5fa81d309e",
          "sha": "9a887baadebce7c2e76df831fad54c5fa81d309e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9a887baadebce7c2e76df831fad54c5fa81d309e"
        }
      ],
      "message": "refactor(test): Extract constants ahead of breakup into functions\n\nNeeded to make arith_uint256 constexpr-constructible.\n\nCo-authored-by: Lőrinc <pap.lorinc@gmail.com>",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T21:36:27Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T19:36:42Z"
      },
      "sha": "fab6f59e2e6e161df4132b50cfc51de7266d8fa4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdkNDU4NzJhMDU2MTQ1NzU0Yzk5M2JkNjQyYzNiNDlhNmY3YzE0YzU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d45872a056145754c993bd642c3b49a6f7c14c5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7d45872a056145754c993bd642c3b49a6f7c14c5",
      "tree": {
        "sha": "5ed1335d2ac71ba4ed9338cd7044af2ae33c4426",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ed1335d2ac71ba4ed9338cd7044af2ae33c4426"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5ed1335d2ac71ba4ed9338cd7044af2ae33c4426\nparent fab6f59e2e6e161df4132b50cfc51de7266d8fa4\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748635766 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748640987 +0200\n\nrefactor(headerssync): Process spans of headers\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQKJcCLMjN3Wo6DQRrlKEzBqFSeNP0C8gfF8NcuELSJyyaLAepUuLwhZJ6hljk7uikc\nK//ay/QbcbW5rrV2oHQg0=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab6f59e2e6e161df4132b50cfc51de7266d8fa4",
          "sha": "fab6f59e2e6e161df4132b50cfc51de7266d8fa4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fab6f59e2e6e161df4132b50cfc51de7266d8fa4"
        }
      ],
      "message": "refactor(headerssync): Process spans of headers",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T21:36:27Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T20:09:26Z"
      },
      "sha": "7d45872a056145754c993bd642c3b49a6f7c14c5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEwY2QxOTZkMmZiNGZkMWJmYWUyMDZmZmFlY2U1MzFiNzMyNzc4OTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0cd196d2fb4fd1bfae206ffaece531b73277896",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a0cd196d2fb4fd1bfae206ffaece531b73277896",
      "tree": {
        "sha": "e0a5a18231bcd7f12a1857efe38e62068f652b6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0a5a18231bcd7f12a1857efe38e62068f652b6d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e0a5a18231bcd7f12a1857efe38e62068f652b6d\nparent 7d45872a056145754c993bd642c3b49a6f7c14c5\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748606111 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748640987 +0200\n\nrefactor(test): Break up headers_sync_chainwork_tests\n\nAlso adds missing comment for part 4.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQKtdZTtUyDN6QTgs9kia+IVdMg0o0Wsuy0G7O+op8XLE4MhLpvgbhi19QhWa0eBRiH\nDsN4wJr11KxrvTpBNm6Ak=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d45872a056145754c993bd642c3b49a6f7c14c5",
          "sha": "7d45872a056145754c993bd642c3b49a6f7c14c5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7d45872a056145754c993bd642c3b49a6f7c14c5"
        }
      ],
      "message": "refactor(test): Break up headers_sync_chainwork_tests\n\nAlso adds missing comment for part 4.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T21:36:27Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T11:55:11Z"
      },
      "sha": "a0cd196d2fb4fd1bfae206ffaece531b73277896"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYxODFmOTlhY2EzZmViNjFkMDFlZWZkMWE3ZTAzMWUwNTMwZWJjOGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f181f99aca3feb61d01eefd1a7e031e0530ebc8c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f181f99aca3feb61d01eefd1a7e031e0530ebc8c",
      "tree": {
        "sha": "c983fdee5271e7d517df6005e9fe95e72a23aee7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c983fdee5271e7d517df6005e9fe95e72a23aee7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c983fdee5271e7d517df6005e9fe95e72a23aee7\nparent a0cd196d2fb4fd1bfae206ffaece531b73277896\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748634739 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748640987 +0200\n\nrefactor(test): Use function-scope instances of HeadersSyncState\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQGBnByJ2OhUvyWItd/blYsF3pGDF6mVTXgu8N0opxz3lSlPbjxVoE9aj65soSiEGvn\nIFdFdQ50VSwi/Xs/phFQU=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0cd196d2fb4fd1bfae206ffaece531b73277896",
          "sha": "a0cd196d2fb4fd1bfae206ffaece531b73277896",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a0cd196d2fb4fd1bfae206ffaece531b73277896"
        }
      ],
      "message": "refactor(test): Use function-scope instances of HeadersSyncState",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T21:36:27Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T19:52:19Z"
      },
      "sha": "f181f99aca3feb61d01eefd1a7e031e0530ebc8c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY5MWZiNWM4NmIyMTg2MDAyNjFjMzUzZTBiMWNhMjM2MmU0YmFmMWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/691fb5c86b218600261c353e0b1ca2362e4baf1e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/691fb5c86b218600261c353e0b1ca2362e4baf1e",
      "tree": {
        "sha": "39e84fd2b47979317311174507963c4c63ff8b3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39e84fd2b47979317311174507963c4c63ff8b3e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 39e84fd2b47979317311174507963c4c63ff8b3e\nparent f181f99aca3feb61d01eefd1a7e031e0530ebc8c\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748633425 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748640987 +0200\n\nrefactor(test): One scope for each ProcessNextHeaders\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQBY2miCCTUZGbPQCrb87O7aQmWHVUrpRq+AcSNDUxFLNLXn+AHK06SCio3LjsEVtJO\n2HuVCHsEbFcUSUShCD+AY=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f181f99aca3feb61d01eefd1a7e031e0530ebc8c",
          "sha": "f181f99aca3feb61d01eefd1a7e031e0530ebc8c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f181f99aca3feb61d01eefd1a7e031e0530ebc8c"
        }
      ],
      "message": "refactor(test): One scope for each ProcessNextHeaders",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T21:36:27Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T19:30:25Z"
      },
      "sha": "691fb5c86b218600261c353e0b1ca2362e4baf1e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI0MDM4YmM4MzAwZjI3NmFkZjFhM2U2MjE2MTIyOTAzYzc1Mzc0M2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4038bc8300f276adf1a3e6216122903c753743a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b4038bc8300f276adf1a3e6216122903c753743a",
      "tree": {
        "sha": "a4ffd64282150bb1170dc8adaac4304320d9e608",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4ffd64282150bb1170dc8adaac4304320d9e608"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a4ffd64282150bb1170dc8adaac4304320d9e608\nparent 691fb5c86b218600261c353e0b1ca2362e4baf1e\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748633722 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748640987 +0200\n\ntest(headerssync): headers_sync_chainwork test improvements\n\n* Use BOOST_REQUIRE_EQUAL for HeadersSyncState::State - Nicer failure output and prevents continuing test in nonsensical state.\n* Verify HeadersSyncState::State directly after ProcessNextHeaders().\n* CHECK for more, like Locator and result.pow_validated_headers.\n* Improve comments.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQFlSLIYzftoTaCTAgBZ52YfsEchV7Z8W7T/u4jTSEaXsSgl2aMDbbmDlhEBUKLWfsK\n4rFKj5H3lyl4iuhJ9zvAk=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/691fb5c86b218600261c353e0b1ca2362e4baf1e",
          "sha": "691fb5c86b218600261c353e0b1ca2362e4baf1e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/691fb5c86b218600261c353e0b1ca2362e4baf1e"
        }
      ],
      "message": "test(headerssync): headers_sync_chainwork test improvements\n\n* Use BOOST_REQUIRE_EQUAL for HeadersSyncState::State - Nicer failure output and prevents continuing test in nonsensical state.\n* Verify HeadersSyncState::State directly after ProcessNextHeaders().\n* CHECK for more, like Locator and result.pow_validated_headers.\n* Improve comments.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T21:36:27Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T19:35:22Z"
      },
      "sha": "b4038bc8300f276adf1a3e6216122903c753743a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZjMjQ2ZTQ5YjYyZWNlYWJlODU3MzZkYzdiYjZlYTE5ZDc2MzRmNWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c246e49b62eceabe85736dc7bb6ea19d7634f5f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6c246e49b62eceabe85736dc7bb6ea19d7634f5f",
      "tree": {
        "sha": "8ac1d7be84109f8911d50a867492f41fbd569d98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ac1d7be84109f8911d50a867492f41fbd569d98"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8ac1d7be84109f8911d50a867492f41fbd569d98\nparent b4038bc8300f276adf1a3e6216122903c753743a\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748609039 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748640987 +0200\n\nheaderssync: Extract constants to header usable by test\n\nThis makes it so that TARGET_BLOCKS in the test always keeps ahead of the constants being updated every release.\n\nAlso add MAX_HEADERS_RESULTS (2000) and a smaller arbitrary value of 123 to the test-constant in order to allow for broader testing.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQFWLkhxHv6XiFIm7a96Tu4lXs/ObjvrIpWYX0cGlqMoeVbzx7wZFYyFRrmQAGfsArX\nByEa03y90xDjsWMcbfZA4=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4038bc8300f276adf1a3e6216122903c753743a",
          "sha": "b4038bc8300f276adf1a3e6216122903c753743a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b4038bc8300f276adf1a3e6216122903c753743a"
        }
      ],
      "message": "headerssync: Extract constants to header usable by test\n\nThis makes it so that TARGET_BLOCKS in the test always keeps ahead of the constants being updated every release.\n\nAlso add MAX_HEADERS_RESULTS (2000) and a smaller arbitrary value of 123 to the test-constant in order to allow for broader testing.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T21:36:27Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T12:43:59Z"
      },
      "sha": "6c246e49b62eceabe85736dc7bb6ea19d7634f5f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJiZTU2MDliODQyMTFjNDlhNTIyZGE5ZGQ1ZDk4N2FiNDU0ZWY5MTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbe5609b84211c49a522da9dd5d987ab454ef912",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bbe5609b84211c49a522da9dd5d987ab454ef912",
      "tree": {
        "sha": "bd2d35e55f5760877066f805537ae831c00e0981",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd2d35e55f5760877066f805537ae831c00e0981"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bd2d35e55f5760877066f805537ae831c00e0981\nparent 6c246e49b62eceabe85736dc7bb6ea19d7634f5f\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1747831346 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1748640987 +0200\n\ntest(headerssync): Test returning of pow_validated_headers behavior\n\nEnabled by having the threshold constant from parent commit.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQJAD2MkQUUHxlU4XfSo23Tmf8xpXt+EpQC0FakQMlBSOw1Tb97WDeUhWNM+RD9mzWI\ncPFpbEKoIlhRpFWuFTvQA=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c246e49b62eceabe85736dc7bb6ea19d7634f5f",
          "sha": "6c246e49b62eceabe85736dc7bb6ea19d7634f5f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6c246e49b62eceabe85736dc7bb6ea19d7634f5f"
        }
      ],
      "message": "test(headerssync): Test returning of pow_validated_headers behavior\n\nEnabled by having the threshold constant from parent commit.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-30T21:36:27Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-05-21T12:42:26Z"
      },
      "sha": "bbe5609b84211c49a522da9dd5d987ab454ef912"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17892103990,
      "node_id": "HRFPE_lADOABII5863mcpzzwAAAAQqc9c2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17892103990",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/bbe5609b84211c49a522da9dd5d987ab454ef912",
      "created_at": "2025-05-30T21:40:29Z"
    },
    {
      "event": "commented",
      "id": 2931826727,
      "node_id": "IC_kwDOABII586uwCAn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2931826727",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-02T17:55:54Z",
      "updated_at": "2025-06-02T17:55:54Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#issuecomment-2931826727",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32579"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100413257",
      "pull_request_review_id": 2857912770,
      "id": 2100413257,
      "node_id": "PRRC_kwDOABII5859McNJ",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2022-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HEADERSSYNC_PARAMS_H\n+#define BITCOIN_HEADERSSYNC_PARAMS_H\n+\n+// The two constants below are computed using the simulation script in\n+// contrib/devtools/headerssync-params.py.\n+\n+//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n+constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n+\n+//! Only feed headers to validation once this many headers on top have been\n+//! received and validated against commitments.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments",
      "path": "src/headerssync-params.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "0c1978b70dd262ffbabf6f034a210a90ff07bb75",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I know this is just a move, but instead of just bare magic number + magic comment (which also has to be [manually updated every time](https://github.com/bitcoin/bitcoin/commit/11a2d3a63e90cdc1920ede3c67d52a9c72860e6b)), could we have the something like : `Generated by headerssync-params.py (on 2025-03-04)`",
      "created_at": "2025-05-21T14:13:47Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2100413257",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2100413257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108774510",
      "pull_request_review_id": 2857912770,
      "id": 2108774510,
      "node_id": "PRRC_kwDOABII5859sVhu",
      "diff_hunk": "@@ -63,15 +63,19 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "34e1513efeb193a46d37f184b9ab41bcda974afa",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "34e1513efeb193a46d37f184b9ab41bcda974afa:\r\nI have inlined the methods and verified that the remaining changes are only comments, reused-and-cleared pointers and vectors 👍 \r\n\r\n<details>\r\n<summary>A few more refactoring nits that could be considered to make this test even more readable and consistent</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/headers_sync_chainwork_tests.cpp b/src/test/headers_sync_chainwork_tests.cpp\r\nindex 054853bbbf..89bb6682d1 100644\r\n--- a/src/test/headers_sync_chainwork_tests.cpp\r\n+++ b/src/test/headers_sync_chainwork_tests.cpp\r\n@@ -13,29 +13,32 @@\r\n \r\n #include <boost/test/unit_test.hpp>\r\n \r\n-struct HeadersGeneratorSetup : public RegTestingSetup {\r\n+struct HeadersGeneratorSetup : RegTestingSetup\r\n+{\r\n     /** Search for a nonce to meet (regtest) proof of work */\r\n-    void FindProofOfWork(CBlockHeader& starting_header);\r\n+    static void FindProofOfWork(CBlockHeader& starting_header);\r\n     /**\r\n      * Generate headers in a chain that build off a given starting hash, using\r\n      * the given nVersion, advancing time by 1 second from the starting\r\n      * prev_time, and with a fixed merkle root hash.\r\n      */\r\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\r\n-            const uint256& starting_hash, const int nVersion, int prev_time,\r\n-            const uint256& merkle_root, const uint32_t nBits);\r\n+    static void GenerateHeaders(\r\n+        std::vector<CBlockHeader>& headers, size_t count,\r\n+        const uint256& starting_hash, int nVersion, int prev_time,\r\n+        const uint256& merkle_root, uint32_t nBits);\r\n };\r\n \r\n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\r\n {\r\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\r\n-        ++(starting_header.nNonce);\r\n+        ++starting_header.nNonce;\r\n     }\r\n }\r\n \r\n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\r\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\r\n-        const uint256& merkle_root, const uint32_t nBits)\r\n+void HeadersGeneratorSetup::GenerateHeaders(\r\n+    std::vector<CBlockHeader>& headers,\r\n+    const size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\r\n+    const uint256& merkle_root, const uint32_t nBits)\r\n {\r\n     uint256 prev_hash = starting_hash;\r\n \r\n@@ -45,14 +48,13 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\r\n         next_header.nVersion = nVersion;\r\n         next_header.hashPrevBlock = prev_hash;\r\n         next_header.hashMerkleRoot = merkle_root;\r\n-        next_header.nTime = prev_time+1;\r\n+        next_header.nTime = prev_time + 1;\r\n         next_header.nBits = nBits;\r\n \r\n         FindProofOfWork(next_header);\r\n         prev_hash = next_header.GetHash();\r\n         prev_time = next_header.nTime;\r\n     }\r\n-    return;\r\n }\r\n \r\n BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\r\n@@ -63,31 +65,41 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\r\n //    updates to the REDOWNLOAD phase successfully.\r\n // 2. Then we deliver the second set of headers and verify that they fail\r\n //    processing (presumably due to commitments not matching).\r\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\r\n+static void SneakyRedownload(\r\n+    const std::vector<CBlockHeader>& first_chain,\r\n+    const std::vector<CBlockHeader>& second_chain,\r\n+    const CBlockIndex* chain_start,\r\n+    const arith_uint256& chain_work);\r\n // 3. Verify that repeating with the first set of headers in both phases is\r\n //    successful.\r\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\r\n+static void HappyPath(\r\n+    const std::vector<CBlockHeader>& first_chain,\r\n+    const CBlockIndex* chain_start,\r\n+    const arith_uint256& chain_work);\r\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\r\n //    behavior when the chain a peer provides has too little work.\r\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\r\n+static void TooLittleWork(\r\n+    const std::vector<CBlockHeader>& second_chain,\r\n+    const CBlockIndex* chain_start,\r\n+    const arith_uint256& chain_work);\r\n \r\n BOOST_AUTO_TEST_CASE(headers_sync_state)\r\n {\r\n     std::vector<CBlockHeader> first_chain;\r\n     std::vector<CBlockHeader> second_chain;\r\n \r\n-    const int target_blocks = 15000;\r\n-    arith_uint256 chain_work = target_blocks*2;\r\n+    constexpr int target_blocks = 15000;\r\n+    const arith_uint256 chain_work = target_blocks * 2;\r\n \r\n     // Generate headers for two different chains (using differing merkle roots\r\n     // to ensure the headers are different).\r\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\r\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\r\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\r\n+    GenerateHeaders(first_chain, target_blocks - 1, Params().GenesisBlock().GetHash(),\r\n+                    Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\r\n+                    ArithToUint256(0), Params().GenesisBlock().nBits);\r\n \r\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\r\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\r\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\r\n+    GenerateHeaders(second_chain, target_blocks - 2, Params().GenesisBlock().GetHash(),\r\n+                    Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\r\n+                    ArithToUint256(1), Params().GenesisBlock().nBits);\r\n \r\n     const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\r\n \r\n@@ -96,7 +108,10 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\r\n     TooLittleWork(second_chain, chain_start, chain_work);\r\n }\r\n \r\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\r\n+static void SneakyRedownload(\r\n+    const std::vector<CBlockHeader>& first_chain,\r\n+    const std::vector<CBlockHeader>& second_chain,\r\n+    const CBlockIndex* chain_start, const arith_uint256& chain_work)\r\n {\r\n     std::vector<CBlockHeader> headers_batch;\r\n \r\n@@ -109,56 +124,59 @@ static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const\r\n     // Pretend the first header is still \"full\", so we don't abort.\r\n     auto result = hss.ProcessNextHeaders(headers_batch, true);\r\n \r\n-    // This chain should look valid, and we should have met the proof-of-work\r\n-    // requirement.\r\n+    // This chain should look valid, and we should have met the proof-of-work requirement.\r\n     BOOST_CHECK(result.success);\r\n     BOOST_CHECK(result.request_more);\r\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\r\n+    BOOST_CHECK_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n \r\n     // Try to sneakily feed back the second chain.\r\n     result = hss.ProcessNextHeaders(second_chain, true);\r\n     BOOST_CHECK(!result.success); // foiled!\r\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\r\n+    BOOST_CHECK_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n }\r\n \r\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\r\n+static void HappyPath(\r\n+    const std::vector<CBlockHeader>& first_chain,\r\n+    const CBlockIndex* chain_start,\r\n+    const arith_uint256& chain_work)\r\n {\r\n     // This time we feed the first chain twice.\r\n     HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\r\n     (void)hss.ProcessNextHeaders(first_chain, true);\r\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\r\n+    BOOST_CHECK_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n \r\n-    auto result = hss.ProcessNextHeaders(first_chain, true);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(!result.request_more);\r\n+    const auto [pow_validated_headers, success, request_more] = hss.ProcessNextHeaders(first_chain, true);\r\n+    BOOST_CHECK(success);\r\n+    BOOST_CHECK(!request_more);\r\n     // All headers should be ready for acceptance:\r\n-    BOOST_CHECK(result.pow_validated_headers.size() == first_chain.size());\r\n+    BOOST_CHECK_EQUAL(pow_validated_headers.size(), first_chain.size());\r\n     // Nothing left for the sync logic to do:\r\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\r\n+    BOOST_CHECK_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n }\r\n \r\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\r\n+static void TooLittleWork(\r\n+    const std::vector<CBlockHeader>& second_chain,\r\n+    const CBlockIndex* chain_start,\r\n+    const arith_uint256& chain_work)\r\n {\r\n-    // Verify that just trying to process the second chain would not succeed\r\n-    // (too little work).\r\n+    // Verify that just trying to process the second chain would not succeed (too little work).\r\n     HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\r\n     BOOST_CHECK(hss.GetState() == HeadersSyncState::State::PRESYNC);\r\n-     // Pretend just the first message is \"full\", so we don't abort.\r\n+    // Pretend just the first message is \"full\", so we don't abort.\r\n     (void)hss.ProcessNextHeaders({second_chain.front()}, true);\r\n     BOOST_CHECK(hss.GetState() == HeadersSyncState::State::PRESYNC);\r\n \r\n     std::vector<CBlockHeader> headers_batch;\r\n     headers_batch.insert(headers_batch.end(), std::next(second_chain.begin(), 1), second_chain.end());\r\n     // Tell the sync logic that the headers message was not full, implying no\r\n-    // more headers can be requested. For a low-work-chain, this should causes\r\n+    // more headers can be requested. For a low-work-chain, this should cause\r\n     // the sync to end with no headers for acceptance.\r\n-    auto result = hss.ProcessNextHeaders(headers_batch, false);\r\n+    const auto [pow_validated_headers, success, request_more] = hss.ProcessNextHeaders(headers_batch, false);\r\n     BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\r\n-    BOOST_CHECK(result.pow_validated_headers.empty());\r\n-    BOOST_CHECK(!result.request_more);\r\n-    // Nevertheless, no validation errors should have been detected with the\r\n-    // chain:\r\n-    BOOST_CHECK(result.success);\r\n+    BOOST_CHECK(pow_validated_headers.empty());\r\n+    BOOST_CHECK(!request_more);\r\n+    // Nevertheless, no validation errors should have been detected with the chain:\r\n+    BOOST_CHECK(success);\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\n```\r\n\r\n</details>\r\n\r\nI see that some of these were done in next commits, but I'd prefer doing either moves or refactors or adding new checks in the commits to simplify review",
      "created_at": "2025-05-27T10:02:29Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108774510",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108774510"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108808636",
      "pull_request_review_id": 2857912770,
      "id": 2108808636,
      "node_id": "PRRC_kwDOABII5859sd28",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we're reusing the previous `result` (which was brace initialized), what if we used braces to delimit the two independent code parts (+ a few other nits you might want to consider):\r\n```suggestion\r\n// Verify that just trying to process the second chain would not succeed (too little work).\r\nHeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\r\nBOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n// Pretend just the first message is \"full\", so we don't abort.\r\n{\r\n    const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({second_chain.begin(), 1}, true)};\r\n    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n    BOOST_CHECK(success);\r\n    BOOST_CHECK(request_more);\r\n    BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n}\r\n\r\n// Tell the sync logic that the headers message was not full, implying no\r\n// more headers can be requested. For a low-work-chain, this should cause\r\n// the sync to end with no headers for acceptance.\r\n{\r\n    const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({second_chain.begin() + 1, second_chain.end()}, false)};\r\n    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n    BOOST_CHECK(!request_more);\r\n    BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n    // Nevertheless, no validation errors should have been detected with the chain:\r\n    BOOST_CHECK(success);\r\n}\r\n```",
      "created_at": "2025-05-27T10:20:14Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108808636",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108808636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108817538",
      "pull_request_review_id": 2857912770,
      "id": 2108817538,
      "node_id": "PRRC_kwDOABII5859sgCC",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems to be the only place where `request_more` isn't validated.\r\n\r\nnit: what's the meaning of \"foiled\" here?\r\n",
      "created_at": "2025-05-27T10:25:04Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108817538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108817538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108830588",
      "pull_request_review_id": 2857912770,
      "id": 2108830588,
      "node_id": "PRRC_kwDOABII5859sjN8",
      "diff_hunk": "@@ -21,23 +21,23 @@ class uint_error : public std::runtime_error {\n };\n \n /** Template base class for unsigned big integers. */\n-template<unsigned int BITS>\n+template <unsigned int BITS>\n class base_uint\n {\n protected:\n     static_assert(BITS / 32 > 0 && BITS % 32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n     static constexpr int WIDTH = BITS / 32;\n     /** Big integer represented with 32-bit digits, least-significant first. */\n     uint32_t pn[WIDTH];\n-public:\n \n-    base_uint()\n+public:\n+    constexpr base_uint()",
      "path": "src/arith_uint256.h",
      "position": 24,
      "original_position": 24,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should we make any of these `explicit`?",
      "created_at": "2025-05-27T10:32:02Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108830588",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108830588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108831717",
      "pull_request_review_id": 2857912770,
      "id": 2108831717,
      "node_id": "PRRC_kwDOABII5859sjfl",
      "diff_hunk": "@@ -13,6 +13,9 @@\n \n #include <boost/test/unit_test.hpp>\n \n+constexpr int TARGET_BLOCKS{15000};",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`size_t` might me more fitting here since `GenerateHeaders` accepts that instead of an `int`:\r\n```suggestion\r\nconstexpr size_t TARGET_BLOCKS{15'000};\r\n```",
      "created_at": "2025-05-27T10:32:42Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108831717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108831717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108844548",
      "pull_request_review_id": 2857912770,
      "id": 2108844548,
      "node_id": "PRRC_kwDOABII5859smoE",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we use `const std::span<const CBlockHeader>` in these helpers as well? And maybe split these long lines.",
      "created_at": "2025-05-27T10:39:52Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108844548",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108844548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108846074",
      "pull_request_review_id": 2857912770,
      "id": 2108846074,
      "node_id": "PRRC_kwDOABII5859sm_6",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n }\n \n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start)\n {\n     // This time we feed the first chain twice.\n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders(first_chain, true);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(first_chain, true)};\n+    // Switched from PRESYNC to REDOWNLOAD after reaching sufficient work:\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 131,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 for comparing size instead of empty - the failure message would likely be more meaningful",
      "created_at": "2025-05-27T10:40:36Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108846074",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108846074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108851720",
      "pull_request_review_id": 2857912770,
      "id": 2108851720,
      "node_id": "PRRC_kwDOABII5859soYI",
      "diff_hunk": "@@ -41,7 +44,7 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\n \n     while (headers.size() < count) {\n         headers.emplace_back();\n-        CBlockHeader& next_header = headers.back();;\n+        CBlockHeader& next_header = headers.back();",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": 62,
      "original_position": 15,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think we could do these in the previous refactor commit instead - to separate low risk changes from ones where we have to may more attention, while keeping the first one about move-only changes + minor ones. Or do the first commit as strictly move-only and add a second one with these tiny refactors (I'd like the latter more).",
      "created_at": "2025-05-27T10:43:22Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108851720",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108851720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108854570",
      "pull_request_review_id": 2857912770,
      "id": 2108854570,
      "node_id": "PRRC_kwDOABII5859spEq",
      "diff_hunk": "",
      "path": "src/arith_uint256.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "full patch for 13aa0b860e9692715d96b13acacb3f83a537b905\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```diff\r\ndiff --git a/src/arith_uint256.h b/src/arith_uint256.h\r\nindex e021947381..b07e8e9f41 100644\r\n--- a/src/arith_uint256.h\r\n+++ b/src/arith_uint256.h\r\n@@ -31,7 +31,7 @@ protected:\r\n     uint32_t pn[WIDTH];\r\n \r\n public:\r\n-    constexpr base_uint()\r\n+    explicit constexpr base_uint()\r\n     {\r\n         for (int i = 0; i < WIDTH; i++)\r\n             pn[i] = 0;\r\n@@ -243,8 +243,8 @@ class arith_uint256 : public base_uint<256>\r\n {\r\n public:\r\n     constexpr arith_uint256() = default;\r\n-    constexpr arith_uint256(const base_uint<256>& b) : base_uint<256>(b) {}\r\n-    constexpr arith_uint256(uint64_t b) : base_uint<256>(b) {}\r\n+    constexpr arith_uint256(const base_uint& b) : base_uint(b) {}\r\n+    constexpr arith_uint256(const uint64_t b) : base_uint(b) {}\r\n \r\n     /**\r\n      * The \"compact\" format is a representation of a whole\r\ndiff --git a/src/test/headers_sync_chainwork_tests.cpp b/src/test/headers_sync_chainwork_tests.cpp\r\nindex b696285d0e..264959f8c3 100644\r\n--- a/src/test/headers_sync_chainwork_tests.cpp\r\n+++ b/src/test/headers_sync_chainwork_tests.cpp\r\n@@ -13,32 +13,35 @@\r\n \r\n #include <boost/test/unit_test.hpp>\r\n \r\n-constexpr int TARGET_BLOCKS{15000};\r\n+constexpr size_t TARGET_BLOCKS{15'000};\r\n constexpr arith_uint256 CHAIN_WORK{TARGET_BLOCKS * 2};\r\n \r\n-struct HeadersGeneratorSetup : public RegTestingSetup {\r\n+struct HeadersGeneratorSetup : RegTestingSetup\r\n+{\r\n     /** Search for a nonce to meet (regtest) proof of work */\r\n-    void FindProofOfWork(CBlockHeader& starting_header);\r\n+    static void FindProofOfWork(CBlockHeader& starting_header);\r\n     /**\r\n      * Generate headers in a chain that build off a given starting hash, using\r\n      * the given nVersion, advancing time by 1 second from the starting\r\n      * prev_time, and with a fixed merkle root hash.\r\n      */\r\n-    void GenerateHeaders(std::vector<CBlockHeader>& headers, size_t count,\r\n-            const uint256& starting_hash, const int nVersion, int prev_time,\r\n-            const uint256& merkle_root, const uint32_t nBits);\r\n+    static void GenerateHeaders(\r\n+        std::vector<CBlockHeader>& headers, size_t count,\r\n+        const uint256& starting_hash, int nVersion, int prev_time,\r\n+        const uint256& merkle_root, uint32_t nBits);\r\n };\r\n \r\n void HeadersGeneratorSetup::FindProofOfWork(CBlockHeader& starting_header)\r\n {\r\n     while (!CheckProofOfWork(starting_header.GetHash(), starting_header.nBits, Params().GetConsensus())) {\r\n-        ++(starting_header.nNonce);\r\n+        ++starting_header.nNonce;\r\n     }\r\n }\r\n \r\n-void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\r\n-        size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\r\n-        const uint256& merkle_root, const uint32_t nBits)\r\n+void HeadersGeneratorSetup::GenerateHeaders(\r\n+    std::vector<CBlockHeader>& headers,\r\n+    const size_t count, const uint256& starting_hash, const int nVersion, int prev_time,\r\n+    const uint256& merkle_root, const uint32_t nBits)\r\n {\r\n     uint256 prev_hash = starting_hash;\r\n \r\n@@ -48,7 +51,7 @@ void HeadersGeneratorSetup::GenerateHeaders(std::vector<CBlockHeader>& headers,\r\n         next_header.nVersion = nVersion;\r\n         next_header.hashPrevBlock = prev_hash;\r\n         next_header.hashMerkleRoot = merkle_root;\r\n-        next_header.nTime = prev_time+1;\r\n+        next_header.nTime = prev_time + 1;\r\n         next_header.nBits = nBits;\r\n \r\n         FindProofOfWork(next_header);\r\n@@ -65,13 +68,20 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\r\n //    updates to the REDOWNLOAD phase successfully.\r\n // 2. Then we deliver the second set of headers and verify that they fail\r\n //    processing (presumably due to commitments not matching).\r\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\r\n+static void SneakyRedownload(\r\n+    const std::span<const CBlockHeader> first_chain,\r\n+    const std::span<const CBlockHeader> second_chain,\r\n+    const CBlockIndex* chain_start);\r\n // 3. Verify that repeating with the first set of headers in both phases is\r\n //    successful.\r\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\r\n+static void HappyPath(\r\n+    const std::span<const CBlockHeader> first_chain,\r\n+    const CBlockIndex* chain_start);\r\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\r\n //    behavior when the chain a peer provides has too little work.\r\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\r\n+static void TooLittleWork(\r\n+    const std::span<const CBlockHeader> second_chain,\r\n+    const CBlockIndex* chain_start);\r\n \r\n BOOST_AUTO_TEST_CASE(headers_sync_state)\r\n {\r\n@@ -94,81 +104,101 @@ BOOST_AUTO_TEST_CASE(headers_sync_state)\r\n     TooLittleWork(second_chain, chain_start);\r\n }\r\n \r\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\r\n+static void SneakyRedownload(\r\n+    const std::span<const CBlockHeader> first_chain,\r\n+    const std::span<const CBlockHeader> second_chain,\r\n+    const CBlockIndex* chain_start)\r\n {\r\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\r\n     // initially and then the rest.\r\n     HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\r\n-    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(result.request_more);\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({first_chain.begin(), 1}, true)};\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n+        BOOST_CHECK(success);\r\n+        BOOST_CHECK(request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\r\n+    }\r\n \r\n     // Pretend the first header is still \"full\", so we don't abort.\r\n-    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\r\n-    // This chain should look valid, and we should have met the proof-of-work\r\n-    // requirement during PRESYNC and transitioned to REDOWNLOAD.\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(result.request_more);\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-    // The locator should reset to genesis.\r\n-    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({first_chain.begin() + 1, first_chain.end()}, true)};\r\n+        // This chain should look valid, and we should have met the proof-of-work\r\n+        // requirement during PRESYNC and transitioned to REDOWNLOAD.\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n+        BOOST_CHECK(success);\r\n+        BOOST_CHECK(request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+        // The locator should reset to genesis.\r\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\r\n+    }\r\n \r\n     // Try to sneakily feed back the second chain during REDOWNLOAD.\r\n-    result = hss.ProcessNextHeaders(second_chain, true);\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n-    BOOST_CHECK(!result.success); // foiled!\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders(second_chain, true)};\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n+        BOOST_CHECK(!success); // foiled!\r\n+        BOOST_CHECK(!request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+    }\r\n }\r\n \r\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start)\r\n+static void HappyPath(\r\n+    const std::span<const CBlockHeader> first_chain,\r\n+    const CBlockIndex* chain_start)\r\n {\r\n     // This time we feed the first chain twice.\r\n     HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\r\n-    auto result{hss.ProcessNextHeaders(first_chain, true)};\r\n-    // Switched from PRESYNC to REDOWNLOAD after reaching sufficient work:\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(result.request_more);\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-    // The locator should reset to genesis.\r\n-    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\r\n-\r\n-    result = hss.ProcessNextHeaders(first_chain, true);\r\n-    // Nothing left for the sync logic to do:\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(!result.request_more);\r\n-    // All headers should be ready for acceptance:\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), first_chain.size());\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders(first_chain, true)};\r\n+        // Switched from PRESYNC to REDOWNLOAD after reaching sufficient work:\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\r\n+        BOOST_CHECK(success);\r\n+        BOOST_CHECK(request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+        // The locator should reset to genesis.\r\n+        BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\r\n+    }\r\n+\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders(first_chain, true)};\r\n+        // Nothing left for the sync logic to do:\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n+        BOOST_CHECK(success);\r\n+        BOOST_CHECK(!request_more);\r\n+        // All headers should be ready for acceptance:\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), first_chain.size());\r\n+    }\r\n }\r\n \r\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\r\n+static void TooLittleWork(\r\n+    const std::span<const CBlockHeader> second_chain,\r\n+    const CBlockIndex* chain_start)\r\n {\r\n-    // Verify that just trying to process the second chain would not succeed\r\n-    // (too little work).\r\n+    // Verify that just trying to process the second chain would not succeed (too little work).\r\n     HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\r\n     BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n     // Pretend just the first message is \"full\", so we don't abort.\r\n-    auto result{hss.ProcessNextHeaders(std::span{second_chain.begin(), 1}, true)};\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n-    BOOST_CHECK(result.success);\r\n-    BOOST_CHECK(result.request_more);\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({second_chain.begin(), 1}, true)};\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\r\n+        BOOST_CHECK(success);\r\n+        BOOST_CHECK(request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+    }\r\n \r\n     // Tell the sync logic that the headers message was not full, implying no\r\n     // more headers can be requested. For a low-work-chain, this should cause\r\n     // the sync to end with no headers for acceptance.\r\n-    result = hss.ProcessNextHeaders(std::span{second_chain.begin() + 1, second_chain.end()}, false);\r\n-    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n-    BOOST_CHECK(!result.request_more);\r\n-    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\r\n-    // Nevertheless, no validation errors should have been detected with the\r\n-    // chain:\r\n-    BOOST_CHECK(result.success);\r\n+    {\r\n+        const auto [pow_validated_headers, success, request_more]{hss.ProcessNextHeaders({second_chain.begin() + 1, second_chain.end()}, false)};\r\n+        BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\r\n+        BOOST_CHECK(!request_more);\r\n+        BOOST_CHECK_EQUAL(pow_validated_headers.size(), 0);\r\n+        // Nevertheless, no validation errors should have been detected with the chain:\r\n+        BOOST_CHECK(success);\r\n+    }\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\n```\r\n\r\n</details>",
      "created_at": "2025-05-27T10:44:53Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108854570",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108854570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108862657",
      "pull_request_review_id": 2857912770,
      "id": 2108862657,
      "node_id": "PRRC_kwDOABII5859srDB",
      "diff_hunk": "",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For other headers we've used an underscore instead of a hyphen in the file name: `src/headerssync_params.h`",
      "created_at": "2025-05-27T10:49:22Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108862657",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108862657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108864154",
      "pull_request_review_id": 2857912770,
      "id": 2108864154,
      "node_id": "PRRC_kwDOABII5859sraa",
      "diff_hunk": "@@ -53,7 +53,7 @@ Release Process\n     - Set `MINCHAINWORK_HEADERS` to the height used for the `nMinimumChainWork` calculation above.\n     - Check that the other variables still look reasonable.\n   - Run the script. It works fine in CPython, but PyPy is much faster (seconds instead of minutes): `pypy3 contrib/devtools/headerssync-params.py`.\n-  - Paste the output defining `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` into the top of [`src/headerssync.cpp`](/src/headerssync.cpp).\n+  - Paste the output defining `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` into [`src/headerssync-params.h`](/src/headerssync-params.h).",
      "path": "doc/release-process.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should we update https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/README.md?plain=1#L140 as well?",
      "created_at": "2025-05-27T10:50:16Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108864154",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108864154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108871856",
      "pull_request_review_id": 2857912770,
      "id": 2108871856,
      "node_id": "PRRC_kwDOABII5859stSw",
      "diff_hunk": "@@ -1,26 +1,18 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n+#include <headerssync-params.h>\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes 48 bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).",
      "path": "src/headerssync.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find the new comment slightly more confusing - the point is that the cpp and py assumptions should align, right?\r\n```suggestion\r\nstatic_assert(sizeof(CompressedHeader) == 48); // align with headerssync-params.py\r\n```",
      "created_at": "2025-05-27T10:54:20Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108871856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108871856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": 14,
      "original_start_line": 14,
      "start_side": "RIGHT",
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108874990",
      "pull_request_review_id": 2857912770,
      "id": 2108874990,
      "node_id": "PRRC_kwDOABII5859suDu",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2022-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HEADERSSYNC_PARAMS_H\n+#define BITCOIN_HEADERSSYNC_PARAMS_H\n+\n+// The two constants below are computed using the simulation script in\n+// contrib/devtools/headerssync-params.py.\n+\n+//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.",
      "path": "src/headerssync-params.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I find it a bit circular that the comment explaining a constant references the upcoming constant itself\r\n```suggestion\r\n//! Commitment period, in blocks\r\n```",
      "created_at": "2025-05-27T10:56:06Z",
      "updated_at": "2025-05-27T11:35:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108874990",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2108874990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115807522",
      "pull_request_review_id": 2881152192,
      "id": 2115807522,
      "node_id": "PRRC_kwDOABII585-HKki",
      "diff_hunk": "",
      "path": "src/arith_uint256.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108854570,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What's the point of making a constructor that takes no arguments `explicit`?",
      "created_at": "2025-05-30T12:06:00Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115807522",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115807522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115831187",
      "pull_request_review_id": 2881152192,
      "id": 2115831187,
      "node_id": "PRRC_kwDOABII585-HQWT",
      "diff_hunk": "@@ -21,23 +21,23 @@ class uint_error : public std::runtime_error {\n };\n \n /** Template base class for unsigned big integers. */\n-template<unsigned int BITS>\n+template <unsigned int BITS>\n class base_uint\n {\n protected:\n     static_assert(BITS / 32 > 0 && BITS % 32 == 0, \"Template parameter BITS must be a positive multiple of 32.\");\n     static constexpr int WIDTH = BITS / 32;\n     /** Big integer represented with 32-bit digits, least-significant first. */\n     uint32_t pn[WIDTH];\n-public:\n \n-    base_uint()\n+public:\n+    constexpr base_uint()",
      "path": "src/arith_uint256.h",
      "position": 24,
      "original_position": 24,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108830588,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "One could argue at least the `uint64_t`-taking ctor here and in `arith_uint256` should be explicit, but I'd rather not have to change src/pow.cpp in this PR.",
      "created_at": "2025-05-30T12:23:05Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115831187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115831187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115848183",
      "pull_request_review_id": 2881152192,
      "id": 2115848183,
      "node_id": "PRRC_kwDOABII585-HUf3",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2022-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HEADERSSYNC_PARAMS_H\n+#define BITCOIN_HEADERSSYNC_PARAMS_H\n+\n+// The two constants below are computed using the simulation script in\n+// contrib/devtools/headerssync-params.py.\n+\n+//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n+constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n+\n+//! Only feed headers to validation once this many headers on top have been\n+//! received and validated against commitments.\n+constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments",
      "path": "src/headerssync-params.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "0c1978b70dd262ffbabf6f034a210a90ff07bb75",
      "in_reply_to_id": 2100413257,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I like the idea of including the generation date, and was including changes to the Python generator file in an unpublished version of this PR, but decided to keep that separate. Added to that separate WIP branch.\r\n\r\nThe magic numbers are not updated manually, they are included in the calculated output:\r\nhttps://github.com/bitcoin/bitcoin/blob/11a2d3a63e90cdc1920ede3c67d52a9c72860e6b/contrib/devtools/headerssync-params.py#L347-L348",
      "created_at": "2025-05-30T12:35:25Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115848183",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115848183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 16,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115856000",
      "pull_request_review_id": 2881152192,
      "id": 2115856000,
      "node_id": "PRRC_kwDOABII585-HWaA",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108817538,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If we didn't succeed, then `request_more` shouldn't matter, but agree it's best to have it be false (just like `pow_validated_headers` should be empty). It would be better if `ProcessNextHeaders` returned something like `std::optional<ProcessingResult>` instead of having a `bool` field to indicate success, but this PR already feels large enough.\r\n\r\n\"foiled\" means the attack attempt was detected and therefore failed. Elaborated the comment a bit in next push.",
      "created_at": "2025-05-30T12:40:53Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115856000",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115856000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115857753",
      "pull_request_review_id": 2881152192,
      "id": 2115857753,
      "node_id": "PRRC_kwDOABII585-HW1Z",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108844548,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree on the split but what would be the point of changing the type?",
      "created_at": "2025-05-30T12:42:02Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115857753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115857753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115868402",
      "pull_request_review_id": 2881152192,
      "id": 2115868402,
      "node_id": "PRRC_kwDOABII585-HZby",
      "diff_hunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2022-present The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HEADERSSYNC_PARAMS_H\n+#define BITCOIN_HEADERSSYNC_PARAMS_H\n+\n+// The two constants below are computed using the simulation script in\n+// contrib/devtools/headerssync-params.py.\n+\n+//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.",
      "path": "src/headerssync-params.h",
      "position": 11,
      "original_position": 11,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108874990,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added to separate WIP branch modifying generator script.",
      "created_at": "2025-05-30T12:49:03Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115868402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115868402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115879398",
      "pull_request_review_id": 2881152192,
      "id": 2115879398,
      "node_id": "PRRC_kwDOABII585-HcHm",
      "diff_hunk": "@@ -1,26 +1,18 @@\n-// Copyright (c) 2022 The Bitcoin Core developers\n+// Copyright (c) 2022-present The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <headerssync.h>\n+\n+#include <headerssync-params.h>\n #include <logging.h>\n #include <pow.h>\n #include <util/check.h>\n #include <util/time.h>\n #include <util/vector.h>\n \n-// The two constants below are computed using the simulation script in\n-// contrib/devtools/headerssync-params.py.\n-\n-//! Store one header commitment per HEADER_COMMITMENT_PERIOD blocks.\n-constexpr size_t HEADER_COMMITMENT_PERIOD{624};\n-\n-//! Only feed headers to validation once this many headers on top have been\n-//! received and validated against commitments.\n-constexpr size_t REDOWNLOAD_BUFFER_SIZE{14827}; // 14827/624 = ~23.8 commitments\n-\n-// Our memory analysis assumes 48 bytes for a CompressedHeader (so we should\n-// re-calculate parameters if we compress further)\n+// Our memory analysis in headerssync-params.py assumes 48 bytes for a\n+// CompressedHeader (we should re-calculate parameters if we compress further).",
      "path": "src/headerssync.cpp",
      "position": 28,
      "original_position": 28,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108871856,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The new comment is replacing the first (mention of python file) and last comments here:\r\nhttps://github.com/bitcoin/bitcoin/blob/11a2d3a63e90cdc1920ede3c67d52a9c72860e6b/src/headerssync.cpp#L12-L25\r\n\r\nYour comment would probably be enough but I'd rather keep some more context.",
      "created_at": "2025-05-30T12:55:58Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115879398",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115879398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": 14,
      "original_start_line": 14,
      "start_side": "RIGHT",
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115884389",
      "pull_request_review_id": 2881152192,
      "id": 2115884389,
      "node_id": "PRRC_kwDOABII585-HdVl",
      "diff_hunk": "@@ -53,7 +53,7 @@ Release Process\n     - Set `MINCHAINWORK_HEADERS` to the height used for the `nMinimumChainWork` calculation above.\n     - Check that the other variables still look reasonable.\n   - Run the script. It works fine in CPython, but PyPy is much faster (seconds instead of minutes): `pypy3 contrib/devtools/headerssync-params.py`.\n-  - Paste the output defining `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` into the top of [`src/headerssync.cpp`](/src/headerssync.cpp).\n+  - Paste the output defining `HEADER_COMMITMENT_PERIOD` and `REDOWNLOAD_BUFFER_SIZE` into [`src/headerssync-params.h`](/src/headerssync-params.h).",
      "path": "doc/release-process.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108864154,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, missed that!",
      "created_at": "2025-05-30T12:59:04Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115884389",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115884389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116580384",
      "pull_request_review_id": 2881152192,
      "id": 2116580384,
      "node_id": "PRRC_kwDOABII585-KHQg",
      "diff_hunk": "",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108862657,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Started renaming but then realized that we already have *headerssync-params.py*. It's not obvious to me that underscores would be more correct for C++ files. We do have other C++ files with hyphens.",
      "created_at": "2025-05-30T20:18:21Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2116580384",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116580384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116586810",
      "pull_request_review_id": 2881152192,
      "id": 2116586810,
      "node_id": "PRRC_kwDOABII585-KI06",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108808636,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Took the scoping idea, still not sure about the structured bindings.",
      "created_at": "2025-05-30T20:22:40Z",
      "updated_at": "2025-05-30T20:37:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2116586810",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116586810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116614226",
      "pull_request_review_id": 2882477803,
      "id": 2116614226,
      "node_id": "PRRC_kwDOABII585-KPhS",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108817538,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hm.. my `std::optional<ProcessingResult>` suggestion would ~not work~ not clarify things here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/a7b9cc4a0af0dbe4031ec5848d403f61dc9c3356/src/test/headers_sync_chainwork_tests.cpp#L127-L136\r\n\r\nSuccess seems to mean that PRESYNC- and REDOWNLOAD-headers matched, even if the chain is too short.",
      "created_at": "2025-05-30T20:45:37Z",
      "updated_at": "2025-05-30T20:47:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2116614226",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116614226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120449098",
      "pull_request_review_id": 2887351042,
      "id": 2120449098,
      "node_id": "PRRC_kwDOABII585-Y3xK",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108808636,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> not sure about the structured bindings\r\n\r\nThat's what helped me in [noticing](https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2108817538) that we weren't checking `request_more`",
      "created_at": "2025-06-02T08:39:31Z",
      "updated_at": "2025-06-02T08:39:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120449098",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120449098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120449675",
      "pull_request_review_id": 2887351923,
      "id": 2120449675,
      "node_id": "PRRC_kwDOABII585-Y36L",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108844548,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "* they're simpler/less specific\r\n* they're shorter (matters for these long lines)\r\n* you're already changing them in other places\r\n\r\ni.e. what's the point of keeping them as vectors when we don't actually need so much power? ",
      "created_at": "2025-06-02T08:39:50Z",
      "updated_at": "2025-06-02T08:39:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120449675",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120449675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120450540",
      "pull_request_review_id": 2887353340,
      "id": 2120450540,
      "node_id": "PRRC_kwDOABII585-Y4Hs",
      "diff_hunk": "",
      "path": "src/arith_uint256.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108854570,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Based on the [Sonarcloud](https://corecheck.dev/bitcoin/bitcoin/pulls/32579) recommendations I eagerly checked which other constructors can be explicit, but [exploring](https://cplusplus.com/forum/general/168292/) your question in more detail it seems there's barely any advantage in explicit default constructors.",
      "created_at": "2025-06-02T08:40:21Z",
      "updated_at": "2025-06-02T08:40:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120450540",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120450540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120450728",
      "pull_request_review_id": 2887353657,
      "id": 2120450728,
      "node_id": "PRRC_kwDOABII585-Y4Ko",
      "diff_hunk": "",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108862657,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems to be a mix indeed:\r\n```bash\r\n% find . -name \"*.h\" | grep '_' | wc -l\r\n185\r\n```\r\nvs\r\n```bash\r\n% find . -name \"*.h\" | grep '-' | wc -l\r\n39\r\n```\r\nand most of those are from the recent `ipc` changes:\r\n```bash\r\n% find . -name \"*.h\" | grep '-' | grep -v ipc | wc -l            \r\n11\r\n```\r\n\r\nit's just a nit from my part, but standard lib also uses underscores mostly (e.g. `string_view`) and in many [regexes](https://www.w3schools.com/jsref/jsref_regexp_wordchar.asp) the `\\w`, i.e. a word character includes `_` but usually not `-` (if I remember it correctly some bash implementations can also trip on `-`, but that's likely not a problem here).",
      "created_at": "2025-06-02T08:40:27Z",
      "updated_at": "2025-06-02T08:40:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120450728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120450728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120817742",
      "pull_request_review_id": 2887893367,
      "id": 2120817742,
      "node_id": "PRRC_kwDOABII585-aRxO",
      "diff_hunk": "",
      "path": "src/arith_uint256.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108854570,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, the Sonarcloud recommendation was actually for the `uint64_t`-ctor, similar to my response here: https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2115831187.\r\n\r\nTested out making it explicit, modifying 13 additional files. It did uncover some implicit casts that went from `int64_t Params::nPowTargetTimespan` to `arith_uint256`... But the rest felt a bit forced. I think it is intentional and makes sense for u64s to implicitly cast to u256.",
      "created_at": "2025-06-02T11:08:10Z",
      "updated_at": "2025-06-02T12:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120817742",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120817742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120826619",
      "pull_request_review_id": 2887893367,
      "id": 2120826619,
      "node_id": "PRRC_kwDOABII585-aT77",
      "diff_hunk": "@@ -63,15 +63,19 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-// 3. Finally, we verify that repeating with the first set of headers in both\n-//    phases is successful.\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "34e1513efeb193a46d37f184b9ab41bcda974afa",
      "in_reply_to_id": 2108774510,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Incorporated most of this, breaking out commits, expanding function prototypes into multiple lines, even removing the `HeadersGeneratorSetup` type in favor of free functions).",
      "created_at": "2025-06-02T11:13:39Z",
      "updated_at": "2025-06-02T12:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120826619",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120826619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120833106",
      "pull_request_review_id": 2887893367,
      "id": 2120833106,
      "node_id": "PRRC_kwDOABII585-aVhS",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108808636,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there anything to catch wrong order?\r\n```C++\r\nconst auto [pow_validated_headers, success, request_more] = ...\r\n```\r\nvs\r\n```C++\r\nconst auto [pow_validated_headers, request_more, success] = ...\r\n```\r\n(There's clang-tidy logic to catch `/*paramname=*/true` mismatches for function calls).",
      "created_at": "2025-06-02T11:17:41Z",
      "updated_at": "2025-06-02T12:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120833106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120833106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120844393",
      "pull_request_review_id": 2887893367,
      "id": 2120844393,
      "node_id": "PRRC_kwDOABII585-aYRp",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108844548,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Using `const vector&` communicates that we are sending in the entire chain, not some subset. I like the specificity. `const vector`s feel more neutered than spans IMO.",
      "created_at": "2025-06-02T11:21:44Z",
      "updated_at": "2025-06-02T12:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120844393",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120844393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120864823",
      "pull_request_review_id": 2887893367,
      "id": 2120864823,
      "node_id": "PRRC_kwDOABII585-adQ3",
      "diff_hunk": "",
      "path": "src/headerssync-params.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "e9f4f6a5d9499424533b281d1cd4050543d5aa73",
      "in_reply_to_id": 2108862657,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, seems src/ipc/ really went all in on `-`. Holding off on changing for now to see what others think.",
      "created_at": "2025-06-02T11:29:44Z",
      "updated_at": "2025-06-02T12:23:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2120864823",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2120864823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121282517",
      "pull_request_review_id": 2888616979,
      "id": 2121282517,
      "node_id": "PRRC_kwDOABII585-cDPV",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n // 3. Verify that repeating with the first set of headers in both phases is\n //    successful.\n-static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void HappyPath(const std::vector<CBlockHeader>& first_chain, const CBlockIndex* chain_start);\n // 4. Finally, repeat the second set of headers in both phases to demonstrate\n //    behavior when the chain a peer provides has too little work.\n-static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void TooLittleWork(const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);\n \n BOOST_AUTO_TEST_CASE(headers_sync_state)\n {\n     std::vector<CBlockHeader> first_chain;\n     std::vector<CBlockHeader> second_chain;\n \n-    const int target_blocks = 15000;\n-    arith_uint256 chain_work = target_blocks*2;\n+    const auto genesis{Params().GenesisBlock()};\n \n     // Generate headers for two different chains (using differing merkle roots\n     // to ensure the headers are different).\n-    GenerateHeaders(first_chain, target_blocks-1, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(0), Params().GenesisBlock().nBits);\n-\n-    GenerateHeaders(second_chain, target_blocks-2, Params().GenesisBlock().GetHash(),\n-            Params().GenesisBlock().nVersion, Params().GenesisBlock().nTime,\n-            ArithToUint256(1), Params().GenesisBlock().nBits);\n+    GenerateHeaders(first_chain, TARGET_BLOCKS - 1, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ZERO, genesis.nBits);\n+    GenerateHeaders(second_chain, TARGET_BLOCKS - 2, genesis.GetHash(), genesis.nVersion,\n+                    genesis.nTime, /*merkle_root=*/uint256::ONE, genesis.nBits);\n \n-    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(Params().GenesisBlock().GetHash()));\n+    const CBlockIndex* chain_start = WITH_LOCK(::cs_main, return m_node.chainman->m_blockman.LookupBlockIndex(genesis.GetHash()));\n \n-    SneakyRedownload(first_chain, second_chain, chain_start, chain_work);\n-    HappyPath(first_chain, chain_start, chain_work);\n-    TooLittleWork(second_chain, chain_start, chain_work);\n+    SneakyRedownload(first_chain, second_chain, chain_start);\n+    HappyPath(first_chain, chain_start);\n+    TooLittleWork(second_chain, chain_start);\n }\n \n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work)\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start)\n {\n-    std::vector<CBlockHeader> headers_batch;\n-\n     // Feed the first chain to HeadersSyncState, by delivering 1 header\n     // initially and then the rest.\n-    headers_batch.insert(headers_batch.end(), std::next(first_chain.begin()), first_chain.end());\n+    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, CHAIN_WORK};\n+    auto result{hss.ProcessNextHeaders(std::span{first_chain.begin(), 1}, true)};\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::PRESYNC);\n+    BOOST_CHECK(result.success);\n+    BOOST_CHECK(result.request_more);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), first_chain.front().GetHash());\n \n-    HeadersSyncState hss{0, Params().GetConsensus(), chain_start, chain_work};\n-    (void)hss.ProcessNextHeaders({first_chain.front()}, true);\n     // Pretend the first header is still \"full\", so we don't abort.\n-    auto result = hss.ProcessNextHeaders(headers_batch, true);\n-\n+    result = hss.ProcessNextHeaders(std::span{first_chain.begin() + 1, first_chain.end()}, true);\n     // This chain should look valid, and we should have met the proof-of-work\n-    // requirement.\n+    // requirement during PRESYNC and transitioned to REDOWNLOAD.\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::REDOWNLOAD);\n     BOOST_CHECK(result.success);\n     BOOST_CHECK(result.request_more);\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::REDOWNLOAD);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);\n+    // The locator should reset to genesis.\n+    BOOST_CHECK_EQUAL(hss.NextHeadersRequestLocator().vHave.front(), Params().GenesisBlock().GetHash());\n \n-    // Try to sneakily feed back the second chain.\n+    // Try to sneakily feed back the second chain during REDOWNLOAD.\n     result = hss.ProcessNextHeaders(second_chain, true);\n+    BOOST_REQUIRE_EQUAL(hss.GetState(), HeadersSyncState::State::FINAL);\n     BOOST_CHECK(!result.success); // foiled!\n-    BOOST_CHECK(hss.GetState() == HeadersSyncState::State::FINAL);\n+    BOOST_CHECK_EQUAL(result.pow_validated_headers.size(), 0);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108808636,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think there could/should be, you could name them as `const auto [x, y, z]{hss.ProcessNextHeaders(std::span{second_chain.begin() + 1, second_chain.end()}, false)};` as well",
      "created_at": "2025-06-02T14:13:31Z",
      "updated_at": "2025-06-02T14:13:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2121282517",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121282517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121291449",
      "pull_request_review_id": 2888631347,
      "id": 2121291449,
      "node_id": "PRRC_kwDOABII585-cFa5",
      "diff_hunk": "@@ -63,99 +65,107 @@ BOOST_FIXTURE_TEST_SUITE(headers_sync_chainwork_tests, HeadersGeneratorSetup)\n //    updates to the REDOWNLOAD phase successfully.\n // 2. Then we deliver the second set of headers and verify that they fail\n //    processing (presumably due to commitments not matching).\n-static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start, const arith_uint256& chain_work);\n+static void SneakyRedownload(const std::vector<CBlockHeader>& first_chain, const std::vector<CBlockHeader>& second_chain, const CBlockIndex* chain_start);",
      "path": "src/test/headers_sync_chainwork_tests.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "bbe5609b84211c49a522da9dd5d987ab454ef912",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108844548,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "When we're only iterating inside, it makes sense to have a fine-grained, segregated interface and only define the narrowest functionality which supports the operations we actually need inside. It announces to the reader that we shouldn't expect any extra complexity, only the ones that the interface implements. But if you think vector does it better, I'm also fine with that. For me span is not about a subset of teh data but a subset of the functionality - just a narrowed view to rule out certain operations that we definitely won't need.",
      "created_at": "2025-06-02T14:17:23Z",
      "updated_at": "2025-06-02T14:17:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2121291449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121291449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121293497",
      "pull_request_review_id": 2888634450,
      "id": 2121293497,
      "node_id": "PRRC_kwDOABII585-cF65",
      "diff_hunk": "",
      "path": "src/arith_uint256.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "315736d50f0ee66443d25c4bcf4e28627f52eab9",
      "original_commit_id": "13aa0b860e9692715d96b13acacb3f83a537b905",
      "in_reply_to_id": 2108854570,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for checking!",
      "created_at": "2025-06-02T14:18:15Z",
      "updated_at": "2025-06-02T14:18:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32579#discussion_r2121293497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2121293497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32579"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    }
  ]
}