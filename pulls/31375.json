{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375",
    "id": 2201625045,
    "node_id": "PR_kwDOABII586DOiHV",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31375",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31375.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31375.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/044c1129db06983da598f427dff85513d8480b3a",
    "number": 31375,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "multiprocess: Add bitcoin wrapper executable",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Intended to make bitcoin command line features more discoverable and allow installing new multiprocess binaries in libexec/ instead of bin/ so they don't cause confusion.\r\n\r\nIdea and implementation of this were discussed in https://github.com/bitcoin/bitcoin/issues/30983\r\n\r\n---\r\n\r\nThis PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/issues/28722).",
    "labels": [],
    "created_at": "2024-11-26T17:57:32Z",
    "updated_at": "2025-01-04T10:44:47Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "f9401094c136db2dfef576073e3fe23e150a590f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ryanofsky:pr/wrap",
      "ref": "pr/wrap",
      "sha": "044c1129db06983da598f427dff85513d8480b3a",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 9,
        "stargazers_count": 15,
        "watchers_count": 15,
        "size": 273085,
        "default_branch": "master",
        "open_issues_count": 3,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-03T14:20:08Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2024-12-03T23:24:02Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "477b357460743a9304cccfb672e5445f364891ae",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36473,
        "stargazers_count": 81044,
        "watchers_count": 81044,
        "size": 273906,
        "default_branch": "master",
        "open_issues_count": 690,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-03T18:58:26Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-01-04T10:56:25Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 297,
    "deletions": 37,
    "changed_files": 11,
    "commits": 3,
    "review_comments": 40,
    "comments": 12
  },
  "events": [
    {
      "event": "commented",
      "id": 2501598456,
      "node_id": "IC_kwDOABII586VG1z4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2501598456",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T17:57:35Z",
      "updated_at": "2025-01-04T10:44:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31375.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [Sjors](https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2550270615) |\n| Concept ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2571248802) |\n| Approach ACK | [vasild](https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2517070391) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31583](https://github.com/bitcoin/bitcoin/pull/31583) (rpc: add gettarget , target getmininginfo field and show next block info by Sjors)\n* [#31462](https://github.com/bitcoin/bitcoin/pull/31462) (test: raise explicit error if any of the needed release binaries is missing by theStack)\n* [#31250](https://github.com/bitcoin/bitcoin/pull/31250) (wallet: Disable creating and loading legacy wallets by achow101)\n* [#31061](https://github.com/bitcoin/bitcoin/pull/31061) (refactor: Check translatable format strings at compile-time by maflcko)\n* [#30975](https://github.com/bitcoin/bitcoin/pull/30975) (Add multiprocess binaries to release build by Sjors)\n* [#30437](https://github.com/bitcoin/bitcoin/pull/30437) (multiprocess: add bitcoin-mine test program by ryanofsky)\n* [#30125](https://github.com/bitcoin/bitcoin/pull/30125) (test: improve BDB parser (handle internal/overflow pages, support all page sizes) by theStack)\n* [#29838](https://github.com/bitcoin/bitcoin/pull/29838) (Feature: Use different datadirs for different signets by BrandonOdiwuor)\n* [#28710](https://github.com/bitcoin/bitcoin/pull/28710) (Remove the legacy wallet and BDB dependency by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2501598456",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "labeled",
      "id": 15440634825,
      "node_id": "LE_lADOABII586gq9mazwAAAAOYVWPJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15440634825",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T18:23:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2501645442,
      "node_id": "IC_kwDOABII586VHBSC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2501645442",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T18:23:47Z",
      "updated_at": "2024-11-26T18:23:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33557375133</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2501645442",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15455666453,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOZOsEV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15455666453",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "63df9f3deb35be79496f7c240e3303e1d96c6832",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/63df9f3deb35be79496f7c240e3303e1d96c6832",
      "created_at": "2024-11-27T17:12:49Z"
    },
    {
      "event": "commented",
      "id": 2504400845,
      "node_id": "IC_kwDOABII586VRh_N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2504400845",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T17:15:20Z",
      "updated_at": "2024-11-27T21:12:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 19ae652376faca65d972c12cb51cfc8af0560c9e -> 63df9f3deb35be79496f7c240e3303e1d96c6832 ([`pr/wrap.3`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.3) -> [`pr/wrap.4`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.3..pr/wrap.4)) with fixes for windows and fuzz CI errors, and lint and tidy fixes\r\nUpdated 63df9f3deb35be79496f7c240e3303e1d96c6832 -> da108a6e5be220654a65b6613ee7eb2c4ddc8677 ([`pr/wrap.4`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.4) -> [`pr/wrap.5`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.5), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.4..pr/wrap.5)) fixing windows include error, fs lint error, and previous releases test bug",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2504400845",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15457677611,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOZWXEr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15457677611",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "da108a6e5be220654a65b6613ee7eb2c4ddc8677",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/da108a6e5be220654a65b6613ee7eb2c4ddc8677",
      "created_at": "2024-11-27T21:11:22Z"
    },
    {
      "event": "unlabeled",
      "id": 15458110967,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAOZYA33",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15458110967",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T22:18:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2467341532,
      "node_id": "PRR_kwDOABII586TEKTc",
      "url": null,
      "actor": null,
      "commit_id": "da108a6e5be220654a65b6613ee7eb2c4ddc8677",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nI think it would be more clear to move `build/src/bitcoin-{node,gui}` to `build/src/libexec`, rather than use a different file organization for CMake builds than for installs. \r\n\r\nThe \"Win64 native, VS 2022\" job still seems unhappy.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2467341532",
      "submitted_at": "2024-11-28T09:40:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2505819725,
      "node_id": "IC_kwDOABII586VW8ZN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2505819725",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-28T10:49:50Z",
      "updated_at": "2024-11-28T10:49:50Z",
      "author_association": "MEMBER",
      "body": "> The \"Win64 native, VS 2022\" job still seems unhappy.\r\n\r\nhttps://learn.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-3-c4996?view=msvc-170#posix-function-names:\r\n> To turn off deprecation warnings for these functions, define the preprocessor macro `_CRT_NONSTDC_NO_WARNINGS`. You can define this macro at the command line by including the option `/D_CRT_NONSTDC_NO_WARNINGS`.\r\n\r\nWe have already used this macro:https://github.com/bitcoin/bitcoin/blob/7590e93bc73b3bbac641f05d490fd5c984156b33/cmake/leveldb.cmake#L87-L89\r\n",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2505819725",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15515874549,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOc0XT1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15515874549",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "02567bf2bef5997ea5f0765780d196f36d3053e8",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/02567bf2bef5997ea5f0765780d196f36d3053e8",
      "created_at": "2024-12-03T20:50:20Z"
    },
    {
      "event": "reviewed",
      "id": 2476650402,
      "node_id": "PRR_kwDOABII586Tnq-i",
      "url": null,
      "actor": null,
      "commit_id": "02567bf2bef5997ea5f0765780d196f36d3053e8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the reviews!\r\n\r\nUpdated da108a6e5be220654a65b6613ee7eb2c4ddc8677 -> 02567bf2bef5997ea5f0765780d196f36d3053e8 ([`pr/wrap.5`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.5) -> [`pr/wrap.6`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.5..pr/wrap.6)) to fix windows build warning and making a change to avoid a potentially confusing behavior https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2467341532\r\n\r\n> I think it would be more clear to move `build/src/bitcoin-{node,gui}` to `build/src/libexec`, rather than use a different file organization for CMake builds than for installs.\r\n\r\nAgree and I think #31161 should allow this to be simplified.\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2505819725\r\n\r\n> We have already used this macro:\r\n> \r\n> https://github.com/bitcoin/bitcoin/blob/7590e93bc73b3bbac641f05d490fd5c984156b33/cmake/leveldb.cmake#L87-L89\r\n\r\nIt seems like it would be better if this code could be compiled without disabling warnings, especially since if the old names are being deprecated. For now I just added a #define to switch to the recommended name. For leveldb it probably does make sense to disable the warnings to avoid needing to change the code too much.\r\n\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2476650402",
      "submitted_at": "2024-12-03T20:56:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2516421998,
      "node_id": "IC_kwDOABII586V_Y1u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2516421998",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T07:40:34Z",
      "updated_at": "2024-12-04T07:40:34Z",
      "author_association": "MEMBER",
      "body": "For reference the CI failure is:\r\n\r\n```\r\n                                   subprocess.CalledProcessError: Command '['C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.12.7\\\\x64\\\\python.exe', 'D:/a/bitcoin/bitcoin\\\\contrib\\\\signet\\\\miner', \"--cli='D:\\\\a\\\\bitcoin\\\\bitcoin\\\\build\\\\src\\\\Release\\\\bitcoin-cli.exe' -nonamed '-datadir=D:\\\\a\\\\_temp\\\\test_runner_₿_🏃_20241203_223434\\\\tool_signet_miner_211\\\\node0'\", 'generate', '--address=tb1q2ndfasp67k5wp30fkt63tw9gf465lcjf7rm5fc', \"--grind-cmd='D:\\\\a\\\\bitcoin\\\\bitcoin\\\\build\\\\src\\\\Release\\\\bitcoin-util.exe' grind\", '--nbits=1d00ffff', '--set-block-time=1733265821', '--poolnum=99']' returned non-zero exit status 1.\r\n```\r\n\r\nEarlier it says:\r\n\r\n```\r\nFileNotFoundError: [WinError 2] The system cannot find the file specified",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2516421998",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15527389194,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOdgSgK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15527389194",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2def75a15deeb39fa66b1e8d45679ac29fd18b82",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/2def75a15deeb39fa66b1e8d45679ac29fd18b82",
      "created_at": "2024-12-04T14:35:17Z"
    },
    {
      "event": "commented",
      "id": 2517621750,
      "node_id": "IC_kwDOABII586WD9v2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2517621750",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T14:36:49Z",
      "updated_at": "2024-12-04T14:36:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 02567bf2bef5997ea5f0765780d196f36d3053e8 -> 2def75a15deeb39fa66b1e8d45679ac29fd18b82 ([`pr/wrap.6`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.6) -> [`pr/wrap.7`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.7), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.6..pr/wrap.7)) to fix argument parsing bug causing a test failure on windows https://github.com/bitcoin/bitcoin/actions/runs/12147886951/job/33875123699?pr=31375#step:12:95",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2517621750",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "labeled",
      "id": 15611384257,
      "node_id": "LE_lADOABII586gq9mazwAAAAOigtHB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15611384257",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T04:50:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNlM2IwY2E3MmQ4OGUyZDRhZmRiYmFlMDNiMzQyODVjOTdhZjA0Y2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce3b0ca72d88e2d4afdbbae03b34285c97af04cd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ce3b0ca72d88e2d4afdbbae03b34285c97af04cd",
      "tree": {
        "sha": "38d956bf05f9f634cfbb3fc9705c536d691cbd1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38d956bf05f9f634cfbb3fc9705c536d691cbd1e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62bd61de110b057cbfd6e31e4d0b727d93119c72",
          "sha": "62bd61de110b057cbfd6e31e4d0b727d93119c72",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/62bd61de110b057cbfd6e31e4d0b727d93119c72"
        }
      ],
      "message": "multiprocess: Add bitcoin wrapper executable\n\nIntended to make bitcoin command line features more discoverable and allow\ninstalling new multiprocess binaries in libexec/ instead of bin/ so they don't\ncause confusion.\n\nIdea and implementation of this were discussed in\nhttps://github.com/bitcoin/bitcoin/issues/30983\n\nIt's possible to debug this and see what programs it is trying to call by running:\n\nstrace -e trace=execve -s 10000 build/src/bitcoin ...",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-12-11T09:46:34Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-10-01T20:06:28Z"
      },
      "sha": "ce3b0ca72d88e2d4afdbbae03b34285c97af04cd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI5MzBjYWE3ZmU1MDFmMWIyYTkyMjEzZTZjOWFkNDU5YmMyYWUwMTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2930caa7fe501f1b2a92213e6c9ad459bc2ae019",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2930caa7fe501f1b2a92213e6c9ad459bc2ae019",
      "tree": {
        "sha": "adc5eb5080b297a932069283b8691b55ecbd3dc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adc5eb5080b297a932069283b8691b55ecbd3dc5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce3b0ca72d88e2d4afdbbae03b34285c97af04cd",
          "sha": "ce3b0ca72d88e2d4afdbbae03b34285c97af04cd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ce3b0ca72d88e2d4afdbbae03b34285c97af04cd"
        }
      ],
      "message": "test: Support BITCOIN_CMD environment variable\n\nSupport new BITCOIN_CMD environment variable in functional test to be able to\ntest the new bitcoin wrapper executable and run other commands through it\ninstead of calling them directly.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-12-11T09:46:34Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-26T16:51:41Z"
      },
      "sha": "2930caa7fe501f1b2a92213e6c9ad459bc2ae019"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA0NGMxMTI5ZGIwNjk4M2RhNTk4ZjQyN2RmZjg1NTEzZDg0ODBiM2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/044c1129db06983da598f427dff85513d8480b3a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/044c1129db06983da598f427dff85513d8480b3a",
      "tree": {
        "sha": "0d4ade73ccd4328a90775c4e7ad706f0c44c8643",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d4ade73ccd4328a90775c4e7ad706f0c44c8643"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2930caa7fe501f1b2a92213e6c9ad459bc2ae019",
          "sha": "2930caa7fe501f1b2a92213e6c9ad459bc2ae019",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2930caa7fe501f1b2a92213e6c9ad459bc2ae019"
        }
      ],
      "message": "ci: Run multiprocess tests through wrapper executable",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-12-11T09:46:34Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-26T16:58:16Z"
      },
      "sha": "044c1129db06983da598f427dff85513d8480b3a"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15620793515,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOjEmSr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15620793515",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "created_at": "2024-12-11T15:45:37Z"
    },
    {
      "event": "commented",
      "id": 2536362028,
      "node_id": "IC_kwDOABII586XLdAs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2536362028",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T15:46:17Z",
      "updated_at": "2024-12-11T15:46:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 2def75a15deeb39fa66b1e8d45679ac29fd18b82 -> 637b01fbf5064028f9a23c20f8b916325fbf82ec ([`pr/wrap.7`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.7) -> [`pr/wrap.8`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.8), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.7-rebase..pr/wrap.8)) due to conflict with #30933\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2536362028",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "unlabeled",
      "id": 15622428267,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAOjK1Zr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15622428267",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T17:43:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2540863404,
      "node_id": "IC_kwDOABII586Xcn-s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2540863404",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T08:30:18Z",
      "updated_at": "2024-12-13T08:30:18Z",
      "author_association": "MEMBER",
      "body": "I cherry-picked the first commit onto #30975 in order to try a (`arm64-apple-darwin`) Guix build: https://github.com/Sjors/bitcoin/tree/2024/12/multiprocess-guix\r\n\r\nThis also required adding it to installable targets and `Maintenance.cmake` (maybe not needed for this PR).\r\n\r\nThere was a brief discussion on IRC yesterday about whether anything special needs to happen in terms of macOS code signing. The conclusion was: probably not.\r\n\r\nhttps://bitcoin-irc.chaincode.com/bitcoin-core-dev/2024-12-12#1074526\r\n\r\nOn my M4 I had to `codesign -s - ...` the binaries from my Guix build just like before, which suggests nothing special is required.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2540863404",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "reviewed",
      "id": 2501661103,
      "node_id": "PRR_kwDOABII586VHFGv",
      "url": null,
      "actor": null,
      "commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2501661103",
      "submitted_at": "2024-12-13T08:30:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15648256828,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOktXM8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15648256828",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "365ac72dc7629765afb85bb9cc7c53d153c7c034",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/365ac72dc7629765afb85bb9cc7c53d153c7c034",
      "created_at": "2024-12-13T12:34:11Z"
    },
    {
      "event": "reviewed",
      "id": 2502197771,
      "node_id": "PRR_kwDOABII586VJIIL",
      "url": null,
      "actor": null,
      "commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Updated 637b01fbf5064028f9a23c20f8b916325fbf82ec -> 365ac72dc7629765afb85bb9cc7c53d153c7c034 ([`pr/wrap.8`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.8) -> [`pr/wrap.9`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.9), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.8..pr/wrap.9)) adding to cmake output as suggested",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2502197771",
      "submitted_at": "2024-12-13T12:34:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2542833216,
      "node_id": "IC_kwDOABII586XkI5A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2542833216",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-14T05:31:23Z",
      "updated_at": "2024-12-14T05:32:12Z",
      "author_association": "MEMBER",
      "body": "I wrote:\r\n\r\n> I think it would be more clear to move `build/src/bitcoin-{node,gui}` to `build/src/libexec`, rather than use a different file organization for CMake builds than for installs.\r\n\r\nBut I just realized that the `bitcoin` binary would be installed to `/usr/bin` whereas new binaries like `bitcoin-node` and `bitcoin-mine` would go to `/usr/libexec`.\r\n\r\nTo match this behavior in development mode we could use `build/bin` and `build/libexec`. As you mentioned #31161 should allow this. But there's no need to wait for that.\r\n\r\nI sometimes install a user-specific node using `-DCMAKE_INSTALL_PREFIX=$HOME`. By default `$HOME/bin` is in the `PATH` on Ubuntu, but `$HOME/libexec` isn't. Looking at f17453ff13ebd0be842396c17bcc99b0c903abb8 it handles this nicely; if the `bitcoin` executable lives under `bin` it will try `../libexec`.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2542833216",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "reviewed",
      "id": 2503592465,
      "node_id": "PRR_kwDOABII586VOcoR",
      "url": null,
      "actor": null,
      "commit_id": "365ac72dc7629765afb85bb9cc7c53d153c7c034",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Mostly happy with 365ac72dc7629765afb85bb9cc7c53d153c7c034.\r\n\r\nI didn't test and review Windows code. I also don't really  understand the test changes in a3b92c1f46c14c5c8db1f2833fd869d8a6a7ad4f, hopefully @maflcko does. But it's useful that we use the wrapper in 365ac72dc7629765afb85bb9cc7c53d153c7c034. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2503592465",
      "submitted_at": "2024-12-14T07:18:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15693554250,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOnaKJK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15693554250",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "128e110ed7af5f95d2bd16c36eca93c7c9b03573",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/128e110ed7af5f95d2bd16c36eca93c7c9b03573",
      "created_at": "2024-12-17T21:41:30Z"
    },
    {
      "event": "reviewed",
      "id": 2510009903,
      "node_id": "PRR_kwDOABII586Vm7Yv",
      "url": null,
      "actor": null,
      "commit_id": "128e110ed7af5f95d2bd16c36eca93c7c9b03573",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the review and testing, really helpful feedback!\r\n\r\nUpdated 365ac72dc7629765afb85bb9cc7c53d153c7c034 -> 128e110ed7af5f95d2bd16c36eca93c7c9b03573 ([`pr/wrap.9`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.9) -> [`pr/wrap.10`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.10), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.9..pr/wrap.10)) fixing version and help formatting and weakly_canonical error handling.\r\nUpdated 128e110ed7af5f95d2bd16c36eca93c7c9b03573 -> 044c1129db06983da598f427dff85513d8480b3a ([`pr/wrap.10`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.10) -> [`pr/wrap.11`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.11), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.10..pr/wrap.11)) to fix lint failure https://cirrus-ci.com/task/5251623682834432",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2510009903",
      "submitted_at": "2024-12-17T21:45:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15693656407,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOnajFX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15693656407",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/044c1129db06983da598f427dff85513d8480b3a",
      "created_at": "2024-12-17T21:49:40Z"
    },
    {
      "event": "labeled",
      "id": 15693658335,
      "node_id": "LE_lADOABII586gq9mazwAAAAOnajjf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15693658335",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T21:49:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2549712308,
      "node_id": "IC_kwDOABII586X-YW0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2549712308",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T21:49:47Z",
      "updated_at": "2024-12-17T21:49:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/34561550110</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2549712308",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "unlabeled",
      "id": 15694288948,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAOnc9g0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15694288948",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T22:51:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2550270615,
      "node_id": "IC_kwDOABII586YAgqX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2550270615",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T03:57:48Z",
      "updated_at": "2024-12-18T03:57:48Z",
      "author_association": "MEMBER",
      "body": "tACK 044c1129db06983da598f427dff85513d8480b3a but did not review test and windows.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2550270615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "reviewed",
      "id": 2517070391,
      "node_id": "PRR_kwDOABII586WB3I3",
      "url": null,
      "actor": null,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK 044c1129db06983da598f427dff85513d8480b3a",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2517070391",
      "submitted_at": "2024-12-20T11:10:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2571248802,
      "node_id": "IC_kwDOABII586ZQiSi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2571248802",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T10:44:43Z",
      "updated_at": "2025-01-04T10:44:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2571248802",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1861814807",
      "pull_request_review_id": 2467341532,
      "id": 1861814807,
      "node_id": "PRRC_kwDOABII585u-QoX",
      "diff_hunk": "@@ -0,0 +1,190 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();\n+\n+    // If exe is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (exe_dir.filename() == \"src\" && try_exec(exe_dir / fs::PathFromString(args[0]))) ||\n+    // Otherwise if exe is installed in a bin/ directory, first look for target\n+    // executable in libexec/\n+    (exe_dir.filename() == \"bin\" && try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / fs::PathFromString(args[0]).filename())) ||\n+    // Otherwise look for target executable next to current exe\n+    try_exec(exe_dir / fs::PathFromString(args[0]).filename()) ||\n+    // Otherwise just look on the system path.",
      "path": "src/bitcoin.cpp",
      "position": 211,
      "original_position": 188,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "b06c7ad0ae91102fe8cdcac6f86d627aace2219b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "b06c7ad0ae91102fe8cdcac6f86d627aace2219b: this is potentially confusing. If I build without gui, I expect `build/src/bitcoin gui` to fail. Right now it would launch any  `bitcoin-qt` in my `$PATH`.",
      "created_at": "2024-11-28T09:29:39Z",
      "updated_at": "2024-11-28T09:40:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1861814807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868303275",
      "pull_request_review_id": 2476650402,
      "id": 1868303275,
      "node_id": "PRRC_kwDOABII585vXAur",
      "diff_hunk": "@@ -0,0 +1,190 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();\n+\n+    // If exe is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (exe_dir.filename() == \"src\" && try_exec(exe_dir / fs::PathFromString(args[0]))) ||\n+    // Otherwise if exe is installed in a bin/ directory, first look for target\n+    // executable in libexec/\n+    (exe_dir.filename() == \"bin\" && try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / fs::PathFromString(args[0]).filename())) ||\n+    // Otherwise look for target executable next to current exe\n+    try_exec(exe_dir / fs::PathFromString(args[0]).filename()) ||\n+    // Otherwise just look on the system path.",
      "path": "src/bitcoin.cpp",
      "position": 211,
      "original_position": 188,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "b06c7ad0ae91102fe8cdcac6f86d627aace2219b",
      "in_reply_to_id": 1861814807,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807\r\n\r\n> [b06c7ad](https://github.com/bitcoin/bitcoin/commit/b06c7ad0ae91102fe8cdcac6f86d627aace2219b): this is potentially confusing. If I build without gui, I expect `build/src/bitcoin gui` to fail. Right now it would launch any `bitcoin-qt` in my `$PATH`.\r\n\r\nAgree this behavior is potentially confusing, and prevented it for now, but I'm not totally I sure see it as a downside. I like the simplicity of `bitcoin daemon` being an alias for `bitcoind` and for the `bitcoin` wrapper to add a few additional search directories of its own but not otherwise care where other executables are installed on the PATH.\r\n\r\nBut for now added a check to avoid searching for other executables using the PATH if the `bitcoin` executable was not invoked using the PATH. Probably will need to keep tweaking this behavior, seeing what works and maybe adding options to control it.",
      "created_at": "2024-12-03T20:09:57Z",
      "updated_at": "2024-12-03T20:56:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1868303275",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868303275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1872727800",
      "pull_request_review_id": 2483862103,
      "id": 1872727800,
      "node_id": "PRRC_kwDOABII585vn474",
      "diff_hunk": "@@ -0,0 +1,190 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();\n+\n+    // If exe is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (exe_dir.filename() == \"src\" && try_exec(exe_dir / fs::PathFromString(args[0]))) ||\n+    // Otherwise if exe is installed in a bin/ directory, first look for target\n+    // executable in libexec/\n+    (exe_dir.filename() == \"bin\" && try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / fs::PathFromString(args[0]).filename())) ||\n+    // Otherwise look for target executable next to current exe\n+    try_exec(exe_dir / fs::PathFromString(args[0]).filename()) ||\n+    // Otherwise just look on the system path.",
      "path": "src/bitcoin.cpp",
      "position": 211,
      "original_position": 188,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "b06c7ad0ae91102fe8cdcac6f86d627aace2219b",
      "in_reply_to_id": 1861814807,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "One advantage of allowing anything in `$PATH` would be once the interfaces are stable and \"public\", at which point folks might install e.g. an alternative GUI implementation.",
      "created_at": "2024-12-06T07:36:28Z",
      "updated_at": "2024-12-06T07:36:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1872727800",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1872727800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1883517714",
      "pull_request_review_id": 2501661103,
      "id": 1883517714,
      "node_id": "PRRC_kwDOABII585wRDMS",
      "diff_hunk": "@@ -76,6 +76,7 @@ list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/module)\n #=============================\n include(CMakeDependentOption)\n # When adding a new option, end the <help_text> with a full stop for consistency.\n+option(BUILD_BITCOIN_BIN \"Build bitcoin executable.\" ON)",
      "path": "CMakeLists.txt",
      "position": 4,
      "original_position": 4,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you add this to `Executables:` in the summary as well?",
      "created_at": "2024-12-13T08:02:41Z",
      "updated_at": "2024-12-13T08:30:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1883517714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1883517714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1883872949",
      "pull_request_review_id": 2502197771,
      "id": 1883872949,
      "node_id": "PRRC_kwDOABII585wSZ61",
      "diff_hunk": "@@ -76,6 +76,7 @@ list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/module)\n #=============================\n include(CMakeDependentOption)\n # When adding a new option, end the <help_text> with a full stop for consistency.\n+option(BUILD_BITCOIN_BIN \"Build bitcoin executable.\" ON)",
      "path": "CMakeLists.txt",
      "position": 4,
      "original_position": 4,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "in_reply_to_id": 1883517714,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Can you add this to `Executables:` in the summary as well?\r\n\r\nGood idea, added now",
      "created_at": "2024-12-13T12:33:24Z",
      "updated_at": "2024-12-13T12:34:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1883872949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1883872949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884808135",
      "pull_request_review_id": 2503570115,
      "id": 1884808135,
      "node_id": "PRRC_kwDOABII585wV-PH",
      "diff_hunk": "@@ -76,6 +76,7 @@ list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/module)\n #=============================\n include(CMakeDependentOption)\n # When adding a new option, end the <help_text> with a full stop for consistency.\n+option(BUILD_BITCOIN_BIN \"Build bitcoin executable.\" ON)",
      "path": "CMakeLists.txt",
      "position": 4,
      "original_position": 4,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "in_reply_to_id": 1883517714,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, that worked.",
      "created_at": "2024-12-14T05:11:13Z",
      "updated_at": "2024-12-14T05:11:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884808135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884808135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884835184",
      "pull_request_review_id": 2503592465,
      "id": 1884835184,
      "node_id": "PRRC_kwDOABII585wWE1w",
      "diff_hunk": "@@ -90,6 +90,10 @@ static inline bool exists(const path& p)\n {\n     return std::filesystem::exists(p);\n }\n+static inline bool exists(const path& p, std::error_code& ec)",
      "path": "src/util/fs.h",
      "position": null,
      "original_position": 4,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8 nit: can be `noexcept`? https://en.cppreference.com/w/cpp/filesystem/exists",
      "created_at": "2024-12-14T05:59:17Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884835184",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884835184"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884848558",
      "pull_request_review_id": 2503592465,
      "id": 1884848558,
      "node_id": "PRRC_kwDOABII585wWIGu",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information",
      "path": "src/bitcoin.cpp",
      "position": 35,
      "original_position": 33,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8 nit: would be nice if this worked for `bitcoin` itself too. It currently prints the license, but not the version.",
      "created_at": "2024-12-14T06:22:19Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884848558",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884848558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 35,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884850852",
      "pull_request_review_id": 2503592465,
      "id": 1884850852,
      "node_id": "PRRC_kwDOABII585wWIqk",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");",
      "path": "src/bitcoin.cpp",
      "position": 90,
      "original_position": 87,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8 this won't exist until #30437 right?",
      "created_at": "2024-12-14T06:28:34Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884850852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884850852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 90,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884851384",
      "pull_request_review_id": 2503592465,
      "id": 1884851384,
      "node_id": "PRRC_kwDOABII585wWIy4",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");",
      "path": "src/bitcoin.cpp",
      "position": 92,
      "original_position": 89,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8: `bitcoin-util` has a `grind` command which is also used for (custom) signet, see `signet/README.md`. Doesn't need to be hidden imo. ",
      "created_at": "2024-12-14T06:31:15Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884851384",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884851384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 92,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884851946",
      "pull_request_review_id": 2503592465,
      "id": 1884851946,
      "node_id": "PRRC_kwDOABII585wWI7q",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8: on macOS 15.1.1 this somehow puts a `%` at the end of the error message, e.g.\r\n\r\n```\r\n% build-ipc/src/bitcoin utillll\r\nError: Unrecognized command: 'utillll'\r\nTry 'build-ipc/src/bitcoin --help' for more information.%   \r\n```\r\n\r\n(the `Unknown option` error below does not have this issue)",
      "created_at": "2024-12-14T06:33:17Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884851946",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884851946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884865585",
      "pull_request_review_id": 2503592465,
      "id": 1884865585,
      "node_id": "PRRC_kwDOABII585wWMQx",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": 139,
      "original_position": 136,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8: this seems near impossible on macOS. With `htop` I see that `bitcoin daemon` causes `bitcoind` to run, and there's no lingering `bitcoin` process. The terminal window process also shows this.\r\n\r\n<img width=\"837\" alt=\"Scherm­afbeelding 2024-12-14 om 13 50 21\" src=\"https://github.com/user-attachments/assets/1a978403-fcc0-40c1-8a10-42c6e0af4572\" />\r\n\r\n<img width=\"565\" alt=\"Scherm­afbeelding 2024-12-14 om 13 51 09\" src=\"https://github.com/user-attachments/assets/d9342656-c6ae-4921-be4a-891acec5caa9\" />\r\n",
      "created_at": "2024-12-14T06:51:50Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884865585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884865585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 139,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884870277",
      "pull_request_review_id": 2503592465,
      "id": 1884870277,
      "node_id": "PRRC_kwDOABII585wWNaF",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path exe_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8: shouldn't we throw here if `ec` is set?",
      "created_at": "2024-12-14T07:09:34Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884870277",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884870277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889159627",
      "pull_request_review_id": 2510009903,
      "id": 1889159627,
      "node_id": "PRRC_kwDOABII585wmknL",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information",
      "path": "src/bitcoin.cpp",
      "position": 35,
      "original_position": 33,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884848558,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884848558\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8) nit: would be nice if this worked for `bitcoin` itself too. It currently prints the license, but not the version.\r\n\r\nOops, good catch. This should be fixed now",
      "created_at": "2024-12-17T20:15:36Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889159627",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889159627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 35,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889161799",
      "pull_request_review_id": 2510009903,
      "id": 1889161799,
      "node_id": "PRRC_kwDOABII585wmlJH",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");",
      "path": "src/bitcoin.cpp",
      "position": 90,
      "original_position": 87,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884850852,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884850852\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8) this won't exist until #30437 right?\r\n\r\nThat's right. It's just a little easier for me to manage my branches if this is included so the PRs don't conflict, and it shouldn't cause any harm.",
      "created_at": "2024-12-17T20:17:34Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889161799",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889161799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 90,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889168139",
      "pull_request_review_id": 2510009903,
      "id": 1889168139,
      "node_id": "PRRC_kwDOABII585wmmsL",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");",
      "path": "src/bitcoin.cpp",
      "position": 92,
      "original_position": 89,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884851384,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884851384\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8): `bitcoin-util` has a `grind` command which is also used for (custom) signet, see `signet/README.md`. Doesn't need to be hidden imo.\r\n\r\nForwarding the util command allows tests to work with minimal changes, but I don't think having `bitcoin util grind` command would be a good public interface. I think it would be better to expose a `bitcoin grind` command that doesn't require callers to know about underlying binaries. Doing this will require some tweaks to ArgsManager though to separate commands & options correctly so I postponed it for now.",
      "created_at": "2024-12-17T20:22:59Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889168139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889168139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 92,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889170067",
      "pull_request_review_id": 2510009903,
      "id": 1889170067,
      "node_id": "PRRC_kwDOABII585wmnKT",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884851946,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884851946\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8): on macOS 15.1.1 this somehow puts a `%` at the end of the error message, e.g.\r\n\r\nGood catch, that just comes for forgetting to output a trailing newline. Should be fixed now.",
      "created_at": "2024-12-17T20:24:53Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889170067",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889170067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889179981",
      "pull_request_review_id": 2510009903,
      "id": 1889179981,
      "node_id": "PRRC_kwDOABII585wmplN",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": 139,
      "original_position": 136,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884865585,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884865585\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8): this seems near impossible on macOS. With `htop` I see that `bitcoin daemon` causes `bitcoind` to run, and there's no lingering `bitcoin` process. The terminal window process also shows this.\r\n\r\nDo you think I should change the comment in some way? The exec behavior you're describing is expected, and strace comment is just meant to be helpful on platforms where strace works.\r\n\r\nIn the future we could add more debugging options here that would be more cross-platform than strace, but I'm trying to keep things simple in V1.",
      "created_at": "2024-12-17T20:32:04Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889179981",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889179981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 139,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889222057",
      "pull_request_review_id": 2510009903,
      "id": 1889222057,
      "node_id": "PRRC_kwDOABII585wmz2p",
      "diff_hunk": "@@ -90,6 +90,10 @@ static inline bool exists(const path& p)\n {\n     return std::filesystem::exists(p);\n }\n+static inline bool exists(const path& p, std::error_code& ec)",
      "path": "src/util/fs.h",
      "position": null,
      "original_position": 4,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884835184,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884835184\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8) nit: can be `noexcept`? https://en.cppreference.com/w/cpp/filesystem/exists\r\n\r\nMakes sense, added",
      "created_at": "2024-12-17T21:06:39Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889222057",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889222057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889254814",
      "pull_request_review_id": 2510009903,
      "id": 1889254814,
      "node_id": "PRRC_kwDOABII585wm72e",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path exe_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884870277,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884865585\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8): shouldn't we throw here if `ec` is set?\r\n\r\nI don't think we actually want to throw when symlinks can't be resolved. Should be more robust to just search for executables relative to the original path in that case. But error handling here was not right, because weakly_canonical would return an empty path on failure, so that should be fixed now. \r\n",
      "created_at": "2024-12-17T21:33:11Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889254814",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889254814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889550612",
      "pull_request_review_id": 2510687659,
      "id": 1889550612,
      "node_id": "PRRC_kwDOABII585woEEU",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");",
      "path": "src/bitcoin.cpp",
      "position": 92,
      "original_position": 89,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884851384,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think it would be better to expose a bitcoin grind command that doesn't require callers to know about underlying binaries\r\n\r\nOk, that makes sense.",
      "created_at": "2024-12-18T03:14:46Z",
      "updated_at": "2024-12-18T03:14:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889550612",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889550612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 92,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889575356",
      "pull_request_review_id": 2510730909,
      "id": 1889575356,
      "node_id": "PRRC_kwDOABII585woKG8",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884851946,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Works",
      "created_at": "2024-12-18T03:52:58Z",
      "updated_at": "2024-12-18T03:52:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889575356",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889575356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889576126",
      "pull_request_review_id": 2510732095,
      "id": 1889576126,
      "node_id": "PRRC_kwDOABII585woKS-",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": 139,
      "original_position": 136,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884865585,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's fine to leave the comment as is. I couldn't find an equivalent for macOS.",
      "created_at": "2024-12-18T03:54:18Z",
      "updated_at": "2024-12-18T03:54:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889576126",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889576126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 139,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889577089",
      "pull_request_review_id": 2510733874,
      "id": 1889577089,
      "node_id": "PRRC_kwDOABII585woKiB",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path exe_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884870277,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, the new comment is helpful.",
      "created_at": "2024-12-18T03:55:42Z",
      "updated_at": "2024-12-18T03:55:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889577089",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889577089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893655528",
      "pull_request_review_id": 2517070391,
      "id": 1893655528,
      "node_id": "PRRC_kwDOABII585w3uPo",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"",
      "path": "src/bitcoin.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "typo:\r\n```suggestion\r\n  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\r\n```",
      "created_at": "2024-12-20T08:56:47Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893655528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893655528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893661643",
      "pull_request_review_id": 2517070391,
      "id": 1893661643,
      "node_id": "PRRC_kwDOABII585w3vvL",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Somehow I feel that `test` does not belong here - it is not for users to execute after the installation. `test_bitcoin` may not even be installed. The tests are normally run either by developers or by users after compile and before install, to verify the result of the compilation is correct.",
      "created_at": "2024-12-20T09:02:32Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893661643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893661643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893670004",
      "pull_request_review_id": 2517070391,
      "id": 1893670004,
      "node_id": "PRRC_kwDOABII585w3xx0",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "So, the user must have a knowledge whether his Bitcoin Core was compiled with or without multiprocess and start either `bitcoin -M gui` or `bitcoin -m gui`. Could we spare them this? The `bitcoin` executable has that knowledge.\r\n\r\nThen the user can run just `bitcoin gui` and under the hood either `bitcoin-qt` or `bitcoin-gui` will be executed, depending on how it was compiled? Or maybe we can probe at run time whether the executables `bitcoin-qt` and `bitcoin-gui` exist and run whichever is present.",
      "created_at": "2024-12-20T09:10:37Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893670004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893670004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": 33,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893680784",
      "pull_request_review_id": 2517070391,
      "id": 1893680784,
      "node_id": "PRRC_kwDOABII585w30aQ",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){",
      "path": "src/bitcoin.cpp",
      "position": 93,
      "original_position": 93,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        } else if (!cmd.command.empty()) {\r\n```",
      "created_at": "2024-12-20T09:19:48Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893680784",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893680784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 93,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893685756",
      "pull_request_review_id": 2517070391,
      "id": 1893685756,
      "node_id": "PRRC_kwDOABII585w31n8",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");",
      "path": "src/bitcoin.cpp",
      "position": 75,
      "original_position": 75,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since everything inserted into `args` is a constant literal, it can be `std::vector<std::string_view>` and then also `ExecCommand()` can be:\r\n\r\n```diff\r\n- void ExecCommand(const std::vector<std::string>& args, ...\r\n+ void ExecCommand(const std::vector<std::string_view>& args, ...\r\n```",
      "created_at": "2024-12-20T09:24:00Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893685756",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893685756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": 73,
      "original_start_line": 73,
      "start_side": "RIGHT",
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893696352",
      "pull_request_review_id": 2517070391,
      "id": 1893696352,
      "node_id": "PRRC_kwDOABII585w34Ng",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);",
      "path": "src/bitcoin.cpp",
      "position": 101,
      "original_position": 101,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This adds a trailing newline, but the above 2 `tfm::format()` calls don't. I think they should.\r\n\r\nI think the `tfm::format(..., FormatParagraph(LicenseInfo()))` call adds a trailing `\\n` because `LicenseInfo()` has it, but I did not check.",
      "created_at": "2024-12-20T09:32:52Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893696352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893696352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893702291",
      "pull_request_review_id": 2517070391,
      "id": 1893702291,
      "node_id": "PRRC_kwDOABII585w35qT",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`",
      "path": "src/bitcoin.cpp",
      "position": 132,
      "original_position": 132,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If you switch this to doxygen compatible comment it will be attached to the doxygen generated docs about `ExecCommand()`. Would be nice to format the arguments' descriptions with `@param[in] ...`.",
      "created_at": "2024-12-20T09:38:05Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893702291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893702291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893709992",
      "pull_request_review_id": 2517070391,
      "id": 1893709992,
      "node_id": "PRRC_kwDOABII585w37io",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)",
      "path": "src/bitcoin.cpp",
      "position": 140,
      "original_position": 140,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find the names confusing because I would assume this will execute `argv0 args[0] args[1] args[2] ...`. Maybe rename `argv0` to `parent` or `wrapper_prog`.",
      "created_at": "2024-12-20T09:45:11Z",
      "updated_at": "2024-12-20T11:10:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893709992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893709992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 140,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893770067",
      "pull_request_review_id": 2517070391,
      "id": 1893770067,
      "node_id": "PRRC_kwDOABII585w4KNT",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing this executable.\n+    fs::path exe_dir{fs::weakly_canonical(exe_path, ec)};\n+    if (exe_dir.empty()) exe_dir = exe_path; // Restore previous path if weakly_canonical failed.\n+    exe_dir = exe_dir.parent_path();\n+    // Search for executables on system PATH only if this executable was invoked\n+    // from the PATH, to avoid unintentionally launching system executables in a\n+    // local build\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool use_system_path{!argv0_path.has_parent_path()};",
      "path": "src/bitcoin.cpp",
      "position": 200,
      "original_position": 200,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is the same check as above: `argv0.find('/') == std::string_view::npos`, right? Would be good to use the same expression in both locations.",
      "created_at": "2024-12-20T10:38:19Z",
      "updated_at": "2024-12-20T11:10:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893770067",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893770067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 200,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893779169",
      "pull_request_review_id": 2517070391,
      "id": 1893779169,
      "node_id": "PRRC_kwDOABII585w4Mbh",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing this executable.\n+    fs::path exe_dir{fs::weakly_canonical(exe_path, ec)};\n+    if (exe_dir.empty()) exe_dir = exe_path; // Restore previous path if weakly_canonical failed.\n+    exe_dir = exe_dir.parent_path();\n+    // Search for executables on system PATH only if this executable was invoked\n+    // from the PATH, to avoid unintentionally launching system executables in a\n+    // local build\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool use_system_path{!argv0_path.has_parent_path()};\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // If exe is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (exe_dir.filename() == \"src\" && try_exec(exe_dir / arg0)) ||\n+    // Otherwise if exe is installed in a bin/ directory, first look for target\n+    // executable in libexec/\n+    (exe_dir.filename() == \"bin\" && try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise look for target executable next to current exe\n+    try_exec(exe_dir / arg0.filename(), use_system_path) ||",
      "path": "src/bitcoin.cpp",
      "position": 210,
      "original_position": 210,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why use such an `( && || && ||| )` expression? Would be more readable as:\r\n\r\n```cpp\r\nif (exe_dir.filename() == \"src\") {\r\n    try_exec(exe_dir / arg0);\r\n}\r\nif (exe_dir.filename() == \"bin\") {\r\n    try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / arg0.filename());\r\n}\r\n```",
      "created_at": "2024-12-20T10:43:56Z",
      "updated_at": "2024-12-20T11:10:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893779169",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893779169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": 205,
      "original_start_line": 205,
      "start_side": "RIGHT",
      "line": 210,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893800793",
      "pull_request_review_id": 2517070391,
      "id": 1893800793,
      "node_id": "PRRC_kwDOABII585w4RtZ",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {",
      "path": "src/bitcoin.cpp",
      "position": 176,
      "original_position": 176,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Isn't `fs::exists()` redundant? `fs::is_regular_file()` will return true if the file exists and is a regular file.",
      "created_at": "2024-12-20T11:01:05Z",
      "updated_at": "2024-12-20T11:10:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893800793",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893800793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893808229",
      "pull_request_review_id": 2517070391,
      "id": 1893808229,
      "node_id": "PRRC_kwDOABII585w4Thl",
      "diff_hunk": "@@ -260,7 +291,12 @@ def set_binary_paths(self):\n                 \"src\",\n                 binary + self.config[\"environment\"][\"EXEEXT\"],\n             )\n-            setattr(self.options, attribute_name, os.getenv(env_variable_name, default=default_filename))\n+            setattr(paths, attribute_name, os.getenv(env_variable_name, default=default_filename))\n+\n+        # BITCOIN_CMD environment variable can be specified to invoke bitcoin\n+        # binary wrapper binary instead of other executables.",
      "path": "test/functional/test_framework/test_framework.py",
      "position": 77,
      "original_position": 77,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        # BITCOIN_CMD environment variable can be specified to invoke bitcoin\r\n        # wrapper binary instead of other executables.\r\n```",
      "created_at": "2024-12-20T11:09:09Z",
      "updated_at": "2024-12-20T11:10:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893808229",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893808229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": 296,
      "original_start_line": 296,
      "start_side": "RIGHT",
      "line": 297,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893827538",
      "pull_request_review_id": 2517359692,
      "id": 1893827538,
      "node_id": "PRRC_kwDOABII585w4YPS",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": 139,
      "original_position": 136,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884865585,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The following works on FreeBSD. In case `dtrace` works on macOS:\r\n\r\n```sh\r\ndtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c 'bitcoin -m gui'\r\n```\r\n\r\nMaybe how to enable `dtrace` on macOS: https://github.com/suolapeikko/dtrace?tab=readme-ov-file#sample-dtrace-scripts-for-macos",
      "created_at": "2024-12-20T11:29:54Z",
      "updated_at": "2024-12-20T11:29:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893827538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893827538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 139,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894539548",
      "pull_request_review_id": 2518559154,
      "id": 1894539548,
      "node_id": "PRRC_kwDOABII585w7GEc",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": 46,
      "original_position": 46,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893661643,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We can change that later, but currently the (guix built) release binaries are shipped with `test_bitcoin` - for whatever reason.",
      "created_at": "2024-12-21T02:48:10Z",
      "updated_at": "2024-12-21T02:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1894539548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894539548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 46,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894540173",
      "pull_request_review_id": 2518559831,
      "id": 1894540173,
      "node_id": "PRRC_kwDOABII585w7GON",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893670004,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The goal of #31098 is to have `bitcoin-node` included in the release. For the time being only stratum v2 (or other IPC mining interface consumers) should use that binary. And they will get instructions for that. By default folks should run `bitcoind`.\r\n\r\nOnce the multiprocess bundled binaries are mature enough and there's a broader benefit to using them (e.g. the GUI can connect to the node), we could change the default.",
      "created_at": "2024-12-21T02:53:50Z",
      "updated_at": "2024-12-21T02:53:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1894540173",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894540173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": 33,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894541328",
      "pull_request_review_id": 2518560985,
      "id": 1894541328,
      "node_id": "PRRC_kwDOABII585w7GgQ",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": 139,
      "original_position": 136,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884865585,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```\r\n% dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c 'build/src/bitcoin daemon' \r\ndtrace: system integrity protection is on, some features will not be available\r\ndtrace: failed to initialize dtrace: DTrace requires additional privileges\r\n```\r\n\r\nWith sudo:\r\n\r\n```\r\ndtrace: system integrity protection is on, some features will not be available\r\n\r\ndtrace: invalid probe specifier proc:::exec-success { trace(curpsinfo->pr_psargs); }: probe description proc:::exec-success does not match any probes. System Integrity Protection is on\r\n```\r\n\r\nI haven't tried disabling System Integrity Protection (SIP) as that link suggests, not necessary a good idea :-) Though the maybe the `csrutil enable --without dtrace` isn't too bad.",
      "created_at": "2024-12-21T03:02:39Z",
      "updated_at": "2024-12-21T03:02:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1894541328",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894541328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 139,
      "original_line": 139,
      "side": "RIGHT"
    }
  ]
}