{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375",
    "id": 2201625045,
    "node_id": "PR_kwDOABII586DOiHV",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31375",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31375.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31375.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/7af6e1089ea264e870b26ac83e81e7aa374acbe1",
    "number": 31375,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "multiprocess: Add bitcoin wrapper executable",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Intended to make bitcoin command line features more discoverable and allow installing new multiprocess binaries in libexec/ instead of bin/ so they don't cause confusion.\r\n\r\nIdea and implementation of this were discussed in https://github.com/bitcoin/bitcoin/issues/30983.\r\n\r\n---\r\n\r\nInitial implementation of this feature is deliberately minimal so the UX can evolve in response to feedback and there are not too many details to debate and discuss in a single PR. But many improvements are possible or planned:\r\n\r\n- Adding manpage and bash completions.\r\n- Showing wrapper command lines in help output [(comment)](https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077800405). This could be done conditionally as suggested in the comment or be unconditional.\r\n- Showing nicer error messages that detect if an executable isn't installed and suggest how to fix [(comment)](https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2073194474)\r\n- Integrating help so `bitcoin help subcommand` invokes `bitcoin subcommand -h`\r\n- Adding support for `bitcoin-util` subcommands. Ideal interface would probably be more like `bitcoin grind` not `bitcoin util grind` but this has been punted for now. Supporting subcommands directly would require some ArgsManager modifications\r\n- Adding a dedicated python functional test for the wrapper. Right now there is some CI coverage by setting the `BITCOIN_CMD` variable, but this doesn't cover things like the help output and version output, and support for different directory layouts.\r\n- Better `--multiprocess` (`-m`) / `--monolithic` (`-M`) default selection. Right now, default is monolithic but it probably makes sense to chose more intelligently depending on whether -ipc options are enabled and what binaries are available.\r\n- Maybe parsing `bitcoin.conf` and supporting options to control wrapper behavior like custom locations or preferences or aliases.\r\n- Better command command line usability. Allow combining short options like (`-ah`). Allow fuzzy matching of subcommands or suggestions if you misspell. (suggested by stickies in review club)\r\n\r\n---\r\n\r\nThis PR is part of the [process separation project](https://github.com/bitcoin/bitcoin/issues/28722). A review club meeting for it took place in https://bitcoincore.reviews/31375",
    "labels": [
      {
        "id": 2260068353,
        "node_id": "MDU6TGFiZWwyMjYwMDY4MzUz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/interfaces",
        "name": "interfaces",
        "description": "",
        "color": "83c9fc",
        "default": false
      }
    ],
    "created_at": "2024-11-26T17:57:32Z",
    "updated_at": "2025-05-15T12:58:50Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "1e45694a9bf9998a158abfc656fed8e342f9934a",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ryanofsky:pr/wrap",
      "ref": "pr/wrap",
      "sha": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 69901633,
        "node_id": "MDEwOlJlcG9zaXRvcnk2OTkwMTYzMw==",
        "name": "bitcoin",
        "full_name": "ryanofsky/bitcoin",
        "owner": {
          "login": "ryanofsky",
          "id": 7133040,
          "node_id": "MDQ6VXNlcjcxMzMwNDA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ryanofsky",
          "html_url": "https://github.com/ryanofsky",
          "followers_url": "https://api.github.com/users/ryanofsky/followers",
          "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
          "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
          "repos_url": "https://api.github.com/users/ryanofsky/repos",
          "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/ryanofsky/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ryanofsky/bitcoin",
        "archive_url": "https://api.github.com/repos/ryanofsky/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ryanofsky/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ryanofsky/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ryanofsky/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ryanofsky/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ryanofsky/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ryanofsky/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ryanofsky/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ryanofsky/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ryanofsky/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ryanofsky/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ryanofsky/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ryanofsky/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ryanofsky/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ryanofsky/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ryanofsky/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ryanofsky/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ryanofsky/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ryanofsky/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ryanofsky/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ryanofsky/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ryanofsky/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ryanofsky/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ryanofsky/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ryanofsky/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ryanofsky/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ryanofsky/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ryanofsky/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ryanofsky/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ryanofsky/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ryanofsky/bitcoin/hooks",
        "svn_url": "https://github.com/ryanofsky/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 6,
        "stargazers_count": 17,
        "watchers_count": 17,
        "size": 281810,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-15T12:36:28Z",
        "created_at": "2016-10-03T19:05:43Z",
        "updated_at": "2025-03-31T20:15:25Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "c779ee3a4044df3a263394bbb8b104aeeaa7c727",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37223,
        "stargazers_count": 83584,
        "watchers_count": 83584,
        "size": 281969,
        "default_branch": "master",
        "open_issues_count": 727,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-15T09:17:53Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-05-15T12:18:06Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 393,
    "deletions": 22,
    "changed_files": 26,
    "commits": 7,
    "review_comments": 171,
    "comments": 45
  },
  "events": [
    {
      "event": "commented",
      "id": 2501598456,
      "node_id": "IC_kwDOABII586VG1z4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2501598456",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T17:57:35Z",
      "updated_at": "2025-05-15T12:58:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31375.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [Sjors](https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2883726902) |\n| Concept ACK | [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2821963515), [hodlinator](https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2821205668), [theStack](https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2863866776) |\n| Approach ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2814380926) |\n| Stale ACK | [vasild](https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2835944933) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31802](https://github.com/bitcoin/bitcoin/pull/31802) (Add bitcoin-{node,gui} to release binaries for IPC by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2501598456",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "labeled",
      "id": 15440634825,
      "node_id": "LE_lADOABII586gq9mazwAAAAOYVWPJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15440634825",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T18:23:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2501645442,
      "node_id": "IC_kwDOABII586VHBSC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2501645442",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T18:23:47Z",
      "updated_at": "2024-11-26T18:23:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33557375133</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2501645442",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15455666453,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOZOsEV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15455666453",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "63df9f3deb35be79496f7c240e3303e1d96c6832",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/63df9f3deb35be79496f7c240e3303e1d96c6832",
      "created_at": "2024-11-27T17:12:49Z"
    },
    {
      "event": "commented",
      "id": 2504400845,
      "node_id": "IC_kwDOABII586VRh_N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2504400845",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T17:15:20Z",
      "updated_at": "2024-11-27T21:12:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 19ae652376faca65d972c12cb51cfc8af0560c9e -> 63df9f3deb35be79496f7c240e3303e1d96c6832 ([`pr/wrap.3`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.3) -> [`pr/wrap.4`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.3..pr/wrap.4)) with fixes for windows and fuzz CI errors, and lint and tidy fixes\r\nUpdated 63df9f3deb35be79496f7c240e3303e1d96c6832 -> da108a6e5be220654a65b6613ee7eb2c4ddc8677 ([`pr/wrap.4`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.4) -> [`pr/wrap.5`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.5), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.4..pr/wrap.5)) fixing windows include error, fs lint error, and previous releases test bug",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2504400845",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15457677611,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOZWXEr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15457677611",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "da108a6e5be220654a65b6613ee7eb2c4ddc8677",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/da108a6e5be220654a65b6613ee7eb2c4ddc8677",
      "created_at": "2024-11-27T21:11:22Z"
    },
    {
      "event": "unlabeled",
      "id": 15458110967,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAOZYA33",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15458110967",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-27T22:18:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2467341532,
      "node_id": "PRR_kwDOABII586TEKTc",
      "url": null,
      "actor": null,
      "commit_id": "da108a6e5be220654a65b6613ee7eb2c4ddc8677",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nI think it would be more clear to move `build/src/bitcoin-{node,gui}` to `build/src/libexec`, rather than use a different file organization for CMake builds than for installs. \r\n\r\nThe \"Win64 native, VS 2022\" job still seems unhappy.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2467341532",
      "submitted_at": "2024-11-28T09:40:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2505819725,
      "node_id": "IC_kwDOABII586VW8ZN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2505819725",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-28T10:49:50Z",
      "updated_at": "2024-11-28T10:49:50Z",
      "author_association": "MEMBER",
      "body": "> The \"Win64 native, VS 2022\" job still seems unhappy.\r\n\r\nhttps://learn.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-3-c4996?view=msvc-170#posix-function-names:\r\n> To turn off deprecation warnings for these functions, define the preprocessor macro `_CRT_NONSTDC_NO_WARNINGS`. You can define this macro at the command line by including the option `/D_CRT_NONSTDC_NO_WARNINGS`.\r\n\r\nWe have already used this macro:https://github.com/bitcoin/bitcoin/blob/7590e93bc73b3bbac641f05d490fd5c984156b33/cmake/leveldb.cmake#L87-L89\r\n",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2505819725",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15515874549,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOc0XT1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15515874549",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "02567bf2bef5997ea5f0765780d196f36d3053e8",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/02567bf2bef5997ea5f0765780d196f36d3053e8",
      "created_at": "2024-12-03T20:50:20Z"
    },
    {
      "event": "reviewed",
      "id": 2476650402,
      "node_id": "PRR_kwDOABII586Tnq-i",
      "url": null,
      "actor": null,
      "commit_id": "02567bf2bef5997ea5f0765780d196f36d3053e8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the reviews!\r\n\r\nUpdated da108a6e5be220654a65b6613ee7eb2c4ddc8677 -> 02567bf2bef5997ea5f0765780d196f36d3053e8 ([`pr/wrap.5`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.5) -> [`pr/wrap.6`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.5..pr/wrap.6)) to fix windows build warning and making a change to avoid a potentially confusing behavior https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2467341532\r\n\r\n> I think it would be more clear to move `build/src/bitcoin-{node,gui}` to `build/src/libexec`, rather than use a different file organization for CMake builds than for installs.\r\n\r\nAgree and I think #31161 should allow this to be simplified.\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2505819725\r\n\r\n> We have already used this macro:\r\n> \r\n> https://github.com/bitcoin/bitcoin/blob/7590e93bc73b3bbac641f05d490fd5c984156b33/cmake/leveldb.cmake#L87-L89\r\n\r\nIt seems like it would be better if this code could be compiled without disabling warnings, especially since if the old names are being deprecated. For now I just added a #define to switch to the recommended name. For leveldb it probably does make sense to disable the warnings to avoid needing to change the code too much.\r\n\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2476650402",
      "submitted_at": "2024-12-03T20:56:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2516421998,
      "node_id": "IC_kwDOABII586V_Y1u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2516421998",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T07:40:34Z",
      "updated_at": "2024-12-04T07:40:34Z",
      "author_association": "MEMBER",
      "body": "For reference the CI failure is:\r\n\r\n```\r\n                                   subprocess.CalledProcessError: Command '['C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.12.7\\\\x64\\\\python.exe', 'D:/a/bitcoin/bitcoin\\\\contrib\\\\signet\\\\miner', \"--cli='D:\\\\a\\\\bitcoin\\\\bitcoin\\\\build\\\\src\\\\Release\\\\bitcoin-cli.exe' -nonamed '-datadir=D:\\\\a\\\\_temp\\\\test_runner_₿_🏃_20241203_223434\\\\tool_signet_miner_211\\\\node0'\", 'generate', '--address=tb1q2ndfasp67k5wp30fkt63tw9gf465lcjf7rm5fc', \"--grind-cmd='D:\\\\a\\\\bitcoin\\\\bitcoin\\\\build\\\\src\\\\Release\\\\bitcoin-util.exe' grind\", '--nbits=1d00ffff', '--set-block-time=1733265821', '--poolnum=99']' returned non-zero exit status 1.\r\n```\r\n\r\nEarlier it says:\r\n\r\n```\r\nFileNotFoundError: [WinError 2] The system cannot find the file specified",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2516421998",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15527389194,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOdgSgK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15527389194",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2def75a15deeb39fa66b1e8d45679ac29fd18b82",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/2def75a15deeb39fa66b1e8d45679ac29fd18b82",
      "created_at": "2024-12-04T14:35:17Z"
    },
    {
      "event": "commented",
      "id": 2517621750,
      "node_id": "IC_kwDOABII586WD9v2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2517621750",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-04T14:36:49Z",
      "updated_at": "2024-12-04T14:36:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 02567bf2bef5997ea5f0765780d196f36d3053e8 -> 2def75a15deeb39fa66b1e8d45679ac29fd18b82 ([`pr/wrap.6`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.6) -> [`pr/wrap.7`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.7), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.6..pr/wrap.7)) to fix argument parsing bug causing a test failure on windows https://github.com/bitcoin/bitcoin/actions/runs/12147886951/job/33875123699?pr=31375#step:12:95",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2517621750",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "labeled",
      "id": 15611384257,
      "node_id": "LE_lADOABII586gq9mazwAAAAOigtHB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15611384257",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T04:50:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15620793515,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOjEmSr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15620793515",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "created_at": "2024-12-11T15:45:37Z"
    },
    {
      "event": "commented",
      "id": 2536362028,
      "node_id": "IC_kwDOABII586XLdAs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2536362028",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T15:46:17Z",
      "updated_at": "2024-12-11T15:46:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 2def75a15deeb39fa66b1e8d45679ac29fd18b82 -> 637b01fbf5064028f9a23c20f8b916325fbf82ec ([`pr/wrap.7`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.7) -> [`pr/wrap.8`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.8), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.7-rebase..pr/wrap.8)) due to conflict with #30933\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2536362028",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "unlabeled",
      "id": 15622428267,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAOjK1Zr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15622428267",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T17:43:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2540863404,
      "node_id": "IC_kwDOABII586Xcn-s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2540863404",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-13T08:30:18Z",
      "updated_at": "2024-12-13T08:30:18Z",
      "author_association": "MEMBER",
      "body": "I cherry-picked the first commit onto #30975 in order to try a (`arm64-apple-darwin`) Guix build: https://github.com/Sjors/bitcoin/tree/2024/12/multiprocess-guix\r\n\r\nThis also required adding it to installable targets and `Maintenance.cmake` (maybe not needed for this PR).\r\n\r\nThere was a brief discussion on IRC yesterday about whether anything special needs to happen in terms of macOS code signing. The conclusion was: probably not.\r\n\r\nhttps://bitcoin-irc.chaincode.com/bitcoin-core-dev/2024-12-12#1074526\r\n\r\nOn my M4 I had to `codesign -s - ...` the binaries from my Guix build just like before, which suggests nothing special is required.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2540863404",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "reviewed",
      "id": 2501661103,
      "node_id": "PRR_kwDOABII586VHFGv",
      "url": null,
      "actor": null,
      "commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2501661103",
      "submitted_at": "2024-12-13T08:30:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15648256828,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOktXM8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15648256828",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "365ac72dc7629765afb85bb9cc7c53d153c7c034",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/365ac72dc7629765afb85bb9cc7c53d153c7c034",
      "created_at": "2024-12-13T12:34:11Z"
    },
    {
      "event": "reviewed",
      "id": 2502197771,
      "node_id": "PRR_kwDOABII586VJIIL",
      "url": null,
      "actor": null,
      "commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Updated 637b01fbf5064028f9a23c20f8b916325fbf82ec -> 365ac72dc7629765afb85bb9cc7c53d153c7c034 ([`pr/wrap.8`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.8) -> [`pr/wrap.9`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.9), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.8..pr/wrap.9)) adding to cmake output as suggested",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2502197771",
      "submitted_at": "2024-12-13T12:34:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2542833216,
      "node_id": "IC_kwDOABII586XkI5A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2542833216",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-14T05:31:23Z",
      "updated_at": "2024-12-14T05:32:12Z",
      "author_association": "MEMBER",
      "body": "I wrote:\r\n\r\n> I think it would be more clear to move `build/src/bitcoin-{node,gui}` to `build/src/libexec`, rather than use a different file organization for CMake builds than for installs.\r\n\r\nBut I just realized that the `bitcoin` binary would be installed to `/usr/bin` whereas new binaries like `bitcoin-node` and `bitcoin-mine` would go to `/usr/libexec`.\r\n\r\nTo match this behavior in development mode we could use `build/bin` and `build/libexec`. As you mentioned #31161 should allow this. But there's no need to wait for that.\r\n\r\nI sometimes install a user-specific node using `-DCMAKE_INSTALL_PREFIX=$HOME`. By default `$HOME/bin` is in the `PATH` on Ubuntu, but `$HOME/libexec` isn't. Looking at f17453ff13ebd0be842396c17bcc99b0c903abb8 it handles this nicely; if the `bitcoin` executable lives under `bin` it will try `../libexec`.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2542833216",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "reviewed",
      "id": 2503592465,
      "node_id": "PRR_kwDOABII586VOcoR",
      "url": null,
      "actor": null,
      "commit_id": "365ac72dc7629765afb85bb9cc7c53d153c7c034",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Mostly happy with 365ac72dc7629765afb85bb9cc7c53d153c7c034.\r\n\r\nI didn't test and review Windows code. I also don't really  understand the test changes in a3b92c1f46c14c5c8db1f2833fd869d8a6a7ad4f, hopefully @maflcko does. But it's useful that we use the wrapper in 365ac72dc7629765afb85bb9cc7c53d153c7c034. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2503592465",
      "submitted_at": "2024-12-14T07:18:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15693554250,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOnaKJK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15693554250",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "128e110ed7af5f95d2bd16c36eca93c7c9b03573",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/128e110ed7af5f95d2bd16c36eca93c7c9b03573",
      "created_at": "2024-12-17T21:41:30Z"
    },
    {
      "event": "reviewed",
      "id": 2510009903,
      "node_id": "PRR_kwDOABII586Vm7Yv",
      "url": null,
      "actor": null,
      "commit_id": "128e110ed7af5f95d2bd16c36eca93c7c9b03573",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the review and testing, really helpful feedback!\r\n\r\nUpdated 365ac72dc7629765afb85bb9cc7c53d153c7c034 -> 128e110ed7af5f95d2bd16c36eca93c7c9b03573 ([`pr/wrap.9`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.9) -> [`pr/wrap.10`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.10), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.9..pr/wrap.10)) fixing version and help formatting and weakly_canonical error handling.\r\nUpdated 128e110ed7af5f95d2bd16c36eca93c7c9b03573 -> 044c1129db06983da598f427dff85513d8480b3a ([`pr/wrap.10`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.10) -> [`pr/wrap.11`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.11), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.10..pr/wrap.11)) to fix lint failure https://cirrus-ci.com/task/5251623682834432",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2510009903",
      "submitted_at": "2024-12-17T21:45:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15693656407,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAOnajFX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15693656407",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/044c1129db06983da598f427dff85513d8480b3a",
      "created_at": "2024-12-17T21:49:40Z"
    },
    {
      "event": "labeled",
      "id": 15693658335,
      "node_id": "LE_lADOABII586gq9mazwAAAAOnajjf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15693658335",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T21:49:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2549712308,
      "node_id": "IC_kwDOABII586X-YW0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2549712308",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T21:49:47Z",
      "updated_at": "2024-12-17T21:49:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/34561550110</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2549712308",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "unlabeled",
      "id": 15694288948,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAOnc9g0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15694288948",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-17T22:51:53Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2550270615,
      "node_id": "IC_kwDOABII586YAgqX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2550270615",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-18T03:57:48Z",
      "updated_at": "2024-12-18T03:57:48Z",
      "author_association": "MEMBER",
      "body": "tACK 044c1129db06983da598f427dff85513d8480b3a but did not review test and windows.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2550270615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "reviewed",
      "id": 2517070391,
      "node_id": "PRR_kwDOABII586WB3I3",
      "url": null,
      "actor": null,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK 044c1129db06983da598f427dff85513d8480b3a",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2517070391",
      "submitted_at": "2024-12-20T11:10:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2571248802,
      "node_id": "IC_kwDOABII586ZQiSi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2571248802",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-04T10:44:43Z",
      "updated_at": "2025-01-04T10:44:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2571248802",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "reviewed",
      "id": 2530754869,
      "node_id": "PRR_kwDOABII586W2EE1",
      "url": null,
      "actor": null,
      "commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2530754869",
      "submitted_at": "2025-01-04T15:01:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2582882222,
      "node_id": "IC_kwDOABII586Z86eu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2582882222",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-10T14:49:31Z",
      "updated_at": "2025-01-10T14:49:31Z",
      "author_association": "MEMBER",
      "body": "I guess `bitcoin` is intentionally not added to `installable_targets` because it makes reference to the multiprocess binaries that aren't shipped?\r\n\r\nI made a Windows guix build for 044c1129db06983da598f427dff85513d8480b3a. It got misidentified as `Trojan:Script/Wavatac.B1ml` again. But since the `bitcoin` binary isn't included yet, it can't be because of the `execvp` call.\r\n\r\nJust to be sure, I also tried a guix build for master @ 62bd61de110b057cbfd6e31e4d0b727d93119c72 that this PR is based on. That didn't trigger the anti-virus. But maybe it's just random.\r\n\r\nIn order to better test on Windows I used this: 26d3a069f94e2cabcc8d1f73fd2cfa3e7c320497. The installer puts `bitcoin.exe` in `C:\\Program Files\\Bitcoin\\daemon`. Running it without arguments will show the help. Starting the daemon fails with \"Error: Command line contains unexpected token 'Files\\Bitcoin\\daemon\\bitcoind'\" so it seems to trip over the space. It also can't find `bitcoin-qt.exe`, which lives in `Bitcoin\\` instead of `daemon\\`. If I move it to a directory without space, I'm able to start the daemon and I'm able to stop the daemon using `bitcoin.exe rpc stop`. If I move the bitcoin-qt executable I'm also able to start the GUI. No complaints from virus scanners this time.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2582882222",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "labeled",
      "id": 15883451349,
      "node_id": "LE_lADOABII586gq9mazwAAAAOyujvV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15883451349",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-10T15:11:24Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 15980118181,
      "node_id": "REFE_lADOABII586gq9mazwAAAAO4fUCl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15980118181",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2a952710661a1990ed1c24b0ebd16de8ac0df87c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/2a952710661a1990ed1c24b0ebd16de8ac0df87c",
      "created_at": "2025-01-17T16:59:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15983789954,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAO4tUeC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15983789954",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "17f25149c680c1fdb2f79dbe373e8cf820e62488",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/17f25149c680c1fdb2f79dbe373e8cf820e62488",
      "created_at": "2025-01-18T00:35:46Z"
    },
    {
      "event": "reviewed",
      "id": 2560158721,
      "node_id": "PRR_kwDOABII586YmOwB",
      "url": null,
      "actor": null,
      "commit_id": "17f25149c680c1fdb2f79dbe373e8cf820e62488",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the reviews and testing!\r\n\r\nRebased 044c1129db06983da598f427dff85513d8480b3a -> 17f25149c680c1fdb2f79dbe373e8cf820e62488 ([`pr/wrap.11`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.11) -> [`pr/wrap.12`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.12), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.11-rebase..pr/wrap.12)) to fix conflicts, also made many suggested updates and some fixes, particularly for windows.\r\nUpdated 17f25149c680c1fdb2f79dbe373e8cf820e62488 -> 3d46df16e9cf4a960fedde9e515667030b39bb03 ([`pr/wrap.12`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.12) -> [`pr/wrap.13`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.13), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.12..pr/wrap.13)) to fix python test bugs after bad rebase\r\nUpdated 3d46df16e9cf4a960fedde9e515667030b39bb03 -> c11f7e7336b4a5ea6a8f22dc40dcae1b3ddd81e2 ([`pr/wrap.13`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.13) -> [`pr/wrap.14`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.14), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.13..pr/wrap.14)) with documentation cleanups\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2582882222\r\n\r\n> I guess `bitcoin` is intentionally not added to `installable_targets` because it makes reference to the multiprocess binaries that aren't shipped?\r\n\r\nNo that was just an oversight, it should be added now. The wrapper tool is meant to be useful in developer builds and source builds not just official binaries releases, so it doesn't need to be tied to current options we are building binary releases with.\r\n\r\n> Starting the daemon fails with \"Error: Command line contains unexpected token 'Files\\Bitcoin\\daemon\\bitcoind'\" so it seems to trip over the space. It also can't find `bitcoin-qt.exe`, which lives in `Bitcoin\\` instead of `daemon\\`. If I move it to a directory without space, I'm able to start the daemon and I'm able to stop the daemon using `bitcoin.exe rpc stop`. If I move the bitcoin-qt executable I'm also able to start the GUI. No complaints from virus scanners this time.\r\n\r\nThanks for all the windows testing, this is very helpful. I made attempted fixes for all these issues so we should be able to iterate and resolve them. I added your windows installer commit to this PR with a small tweak to put bitcoin.exe in program files directory instead of the daemon directory, then changed bitcoin.cpp to look for executables in the daemon directory and implemented command line argument escaping for execvp on windows since the windows execvp function doesn't provide that",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2560158721",
      "submitted_at": "2025-01-18T00:42:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "unlabeled",
      "id": 15984138536,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAO4upko",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15984138536",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-18T02:30:15Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15990113327,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAO5FcQv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15990113327",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3d46df16e9cf4a960fedde9e515667030b39bb03",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/3d46df16e9cf4a960fedde9e515667030b39bb03",
      "created_at": "2025-01-19T23:43:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15990221778,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAO5F2vS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15990221778",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c11f7e7336b4a5ea6a8f22dc40dcae1b3ddd81e2",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c11f7e7336b4a5ea6a8f22dc40dcae1b3ddd81e2",
      "created_at": "2025-01-20T00:19:20Z"
    },
    {
      "event": "commented",
      "id": 2601998899,
      "node_id": "IC_kwDOABII586bF1oz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2601998899",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-20T10:19:42Z",
      "updated_at": "2025-01-20T10:19:42Z",
      "author_association": "MEMBER",
      "body": "On Windows it's a bit ugly to show the full path:\r\n\r\n<img width=\"957\" alt=\"help\" src=\"https://github.com/user-attachments/assets/4a1cb5fe-b7e6-44f2-b860-05e10e1253cb\" />\r\n\r\nNone of the commands work anymore though, except `version` and `help`. The commands `daemon` and `gui` do not start anything. When I start the GUI manually through the desktop item, the command `bitcoin rpc help` doesn't return anything.\r\n\r\nThis also doesn't return anything: `.\\bitcoin.exe daemon --help`\r\n\r\nI would expect trying to run the multiprocess versions to throw an error, but nothing happens when I do `.\\bitcoin.exe daemon -m`.\r\n\r\nEverything seems to be in place though:\r\n\r\n```\r\nPS C:\\Program Files\\Bitcoin> ls\r\n\r\n\r\n    Directory: C:\\Program Files\\Bitcoin\r\n\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd-----         1/20/2025  11:10 AM                daemon\r\nd-----         1/20/2025  11:10 AM                share\r\n-a----         1/20/2025  11:10 AM       39362576 bitcoin-qt.exe\r\n-a----         1/20/2025  11:10 AM            126 bitcoin.conf\r\n-a----         1/20/2025  11:10 AM        1221120 bitcoin.exe\r\n-a----         1/20/2025  11:10 AM           1142 COPYING.txt\r\n-a----         1/20/2025  11:10 AM            846 readme.txt\r\n-a----         1/20/2025  11:10 AM         175560 uninstall.exe\r\n\r\nls daemon\r\n    Directory: C:\\Program Files\\Bitcoin\\daemon\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a----         1/20/2025  11:10 AM        2249728 bitcoin-cli.exe\r\n-a----         1/20/2025  11:10 AM        4061184 bitcoin-tx.exe\r\n-a----         1/20/2025  11:10 AM        9435648 bitcoin-wallet.exe\r\n-a----         1/20/2025  11:10 AM       15302656 bitcoind.exe\r\n-a----         1/20/2025  11:10 AM       26467840 test_bitcoin.exe\r\n```\r\n\r\n",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2601998899",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16019195370,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAO60YXq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16019195370",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0b503d792f0b6255f6dc5b0e4ee7ce2b7b667e90",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/0b503d792f0b6255f6dc5b0e4ee7ce2b7b667e90",
      "created_at": "2025-01-21T19:23:28Z"
    },
    {
      "event": "commented",
      "id": 2605614101,
      "node_id": "IC_kwDOABII586bToQV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2605614101",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-21T19:54:52Z",
      "updated_at": "2025-01-21T20:50:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated c11f7e7336b4a5ea6a8f22dc40dcae1b3ddd81e2 -> 0b503d792f0b6255f6dc5b0e4ee7ce2b7b667e90 ([`pr/wrap.14`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.14) -> [`pr/wrap.15`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.15), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.14..pr/wrap.15)) with fixes for windows.\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2601998899\r\n\r\n> None of the commands work anymore though, except version and help\r\n\r\nThanks, should be fixed now. After struggling with cross compilation and qemu a bit I was able to reproduce this. There was a bug in the ExecVp argv loop that caused string_view to be constructed with a null pointer and for the program to crash. I was a little surprised it would crash without an error, but maybe this is what happens by default if you deference a null pointer. There was also another bug in the same loop that caused arguments to be dropped. Both bugs should be fixed now and now it seems to work as expected and handle arguments with spaces correctly on windows.\r\n\r\n> On Windows it's a bit ugly to show the full path:\r\n\r\nI could reproduce this with powershell, but I was not seeing this when I tested with `cmd.exe`. So this behavior seems to vary with the shell, and it looks like this only happens with powershell, not with the classic windows shell or other shells like bash. For these other shells, I think it is probably better to show unmodified `argv[0]` in usage information instead of some modified or static alternative. But we could do something different in the future, like maybe show original argv[0] path in the Usage: string, and basename of that path in the command overview list.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2605614101",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "commented",
      "id": 2606802006,
      "node_id": "IC_kwDOABII586bYKRW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2606802006",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T10:05:28Z",
      "updated_at": "2025-01-22T10:16:54Z",
      "author_association": "MEMBER",
      "body": "> After struggling with cross compilation and qemu a bit I was able to reproduce this.\r\n\r\nI just have a dual boot system and configured sshd on it so I can quickly scp the windows installer from my guix machine.\r\n\r\n> it looks like this only happens with powershell, not with the classic windows shell \r\n\r\nIn that case I wouldn't worry about it.\r\n\r\nJust tested: 0b503d792f0b6255f6dc5b0e4ee7ce2b7b667e90 works!",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2606802006",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "commented",
      "id": 2607354185,
      "node_id": "IC_kwDOABII586baRFJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2607354185",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T14:11:24Z",
      "updated_at": "2025-01-22T14:12:17Z",
      "author_association": "MEMBER",
      "body": "tACK 0b503d792f0b6255f6dc5b0e4ee7ce2b7b667e90\r\n\r\nAlso tested on macOS.\r\n\r\nThe logic in `ExecCommand()` is easier to follow compared to my previous review.\r\n\r\nI did not study the Windows `ExecVp` implementation in  f006565ad220154c6e402c99074d326699d62d3e. I don't expect anyone to use it until Windows multiprocess works (and is in a release). It would be good to call the wrapper from the Windows CI. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2607354185",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "review_requested",
      "id": 16029716832,
      "node_id": "RRE_lADOABII586gq9mazwAAAAO7chFg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16029716832",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T14:11:30Z",
      "requested_reviewer": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 16029717010,
      "node_id": "RRE_lADOABII586gq9mazwAAAAO7chIS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16029717010",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T14:11:31Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2567223685,
      "node_id": "PRR_kwDOABII586ZBLmF",
      "url": null,
      "actor": null,
      "commit_id": "0b503d792f0b6255f6dc5b0e4ee7ce2b7b667e90",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2567223685",
      "submitted_at": "2025-01-22T14:11:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2607509622,
      "node_id": "IC_kwDOABII586ba3B2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2607509622",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T15:11:30Z",
      "updated_at": "2025-01-22T15:11:30Z",
      "author_association": "MEMBER",
      "body": "I tried Guix building this branch:\r\n```bash\r\nHOSTS=\"x86_64-linux-gnu\" ./contrib/guix/guix-build\r\nConsolidate compiler generated dependencies of target bitcoin-qt\r\n[100%] Built target bitcoin-qt\r\nChecking binary security...\r\n/distsrc-base/distsrc-0b503d792f0b-x86_64-linux-gnu/build/src/bitcoin: failed FORTIFY\r\nmake[3]: *** [CMakeFiles/check-security.dir/build.make:71: CMakeFiles/check-security] Error 1\r\nmake[2]: *** [CMakeFiles/Makefile2:565: CMakeFiles/check-security.dir/all] Error 2\r\nmake[1]: *** [CMakeFiles/Makefile2:572: CMakeFiles/check-security.dir/rule] Error 2\r\nmake: *** [Makefile:270: check-security] Error 2\r\n```",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2607509622",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "commented",
      "id": 2607580791,
      "node_id": "IC_kwDOABII586bbIZ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2607580791",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T15:39:08Z",
      "updated_at": "2025-01-22T16:02:15Z",
      "author_association": "MEMBER",
      "body": "I had only tried the Windows guix build. Getting the same error as @fanquake with `x86_64-linux-gnu`.\r\n\r\nCan also be reproduced on Ubuntu 24.10 with:\r\n\r\n```sh\r\npip install lief==0.13.2\r\ncontrib/devtools/security-check.py build/src/bitcoin\r\n```\r\n\r\nAdding this to `security-check.py` works, similar to `bitcoin-util`:\r\n\r\n```py\r\n    # bitcoin does not currently contain any fortified functions\r\n    if '--monolithic' in binary.strings:\r\n        return True\r\n```\r\n\r\nNot sure if it's correct though.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2607580791",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "mentioned",
      "id": 16031051567,
      "node_id": "MEE_lADOABII586gq9mazwAAAAO7hm8v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16031051567",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T15:39:10Z"
    },
    {
      "event": "subscribed",
      "id": 16031051583,
      "node_id": "SE_lADOABII586gq9mazwAAAAO7hm8_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16031051583",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T15:39:10Z"
    },
    {
      "event": "labeled",
      "id": 16034833247,
      "node_id": "LE_lADOABII586gq9mazwAAAAO7wCNf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16034833247",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T21:02:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2608342755,
      "node_id": "IC_kwDOABII586beCbj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2608342755",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T21:50:07Z",
      "updated_at": "2025-01-22T21:50:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2607580791\r\n\r\n> Adding this to `security-check.py` works, similar to `bitcoin-util`:\r\n\r\nI think that makes sense. The new executable is only using c++ vector/string functions and calling `execvp` so it is probably just not calling any fortified functions, and won't have any fortified function symbols, IIUC.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2608342755",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "commented",
      "id": 2609856396,
      "node_id": "IC_kwDOABII586bjz-M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2609856396",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-23T13:48:24Z",
      "updated_at": "2025-01-23T13:48:24Z",
      "author_association": "MEMBER",
      "body": "> fortified functions\r\n\r\nI have no idea what those look like.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2609856396",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16052984216,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAO81RmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16052984216",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "171ffdd10e41df9e06ec3f6ef52f1cbbfcaf1748",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/171ffdd10e41df9e06ec3f6ef52f1cbbfcaf1748",
      "created_at": "2025-01-24T03:49:39Z"
    },
    {
      "event": "reviewed",
      "id": 2571581056,
      "node_id": "PRR_kwDOABII586ZRzaA",
      "url": null,
      "actor": null,
      "commit_id": "171ffdd10e41df9e06ec3f6ef52f1cbbfcaf1748",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 0b503d792f0b6255f6dc5b0e4ee7ce2b7b667e90 -> 171ffdd10e41df9e06ec3f6ef52f1cbbfcaf1748 ([`pr/wrap.15`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.15) -> [`pr/wrap.16`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.16), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.15-rebase..pr/wrap.16)) to avoid conflict. Also added suggestions and security check fix. Additionally made some tweaks like using path::filename() method to avoid long paths https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2601998899, and adding documentation for internal commands not shown by default.\r\nUpdated 171ffdd10e41df9e06ec3f6ef52f1cbbfcaf1748 -> 5e0196c8e0d1687bcf59a9569bb8b7268d1f195d ([`pr/wrap.16`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.16) -> [`pr/wrap.17`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.17), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.16..pr/wrap.17)) to fix windows compile error https://cirrus-ci.com/task/5239580141551616\r\n\r\n---\r\n\r\n> > fortified functions\r\n> \r\n> I have no idea what those look like.\r\n\r\nI know very little about this but I believe they just have a _chk suffix: https://www.gnu.org/software/libc/manual/html_node/Source-Fortification.html\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2571581056",
      "submitted_at": "2025-01-24T03:54:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16053041471,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAO81fk_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16053041471",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5e0196c8e0d1687bcf59a9569bb8b7268d1f195d",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/5e0196c8e0d1687bcf59a9569bb8b7268d1f195d",
      "created_at": "2025-01-24T04:01:09Z"
    },
    {
      "event": "labeled",
      "id": 16053042631,
      "node_id": "LE_lADOABII586gq9mazwAAAAO81f3H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16053042631",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T04:01:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2611513361,
      "node_id": "IC_kwDOABII586bqIgR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2611513361",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T04:01:24Z",
      "updated_at": "2025-01-24T04:01:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/36101379316</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2611513361",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "unlabeled",
      "id": 16053293641,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAO82dJJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16053293641",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T04:48:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 16053530937,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAO83XE5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16053530937",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T05:27:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 16115074366,
      "node_id": "LE_lADOABII586gq9mazwAAAAPAiIU-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16115074366",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-29T21:57:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16117310486,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAPAqqQW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16117310486",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "created_at": "2025-01-30T03:02:50Z"
    },
    {
      "event": "commented",
      "id": 2623415052,
      "node_id": "IC_kwDOABII586cXiMM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2623415052",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T03:03:28Z",
      "updated_at": "2025-01-30T03:03:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 5e0196c8e0d1687bcf59a9569bb8b7268d1f195d -> 0e4ee158cadc3eb8f6af1b33440ae9a95fe19487 ([`pr/wrap.17`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.17) -> [`pr/wrap.18`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.18), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.17-rebase..pr/wrap.18)) to fix conflict",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2623415052",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "referenced",
      "id": 16117316895,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPAqr0f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16117316895",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "47a872236e070814ad74922d3f8a653e1c6af968",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/47a872236e070814ad74922d3f8a653e1c6af968",
      "created_at": "2025-01-30T03:04:00Z"
    },
    {
      "event": "unlabeled",
      "id": 16117846470,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAPAstHG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16117846470",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T04:39:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2624942251,
      "node_id": "IC_kwDOABII586cdXCr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2624942251",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T16:16:09Z",
      "updated_at": "2025-01-30T16:16:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "I wonder if python test framework changes here are scaring reviewers from this PR? I potentially could drop the framework integration here and move it into a different PR. Maybe add just a more limited test here instead.\r\n\r\nWould be good to know either way.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2624942251",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "unsubscribed",
      "id": 16129566208,
      "node_id": "UE_lADOABII586gq9mazwAAAAPBZaYA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16129566208",
      "actor": {
        "login": "PRADACANDI18",
        "id": 91190628,
        "node_id": "MDQ6VXNlcjkxMTkwNjI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/91190628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PRADACANDI18",
        "html_url": "https://github.com/PRADACANDI18",
        "followers_url": "https://api.github.com/users/PRADACANDI18/followers",
        "following_url": "https://api.github.com/users/PRADACANDI18/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PRADACANDI18/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PRADACANDI18/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PRADACANDI18/subscriptions",
        "organizations_url": "https://api.github.com/users/PRADACANDI18/orgs",
        "repos_url": "https://api.github.com/users/PRADACANDI18/repos",
        "events_url": "https://api.github.com/users/PRADACANDI18/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PRADACANDI18/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T20:13:53Z"
    },
    {
      "event": "labeled",
      "id": 16278360776,
      "node_id": "LE_lADOABII586gq9mazwAAAAPKRBLI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16278360776",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T10:15:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2612338457,
      "node_id": "PRR_kwDOABII586btR8Z",
      "url": null,
      "actor": null,
      "commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK 0e4ee158ca.\r\n\r\n> I wonder if python test framework changes here are scaring reviewers from this PR?\r\n\r\nMoving the python changes to another PR would probably speed the review of this one and probably delay the review of the other one (with the python changes).",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2612338457",
      "submitted_at": "2025-02-12T17:44:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "reviewed",
      "id": 2612765858,
      "node_id": "PRR_kwDOABII586bu6Si",
      "url": null,
      "actor": null,
      "commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2612765858",
      "submitted_at": "2025-02-12T17:50:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "referenced",
      "id": 16301222098,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPLoOjS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16301222098",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d2ceb2e0735a2c8343f8316b55fac55323aba62c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d2ceb2e0735a2c8343f8316b55fac55323aba62c",
      "created_at": "2025-02-13T18:48:06Z"
    },
    {
      "event": "referenced",
      "id": 16301222156,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPLoOkM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16301222156",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a7facec668bcf1ed1d978e103449d6d77e2e9a94",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/a7facec668bcf1ed1d978e103449d6d77e2e9a94",
      "created_at": "2025-02-13T18:48:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16302833795,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAPLuYCD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16302833795",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "edb8a72226b362ee60e4184fd8f56d1e588ce5b6",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/edb8a72226b362ee60e4184fd8f56d1e588ce5b6",
      "created_at": "2025-02-13T21:16:29Z"
    },
    {
      "event": "reviewed",
      "id": 2616014706,
      "node_id": "PRR_kwDOABII586b7Tdy",
      "url": null,
      "actor": null,
      "commit_id": "edb8a72226b362ee60e4184fd8f56d1e588ce5b6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the reviews!\r\n\r\nRebased 0e4ee158cadc3eb8f6af1b33440ae9a95fe19487 -> edb8a72226b362ee60e4184fd8f56d1e588ce5b6 ([`pr/wrap.18`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.18) -> [`pr/wrap.19`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.19), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.18-rebase..pr/wrap.19)) due to conflict with #31818\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2612338457\r\n\r\n> Moving the python changes to another PR would probably speed the review of this one and probably delay the review of the other one (with the python changes).\r\n\r\nThanks, I guess for now it should be easy enough for reviewers not review the python changes if they aren't interested and only ack the C++ ones.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2616014706",
      "submitted_at": "2025-02-13T21:26:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "unlabeled",
      "id": 16303844722,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAPLyO1y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16303844722",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T23:13:38Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 16303845053,
      "node_id": "LE_lADOABII586gq9mazwAAAAPLyO69",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16303845053",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T23:13:41Z",
      "label": {
        "name": "interfaces",
        "color": "83c9fc"
      }
    },
    {
      "event": "referenced",
      "id": 16313308159,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPMWVP_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16313308159",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "93abdd4bbb45775c7bedc3bb71c5096e3eadd2cd",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/93abdd4bbb45775c7bedc3bb71c5096e3eadd2cd",
      "created_at": "2025-02-14T15:18:57Z"
    },
    {
      "event": "referenced",
      "id": 16313308217,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPMWVQ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16313308217",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "45bfd97ec7c9991f41673d79b01277bfd940e64e",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/45bfd97ec7c9991f41673d79b01277bfd940e64e",
      "created_at": "2025-02-14T15:18:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16313412012,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAPMWums",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16313412012",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "27bb348388a6708e8748d7073e352c047e8fb95c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/27bb348388a6708e8748d7073e352c047e8fb95c",
      "created_at": "2025-02-14T15:26:10Z"
    },
    {
      "event": "commented",
      "id": 2659622448,
      "node_id": "IC_kwDOABII586ehp4w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2659622448",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-14T15:26:54Z",
      "updated_at": "2025-02-14T16:27:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased edb8a72226b362ee60e4184fd8f56d1e588ce5b6 -> 27bb348388a6708e8748d7073e352c047e8fb95c ([`pr/wrap.19`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.19) -> [`pr/wrap.20`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.20), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.19-rebase..pr/wrap.20)) due to silent conflict with #31844\r\nUpdated 27bb348388a6708e8748d7073e352c047e8fb95c -> 6f0405177f89377ed272bae42becec1c75b8943c ([`pr/wrap.20`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.20) -> [`pr/wrap.21`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.21), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.20..pr/wrap.21)) just splitting up test commits internally so they are easier to review",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2659622448",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "referenced",
      "id": 16313510283,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPMXGmL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16313510283",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e58f5e0e6180e0f0f39d4fb52d1ed822cbde1078",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e58f5e0e6180e0f0f39d4fb52d1ed822cbde1078",
      "created_at": "2025-02-14T15:32:26Z"
    },
    {
      "event": "referenced",
      "id": 16313510308,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPMXGmk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16313510308",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bfadc7d241a6288e70fb0c58b6ad5fa5a305af51",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/bfadc7d241a6288e70fb0c58b6ad5fa5a305af51",
      "created_at": "2025-02-14T15:32:26Z"
    },
    {
      "event": "referenced",
      "id": 16314429043,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPMam5z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16314429043",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "82c25f069b3536c2572e401658482f6d276054ac",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/82c25f069b3536c2572e401658482f6d276054ac",
      "created_at": "2025-02-14T16:26:59Z"
    },
    {
      "event": "referenced",
      "id": 16314429069,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPMam6N",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16314429069",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eca58f926ffc2dd46eb26ffc8fd70f29f5c87939",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/eca58f926ffc2dd46eb26ffc8fd70f29f5c87939",
      "created_at": "2025-02-14T16:26:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16314429497,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAPManA5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16314429497",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6f0405177f89377ed272bae42becec1c75b8943c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6f0405177f89377ed272bae42becec1c75b8943c",
      "created_at": "2025-02-14T16:27:01Z"
    },
    {
      "event": "commented",
      "id": 2665861435,
      "node_id": "IC_kwDOABII586e5dE7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2665861435",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-18T14:22:16Z",
      "updated_at": "2025-02-18T14:22:55Z",
      "author_association": "MEMBER",
      "body": "re-ACK 6f0405177f89377ed272bae42becec1c75b8943c.\r\n\r\nLightly reviewed the code changes since my previous review. It's nice that `ExecCommand` is now a bit shorter, as a result of moving some helper functionality to `src/util/exec.h`.\r\n\r\nThe Python changes are also easier to follow now thanks to splitting the commit.\r\n\r\nI made a guix build for 6f0405, but didn't try including the IPC binaries with #31802 since there's too many build system changes there. That will be easier to test after #31741 lands.\r\n\r\nRetested a bit on Apple Silicon macOS and on Windows.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2665861435",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "review_requested",
      "id": 16349254158,
      "node_id": "RRE_lADOABII586gq9mazwAAAAPOfdIO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16349254158",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-18T14:22:22Z",
      "requested_reviewer": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "referenced",
      "id": 16355283954,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPO2dPy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16355283954",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6fbd915ea66df387b94f5b59cd48bc2e13a18981",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6fbd915ea66df387b94f5b59cd48bc2e13a18981",
      "created_at": "2025-02-18T20:34:50Z"
    },
    {
      "event": "referenced",
      "id": 16355283974,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPO2dQG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16355283974",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "11615b1025a09e62f12224ae55c92fe85c42b24c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/11615b1025a09e62f12224ae55c92fe85c42b24c",
      "created_at": "2025-02-18T20:34:50Z"
    },
    {
      "event": "referenced",
      "id": 16355327777,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPO2n8h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16355327777",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e60ff180c29dde6015f21132e9bc3846a608edf6",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e60ff180c29dde6015f21132e9bc3846a608edf6",
      "created_at": "2025-02-18T20:39:20Z"
    },
    {
      "event": "referenced",
      "id": 16355327798,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPO2n82",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16355327798",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8f5228d9239464ece06f3a56372aeec29685801c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/8f5228d9239464ece06f3a56372aeec29685801c",
      "created_at": "2025-02-18T20:39:20Z"
    },
    {
      "event": "referenced",
      "id": 16356206311,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPO5-bn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16356206311",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "36a9b71056d35d07f4a0ed5ba90c5db5d0d02e8e",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/36a9b71056d35d07f4a0ed5ba90c5db5d0d02e8e",
      "created_at": "2025-02-18T22:10:37Z"
    },
    {
      "event": "referenced",
      "id": 16356206329,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPO5-b5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16356206329",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "48f8e6048f434f8a55dd2e99e8a0509e8c20603f",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/48f8e6048f434f8a55dd2e99e8a0509e8c20603f",
      "created_at": "2025-02-18T22:10:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16356206571,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAPO5-fr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16356206571",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "created_at": "2025-02-18T22:10:39Z"
    },
    {
      "event": "commented",
      "id": 2667038911,
      "node_id": "IC_kwDOABII586e98i_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2667038911",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-18T22:12:06Z",
      "updated_at": "2025-02-18T22:12:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated 6f0405177f89377ed272bae42becec1c75b8943c -> 185c6a416df679ddc7b38750aa4d181c0b043d5b ([`pr/wrap.21`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.21) -> [`pr/wrap.22`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.22), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.21..pr/wrap.22)) just incorporating some python cleanups from #31866",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2667038911",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "reviewed",
      "id": 2629536362,
      "node_id": "PRR_kwDOABII586cu4pq",
      "url": null,
      "actor": null,
      "commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK 185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2629536362",
      "submitted_at": "2025-02-20T15:23:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "referenced",
      "id": 16515571609,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPYZ5-Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16515571609",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a92ecaba9521fd1d28fb0018f0708499f3354ad4",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/a92ecaba9521fd1d28fb0018f0708499f3354ad4",
      "created_at": "2025-02-28T17:10:10Z"
    },
    {
      "event": "referenced",
      "id": 16515571628,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPYZ5-s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16515571628",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6c457f40436a681bd42f81d28ea7b14c1ed3aa47",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6c457f40436a681bd42f81d28ea7b14c1ed3aa47",
      "created_at": "2025-02-28T17:10:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16515571985,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAPYZ6ER",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16515571985",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "623c0f0df878968dabbaa271a7654c638603f369",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/623c0f0df878968dabbaa271a7654c638603f369",
      "created_at": "2025-02-28T17:10:12Z"
    },
    {
      "event": "reviewed",
      "id": 2651321758,
      "node_id": "PRR_kwDOABII586eB_We",
      "url": null,
      "actor": null,
      "commit_id": "623c0f0df878968dabbaa271a7654c638603f369",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the review!\r\n\r\nUpdated 185c6a416df679ddc7b38750aa4d181c0b043d5b -> 623c0f0df878968dabbaa271a7654c638603f369 ([`pr/wrap.22`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.22) -> [`pr/wrap.23`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.23), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.22..pr/wrap.23)) cleaning up comments and help with suggestions",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2651321758",
      "submitted_at": "2025-02-28T17:12:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "labeled",
      "id": 16827177161,
      "node_id": "LE_lADOABII586gq9mazwAAAAPq-ljJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16827177161",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-18T09:39:08Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 16840021244,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPrvlT8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16840021244",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "095801b8999851b10e43567389cd293fd7957497",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/095801b8999851b10e43567389cd293fd7957497",
      "created_at": "2025-03-18T17:01:57Z"
    },
    {
      "event": "referenced",
      "id": 16840021354,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPrvlVq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16840021354",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "45d439dab13153a3b570957a9eab63e3e6274611",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/45d439dab13153a3b570957a9eab63e3e6274611",
      "created_at": "2025-03-18T17:01:57Z"
    },
    {
      "event": "referenced",
      "id": 16840021927,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPrvlen",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16840021927",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a86503d7498284cebcd2c59e11ef4f6af74d61de",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/a86503d7498284cebcd2c59e11ef4f6af74d61de",
      "created_at": "2025-03-18T17:01:57Z"
    },
    {
      "event": "referenced",
      "id": 16840021967,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPrvlfP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16840021967",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4ce506318a3c185b41414c2020bf2be85dd80c2c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/4ce506318a3c185b41414c2020bf2be85dd80c2c",
      "created_at": "2025-03-18T17:01:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16840022307,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAPrvlkj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16840022307",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a9935d4dae8847d0549ec51ddc4349c7e8c61763",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/a9935d4dae8847d0549ec51ddc4349c7e8c61763",
      "created_at": "2025-03-18T17:01:59Z"
    },
    {
      "event": "commented",
      "id": 2734048299,
      "node_id": "IC_kwDOABII586i9kQr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2734048299",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-18T17:03:58Z",
      "updated_at": "2025-03-18T17:03:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 623c0f0df878968dabbaa271a7654c638603f369 -> a9935d4dae8847d0549ec51ddc4349c7e8c61763 ([`pr/wrap.23`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.23) -> [`pr/wrap.24`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.24), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.23-rebase..pr/wrap.24)) due to conflict with #32019",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2734048299",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "unlabeled",
      "id": 16840074282,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAPrvyQq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16840074282",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-18T17:04:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unsubscribed",
      "id": 16840118537,
      "node_id": "UE_lADOABII586gq9mazwAAAAPrv9EJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16840118537",
      "actor": {
        "login": "Ph0enix1127",
        "id": 97634582,
        "node_id": "U_kgDOBdHJFg",
        "avatar_url": "https://avatars.githubusercontent.com/u/97634582?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Ph0enix1127",
        "html_url": "https://github.com/Ph0enix1127",
        "followers_url": "https://api.github.com/users/Ph0enix1127/followers",
        "following_url": "https://api.github.com/users/Ph0enix1127/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Ph0enix1127/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Ph0enix1127/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Ph0enix1127/subscriptions",
        "organizations_url": "https://api.github.com/users/Ph0enix1127/orgs",
        "repos_url": "https://api.github.com/users/Ph0enix1127/repos",
        "events_url": "https://api.github.com/users/Ph0enix1127/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Ph0enix1127/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-18T17:07:20Z"
    },
    {
      "event": "reviewed",
      "id": 2695588548,
      "node_id": "PRR_kwDOABII586gq2rE",
      "url": null,
      "actor": null,
      "commit_id": "a9935d4dae8847d0549ec51ddc4349c7e8c61763",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK a9935d4dae8847d0549ec51ddc4349c7e8c61763",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2695588548",
      "submitted_at": "2025-03-18T17:38:46Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "review_requested",
      "id": 16840929066,
      "node_id": "RRE_lADOABII586gq9mazwAAAAPrzC8q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16840929066",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-18T17:38:51Z",
      "requested_reviewer": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2734250524,
      "node_id": "IC_kwDOABII586i-Voc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2734250524",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-18T18:00:57Z",
      "updated_at": "2025-03-18T18:00:57Z",
      "author_association": "MEMBER",
      "body": "(According to https://github.com/bitcoin/bitcoin/pull/31866#issuecomment-2691174968 the test commits are the same, so any reviewer here can probably also ack the other pull)",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2734250524",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "referenced",
      "id": 16864068748,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPtLUSM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16864068748",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0d2eefca8bf3cb64e3f2f912ed32118524430967",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/0d2eefca8bf3cb64e3f2f912ed32118524430967",
      "created_at": "2025-03-19T12:37:45Z"
    },
    {
      "event": "referenced",
      "id": 16864068905,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPtLUUp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16864068905",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d190f0facc8379da7610d7161e532d57c6a7eb96",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d190f0facc8379da7610d7161e532d57c6a7eb96",
      "created_at": "2025-03-19T12:37:46Z"
    },
    {
      "event": "referenced",
      "id": 16864069207,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPtLUZX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16864069207",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "124487354f0ec7acf307dea0dcdc986140face33",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/124487354f0ec7acf307dea0dcdc986140face33",
      "created_at": "2025-03-19T12:37:46Z"
    },
    {
      "event": "referenced",
      "id": 16864069271,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPtLUaX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16864069271",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "32c5e3dfa178337bebff2013267d43fa84f8c30f",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/32c5e3dfa178337bebff2013267d43fa84f8c30f",
      "created_at": "2025-03-19T12:37:46Z"
    },
    {
      "event": "commented",
      "id": 2737580772,
      "node_id": "IC_kwDOABII586jLCrk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2737580772",
      "actor": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T18:06:21Z",
      "updated_at": "2025-03-19T18:06:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Couldn't much of this be done by using a `just` file?  I saw a PR a while that tried to add something about a `justfile` which is a way to wrap command to make them easier and more discoverable.",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2737580772",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "commented",
      "id": 2737612354,
      "node_id": "IC_kwDOABII586jLKZC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2737612354",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T18:17:21Z",
      "updated_at": "2025-03-19T18:17:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Couldn't much of this be done by using a `just` file? I saw a PR a while that tried to add something about a `justfile` which is a way to wrap command to make them easier and more discoverable.\r\n\r\nYes it could also be done as a shell script or python script. If we could count on a justfile interpreter, or a portable shell, or python being installed on all platforms which bitcoin runs on, the changes in the two commits here a47cf680619cae5892d72355f56f5c5051fd5434 and cbc0bdd73ed0fd672307cf0f80bf5f22f5321ccd would be simpler, though other 5 commits would not really be changed.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2737612354",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "commented",
      "id": 2739919199,
      "node_id": "IC_kwDOABII586jT9lf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2739919199",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T10:42:50Z",
      "updated_at": "2025-03-20T10:42:50Z",
      "author_association": "MEMBER",
      "body": "re-ACK a9935d4dae8847d0549ec51ddc4349c7e8c61763\r\n\r\nBriefly tested another guix build on Windows.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2739919199",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "referenced",
      "id": 16909082649,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPv3CAZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16909082649",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "998386d4462f5e06412303ba559791da83b913fb",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/998386d4462f5e06412303ba559791da83b913fb",
      "created_at": "2025-03-20T13:06:25Z"
    },
    {
      "event": "labeled",
      "id": 16912162424,
      "node_id": "LE_lADOABII586gq9mazwAAAAPwCx54",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16912162424",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T14:36:43Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16912281671,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAPwDPBH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16912281671",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "418236c106e32abd7357551d309f8e6d1e494f72",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/418236c106e32abd7357551d309f8e6d1e494f72",
      "created_at": "2025-03-20T14:43:10Z"
    },
    {
      "event": "commented",
      "id": 2740714244,
      "node_id": "IC_kwDOABII586jW_sE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2740714244",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T14:44:32Z",
      "updated_at": "2025-03-20T14:44:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased a9935d4dae8847d0549ec51ddc4349c7e8c61763 -> 418236c106e32abd7357551d309f8e6d1e494f72 ([`pr/wrap.24`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.24) -> [`pr/wrap.25`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.25), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.24-rebase..pr/wrap.25)) after #31866 with no changes ",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2740714244",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "reviewed",
      "id": 2703458243,
      "node_id": "PRR_kwDOABII586hI3_D",
      "url": null,
      "actor": null,
      "commit_id": "418236c106e32abd7357551d309f8e6d1e494f72",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 418236c106e32abd7357551d309f8e6d1e494f72",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2703458243",
      "submitted_at": "2025-03-20T16:46:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "unlabeled",
      "id": 16914611321,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAPwMHx5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16914611321",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T16:51:03Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 16915729844,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPwQY20",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16915729844",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "30ef3c9631d5e3b73e6c7d68b33e7cd57ba30d9c",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/30ef3c9631d5e3b73e6c7d68b33e7cd57ba30d9c",
      "created_at": "2025-03-20T18:08:42Z"
    },
    {
      "event": "referenced",
      "id": 16915729868,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPwQY3M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16915729868",
      "actor": {
        "login": "sr-gi",
        "id": 6665628,
        "node_id": "MDQ6VXNlcjY2NjU2Mjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6665628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sr-gi",
        "html_url": "https://github.com/sr-gi",
        "followers_url": "https://api.github.com/users/sr-gi/followers",
        "following_url": "https://api.github.com/users/sr-gi/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sr-gi/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sr-gi/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sr-gi/subscriptions",
        "organizations_url": "https://api.github.com/users/sr-gi/orgs",
        "repos_url": "https://api.github.com/users/sr-gi/repos",
        "events_url": "https://api.github.com/users/sr-gi/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sr-gi/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c3a0735edf97d9a1c86c9b225811f57f47959573",
      "commit_url": "https://api.github.com/repos/sr-gi/bitcoin/commits/c3a0735edf97d9a1c86c9b225811f57f47959573",
      "created_at": "2025-03-20T18:08:42Z"
    },
    {
      "event": "commented",
      "id": 2741407835,
      "node_id": "IC_kwDOABII586jZpBb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2741407835",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T19:01:56Z",
      "updated_at": "2025-03-20T19:01:56Z",
      "author_association": "MEMBER",
      "body": "re-ACK 418236c106e32abd7357551d309f8e6d1e494f72\r\n\r\nSame as my last review, but the two commits shared with #31866 are merged.\r\n\r\nAlso tested (ad hoc signed) guix builds on macOS (M4 with 15.3.2, Intel with 13.7.4).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2741407835",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "referenced",
      "id": 16918966787,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPwcvID",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16918966787",
      "actor": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f777cd12a059e92d9692a9a5b37c0e1026916ecc",
      "commit_url": "https://api.github.com/repos/EthanHeilman/bitcoin/commits/f777cd12a059e92d9692a9a5b37c0e1026916ecc",
      "created_at": "2025-03-20T22:39:47Z"
    },
    {
      "event": "referenced",
      "id": 16918966797,
      "node_id": "REFE_lADOABII586gq9mazwAAAAPwcvIN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16918966797",
      "actor": {
        "login": "EthanHeilman",
        "id": 274814,
        "node_id": "MDQ6VXNlcjI3NDgxNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/EthanHeilman",
        "html_url": "https://github.com/EthanHeilman",
        "followers_url": "https://api.github.com/users/EthanHeilman/followers",
        "following_url": "https://api.github.com/users/EthanHeilman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/EthanHeilman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/EthanHeilman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
        "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
        "repos_url": "https://api.github.com/users/EthanHeilman/repos",
        "events_url": "https://api.github.com/users/EthanHeilman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8ac048db711601e0f222bbe8c631634db9302b41",
      "commit_url": "https://api.github.com/repos/EthanHeilman/bitcoin/commits/8ac048db711601e0f222bbe8c631634db9302b41",
      "created_at": "2025-03-20T22:39:47Z"
    },
    {
      "event": "labeled",
      "id": 17017438910,
      "node_id": "LE_lADOABII586gq9mazwAAAAP2UYK-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17017438910",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-27T16:27:10Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17019163399,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAP2a9MH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17019163399",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "155977ae8b4280100577455d34afa4d26ce89c58",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/155977ae8b4280100577455d34afa4d26ce89c58",
      "created_at": "2025-03-27T17:38:29Z"
    },
    {
      "event": "commented",
      "id": 2758924007,
      "node_id": "IC_kwDOABII586kcdbn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2758924007",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-27T17:39:05Z",
      "updated_at": "2025-03-27T17:39:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 418236c106e32abd7357551d309f8e6d1e494f72 -> 155977ae8b4280100577455d34afa4d26ce89c58 ([`pr/wrap.25`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.25) -> [`pr/wrap.26`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.26), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.25-rebase..pr/wrap.26)) due to conflict with #32145\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2758924007",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "unlabeled",
      "id": 17020223859,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAP2fAFz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17020223859",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-27T18:39:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2794583507,
      "node_id": "IC_kwDOABII586mkfXT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2794583507",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-10T17:09:59Z",
      "updated_at": "2025-04-10T17:09:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "There was some discussion about this in the IRC meeting today: https://achow101.com/ircmeetings/2025/bitcoin-core-dev.2025-04-10_16_00.log.html\r\n\r\nOne thing that came up was whether to update documentation to suggest using `bitcoin daemon` instead of `bitcoind` and `bitcoin gui` instead of `bitcoin-qt`. Seems like the most important places in [doc/](https://github.com/bitcoin/bitcoin/tree/master/doc) to update are the README.md and README_windows.md files, but also build-{unix,osd,windows,etc}.md files, multiprocess.md, tor.md and zmq.md files.\r\n\r\nI think it would be better to update documentation in a separate PR since existing command lines are still correct and I think it might be good for the wrapper to get a little more testing before fully recommending it everywhere. So I think I will open a separate draft PR to update the documentation, but can also do it here if there is a preference for changing the documentation at the same time.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2794583507",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "commented",
      "id": 2794754277,
      "node_id": "IC_kwDOABII586mlJDl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2794754277",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-10T18:18:09Z",
      "updated_at": "2025-04-10T18:18:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm thinking it might also be good to add an \"Installed Files\" section to https://github.com/bitcoin/bitcoin/blob/master/doc/files.md to describe files and directories installed by cmake and included in binary releases.\r\n\r\nCurious for :+1::-1: if this would be useful, or just a maintenance burden. Right now it seems like we don't have documentation describing binaries & installed files, unless I missed it somewhere. It also seems like ideally the information in files.md would be in a manpage, but that would be a separate issue.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2794754277",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "reviewed",
      "id": 2760310440,
      "node_id": "PRR_kwDOABII586khv6o",
      "url": null,
      "actor": null,
      "commit_id": "155977ae8b4280100577455d34afa4d26ce89c58",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 155977ae8b4280100577455d34afa4d26ce89c58\r\n\r\n> I think it would be better to update documentation in a separate PR since existing command lines are still correct and I think it might be good for the wrapper to get a little more testing before fully recommending it everywhere\r\n\r\n:+1: ",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2760310440",
      "submitted_at": "2025-04-11T13:04:16Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2801752607,
      "node_id": "IC_kwDOABII586m_1of",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2801752607",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-14T13:40:43Z",
      "updated_at": "2025-04-14T13:44:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I'm thinking it might also be good to add an \"Installed Files\" section to https://github.com/bitcoin/bitcoin/blob/master/doc/files.md to describe files and directories installed by cmake and included in binary releases.\r\n\r\nAdded this section in #31679 now, looks like: https://github.com/ryanofsky/bitcoin/blob/pr/libexec/doc/files.md#installed-files\r\n\r\nAm still planning to make a separate PR to mention the wrapper executable in other documentation, and `bitcoin daemon` / `bitcoin gui` / `bitcoin rpc` as alternatives to calling `bitcoind` / `bitcoin-qt` / `bitcoin-cli` directly.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2801752607",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "commented",
      "id": 2804682807,
      "node_id": "IC_kwDOABII586nLBA3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2804682807",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-15T11:07:47Z",
      "updated_at": "2025-04-15T11:07:47Z",
      "author_association": "MEMBER",
      "body": "re-ACK 155977ae8b4280100577455d34afa4d26ce89c58\r\n\r\nSince my last review, this adds `bitcoin chainstate`. I didn't retest.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2804682807",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "reviewed",
      "id": 2768700415,
      "node_id": "PRR_kwDOABII586lBwP_",
      "url": null,
      "actor": null,
      "commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the reviews!\r\n\r\nAdded 2 commits 155977ae8b4280100577455d34afa4d26ce89c58 -> 86eedd3c1243d4fdbe1c0f44920340ccacbac13e ([`pr/wrap.26`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.26) -> [`pr/wrap.27`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.27), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.26...pr/wrap.27)) just adding documentation and release notes\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2794583507\r\n\r\n> So I think I will open a separate draft PR to update the documentation\r\n\r\nChanged my mind about this and decided just to update documentation here recommending `bitcoin` tool as an alternative to other command lines. If it gains use and testing and maybe has some convenience features added like options parsing and aliases, it probably will make sense to recommend it more widely, but these changes should make it easier to get started with.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2768700415",
      "submitted_at": "2025-04-15T14:43:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "reviewed",
      "id": 2772381731,
      "node_id": "PRR_kwDOABII586lPzAj",
      "url": null,
      "actor": null,
      "commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 86eedd3c1243d4fdbe1c0f44920340ccacbac13e modulo some minor fixups below",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2772381731",
      "submitted_at": "2025-04-16T13:03:56Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17290965486,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAQGnzHu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17290965486",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8892cb50db63656991e4d411ab804a9535f991a0",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/8892cb50db63656991e4d411ab804a9535f991a0",
      "created_at": "2025-04-16T15:00:32Z"
    },
    {
      "event": "reviewed",
      "id": 2772762791,
      "node_id": "PRR_kwDOABII586lRQCn",
      "url": null,
      "actor": null,
      "commit_id": "8892cb50db63656991e4d411ab804a9535f991a0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Updated 86eedd3c1243d4fdbe1c0f44920340ccacbac13e -> 8892cb50db63656991e4d411ab804a9535f991a0 ([`pr/wrap.27`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.27) -> [`pr/wrap.28`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.28), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.27..pr/wrap.28)) with suggested documentation fixes\r\n\r\nAppreciate the close reading, vasild!",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2772762791",
      "submitted_at": "2025-04-16T15:02:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "labeled",
      "id": 17298422893,
      "node_id": "LE_lADOABII586gq9mazwAAAAQHEPxt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17298422893",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-17T01:39:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2774917380,
      "node_id": "PRR_kwDOABII586lZeEE",
      "url": null,
      "actor": null,
      "commit_id": "8892cb50db63656991e4d411ab804a9535f991a0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK d0a2a5239d6c68d45f0ed9b113131fc4273d1214",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2774917380",
      "submitted_at": "2025-04-17T07:57:37Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2813016186,
      "node_id": "IC_kwDOABII586nqzh6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2813016186",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-17T13:55:58Z",
      "updated_at": "2025-04-17T13:56:23Z",
      "author_association": "MEMBER",
      "body": "ACK 8892cb50db63656991e4d411ab804a9535f991a0\r\n\r\n@vasild I think you got the wrong hash.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2813016186",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "review_requested",
      "id": 17306696202,
      "node_id": "RRE_lADOABII586gq9mazwAAAAQHjzoK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17306696202",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-17T13:56:05Z",
      "requested_reviewer": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "mentioned",
      "id": 17306707274,
      "node_id": "MEE_lADOABII586gq9mazwAAAAQHj2VK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17306707274",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-17T13:56:44Z"
    },
    {
      "event": "subscribed",
      "id": 17306707310,
      "node_id": "SE_lADOABII586gq9mazwAAAAQHj2Vu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17306707310",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-17T13:56:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17343107232,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAQJutCg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17343107232",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "created_at": "2025-04-21T20:21:54Z"
    },
    {
      "event": "commented",
      "id": 2819431273,
      "node_id": "IC_kwDOABII586oDRtp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2819431273",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T20:23:22Z",
      "updated_at": "2025-04-21T20:23:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 8892cb50db63656991e4d411ab804a9535f991a0 -> 81c0b9edfe533afbb2f4dda56142afdedffdb347 ([`pr/wrap.28`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.28) -> [`pr/wrap.29`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.29), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.28-rebase..pr/wrap.29)) due to conflict with #31862. Also dropped check for `build/src` directory no longer needed after #31161\r\n\r\nThis PR is scheduled for a review club discussion in a few weeks so I started notes and questions in https://github.com/ryanofsky/bitcoin-core-review-club.github.io/blob/pr/wnotes/_posts/2025-05-07-%2331375.md and will put a link to the final URL in the description.\r\n\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2819431273",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "unlabeled",
      "id": 17343958074,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAQJx8w6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17343958074",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T21:53:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2786509505,
      "node_id": "PRR_kwDOABII586mFsLB",
      "url": null,
      "actor": null,
      "commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 81c0b9edfe533afbb2f4dda56142afdedffdb347\r\n\r\n> @vasild I think you got the wrong hash.\r\n\r\nYes, that was `HEAD~` at the time :space_invader: ",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2786509505",
      "submitted_at": "2025-04-23T09:02:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "reviewed",
      "id": 2786731277,
      "node_id": "PRR_kwDOABII586mGiUN",
      "url": null,
      "actor": null,
      "commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2786731277",
      "submitted_at": "2025-04-23T10:00:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "reviewed",
      "id": 2814380926,
      "node_id": "PRR_kwDOABII586nwAt-",
      "url": null,
      "actor": null,
      "commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK\r\n\r\nI've been thinking about this approach over the approach @darosior suggested in #30983 again, and think this would indeed be cleaner. While providing multiprocess binaries over a known interface (e.g. just invoking the current binaries) could be beneficial in the initial roll out, I also like how this binary could potentially be the point where everything is packaged together if we ever do choose to go the full process + repository separation route. I think combining multiprocess and monolithic functionality in the same binary could complicate this process. I also like the extra discoverability this adds.\r\n\r\nOne thing I am still not sure about is hiding the tests as an internal command, for the same reason I laid out here: https://github.com/bitcoin/bitcoin/pull/31679#issuecomment-2807539249",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2814380926",
      "submitted_at": "2025-05-05T10:32:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "reviewed",
      "id": 2821963515,
      "node_id": "PRR_kwDOABII586oM777",
      "url": null,
      "actor": null,
      "commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nI've Tested the new `bitcoin` wrapper on macOS in `-regtest` mode, both with and without multiprocess (`-m`).\r\nIt ran smoothly.\r\n",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2821963515",
      "submitted_at": "2025-05-07T14:24:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "labeled",
      "id": 17557639866,
      "node_id": "LE_lADOABII586gq9mazwAAAAQWhFK6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17557639866",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-07T14:27:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2821205668,
      "node_id": "PRR_kwDOABII586oKC6k",
      "url": null,
      "actor": null,
      "commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK 81c0b9edfe533afbb2f4dda56142afdedffdb347\r\n\r\nIntroducing a `bitcoin` wrapper command seems like a good step to improve discoverability of the project's functionality.\r\n\r\nOnly briefly tested on NixOS (Linux) for now.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2821205668",
      "submitted_at": "2025-05-07T14:42:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "reviewed",
      "id": 2822464858,
      "node_id": "PRR_kwDOABII586oO2Va",
      "url": null,
      "actor": null,
      "commit_id": "f2c003c927557f97dafa263e6cbb90a4e3421842",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2822464858",
      "submitted_at": "2025-05-07T16:33:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2863866776,
      "node_id": "IC_kwDOABII586qsyOY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2863866776",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-08T18:07:17Z",
      "updated_at": "2025-05-08T18:07:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nDid a quick test of the wrapper on OpenBSD 7.7 for the monolithic binaries, everything worked as expected so far.\r\nI'm wondering if the `util/subprocess.h` module could be of any use here, especially considering the [windows-specific argument quoting code](https://github.com/bitcoin/bitcoin/blob/1b4ddb0c2d106605b731211d71f8cfe00f56596a/src/util/subprocess.h#L175) seems to look very simliar at a first glance?",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2863866776",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDUwNzZkMjBmZGI3MGE0YmZhZmM0YmRmZTgyOTNlMzQ3Y2I2YmZhNzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5076d20fdb70a4bfafc4bdfe8293e347cb6bfa78",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5076d20fdb70a4bfafc4bdfe8293e347cb6bfa78",
      "tree": {
        "sha": "298b8851d063cb322812853c0c6f7eee311b924f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/298b8851d063cb322812853c0c6f7eee311b924f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/663a9cabf811e2fc53102bc6da00d09fc99d1d81",
          "sha": "663a9cabf811e2fc53102bc6da00d09fc99d1d81",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/663a9cabf811e2fc53102bc6da00d09fc99d1d81"
        }
      ],
      "message": "util: Add cross-platform ExecVp and GetExePath functions\n\nThese functions are just meant to serve the needs of the bitcoin wrapper\nexecutable, and are intentionally not very general purpose so they can be\nsimple.",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-05-12T18:49:17Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-02-13T21:00:15Z"
      },
      "sha": "5076d20fdb70a4bfafc4bdfe8293e347cb6bfa78"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNlYWJjOGNkNDNmYTE3YmU3OTU5NzRhODUwODNhYThlODY1YzY1NGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ceabc8cd43fa17be795974a85083aa8e865c654d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ceabc8cd43fa17be795974a85083aa8e865c654d",
      "tree": {
        "sha": "34839d936c2dc885785437881c22ae605b7d123c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34839d936c2dc885785437881c22ae605b7d123c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5076d20fdb70a4bfafc4bdfe8293e347cb6bfa78",
          "sha": "5076d20fdb70a4bfafc4bdfe8293e347cb6bfa78",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5076d20fdb70a4bfafc4bdfe8293e347cb6bfa78"
        }
      ],
      "message": "multiprocess: Add bitcoin wrapper executable\n\nIntended to make bitcoin command line features more discoverable and allow\ninstalling new multiprocess binaries in libexec/ instead of bin/ so they don't\ncause confusion.\n\nIdea and implementation of this were discussed in\nhttps://github.com/bitcoin/bitcoin/issues/30983\n\nCo-authored-by: Sjors Provoost <sjors@sprovoost.nl>",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-05-12T18:49:17Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-10-01T20:06:28Z"
      },
      "sha": "ceabc8cd43fa17be795974a85083aa8e865c654d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNhY2ZkM2VkZWM0MWYwNDM1NmU3M2MxNDJhY2ZkZjcyOWRjODg3OGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3acfd3edec41f04356e73c142acfdf729dc8878d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3acfd3edec41f04356e73c142acfdf729dc8878d",
      "tree": {
        "sha": "4325aa4cd077a0f3b09c0298289b4171d118913f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4325aa4cd077a0f3b09c0298289b4171d118913f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ceabc8cd43fa17be795974a85083aa8e865c654d",
          "sha": "ceabc8cd43fa17be795974a85083aa8e865c654d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ceabc8cd43fa17be795974a85083aa8e865c654d"
        }
      ],
      "message": "test: Support BITCOIN_CMD environment variable\n\nSupport new BITCOIN_CMD environment variable in functional test to be able to\ntest the new bitcoin wrapper executable and run other commands through it\ninstead of calling them directly.\n\nCo-authored-by: Sjors Provoost <sjors@sprovoost.nl>",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-05-12T18:49:17Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-26T16:51:41Z"
      },
      "sha": "3acfd3edec41f04356e73c142acfdf729dc8878d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVhODIzN2U1YmNjOThkYjk2ZTEwMWYzNzFlOWU5MmIyMTlmYmEzNmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a8237e5bcc98db96e101f371e9e92b219fba36c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5a8237e5bcc98db96e101f371e9e92b219fba36c",
      "tree": {
        "sha": "e9d259c5602d8c89f78ad32d753ab8ba7b53ecbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9d259c5602d8c89f78ad32d753ab8ba7b53ecbf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3acfd3edec41f04356e73c142acfdf729dc8878d",
          "sha": "3acfd3edec41f04356e73c142acfdf729dc8878d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3acfd3edec41f04356e73c142acfdf729dc8878d"
        }
      ],
      "message": "ci: Run multiprocess tests through wrapper executable",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-05-12T18:49:17Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2024-11-26T16:58:16Z"
      },
      "sha": "5a8237e5bcc98db96e101f371e9e92b219fba36c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDIzODcwZTQzMmI5YWIzODlkNzA5MmMwNWIxYWY4ZTgzN2I0NWE0Yjc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23870e432b9ab389d7092c05b1af8e837b45a4b7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/23870e432b9ab389d7092c05b1af8e837b45a4b7",
      "tree": {
        "sha": "9e886bcb2dc76b924367d34fbbe9e2314606c51c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e886bcb2dc76b924367d34fbbe9e2314606c51c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a8237e5bcc98db96e101f371e9e92b219fba36c",
          "sha": "5a8237e5bcc98db96e101f371e9e92b219fba36c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5a8237e5bcc98db96e101f371e9e92b219fba36c"
        }
      ],
      "message": "build: add bitcoin.exe to windows installer",
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-05-12T18:49:17Z"
      },
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2025-01-10T14:33:52Z"
      },
      "sha": "23870e432b9ab389d7092c05b1af8e837b45a4b7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY3ODQ3OGUxNjU3YTk3MGY4MTY0OTFhYzAwOWFhOTEyYTRjYTAwNGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/678478e1657a970f816491ac009aa912a4ca004d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/678478e1657a970f816491ac009aa912a4ca004d",
      "tree": {
        "sha": "050014e48716da58cb4888cf17d42f275a31d037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/050014e48716da58cb4888cf17d42f275a31d037"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23870e432b9ab389d7092c05b1af8e837b45a4b7",
          "sha": "23870e432b9ab389d7092c05b1af8e837b45a4b7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/23870e432b9ab389d7092c05b1af8e837b45a4b7"
        }
      ],
      "message": "doc: Mention bitcoin wrapper executable in documentation",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-05-12T18:49:17Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-04-15T14:19:27Z"
      },
      "sha": "678478e1657a970f816491ac009aa912a4ca004d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDdhZjZlMTA4OWVhMjY0ZTg3MGIyNmFjODNlODFlN2FhMzc0YWNiZTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "tree": {
        "sha": "6760307e3967b4d31dbdd8e73e5fe5a362227162",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6760307e3967b4d31dbdd8e73e5fe5a362227162"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/678478e1657a970f816491ac009aa912a4ca004d",
          "sha": "678478e1657a970f816491ac009aa912a4ca004d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/678478e1657a970f816491ac009aa912a4ca004d"
        }
      ],
      "message": "doc: Add release notes describing bitcoin wrapper executable",
      "committer": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-05-12T18:49:17Z"
      },
      "author": {
        "name": "Ryan Ofsky",
        "email": "ryan@ofsky.org",
        "date": "2025-04-15T14:30:23Z"
      },
      "sha": "7af6e1089ea264e870b26ac83e81e7aa374acbe1"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17623960658,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAQaeExS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17623960658",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "27874b9c6e10ac5b6e71bb5e17f44c58691684fe",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/27874b9c6e10ac5b6e71bb5e17f44c58691684fe",
      "created_at": "2025-05-12T20:54:38Z"
    },
    {
      "event": "reviewed",
      "id": 2834221930,
      "node_id": "PRR_kwDOABII586o7stq",
      "url": null,
      "actor": null,
      "commit_id": "27874b9c6e10ac5b6e71bb5e17f44c58691684fe",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Rebased 81c0b9edfe533afbb2f4dda56142afdedffdb347 -> 27874b9c6e10ac5b6e71bb5e17f44c58691684fe ([`pr/wrap.29`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.29) -> [`pr/wrap.30`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.30), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.29-rebase..pr/wrap.30)) due to conflict with #28710, also made many suggested improvements, particularly dropping windows escaping code and replacing with call to subprocess library\r\nUpdated 27874b9c6e10ac5b6e71bb5e17f44c58691684fe -> 22ee0d99b50aeac08932ca772616165a5170291e ([`pr/wrap.30`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.30) -> [`pr/wrap.31`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.31), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.30..pr/wrap.31)) to fix python CI error https://cirrus-ci.com/task/5556588934594560 after daemon -> node rename\r\nUpdated 22ee0d99b50aeac08932ca772616165a5170291e -> 4e1aae19512df82af584a064640c2143c5c5fa4f ([`pr/wrap.31`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.31) -> [`pr/wrap.32`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.32), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.31..pr/wrap.32)) with more documentation updates after rename\r\n\r\n---\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2814380926\r\n\r\n> One thing I am still not sure about is hiding the tests as an internal command\r\n\r\nFair enough. Dropped the word \"internal\". It is now just an additional command.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2834221930",
      "submitted_at": "2025-05-12T20:58:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "unlabeled",
      "id": 17624123360,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAQaesfg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17624123360",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-12T21:03:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17624239848,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAQafI7o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17624239848",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "22ee0d99b50aeac08932ca772616165a5170291e",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/22ee0d99b50aeac08932ca772616165a5170291e",
      "created_at": "2025-05-12T21:09:35Z"
    },
    {
      "event": "labeled",
      "id": 17624248012,
      "node_id": "LE_lADOABII586gq9mazwAAAAQafK7M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17624248012",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-12T21:09:57Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 17625436441,
      "node_id": "UNLE_lADOABII586gq9mazwAAAAQajtEZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17625436441",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-12T22:47:12Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17626811143,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAQao8sH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17626811143",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4e1aae19512df82af584a064640c2143c5c5fa4f",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/4e1aae19512df82af584a064640c2143c5c5fa4f",
      "created_at": "2025-05-13T01:56:42Z"
    },
    {
      "event": "reviewed",
      "id": 2835944933,
      "node_id": "PRR_kwDOABII586pCRXl",
      "url": null,
      "actor": null,
      "commit_id": "4e1aae19512df82af584a064640c2143c5c5fa4f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK 4e1aae19512df82af584a064640c2143c5c5fa4f\r\n\r\nGood to see the manual quoting go away and `bitcoin daemon -daemon` be renamed to `bitcoin node -daemon`.",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2835944933",
      "submitted_at": "2025-05-13T09:21:49Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "review_requested",
      "id": 17631632030,
      "node_id": "RRE_lADOABII586gq9mazwAAAAQa7Vqe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17631632030",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T09:21:55Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 17631632315,
      "node_id": "RRE_lADOABII586gq9mazwAAAAQa7Vu7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17631632315",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T09:21:57Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 17631632840,
      "node_id": "RRE_lADOABII586gq9mazwAAAAQa7V3I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17631632840",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T09:21:58Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 17631633273,
      "node_id": "RRE_lADOABII586gq9mazwAAAAQa7V95",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17631633273",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T09:22:00Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "referenced",
      "id": 17636001028,
      "node_id": "REFE_lADOABII586gq9mazwAAAAQbMAUE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17636001028",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "44ee4b40b89a14283485db0174b9ee1581fd2222",
      "commit_url": "https://api.github.com/repos/hodlinator/libmultiprocess/commits/44ee4b40b89a14283485db0174b9ee1581fd2222",
      "created_at": "2025-05-13T13:43:55Z"
    },
    {
      "event": "reviewed",
      "id": 2836891417,
      "node_id": "PRR_kwDOABII586pF4cZ",
      "url": null,
      "actor": null,
      "commit_id": "4e1aae19512df82af584a064640c2143c5c5fa4f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2836891417",
      "submitted_at": "2025-05-13T14:10:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "review_requested",
      "id": 17636507621,
      "node_id": "RRE_lADOABII586gq9mazwAAAAQbN7_l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17636507621",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T14:10:16Z",
      "requested_reviewer": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2876744585,
      "node_id": "IC_kwDOABII586rd6OJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2876744585",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T14:25:05Z",
      "updated_at": "2025-05-13T14:25:05Z",
      "author_association": "MEMBER",
      "body": "> I've been thinking about this approach over the approach @darosior suggested in #30983 again, and think this would indeed be cleaner.\r\n\r\nExplicitly signaling here that despite my suggesting a different approach in #30983 i am not opposed to this one.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2876744585",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "mentioned",
      "id": 17636793435,
      "node_id": "MEE_lADOABII586gq9mazwAAAAQbPBxb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17636793435",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T14:25:06Z"
    },
    {
      "event": "subscribed",
      "id": 17636793456,
      "node_id": "SE_lADOABII586gq9mazwAAAAQbPBxw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17636793456",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T14:25:06Z"
    },
    {
      "event": "commented",
      "id": 2877018237,
      "node_id": "IC_kwDOABII586re9B9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2877018237",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T15:40:54Z",
      "updated_at": "2025-05-13T15:40:54Z",
      "author_association": "MEMBER",
      "body": "re-tACK 4e1aae19512df82af584a064640c2143c5c5fa4f\r\n\r\nBriefly retested on macOS. Will retest on Windows later.\r\n\r\nMain changes since my last review:\r\n- using subprocess in Windows to replace a bunch of string manipulation code (good idea @theStack)\r\n- `bitcoin node` instead of `bitcoin daemon` to disambiguate from (detaching) `-daemon`",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2877018237",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "mentioned",
      "id": 17638224688,
      "node_id": "MEE_lADOABII586gq9mazwAAAAQbUfMw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17638224688",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T15:40:56Z"
    },
    {
      "event": "subscribed",
      "id": 17638224807,
      "node_id": "SE_lADOABII586gq9mazwAAAAQbUfOn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17638224807",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T15:40:56Z"
    },
    {
      "event": "reviewed",
      "id": 2838013470,
      "node_id": "PRR_kwDOABII586pKKYe",
      "url": null,
      "actor": null,
      "commit_id": "4e1aae19512df82af584a064640c2143c5c5fa4f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code Review 4e1aae19512df82af584a064640c2143c5c5fa4f\r\n\r\nSeems like a slight fix would be good in the NSI script, see inline comment.\r\n\r\nNice simplification of `ExecVp` since [previous review](https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2821205668).\r\n\r\nTested on NixOS.\r\n\r\n### Tested redirection of stderr/stdout\r\n\r\n```\r\n./build/bin/bitcoin node > foo\r\n./build/bin/bitcoin node --nonexistentarg 2> err\r\n```\r\n\"foo\" stdout file contains expected log output. Confirmed by changing bitcoind.cpp error message that it was properly writing to \"err\" stderr file.\r\n\r\n### Tested moving bitcoin executable\r\n\r\nEnsured <reporoot>/src was in `$PATH` and copied bitcoin executable there. Gives expected error messages:\r\n\r\n```\r\n~/bitcoin/src\r\n₿ bitcoin node --nonexistentarg \r\nError: execvp failed to execute 'bitcoind': No such file or directory\r\nTry 'bitcoin --help' for more information.\r\n\r\n~/bitcoin/src\r\n₿ ./bitcoin node --nonexistentarg \r\nError: execvp failed to execute '/home/hodlinator/bitcoin/src/bitcoind': No such file or directory\r\nTry './bitcoin --help' for more information.\r\n```\r\n",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2838013470",
      "submitted_at": "2025-05-13T21:15:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "review_requested",
      "id": 17642800360,
      "node_id": "RRE_lADOABII586gq9mazwAAAAQbl8To",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17642800360",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-13T21:15:49Z",
      "requested_reviewer": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17671401406,
      "node_id": "HRFPE_lADOABII586gq9mazwAAAAQdTC--",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17671401406",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "created_at": "2025-05-15T12:36:32Z"
    },
    {
      "event": "reviewed",
      "id": 2843363337,
      "node_id": "PRR_kwDOABII586pekgJ",
      "url": null,
      "actor": null,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Updated 4e1aae19512df82af584a064640c2143c5c5fa4f -> 7af6e1089ea264e870b26ac83e81e7aa374acbe1 ([`pr/wrap.32`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.32) -> [`pr/wrap.33`](https://github.com/ryanofsky/bitcoin/commits/pr/wrap.33), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/wrap.32..pr/wrap.33)) with suggestions adding windows uninstall line, removing no longer used cmake build prefixes, and improving many comments.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#pullrequestreview-2843363337",
      "submitted_at": "2025-05-15T12:38:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
    },
    {
      "event": "commented",
      "id": 2883726902,
      "node_id": "IC_kwDOABII586r4i42",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2883726902",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-15T12:58:43Z",
      "updated_at": "2025-05-15T12:58:43Z",
      "author_association": "MEMBER",
      "body": "re-utACK 7af6e1089ea264e870b26ac83e81e7aa374acbe1\r\n\r\nI didn't retest.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2883726902",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31375"
    },
    {
      "event": "review_requested",
      "id": 17671772595,
      "node_id": "RRE_lADOABII586gq9mazwAAAAQdUdmz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17671772595",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-15T12:58:50Z",
      "requested_reviewer": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1861814807",
      "pull_request_review_id": 2467341532,
      "id": 1861814807,
      "node_id": "PRRC_kwDOABII585u-QoX",
      "diff_hunk": "@@ -0,0 +1,190 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();\n+\n+    // If exe is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (exe_dir.filename() == \"src\" && try_exec(exe_dir / fs::PathFromString(args[0]))) ||\n+    // Otherwise if exe is installed in a bin/ directory, first look for target\n+    // executable in libexec/\n+    (exe_dir.filename() == \"bin\" && try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / fs::PathFromString(args[0]).filename())) ||\n+    // Otherwise look for target executable next to current exe\n+    try_exec(exe_dir / fs::PathFromString(args[0]).filename()) ||\n+    // Otherwise just look on the system path.",
      "path": "src/bitcoin.cpp",
      "position": 202,
      "original_position": 188,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "b06c7ad0ae91102fe8cdcac6f86d627aace2219b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "b06c7ad0ae91102fe8cdcac6f86d627aace2219b: this is potentially confusing. If I build without gui, I expect `build/src/bitcoin gui` to fail. Right now it would launch any  `bitcoin-qt` in my `$PATH`.",
      "created_at": "2024-11-28T09:29:39Z",
      "updated_at": "2024-11-28T09:40:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1861814807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 202,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868303275",
      "pull_request_review_id": 2476650402,
      "id": 1868303275,
      "node_id": "PRRC_kwDOABII585vXAur",
      "diff_hunk": "@@ -0,0 +1,190 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();\n+\n+    // If exe is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (exe_dir.filename() == \"src\" && try_exec(exe_dir / fs::PathFromString(args[0]))) ||\n+    // Otherwise if exe is installed in a bin/ directory, first look for target\n+    // executable in libexec/\n+    (exe_dir.filename() == \"bin\" && try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / fs::PathFromString(args[0]).filename())) ||\n+    // Otherwise look for target executable next to current exe\n+    try_exec(exe_dir / fs::PathFromString(args[0]).filename()) ||\n+    // Otherwise just look on the system path.",
      "path": "src/bitcoin.cpp",
      "position": 202,
      "original_position": 188,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "b06c7ad0ae91102fe8cdcac6f86d627aace2219b",
      "in_reply_to_id": 1861814807,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807\r\n\r\n> [b06c7ad](https://github.com/bitcoin/bitcoin/commit/b06c7ad0ae91102fe8cdcac6f86d627aace2219b): this is potentially confusing. If I build without gui, I expect `build/src/bitcoin gui` to fail. Right now it would launch any `bitcoin-qt` in my `$PATH`.\r\n\r\nAgree this behavior is potentially confusing, and prevented it for now, but I'm not totally I sure see it as a downside. I like the simplicity of `bitcoin daemon` being an alias for `bitcoind` and for the `bitcoin` wrapper to add a few additional search directories of its own but not otherwise care where other executables are installed on the PATH.\r\n\r\nBut for now added a check to avoid searching for other executables using the PATH if the `bitcoin` executable was not invoked using the PATH. Probably will need to keep tweaking this behavior, seeing what works and maybe adding options to control it.",
      "created_at": "2024-12-03T20:09:57Z",
      "updated_at": "2024-12-03T20:56:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1868303275",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868303275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 202,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1872727800",
      "pull_request_review_id": 2483862103,
      "id": 1872727800,
      "node_id": "PRRC_kwDOABII585vn474",
      "diff_hunk": "@@ -0,0 +1,190 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();\n+\n+    // If exe is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (exe_dir.filename() == \"src\" && try_exec(exe_dir / fs::PathFromString(args[0]))) ||\n+    // Otherwise if exe is installed in a bin/ directory, first look for target\n+    // executable in libexec/\n+    (exe_dir.filename() == \"bin\" && try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / fs::PathFromString(args[0]).filename())) ||\n+    // Otherwise look for target executable next to current exe\n+    try_exec(exe_dir / fs::PathFromString(args[0]).filename()) ||\n+    // Otherwise just look on the system path.",
      "path": "src/bitcoin.cpp",
      "position": 202,
      "original_position": 188,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "b06c7ad0ae91102fe8cdcac6f86d627aace2219b",
      "in_reply_to_id": 1861814807,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "One advantage of allowing anything in `$PATH` would be once the interfaces are stable and \"public\", at which point folks might install e.g. an alternative GUI implementation.",
      "created_at": "2024-12-06T07:36:28Z",
      "updated_at": "2024-12-06T07:36:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1872727800",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1872727800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 202,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1883517714",
      "pull_request_review_id": 2501661103,
      "id": 1883517714,
      "node_id": "PRRC_kwDOABII585wRDMS",
      "diff_hunk": "@@ -76,6 +76,7 @@ list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/module)\n #=============================\n include(CMakeDependentOption)\n # When adding a new option, end the <help_text> with a full stop for consistency.\n+option(BUILD_BITCOIN_BIN \"Build bitcoin executable.\" ON)",
      "path": "CMakeLists.txt",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you add this to `Executables:` in the summary as well?",
      "created_at": "2024-12-13T08:02:41Z",
      "updated_at": "2024-12-13T08:30:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1883517714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1883517714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1883872949",
      "pull_request_review_id": 2502197771,
      "id": 1883872949,
      "node_id": "PRRC_kwDOABII585wSZ61",
      "diff_hunk": "@@ -76,6 +76,7 @@ list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/module)\n #=============================\n include(CMakeDependentOption)\n # When adding a new option, end the <help_text> with a full stop for consistency.\n+option(BUILD_BITCOIN_BIN \"Build bitcoin executable.\" ON)",
      "path": "CMakeLists.txt",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "in_reply_to_id": 1883517714,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Can you add this to `Executables:` in the summary as well?\r\n\r\nGood idea, added now",
      "created_at": "2024-12-13T12:33:24Z",
      "updated_at": "2024-12-13T12:34:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1883872949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1883872949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884808135",
      "pull_request_review_id": 2503570115,
      "id": 1884808135,
      "node_id": "PRRC_kwDOABII585wV-PH",
      "diff_hunk": "@@ -76,6 +76,7 @@ list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/module)\n #=============================\n include(CMakeDependentOption)\n # When adding a new option, end the <help_text> with a full stop for consistency.\n+option(BUILD_BITCOIN_BIN \"Build bitcoin executable.\" ON)",
      "path": "CMakeLists.txt",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "637b01fbf5064028f9a23c20f8b916325fbf82ec",
      "in_reply_to_id": 1883517714,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, that worked.",
      "created_at": "2024-12-14T05:11:13Z",
      "updated_at": "2024-12-14T05:11:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884808135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884808135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884835184",
      "pull_request_review_id": 2503592465,
      "id": 1884835184,
      "node_id": "PRRC_kwDOABII585wWE1w",
      "diff_hunk": "@@ -90,6 +90,10 @@ static inline bool exists(const path& p)\n {\n     return std::filesystem::exists(p);\n }\n+static inline bool exists(const path& p, std::error_code& ec)",
      "path": "src/util/fs.h",
      "position": null,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8 nit: can be `noexcept`? https://en.cppreference.com/w/cpp/filesystem/exists",
      "created_at": "2024-12-14T05:59:17Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884835184",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884835184"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884848558",
      "pull_request_review_id": 2503592465,
      "id": 1884848558,
      "node_id": "PRRC_kwDOABII585wWIGu",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information",
      "path": "src/bitcoin.cpp",
      "position": 25,
      "original_position": 33,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8 nit: would be nice if this worked for `bitcoin` itself too. It currently prints the license, but not the version.",
      "created_at": "2024-12-14T06:22:19Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884848558",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884848558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884850852",
      "pull_request_review_id": 2503592465,
      "id": 1884850852,
      "node_id": "PRRC_kwDOABII585wWIqk",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8 this won't exist until #30437 right?",
      "created_at": "2024-12-14T06:28:34Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884850852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884850852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884851384",
      "pull_request_review_id": 2503592465,
      "id": 1884851384,
      "node_id": "PRRC_kwDOABII585wWIy4",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");",
      "path": "src/bitcoin.cpp",
      "position": 97,
      "original_position": 89,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8: `bitcoin-util` has a `grind` command which is also used for (custom) signet, see `signet/README.md`. Doesn't need to be hidden imo. ",
      "created_at": "2024-12-14T06:31:15Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884851384",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884851384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884851946",
      "pull_request_review_id": 2503592465,
      "id": 1884851946,
      "node_id": "PRRC_kwDOABII585wWI7q",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8: on macOS 15.1.1 this somehow puts a `%` at the end of the error message, e.g.\r\n\r\n```\r\n% build-ipc/src/bitcoin utillll\r\nError: Unrecognized command: 'utillll'\r\nTry 'build-ipc/src/bitcoin --help' for more information.%   \r\n```\r\n\r\n(the `Unknown option` error below does not have this issue)",
      "created_at": "2024-12-14T06:33:17Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884851946",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884851946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884865585",
      "pull_request_review_id": 2503592465,
      "id": 1884865585,
      "node_id": "PRRC_kwDOABII585wWMQx",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8: this seems near impossible on macOS. With `htop` I see that `bitcoin daemon` causes `bitcoind` to run, and there's no lingering `bitcoin` process. The terminal window process also shows this.\r\n\r\n<img width=\"837\" alt=\"Scherm­afbeelding 2024-12-14 om 13 50 21\" src=\"https://github.com/user-attachments/assets/1a978403-fcc0-40c1-8a10-42c6e0af4572\" />\r\n\r\n<img width=\"565\" alt=\"Scherm­afbeelding 2024-12-14 om 13 51 09\" src=\"https://github.com/user-attachments/assets/d9342656-c6ae-4921-be4a-891acec5caa9\" />\r\n",
      "created_at": "2024-12-14T06:51:50Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884865585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884865585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884870277",
      "pull_request_review_id": 2503592465,
      "id": 1884870277,
      "node_id": "PRRC_kwDOABII585wWNaF",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path exe_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "f17453ff13ebd0be842396c17bcc99b0c903abb8: shouldn't we throw here if `ec` is set?",
      "created_at": "2024-12-14T07:09:34Z",
      "updated_at": "2024-12-14T07:18:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884870277",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1884870277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889159627",
      "pull_request_review_id": 2510009903,
      "id": 1889159627,
      "node_id": "PRRC_kwDOABII585wmknL",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information",
      "path": "src/bitcoin.cpp",
      "position": 25,
      "original_position": 33,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884848558,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884848558\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8) nit: would be nice if this worked for `bitcoin` itself too. It currently prints the license, but not the version.\r\n\r\nOops, good catch. This should be fixed now",
      "created_at": "2024-12-17T20:15:36Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889159627",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889159627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889161799",
      "pull_request_review_id": 2510009903,
      "id": 1889161799,
      "node_id": "PRRC_kwDOABII585wmlJH",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884850852,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884850852\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8) this won't exist until #30437 right?\r\n\r\nThat's right. It's just a little easier for me to manage my branches if this is included so the PRs don't conflict, and it shouldn't cause any harm.",
      "created_at": "2024-12-17T20:17:34Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889161799",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889161799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889168139",
      "pull_request_review_id": 2510009903,
      "id": 1889168139,
      "node_id": "PRRC_kwDOABII585wmmsL",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");",
      "path": "src/bitcoin.cpp",
      "position": 97,
      "original_position": 89,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884851384,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884851384\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8): `bitcoin-util` has a `grind` command which is also used for (custom) signet, see `signet/README.md`. Doesn't need to be hidden imo.\r\n\r\nForwarding the util command allows tests to work with minimal changes, but I don't think having `bitcoin util grind` command would be a good public interface. I think it would be better to expose a `bitcoin grind` command that doesn't require callers to know about underlying binaries. Doing this will require some tweaks to ArgsManager though to separate commands & options correctly so I postponed it for now.",
      "created_at": "2024-12-17T20:22:59Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889168139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889168139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889170067",
      "pull_request_review_id": 2510009903,
      "id": 1889170067,
      "node_id": "PRRC_kwDOABII585wmnKT",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884851946,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884851946\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8): on macOS 15.1.1 this somehow puts a `%` at the end of the error message, e.g.\r\n\r\nGood catch, that just comes for forgetting to output a trailing newline. Should be fixed now.",
      "created_at": "2024-12-17T20:24:53Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889170067",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889170067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889179981",
      "pull_request_review_id": 2510009903,
      "id": 1889179981,
      "node_id": "PRRC_kwDOABII585wmplN",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884865585,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884865585\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8): this seems near impossible on macOS. With `htop` I see that `bitcoin daemon` causes `bitcoind` to run, and there's no lingering `bitcoin` process. The terminal window process also shows this.\r\n\r\nDo you think I should change the comment in some way? The exec behavior you're describing is expected, and strace comment is just meant to be helpful on platforms where strace works.\r\n\r\nIn the future we could add more debugging options here that would be more cross-platform than strace, but I'm trying to keep things simple in V1.",
      "created_at": "2024-12-17T20:32:04Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889179981",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889179981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889222057",
      "pull_request_review_id": 2510009903,
      "id": 1889222057,
      "node_id": "PRRC_kwDOABII585wmz2p",
      "diff_hunk": "@@ -90,6 +90,10 @@ static inline bool exists(const path& p)\n {\n     return std::filesystem::exists(p);\n }\n+static inline bool exists(const path& p, std::error_code& ec)",
      "path": "src/util/fs.h",
      "position": null,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884835184,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884835184\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8) nit: can be `noexcept`? https://en.cppreference.com/w/cpp/filesystem/exists\r\n\r\nMakes sense, added",
      "created_at": "2024-12-17T21:06:39Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889222057",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889222057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889254814",
      "pull_request_review_id": 2510009903,
      "id": 1889254814,
      "node_id": "PRRC_kwDOABII585wm72e",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path exe_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884870277,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1884865585\r\n\r\n> [f17453f](https://github.com/bitcoin/bitcoin/commit/f17453ff13ebd0be842396c17bcc99b0c903abb8): shouldn't we throw here if `ec` is set?\r\n\r\nI don't think we actually want to throw when symlinks can't be resolved. Should be more robust to just search for executables relative to the original path in that case. But error handling here was not right, because weakly_canonical would return an empty path on failure, so that should be fixed now. \r\n",
      "created_at": "2024-12-17T21:33:11Z",
      "updated_at": "2024-12-17T21:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889254814",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889254814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889550612",
      "pull_request_review_id": 2510687659,
      "id": 1889550612,
      "node_id": "PRRC_kwDOABII585woEEU",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");",
      "path": "src/bitcoin.cpp",
      "position": 97,
      "original_position": 89,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884851384,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think it would be better to expose a bitcoin grind command that doesn't require callers to know about underlying binaries\r\n\r\nOk, that makes sense.",
      "created_at": "2024-12-18T03:14:46Z",
      "updated_at": "2024-12-18T03:14:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889550612",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889550612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 97,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889575356",
      "pull_request_review_id": 2510730909,
      "id": 1889575356,
      "node_id": "PRRC_kwDOABII585woKG8",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884851946,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Works",
      "created_at": "2024-12-18T03:52:58Z",
      "updated_at": "2024-12-18T03:52:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889575356",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889575356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889576126",
      "pull_request_review_id": 2510732095,
      "id": 1889576126,
      "node_id": "PRRC_kwDOABII585woKS-",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884865585,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's fine to leave the comment as is. I couldn't find an equivalent for macOS.",
      "created_at": "2024-12-18T03:54:18Z",
      "updated_at": "2024-12-18T03:54:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889576126",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889576126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889577089",
      "pull_request_review_id": 2510733874,
      "id": 1889577089,
      "node_id": "PRRC_kwDOABII585woKiB",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path exe_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_dir(argv0);\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / exe_dir;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_dir = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_dir = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+    exe_dir = fs::weakly_canonical(exe_dir, ec).parent_path();",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884870277,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, the new comment is helpful.",
      "created_at": "2024-12-18T03:55:42Z",
      "updated_at": "2024-12-18T03:55:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1889577089",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1889577089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893655528",
      "pull_request_review_id": 2517070391,
      "id": 1893655528,
      "node_id": "PRRC_kwDOABII585w3uPo",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "typo:\r\n```suggestion\r\n  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\r\n```",
      "created_at": "2024-12-20T08:56:47Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893655528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893655528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893661643",
      "pull_request_review_id": 2517070391,
      "id": 1893661643,
      "node_id": "PRRC_kwDOABII585w3vvL",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Somehow I feel that `test` does not belong here - it is not for users to execute after the installation. `test_bitcoin` may not even be installed. The tests are normally run either by developers or by users after compile and before install, to verify the result of the compilation is correct.",
      "created_at": "2024-12-20T09:02:32Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893661643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893661643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893670004",
      "pull_request_review_id": 2517070391,
      "id": 1893670004,
      "node_id": "PRRC_kwDOABII585w3xx0",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "So, the user must have a knowledge whether his Bitcoin Core was compiled with or without multiprocess and start either `bitcoin -M gui` or `bitcoin -m gui`. Could we spare them this? The `bitcoin` executable has that knowledge.\r\n\r\nThen the user can run just `bitcoin gui` and under the hood either `bitcoin-qt` or `bitcoin-gui` will be executed, depending on how it was compiled? Or maybe we can probe at run time whether the executables `bitcoin-qt` and `bitcoin-gui` exist and run whichever is present.",
      "created_at": "2024-12-20T09:10:37Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893670004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893670004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893680784",
      "pull_request_review_id": 2517070391,
      "id": 1893680784,
      "node_id": "PRRC_kwDOABII585w30aQ",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 93,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        } else if (!cmd.command.empty()) {\r\n```",
      "created_at": "2024-12-20T09:19:48Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893680784",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893680784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893685756",
      "pull_request_review_id": 2517070391,
      "id": 1893685756,
      "node_id": "PRRC_kwDOABII585w31n8",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since everything inserted into `args` is a constant literal, it can be `std::vector<std::string_view>` and then also `ExecCommand()` can be:\r\n\r\n```diff\r\n- void ExecCommand(const std::vector<std::string>& args, ...\r\n+ void ExecCommand(const std::vector<std::string_view>& args, ...\r\n```",
      "created_at": "2024-12-20T09:24:00Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893685756",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893685756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 73,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893696352",
      "pull_request_review_id": 2517070391,
      "id": 1893696352,
      "node_id": "PRRC_kwDOABII585w34Ng",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);",
      "path": "src/bitcoin.cpp",
      "position": 106,
      "original_position": 101,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This adds a trailing newline, but the above 2 `tfm::format()` calls don't. I think they should.\r\n\r\nI think the `tfm::format(..., FormatParagraph(LicenseInfo()))` call adds a trailing `\\n` because `LicenseInfo()` has it, but I did not check.",
      "created_at": "2024-12-20T09:32:52Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893696352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893696352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 106,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893702291",
      "pull_request_review_id": 2517070391,
      "id": 1893702291,
      "node_id": "PRRC_kwDOABII585w35qT",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 132,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If you switch this to doxygen compatible comment it will be attached to the doxygen generated docs about `ExecCommand()`. Would be nice to format the arguments' descriptions with `@param[in] ...`.",
      "created_at": "2024-12-20T09:38:05Z",
      "updated_at": "2024-12-20T11:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893702291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893702291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893709992",
      "pull_request_review_id": 2517070391,
      "id": 1893709992,
      "node_id": "PRRC_kwDOABII585w37io",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find the names confusing because I would assume this will execute `argv0 args[0] args[1] args[2] ...`. Maybe rename `argv0` to `parent` or `wrapper_prog`.",
      "created_at": "2024-12-20T09:45:11Z",
      "updated_at": "2024-12-20T11:10:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893709992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893709992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893770067",
      "pull_request_review_id": 2517070391,
      "id": 1893770067,
      "node_id": "PRRC_kwDOABII585w4KNT",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing this executable.\n+    fs::path exe_dir{fs::weakly_canonical(exe_path, ec)};\n+    if (exe_dir.empty()) exe_dir = exe_path; // Restore previous path if weakly_canonical failed.\n+    exe_dir = exe_dir.parent_path();\n+    // Search for executables on system PATH only if this executable was invoked\n+    // from the PATH, to avoid unintentionally launching system executables in a\n+    // local build\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool use_system_path{!argv0_path.has_parent_path()};",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 200,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is the same check as above: `argv0.find('/') == std::string_view::npos`, right? Would be good to use the same expression in both locations.",
      "created_at": "2024-12-20T10:38:19Z",
      "updated_at": "2024-12-20T11:10:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893770067",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893770067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893779169",
      "pull_request_review_id": 2517070391,
      "id": 1893779169,
      "node_id": "PRRC_kwDOABII585w4Mbh",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing this executable.\n+    fs::path exe_dir{fs::weakly_canonical(exe_path, ec)};\n+    if (exe_dir.empty()) exe_dir = exe_path; // Restore previous path if weakly_canonical failed.\n+    exe_dir = exe_dir.parent_path();\n+    // Search for executables on system PATH only if this executable was invoked\n+    // from the PATH, to avoid unintentionally launching system executables in a\n+    // local build\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool use_system_path{!argv0_path.has_parent_path()};\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // If exe is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (exe_dir.filename() == \"src\" && try_exec(exe_dir / arg0)) ||\n+    // Otherwise if exe is installed in a bin/ directory, first look for target\n+    // executable in libexec/\n+    (exe_dir.filename() == \"bin\" && try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise look for target executable next to current exe\n+    try_exec(exe_dir / arg0.filename(), use_system_path) ||",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why use such an `( && || && ||| )` expression? Would be more readable as:\r\n\r\n```cpp\r\nif (exe_dir.filename() == \"src\") {\r\n    try_exec(exe_dir / arg0);\r\n}\r\nif (exe_dir.filename() == \"bin\") {\r\n    try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / arg0.filename());\r\n}\r\n```",
      "created_at": "2024-12-20T10:43:56Z",
      "updated_at": "2024-12-20T11:10:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893779169",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893779169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 205,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893800793",
      "pull_request_review_id": 2517070391,
      "id": 1893800793,
      "node_id": "PRRC_kwDOABII585w4RtZ",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 176,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Isn't `fs::exists()` redundant? `fs::is_regular_file()` will return true if the file exists and is a regular file.",
      "created_at": "2024-12-20T11:01:05Z",
      "updated_at": "2024-12-20T11:10:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893800793",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893800793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893808229",
      "pull_request_review_id": 2517070391,
      "id": 1893808229,
      "node_id": "PRRC_kwDOABII585w4Thl",
      "diff_hunk": "@@ -260,7 +291,12 @@ def set_binary_paths(self):\n                 \"src\",\n                 binary + self.config[\"environment\"][\"EXEEXT\"],\n             )\n-            setattr(self.options, attribute_name, os.getenv(env_variable_name, default=default_filename))\n+            setattr(paths, attribute_name, os.getenv(env_variable_name, default=default_filename))\n+\n+        # BITCOIN_CMD environment variable can be specified to invoke bitcoin\n+        # binary wrapper binary instead of other executables.",
      "path": "test/functional/test_framework/test_framework.py",
      "position": null,
      "original_position": 77,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        # BITCOIN_CMD environment variable can be specified to invoke bitcoin\r\n        # wrapper binary instead of other executables.\r\n```",
      "created_at": "2024-12-20T11:09:09Z",
      "updated_at": "2024-12-20T11:10:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893808229",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893808229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 296,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893827538",
      "pull_request_review_id": 2517359692,
      "id": 1893827538,
      "node_id": "PRRC_kwDOABII585w4YPS",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884865585,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The following works on FreeBSD. In case `dtrace` works on macOS:\r\n\r\n```sh\r\ndtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c 'bitcoin -m gui'\r\n```\r\n\r\nMaybe how to enable `dtrace` on macOS: https://github.com/suolapeikko/dtrace?tab=readme-ov-file#sample-dtrace-scripts-for-macos",
      "created_at": "2024-12-20T11:29:54Z",
      "updated_at": "2024-12-20T11:29:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893827538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1893827538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894539548",
      "pull_request_review_id": 2518559154,
      "id": 1894539548,
      "node_id": "PRRC_kwDOABII585w7GEc",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893661643,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We can change that later, but currently the (guix built) release binaries are shipped with `test_bitcoin` - for whatever reason.",
      "created_at": "2024-12-21T02:48:10Z",
      "updated_at": "2024-12-21T02:48:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1894539548",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894539548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894540173",
      "pull_request_review_id": 2518559831,
      "id": 1894540173,
      "node_id": "PRRC_kwDOABII585w7GON",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893670004,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The goal of #31098 is to have `bitcoin-node` included in the release. For the time being only stratum v2 (or other IPC mining interface consumers) should use that binary. And they will get instructions for that. By default folks should run `bitcoind`.\r\n\r\nOnce the multiprocess bundled binaries are mature enough and there's a broader benefit to using them (e.g. the GUI can connect to the node), we could change the default.",
      "created_at": "2024-12-21T02:53:50Z",
      "updated_at": "2024-12-21T02:53:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1894540173",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894540173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894541328",
      "pull_request_review_id": 2518560985,
      "id": 1894541328,
      "node_id": "PRRC_kwDOABII585w7GgQ",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            std::cout << FormatParagraph(LicenseInfo());\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f17453ff13ebd0be842396c17bcc99b0c903abb8",
      "in_reply_to_id": 1884865585,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```\r\n% dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c 'build/src/bitcoin daemon' \r\ndtrace: system integrity protection is on, some features will not be available\r\ndtrace: failed to initialize dtrace: DTrace requires additional privileges\r\n```\r\n\r\nWith sudo:\r\n\r\n```\r\ndtrace: system integrity protection is on, some features will not be available\r\n\r\ndtrace: invalid probe specifier proc:::exec-success { trace(curpsinfo->pr_psargs); }: probe description proc:::exec-success does not match any probes. System Integrity Protection is on\r\n```\r\n\r\nI haven't tried disabling System Integrity Protection (SIP) as that link suggests, not necessary a good idea :-) Though the maybe the `csrutil enable --without dtrace` isn't too bad.",
      "created_at": "2024-12-21T03:02:39Z",
      "updated_at": "2024-12-21T03:02:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1894541328",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1894541328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1903111922",
      "pull_request_review_id": 2530754869,
      "id": 1903111922,
      "node_id": "PRRC_kwDOABII585xby7y",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {",
      "path": "src/bitcoin.cpp",
      "position": 116,
      "original_position": 111,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I understand correctly passing `-m -M` will give precedence to `-M`. Should we really support this? Might it better if providing multiple flags at once be an error? E.g. currently running\r\n```\r\n./bitcoin -h -m daemon\r\n```\r\nwill print the help string and run the daemon, which might be confusing, since it is not doing the same for `-v`.",
      "created_at": "2025-01-04T15:01:51Z",
      "updated_at": "2025-01-04T15:01:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1903111922",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1903111922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920876351",
      "pull_request_review_id": 2560158721,
      "id": 1920876351,
      "node_id": "PRRC_kwDOABII585yfj8_",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893655528,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893655528\r\n\r\nThanks, fixed\r\n",
      "created_at": "2025-01-17T23:40:41Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920876351",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920876351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920878009",
      "pull_request_review_id": 2560158721,
      "id": 1920878009,
      "node_id": "PRRC_kwDOABII585yfkW5",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 46,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893661643,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893661643\r\n\r\nRemoved from documentation for now since maybe this isn't something we want to support going forward, and in any case I think it would be better to document internal commands for debugging and testing and external commands intended to be used by typical users separately.",
      "created_at": "2025-01-17T23:44:12Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920878009",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920878009"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920879100",
      "pull_request_review_id": 2560158721,
      "id": 1920879100,
      "node_id": "PRRC_kwDOABII585yfkn8",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893670004,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893670004\r\n\r\n> So, the user must have a knowledge whether his Bitcoin Core was compiled with or without multiprocess and start either bitcoin -M gui or bitcoin -m gui. Could we spare them this? The bitcoin executable has that knowledge.\r\n\r\nNo this isn't how it works. Specifying -m or -M is optional, and the current default is to run monolithic binaries. Multiprocess binaries could become the default at some some point in the future but presumably both sets of binaries would still be installed at that point.\r\n\r\nI can't think of a situation where users would encounter a problem or see confusing behavior here, but if I'm missing something, we could implement more complicated behavior like you are suggesting. I don't see what problem that would solve right now, though.\r\n",
      "created_at": "2025-01-17T23:46:57Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920879100",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920879100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920881130",
      "pull_request_review_id": 2560158721,
      "id": 1920881130,
      "node_id": "PRRC_kwDOABII585yflHq",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 93,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893680784,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893680784\r\n\r\nThanks, fixed now ",
      "created_at": "2025-01-17T23:51:52Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920881130",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920881130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920881498",
      "pull_request_review_id": 2560158721,
      "id": 1920881498,
      "node_id": "PRRC_kwDOABII585yflNa",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 75,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893685756,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893685756\r\n\r\n> Since everything inserted into `args` is a constant literal, it can be `std::vector<std::string_view>` \r\n\r\nThanks, I went ahead and changed everything to `const char*` for now. Unfortuantely `std::string_view` does not work because these arguments need to be null-terminated in order to be passed to execvp.\r\n",
      "created_at": "2025-01-17T23:52:45Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920881498",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920881498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 73,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920882677",
      "pull_request_review_id": 2560158721,
      "id": 1920882677,
      "node_id": "PRRC_kwDOABII585yflf1",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);",
      "path": "src/bitcoin.cpp",
      "position": 106,
      "original_position": 101,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893696352,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893696352\r\n\r\n> This adds a trailing newline, but the above 2 `tfm::format()` calls don't. I think they should.\r\n\r\nThe output looks right to me currently and trailing newlines are not missing. Adding \\n to format strings would add double line breaks to the end of output and not be right, and in general there should be no need to include \\n in format strings after substituting variables that already end in newlines.\r\n\r\nIf the idea is to do some refactoring to move newlines from certain strings into other strings, I could do that, but would helpful to know what goal of refactoring would be. Maybe post a diff if you have a particular change in mind.",
      "created_at": "2025-01-17T23:55:40Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920882677",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920882677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 106,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920883094",
      "pull_request_review_id": 2560158721,
      "id": 1920883094,
      "node_id": "PRRC_kwDOABII585yflmW",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 132,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893702291,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893702291\r\n\r\nThanks, added doxygen documentation and descriptions.",
      "created_at": "2025-01-17T23:56:32Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920883094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920883094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920883201",
      "pull_request_review_id": 2560158721,
      "id": 1920883201,
      "node_id": "PRRC_kwDOABII585yfloB",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893709992,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893709992\r\n\r\n> I find the names confusing because I would assume this will execute `argv0 args[0] args[1] args[2] ...`. Maybe rename `argv0` to `parent` or `wrapper_prog`.\r\n\r\nMakes sense, and nice suggestion. renamed to wrapper_argv0. Also renamed other related variables to use wrapper_ prefix to be consistent.",
      "created_at": "2025-01-17T23:56:50Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920883201",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920883201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920883388",
      "pull_request_review_id": 2560158721,
      "id": 1920883388,
      "node_id": "PRRC_kwDOABII585yflq8",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing this executable.\n+    fs::path exe_dir{fs::weakly_canonical(exe_path, ec)};\n+    if (exe_dir.empty()) exe_dir = exe_path; // Restore previous path if weakly_canonical failed.\n+    exe_dir = exe_dir.parent_path();\n+    // Search for executables on system PATH only if this executable was invoked\n+    // from the PATH, to avoid unintentionally launching system executables in a\n+    // local build\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool use_system_path{!argv0_path.has_parent_path()};",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 200,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893770067,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893770067\r\n\r\n> I think this is the same check as above: `argv0.find('/') == std::string_view::npos`, right? Would be good to use the same expression in both locations.\r\n\r\nNice catch! Consolidated these",
      "created_at": "2025-01-17T23:57:22Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920883388",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920883388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920888966",
      "pull_request_review_id": 2560158721,
      "id": 1920888966,
      "node_id": "PRRC_kwDOABII585yfnCG",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing this executable.\n+    fs::path exe_dir{fs::weakly_canonical(exe_path, ec)};\n+    if (exe_dir.empty()) exe_dir = exe_path; // Restore previous path if weakly_canonical failed.\n+    exe_dir = exe_dir.parent_path();\n+    // Search for executables on system PATH only if this executable was invoked\n+    // from the PATH, to avoid unintentionally launching system executables in a\n+    // local build\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool use_system_path{!argv0_path.has_parent_path()};\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // If exe is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (exe_dir.filename() == \"src\" && try_exec(exe_dir / arg0)) ||\n+    // Otherwise if exe is installed in a bin/ directory, first look for target\n+    // executable in libexec/\n+    (exe_dir.filename() == \"bin\" && try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise look for target executable next to current exe\n+    try_exec(exe_dir / arg0.filename(), use_system_path) ||",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893779169,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893779169\r\n\r\n> Why use such an `( && || && ||| )` expression? Would be more readable as:\r\n\r\nThe suggested code is not equivalent unless you assume that try_exec will never return true. In practice, I agree it should work but it would be fragile and look misleading because unless you know that try_exec does a syscall that never returns in certain cases, a plain reading of the code would lead you to believe incorrectly that the return value of try_exec doesn't matter and that the same executable is run repeatedly.\r\n\r\nUsing && and || is more explicit and robust because it makes it explicit that if try_exec succeeds, it is not run again, and it makes the code work regardless of whether try_exec halts or returns.\r\n\r\nIf the boolean operators are a problem, maybe I can try to find another way to write this doesn't look misleading and rely on try_exec to never return. But IMO,  && and || are nice because these operators are a natural convenience in shell scripts and this wrapper program basically is a shell script.",
      "created_at": "2025-01-18T00:12:17Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920888966",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920888966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 205,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920891035",
      "pull_request_review_id": 2560158721,
      "id": 1920891035,
      "node_id": "PRRC_kwDOABII585yfnib",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 176,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893800793,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893800793\r\n\r\n> Isn't `fs::exists()` redundant? `fs::is_regular_file()` will return true if the file exists and is a regular file.\r\n\r\nGood catch, simplified.\r\n",
      "created_at": "2025-01-18T00:16:02Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920891035",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920891035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920891135",
      "pull_request_review_id": 2560158721,
      "id": 1920891135,
      "node_id": "PRRC_kwDOABII585yfnj_",
      "diff_hunk": "@@ -260,7 +291,12 @@ def set_binary_paths(self):\n                 \"src\",\n                 binary + self.config[\"environment\"][\"EXEEXT\"],\n             )\n-            setattr(self.options, attribute_name, os.getenv(env_variable_name, default=default_filename))\n+            setattr(paths, attribute_name, os.getenv(env_variable_name, default=default_filename))\n+\n+        # BITCOIN_CMD environment variable can be specified to invoke bitcoin\n+        # binary wrapper binary instead of other executables.",
      "path": "test/functional/test_framework/test_framework.py",
      "position": null,
      "original_position": 77,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893808229,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1893808229\r\n\r\nThanks fixed\r\n\r\n",
      "created_at": "2025-01-18T00:16:18Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920891135",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920891135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 296,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920892188",
      "pull_request_review_id": 2560158721,
      "id": 1920892188,
      "node_id": "PRRC_kwDOABII585yfn0c",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {",
      "path": "src/bitcoin.cpp",
      "position": 116,
      "original_position": 111,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1903111922,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1903111922\r\n\r\n> If I understand correctly passing `-m -M` will give precedence to `-M`. Should we really support this? Might it better if providing multiple flags at once be an error? E.g. currently running\r\n> \r\n> ```\r\n> ./bitcoin -h -m daemon\r\n> ```\r\n> \r\n> will print the help string and run the daemon, which might be confusing, since it is not doing the same for `-v`.\r\n\r\nGood catch on -h, that should be be fixed now and treated the same as -v and exit when done. In general though I think ability for later command line options to override earlier ones is a standard feature for command line tools and it makes them flexible and composable. For example, in a bash shell you can define a function or alias that calls `bitcoin -m` to invoke multiprocess binaries by default without losing the ability to append `-M` and run normal binaries when needed.",
      "created_at": "2025-01-18T00:18:44Z",
      "updated_at": "2025-01-18T00:42:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920892188",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1920892188"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925331073",
      "pull_request_review_id": 2567223685,
      "id": 1925331073,
      "node_id": "PRRC_kwDOABII585ywjiB",
      "diff_hunk": "@@ -9,6 +9,7 @@ import logging\n import math\n import os\n import re\n+import shlex\n import struct",
      "path": "contrib/signet/miner",
      "position": null,
      "original_position": 5,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "a1d960e03be53517e80d36c257941ff407a6f61f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a1d960e03be53517e80d36c257941ff407a6f61f: unrelated nit: `struct` is unused",
      "created_at": "2025-01-22T13:33:38Z",
      "updated_at": "2025-01-22T14:11:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1925331073",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925331073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925353671",
      "pull_request_review_id": 2567223685,
      "id": 1925353671,
      "node_id": "PRRC_kwDOABII585ywpDH",
      "diff_hunk": "@@ -56,6 +58,47 @@ def __init__(self, message):\n         self.message = message\n \n \n+class Binaries:\n+    \"\"\"Helper class to provide information about bitcoin binaries\n+\n+    Attributes:\n+        paths: Dictionary returned from get_binary_paths() containing information\n+            which binaries and command lines to use from environment variables and\n+            the config file.\n+        bin_path: An optional string containing a directory path to look for\n+            binaries, which takes precedence over the paths above, if specified.\n+            This is used by tests calling binaries from previous releases.\n+    \"\"\"\n+    def __init__(self, paths, bin_path=None):\n+        self.paths = paths\n+        self.bin_path = bin_path\n+\n+    def daemon_args(self):",
      "path": "test/functional/test_framework/test_framework.py",
      "position": null,
      "original_position": 33,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "a1d960e03be53517e80d36c257941ff407a6f61f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a1d960e03be53517e80d36c257941ff407a6f61f: I think renaming this to `daemon_command_with_args` or `daemon_argv` would make the call sites more readable. Right now it gives the impression that this only provides command arguments, not the command itself. OTOH the documentation does clarify it.",
      "created_at": "2025-01-22T13:48:33Z",
      "updated_at": "2025-01-22T14:11:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1925353671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925353671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925368414",
      "pull_request_review_id": 2567223685,
      "id": 1925368414,
      "node_id": "PRRC_kwDOABII585ywspe",
      "diff_hunk": "@@ -56,6 +58,47 @@ def __init__(self, message):\n         self.message = message\n \n \n+class Binaries:\n+    \"\"\"Helper class to provide information about bitcoin binaries\n+\n+    Attributes:\n+        paths: Dictionary returned from get_binary_paths() containing information\n+            which binaries and command lines to use from environment variables and\n+            the config file.\n+        bin_path: An optional string containing a directory path to look for\n+            binaries, which takes precedence over the paths above, if specified.\n+            This is used by tests calling binaries from previous releases.\n+    \"\"\"\n+    def __init__(self, paths, bin_path=None):\n+        self.paths = paths\n+        self.bin_path = bin_path\n+\n+    def daemon_args(self):\n+        \"Return argv array that should be used to invoke bitcoind\"\n+        return self.args(\"daemon\", \"bitcoind\")\n+\n+    def rpc_args(self):\n+        \"Return argv array that should be used to invoke bitcoin-cli\"\n+        # Add -nonamed because \"bitcoin rpc\" enables -named by default, but bitcoin-cli doesn't\n+        return self.args(\"rpc\", \"bitcoincli\") + [\"-nonamed\"]\n+\n+    def util_args(self):\n+        \"Return argv array that should be used to invoke bitcoin-util\"\n+        return self.args(\"util\", \"bitcoinutil\")\n+\n+    def wallet_args(self):\n+        \"Return argv array that should be used to invoke bitcoin-wallet\"\n+        return self.args(\"wallet\", \"bitcoinwallet\")\n+\n+    def args(self, command, path_attr):",
      "path": "test/functional/test_framework/test_framework.py",
      "position": null,
      "original_position": 50,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "a1d960e03be53517e80d36c257941ff407a6f61f",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "a1d960e03be53517e80d36c257941ff407a6f61f: it took me a while to wrap my head around this. Suggested doc:\r\n\r\n> Return argv array that should be used to invoke the command. It either uses the bitcoin wrapper executable (if BITCOIN_CMD is set), or the direct binary path (bitcoind, etc). When bin_path is set (by tests calling binaries from previous releases) it always uses the direct path.\r\n\r\n(in the future some of the previous releases will have the `bitcoin` binary, but I don't expect we'll need to use it in tests)",
      "created_at": "2025-01-22T13:57:46Z",
      "updated_at": "2025-01-22T14:11:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1925368414",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1925368414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928047997",
      "pull_request_review_id": 2571581056,
      "id": 1928047997,
      "node_id": "PRRC_kwDOABII585y6619",
      "diff_hunk": "@@ -9,6 +9,7 @@ import logging\n import math\n import os\n import re\n+import shlex\n import struct",
      "path": "contrib/signet/miner",
      "position": null,
      "original_position": 5,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "a1d960e03be53517e80d36c257941ff407a6f61f",
      "in_reply_to_id": 1925331073,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1925331073\r\n\r\n> [a1d960e](https://github.com/bitcoin/bitcoin/commit/a1d960e03be53517e80d36c257941ff407a6f61f): unrelated nit: `struct` is unused\r\n\r\nThanks, removed",
      "created_at": "2025-01-24T03:44:23Z",
      "updated_at": "2025-01-24T03:54:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1928047997",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928047997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928048734",
      "pull_request_review_id": 2571581056,
      "id": 1928048734,
      "node_id": "PRRC_kwDOABII585y67Be",
      "diff_hunk": "@@ -56,6 +58,47 @@ def __init__(self, message):\n         self.message = message\n \n \n+class Binaries:\n+    \"\"\"Helper class to provide information about bitcoin binaries\n+\n+    Attributes:\n+        paths: Dictionary returned from get_binary_paths() containing information\n+            which binaries and command lines to use from environment variables and\n+            the config file.\n+        bin_path: An optional string containing a directory path to look for\n+            binaries, which takes precedence over the paths above, if specified.\n+            This is used by tests calling binaries from previous releases.\n+    \"\"\"\n+    def __init__(self, paths, bin_path=None):\n+        self.paths = paths\n+        self.bin_path = bin_path\n+\n+    def daemon_args(self):",
      "path": "test/functional/test_framework/test_framework.py",
      "position": null,
      "original_position": 33,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "a1d960e03be53517e80d36c257941ff407a6f61f",
      "in_reply_to_id": 1925353671,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1925353671\r\n\r\n> [a1d960e](https://github.com/bitcoin/bitcoin/commit/a1d960e03be53517e80d36c257941ff407a6f61f): I think renaming this to `daemon_command_with_args` or `daemon_argv` would make the call sites more readable. [...]\r\n\r\nMakes sense, renamed to daemon_argv, and renamed other methods to match\r\n",
      "created_at": "2025-01-24T03:46:00Z",
      "updated_at": "2025-01-24T03:54:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1928048734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928048734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928048957",
      "pull_request_review_id": 2571581056,
      "id": 1928048957,
      "node_id": "PRRC_kwDOABII585y67E9",
      "diff_hunk": "@@ -56,6 +58,47 @@ def __init__(self, message):\n         self.message = message\n \n \n+class Binaries:\n+    \"\"\"Helper class to provide information about bitcoin binaries\n+\n+    Attributes:\n+        paths: Dictionary returned from get_binary_paths() containing information\n+            which binaries and command lines to use from environment variables and\n+            the config file.\n+        bin_path: An optional string containing a directory path to look for\n+            binaries, which takes precedence over the paths above, if specified.\n+            This is used by tests calling binaries from previous releases.\n+    \"\"\"\n+    def __init__(self, paths, bin_path=None):\n+        self.paths = paths\n+        self.bin_path = bin_path\n+\n+    def daemon_args(self):\n+        \"Return argv array that should be used to invoke bitcoind\"\n+        return self.args(\"daemon\", \"bitcoind\")\n+\n+    def rpc_args(self):\n+        \"Return argv array that should be used to invoke bitcoin-cli\"\n+        # Add -nonamed because \"bitcoin rpc\" enables -named by default, but bitcoin-cli doesn't\n+        return self.args(\"rpc\", \"bitcoincli\") + [\"-nonamed\"]\n+\n+    def util_args(self):\n+        \"Return argv array that should be used to invoke bitcoin-util\"\n+        return self.args(\"util\", \"bitcoinutil\")\n+\n+    def wallet_args(self):\n+        \"Return argv array that should be used to invoke bitcoin-wallet\"\n+        return self.args(\"wallet\", \"bitcoinwallet\")\n+\n+    def args(self, command, path_attr):",
      "path": "test/functional/test_framework/test_framework.py",
      "position": null,
      "original_position": 50,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "a1d960e03be53517e80d36c257941ff407a6f61f",
      "in_reply_to_id": 1925368414,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1925368414\r\n\r\n> [a1d960e](https://github.com/bitcoin/bitcoin/commit/a1d960e03be53517e80d36c257941ff407a6f61f): it took me a while to wrap my head around this. Suggested doc:\r\n\r\nNice, added suggested doc.\r\n",
      "created_at": "2025-01-24T03:46:29Z",
      "updated_at": "2025-01-24T03:54:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1928048957",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928048957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952751688",
      "pull_request_review_id": 2612094812,
      "id": 1952751688,
      "node_id": "PRRC_kwDOABII5850ZKBI",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893670004,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, I see, `-m|-M` is not mandatory and `bitcoin gui` has a reasonable default of running `bitcoin-qt` (as if `bitcoin -M gui` has been run). Makes sense, thanks for the explanation!",
      "created_at": "2025-02-12T14:22:05Z",
      "updated_at": "2025-02-12T14:22:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1952751688",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952751688"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 33,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952873395",
      "pull_request_review_id": 2612316852,
      "id": 1952873395,
      "node_id": "PRRC_kwDOABII5850Znuz",
      "diff_hunk": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#define execvp _execvp\n+#else\n+#include <unistd.h>\n+#endif\n+\n+extern const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %1$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolothic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+)\";\n+\n+static constexpr auto HELP_COMMANDS = R\"(Command overview:\n+\n+%1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+%1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+%1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+%1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+%1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+%1$s test [ARGS]    Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+%1$s help           Show this help message.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    std::string_view command;\n+    std::vector<std::string_view> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+        }\n+\n+        std::vector<std::string> args;\n+        if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"help\") {\n+            tfm::format(std::cout, HELP_COMMANDS, argv[0]);\n+        } else if (cmd.command == \"mine\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-mine\");\n+        } else if (cmd.command == \"util\") { // undocumented, used by tests\n+            args.emplace_back(\"bitcoin-util\");\n+        } else if (!cmd.command.empty()){\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(arg);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\") {\n+            cmd.show_help = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+// Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+// using src, bin and libexec directory paths relative to this executable, where\n+// the path to this executable is specified `argv0`.\n+//\n+// This function doesn't currently print anything but can be debugged from\n+// the command line using strace like:\n+//\n+//     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+void ExecCommand(const std::vector<std::string>& args, std::string_view argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> cstr_args{};\n+    cstr_args.reserve(args.size() + 1);\n+    for (const auto& arg : args) {\n+        cstr_args.emplace_back(arg.c_str());\n+    }\n+    cstr_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        cstr_args[0] = exe_path_str.c_str();\n+        if (execvp(cstr_args[0], (char*const*)cstr_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", cstr_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where current executable is located. This is a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // override this behavior in the future, though.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path exe_path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (argv0.find('/') == std::string_view::npos) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::exists(candidate, ec) && fs::is_regular_file(candidate, ec)) {\n+                    exe_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        exe_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing this executable.\n+    fs::path exe_dir{fs::weakly_canonical(exe_path, ec)};\n+    if (exe_dir.empty()) exe_dir = exe_path; // Restore previous path if weakly_canonical failed.\n+    exe_dir = exe_dir.parent_path();\n+    // Search for executables on system PATH only if this executable was invoked\n+    // from the PATH, to avoid unintentionally launching system executables in a\n+    // local build\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool use_system_path{!argv0_path.has_parent_path()};\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // If exe is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (exe_dir.filename() == \"src\" && try_exec(exe_dir / arg0)) ||\n+    // Otherwise if exe is installed in a bin/ directory, first look for target\n+    // executable in libexec/\n+    (exe_dir.filename() == \"bin\" && try_exec(fs::path{exe_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise look for target executable next to current exe\n+    try_exec(exe_dir / arg0.filename(), use_system_path) ||",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 210,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "044c1129db06983da598f427dff85513d8480b3a",
      "in_reply_to_id": 1893779169,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, I see your arguments. Feel free to ignore this comment of mine and leave the code as it is. I do not see it as a blocker.\r\n\r\nYes, I assumed that `try_exec()` will never return `true` and I guessed that `try_exec()` does an exec syscall without reading its code. Both Windows and Linux docs are clear that `execvp()` only returns if it couldn't execute the program. `try_exec()` could be:\r\n\r\n```diff\r\n     auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\r\n         std::string exe_path_str{fs::PathToString(exe_path)};\r\n         exec_args[0] = exe_path_str.c_str();\r\n-        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\r\n-            if (allow_notfound && errno == ENOENT) return false;\r\n+        ExecVp(exec_args[0], (char*const*)exec_args.data());\r\n+        // failed\r\n+        if (!allow_notfound || errno != ENOENT) {\r\n             throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\r\n         }\r\n-        return true; // Will not actually be reached if execvp succeeds\r\n+        return false;\r\n     };\r\n```",
      "created_at": "2025-02-12T15:22:31Z",
      "updated_at": "2025-02-12T15:22:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1952873395",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952873395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 205,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952885840",
      "pull_request_review_id": 2612338457,
      "id": 1952885840,
      "node_id": "PRRC_kwDOABII5850ZqxQ",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // customize this behavior in the future, though.\n+    const fs::path wrapper_argv0_path{fs::PathFromString(std::string{wrapper_argv0})};\n+    fs::path wrapper_path{wrapper_argv0_path};\n+    // Whether to use system PATH variable to locate wrapper executable and\n+    // search for other executables. Only search PATH if wrapper executable was\n+    // invoked using the PATH, to avoid unintentionally launching system\n+    // executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool search_system_path{!wrapper_argv0_path.has_parent_path()};",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 244,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "On Windows the [current directory is also searched (before PATH)](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/path) for executable location. So, if the current directory is `C:\\bitcoin\\src` (which is not in PATH) and the user types `bitcoin` (not `.\\bitcoin`) and presses `<enter>` and if `C:\\bitcoin\\src\\bitcoin` exists then it will be executed. This means that the variable `search_system_path` will be wrongly set to `true` in this case.",
      "created_at": "2025-02-12T15:29:19Z",
      "updated_at": "2025-02-12T17:44:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1952885840",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952885840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952926320",
      "pull_request_review_id": 2612338457,
      "id": 1952926320,
      "node_id": "PRRC_kwDOABII5850Z0pw",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 215,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is only used in this file:\r\n```suggestion\r\nstatic void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\r\n```",
      "created_at": "2025-02-12T15:52:13Z",
      "updated_at": "2025-02-12T17:44:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1952926320",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952926320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952940524",
      "pull_request_review_id": 2612338457,
      "id": 1952940524,
      "node_id": "PRRC_kwDOABII5850Z4Hs",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // customize this behavior in the future, though.\n+    const fs::path wrapper_argv0_path{fs::PathFromString(std::string{wrapper_argv0})};\n+    fs::path wrapper_path{wrapper_argv0_path};\n+    // Whether to use system PATH variable to locate wrapper executable and\n+    // search for other executables. Only search PATH if wrapper executable was\n+    // invoked using the PATH, to avoid unintentionally launching system\n+    // executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool search_system_path{!wrapper_argv0_path.has_parent_path()};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (search_system_path) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / wrapper_argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    wrapper_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        wrapper_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing the wrapper executable.\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // If wrapper is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (wrapper_dir.filename() == \"src\" && try_exec(wrapper_dir / arg0)) ||\n+    // Otherwise if wrapper is installed in a bin/ directory, look for\n+    // target executable in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||\n+    // Otherwise look for target executable next to current wrapper\n+    try_exec(wrapper_dir / arg0.filename(), search_system_path) ||\n+    // Otherwise just look on the system path.\n+    (search_system_path && try_exec(arg0.filename(), false));",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 286,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is equivalent to:\r\n\r\n```suggestion\r\n    try_exec(wrapper_dir / arg0.filename(), search_system_path) ||\r\n    // Otherwise just look on the system path.\r\n    try_exec(arg0.filename(), false);\r\n```\r\nbecause `try_exec()` would only return if `search_system_path` is `true` and if that is the case then `search_system_path && A` is equivalent to just `A`.",
      "created_at": "2025-02-12T15:59:11Z",
      "updated_at": "2025-02-12T17:44:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1952940524",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952940524"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 284,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952943101",
      "pull_request_review_id": 2612338457,
      "id": 1952943101,
      "node_id": "PRRC_kwDOABII5850Z4v9",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // customize this behavior in the future, though.\n+    const fs::path wrapper_argv0_path{fs::PathFromString(std::string{wrapper_argv0})};\n+    fs::path wrapper_path{wrapper_argv0_path};\n+    // Whether to use system PATH variable to locate wrapper executable and\n+    // search for other executables. Only search PATH if wrapper executable was\n+    // invoked using the PATH, to avoid unintentionally launching system\n+    // executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool search_system_path{!wrapper_argv0_path.has_parent_path()};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (search_system_path) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / wrapper_argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    wrapper_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        wrapper_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing the wrapper executable.\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // If wrapper is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (wrapper_dir.filename() == \"src\" && try_exec(wrapper_dir / arg0)) ||\n+    // Otherwise if wrapper is installed in a bin/ directory, look for\n+    // target executable in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||\n+    // Otherwise look for target executable next to current wrapper\n+    try_exec(wrapper_dir / arg0.filename(), search_system_path) ||",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 284,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't get it why `search_system_path` is used as `allow_notfound`. Those are two different things.",
      "created_at": "2025-02-12T16:00:40Z",
      "updated_at": "2025-02-12T17:44:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1952943101",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1952943101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953057497",
      "pull_request_review_id": 2612338457,
      "id": 1953057497,
      "node_id": "PRRC_kwDOABII5850aUrZ",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  %1$s bench [ARGS]    Run bench command, equivalent to running 'bench_bitcoin [ARGS]'\"\r\n  %1$s test [ARGS]     Run unit tests, equivalent to running 'test_bitcoin [ARGS]'\"\r\n  %1$s test-gui [ARGS] Run GUI unit tests, equivalent to running 'test_bitcoin-qt [ARGS]'\"\r\n```",
      "created_at": "2025-02-12T16:55:48Z",
      "updated_at": "2025-02-12T17:44:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1953057497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953057497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953063825",
      "pull_request_review_id": 2612338457,
      "id": 1953063825,
      "node_id": "PRRC_kwDOABII5850aWOR",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 203,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n//!             that will be located on the PATH or relative to wrapper_argv0.\r\n```",
      "created_at": "2025-02-12T16:59:22Z",
      "updated_at": "2025-02-12T17:44:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1953063825",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953063825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 203,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953105287",
      "pull_request_review_id": 2612338457,
      "id": 1953105287,
      "node_id": "PRRC_kwDOABII5850agWH",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 214,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `dtrace` example would print all exec calls on the system, not just the ones by the given program.\r\n\r\n```suggestion\r\n//!     dtrace -n 'proc:::exec-success /pid == $target/ { trace(curpsinfo->pr_psargs); }' -c ...\r\n```",
      "created_at": "2025-02-12T17:26:39Z",
      "updated_at": "2025-02-12T17:44:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1953105287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953105287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953127351",
      "pull_request_review_id": 2612338457,
      "id": 1953127351,
      "node_id": "PRRC_kwDOABII5850alu3",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the following two commits should be squashed into one commit:\r\n\r\nbde036879d `multiprocess: Add bitcoin wrapper executable`\r\nb7213977ed `multiprocess: Add bitcoin wrapper windows support`\r\n\r\nbecause otherwise there is an intermediate state where the code is broken on Windows (would try to use `execvp()` which does not exist, I guess it will not compile on Windows).",
      "created_at": "2025-02-12T17:39:03Z",
      "updated_at": "2025-02-12T17:44:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1953127351",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953127351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953144139",
      "pull_request_review_id": 2612765858,
      "id": 1953144139,
      "node_id": "PRRC_kwDOABII5850ap1L",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 232,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I wonder if this can be made dumb stupid and reduce it to just call `execvp()`. That is, reduce `ExecCommand()` to just 1 - 5 lines of code and deal with the consequences of it...",
      "created_at": "2025-02-12T17:50:43Z",
      "updated_at": "2025-02-12T17:50:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1953144139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953144139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953815957",
      "pull_request_review_id": 2613855975,
      "id": 1953815957,
      "node_id": "PRRC_kwDOABII5850dN2V",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // customize this behavior in the future, though.\n+    const fs::path wrapper_argv0_path{fs::PathFromString(std::string{wrapper_argv0})};\n+    fs::path wrapper_path{wrapper_argv0_path};\n+    // Whether to use system PATH variable to locate wrapper executable and\n+    // search for other executables. Only search PATH if wrapper executable was\n+    // invoked using the PATH, to avoid unintentionally launching system\n+    // executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool search_system_path{!wrapper_argv0_path.has_parent_path()};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (search_system_path) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / wrapper_argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    wrapper_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        wrapper_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing the wrapper executable.\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // If wrapper is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (wrapper_dir.filename() == \"src\" && try_exec(wrapper_dir / arg0)) ||\n+    // Otherwise if wrapper is installed in a bin/ directory, look for\n+    // target executable in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||\n+    // Otherwise look for target executable next to current wrapper\n+    try_exec(wrapper_dir / arg0.filename(), search_system_path) ||",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 284,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1952943101,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Passing something like `search_system_path=true` to `try_exec()` is misleading because `try_exec()` uses `execvp(3)` which will search the system path but not based on the `search_system_path=true` argument but based on whether there is `/` in the executable: https://linux.die.net/man/3/execvp. Maybe rename `search_system_path` to `allow_notfound`?",
      "created_at": "2025-02-13T05:12:37Z",
      "updated_at": "2025-02-13T05:12:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1953815957",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953815957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955091370",
      "pull_request_review_id": 2616014706,
      "id": 1955091370,
      "node_id": "PRRC_kwDOABII5850iFOq",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // customize this behavior in the future, though.\n+    const fs::path wrapper_argv0_path{fs::PathFromString(std::string{wrapper_argv0})};\n+    fs::path wrapper_path{wrapper_argv0_path};\n+    // Whether to use system PATH variable to locate wrapper executable and\n+    // search for other executables. Only search PATH if wrapper executable was\n+    // invoked using the PATH, to avoid unintentionally launching system\n+    // executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool search_system_path{!wrapper_argv0_path.has_parent_path()};",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 244,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1952885840,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1952885840\r\n\r\n(note: renamed this variable to `fallback_os_search` in the latest push)\r\n\r\n> This means that the variable search_system_path will be wrongly set to true in this case.\r\n\r\nIt will be set to true, but I don't think it will be \"wrongly\" set to true. This is a heuristic deciding whether or not to let operating system look for executables if we can't find them ourselves. It's very possible different behaviors may be more or less convenient on windows, just as they may be more or less convenient on unix.\r\n\r\nWe need to do something reasonable here, and if it turns out there are ways we can improve the behavior or make it more configurable we should consider doing that. But you would have to tell me what behavior you think is more convenient here because there is not a right or wrong way to do this.",
      "created_at": "2025-02-13T19:22:06Z",
      "updated_at": "2025-02-13T21:26:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1955091370",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955091370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955101327",
      "pull_request_review_id": 2616014706,
      "id": 1955101327,
      "node_id": "PRRC_kwDOABII5850iHqP",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // customize this behavior in the future, though.\n+    const fs::path wrapper_argv0_path{fs::PathFromString(std::string{wrapper_argv0})};\n+    fs::path wrapper_path{wrapper_argv0_path};\n+    // Whether to use system PATH variable to locate wrapper executable and\n+    // search for other executables. Only search PATH if wrapper executable was\n+    // invoked using the PATH, to avoid unintentionally launching system\n+    // executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool search_system_path{!wrapper_argv0_path.has_parent_path()};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (search_system_path) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / wrapper_argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    wrapper_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        wrapper_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing the wrapper executable.\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // If wrapper is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (wrapper_dir.filename() == \"src\" && try_exec(wrapper_dir / arg0)) ||\n+    // Otherwise if wrapper is installed in a bin/ directory, look for\n+    // target executable in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||\n+    // Otherwise look for target executable next to current wrapper\n+    try_exec(wrapper_dir / arg0.filename(), search_system_path) ||",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 284,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1952943101,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1952943101\r\n\r\n(note: renamed `search_system_path` to `fallback_os_search` in the latest push)\r\n\r\n> I don't get it why `search_system_path` is used as `allow_notfound`. Those are two different things.\r\n\r\nExactly, they are two different things.\r\n\r\nIf `search_system_path` is true, then we want to allow the operating system to search the system path. In order for that to happen we need our own searches to not throw a fatal error, therefore `allow_notfound` should also be true.\r\n\r\nIf `search_system_path` is false, then do not want to allow the operating system to search the system path, and we want our own searches to throw a fatal error if they fail, so `allow_notfound` should be false.\r\n\r\nSo `search_system_path` and `allow_notfound` are two different variables in two different functions with two different meanings. Just because one value is used to initialize the other one (once) doesn't mean they should have the same name.",
      "created_at": "2025-02-13T19:30:11Z",
      "updated_at": "2025-02-13T21:28:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1955101327",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955101327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955114378",
      "pull_request_review_id": 2616014706,
      "id": 1955114378,
      "node_id": "PRRC_kwDOABII5850iK2K",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // customize this behavior in the future, though.\n+    const fs::path wrapper_argv0_path{fs::PathFromString(std::string{wrapper_argv0})};\n+    fs::path wrapper_path{wrapper_argv0_path};\n+    // Whether to use system PATH variable to locate wrapper executable and\n+    // search for other executables. Only search PATH if wrapper executable was\n+    // invoked using the PATH, to avoid unintentionally launching system\n+    // executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool search_system_path{!wrapper_argv0_path.has_parent_path()};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (search_system_path) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / wrapper_argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    wrapper_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        wrapper_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing the wrapper executable.\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // If wrapper is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (wrapper_dir.filename() == \"src\" && try_exec(wrapper_dir / arg0)) ||\n+    // Otherwise if wrapper is installed in a bin/ directory, look for\n+    // target executable in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||\n+    // Otherwise look for target executable next to current wrapper\n+    try_exec(wrapper_dir / arg0.filename(), search_system_path) ||\n+    // Otherwise just look on the system path.\n+    (search_system_path && try_exec(arg0.filename(), false));",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 286,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1952940524,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1952940524\r\n\r\n> This is equivalent to [...] because `try_exec()` would only return if `search_system_path` is `true`\r\n\r\nIMO, this code should work correctly even if `try_exec()` returns true when it succeeds. There's no reason a future implementation of `try_exec()` might not return true when it succeeds or that someone reading this code should automatically know try_exec() doesn't just act like a normal function and return true when it succeeds.\r\n\r\nThe current version of this code with `search_system_path &&` also makes it more immediately obvious that the `try_exec` call following it will not be executed if `search_system_path` is false.",
      "created_at": "2025-02-13T19:41:08Z",
      "updated_at": "2025-02-13T21:26:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1955114378",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955114378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 284,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955118691",
      "pull_request_review_id": 2616014706,
      "id": 1955118691,
      "node_id": "PRRC_kwDOABII5850iL5j",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 215,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1952926320,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1952926320\r\n\r\nThanks, applied suggestion",
      "created_at": "2025-02-13T19:44:54Z",
      "updated_at": "2025-02-13T21:26:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1955118691",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955118691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955125902",
      "pull_request_review_id": 2616014706,
      "id": 1955125902,
      "node_id": "PRRC_kwDOABII5850iNqO",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1953057497,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1953057497\r\n\r\nThanks! Applied",
      "created_at": "2025-02-13T19:48:50Z",
      "updated_at": "2025-02-13T21:26:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1955125902",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955125902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 49,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955128191",
      "pull_request_review_id": 2616014706,
      "id": 1955128191,
      "node_id": "PRRC_kwDOABII5850iON_",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 203,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1953063825,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1953063825\r\n\r\nThanks! Applied",
      "created_at": "2025-02-13T19:50:50Z",
      "updated_at": "2025-02-13T21:26:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1955128191",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955128191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 203,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955130244",
      "pull_request_review_id": 2616014706,
      "id": 1955130244,
      "node_id": "PRRC_kwDOABII5850iOuE",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 214,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1953105287,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1953105287\r\n\r\n> The `dtrace` example would print all exec calls on the system, not just the ones by the given program.\r\n\r\nWow previous behavior would not be great, applied your suggestion.",
      "created_at": "2025-02-13T19:52:27Z",
      "updated_at": "2025-02-13T21:26:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1955130244",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955130244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955144011",
      "pull_request_review_id": 2616014706,
      "id": 1955144011,
      "node_id": "PRRC_kwDOABII5850iSFL",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 232,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1953144139,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1953144139\r\n\r\n> I wonder if this can be made dumb stupid and reduce it to just call `execvp()`. That is, reduce `ExecCommand()` to just 1 - 5 lines of code and deal with the consequences of it...\r\n\r\nIt's not really clear what you could be suggesting specifically.\r\n\r\nThe only thing `ExecCommand()` is doing is trying to execute a few different versions of the provided command line with some prefixes added. It is basically just emulating a simple shell script. It is true that a simple shell script can turn into a 40-50 lines of code when you try to write it in c++ and make it cross platform. I think this is just what shell code in c++ looks like and that this should not present an actual problem.",
      "created_at": "2025-02-13T20:03:46Z",
      "updated_at": "2025-02-13T21:26:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1955144011",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955144011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955147970",
      "pull_request_review_id": 2616014706,
      "id": 1955147970,
      "node_id": "PRRC_kwDOABII5850iTDC",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1953127351,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1953127351\r\n\r\n> intermediate state where the code is broken on Windows\r\n\r\nThanks, restructured so this is no longer the case. I didn't think anyone would care if an intermediate non-merge commit failed to compile on windows and I thought code would be easier to understand looking at the unix version first. But in retrospect a better way to separate unix and windows code is just to move the windows code to another file, so have now done that in the latest push (`src/util/exec.cpp`)",
      "created_at": "2025-02-13T20:07:32Z",
      "updated_at": "2025-02-13T21:26:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1955147970",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1955147970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963243344",
      "pull_request_review_id": 2629317220,
      "id": 1963243344,
      "node_id": "PRRC_kwDOABII5851BLdQ",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // customize this behavior in the future, though.\n+    const fs::path wrapper_argv0_path{fs::PathFromString(std::string{wrapper_argv0})};\n+    fs::path wrapper_path{wrapper_argv0_path};\n+    // Whether to use system PATH variable to locate wrapper executable and\n+    // search for other executables. Only search PATH if wrapper executable was\n+    // invoked using the PATH, to avoid unintentionally launching system\n+    // executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool search_system_path{!wrapper_argv0_path.has_parent_path()};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (search_system_path) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / wrapper_argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    wrapper_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        wrapper_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing the wrapper executable.\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // If wrapper is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (wrapper_dir.filename() == \"src\" && try_exec(wrapper_dir / arg0)) ||\n+    // Otherwise if wrapper is installed in a bin/ directory, look for\n+    // target executable in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||\n+    // Otherwise look for target executable next to current wrapper\n+    try_exec(wrapper_dir / arg0.filename(), search_system_path) ||\n+    // Otherwise just look on the system path.\n+    (search_system_path && try_exec(arg0.filename(), false));",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 286,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1952940524,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, I see the point - maybe some day `try_exec()` could `fork()` and then `exec()` in which case it will return in case of success.",
      "created_at": "2025-02-20T09:55:35Z",
      "updated_at": "2025-02-20T09:55:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963243344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963243344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 284,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963287780",
      "pull_request_review_id": 2629389473,
      "id": 1963287780,
      "node_id": "PRRC_kwDOABII5851BWTk",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1953127351,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "IIRC we had some guidelines somewhere that all intermediate commits should be legit - compiling and tests passing. This would matter during `git-bisect(1)`.",
      "created_at": "2025-02-20T10:22:54Z",
      "updated_at": "2025-02-20T10:22:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963287780",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963287780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963378155",
      "pull_request_review_id": 2629536362,
      "id": 1963378155,
      "node_id": "PRRC_kwDOABII5851BsXr",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_EXEC_H\n+#define BITCOIN_UTIL_EXEC_H\n+\n+#include <util/fs.h>\n+\n+#include <string_view>\n+\n+namespace util {\n+//! Cross-platform wrapper for POSIX execvp function.\n+int ExecVp(const char *file, char *const argv[]);\n+//! Return path to current_executable.\n+fs::path GetExePath(std::string_view argv0);",
      "path": "src/util/exec.h",
      "position": null,
      "original_position": 16,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n//! Return path to argv0.\r\nfs::path GetExePath(std::string_view argv0);\r\n```",
      "created_at": "2025-02-20T11:13:31Z",
      "updated_at": "2025-02-20T15:23:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963378155",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963378155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963431018",
      "pull_request_review_id": 2629622321,
      "id": 1963431018,
      "node_id": "PRRC_kwDOABII5851B5Rq",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1953127351,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> IIRC we had some guidelines somewhere that all intermediate commits should be legit - compiling and tests passing. This would matter during `git-bisect(1)`.\r\n\r\nYes, but the only enforcement is with the test-each-commit CI job, so I would be surprised if there weren't many other intermediate commits where there is some build or test error on windows. Also:\r\n\r\n- In this case the error is in a new executable that didn't exist before this PR, so if the bisect test is testing this executable., it means the test needs either some special case for this PR anyway, or it is inefficient and testing a lot of things it doesn't need to.\r\n\r\n- The git bisect `--first-parent` option skips intermediate commits and avoids problems like this. I would always recommend using `--first-parent` anyway because it speeds up bisection, makes it easier to follow, and makes it more reliable because intermediate commits have  less CI coverage and testing in general than merge commits.\r\n\r\nIn any case, I believe every commit will compile on windows now (though I didn't test this).",
      "created_at": "2025-02-20T11:53:20Z",
      "updated_at": "2025-02-20T11:53:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963431018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963431018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963523131",
      "pull_request_review_id": 2629536362,
      "id": 1963523131,
      "node_id": "PRRC_kwDOABII5851CPw7",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: unused include",
      "created_at": "2025-02-20T12:59:48Z",
      "updated_at": "2025-02-20T15:23:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963523131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963523131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963537775",
      "pull_request_review_id": 2629536362,
      "id": 1963537775,
      "node_id": "PRRC_kwDOABII5851CTVv",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`tx` is missing and `test` is part of the internal commands, so:\r\n```suggestion\r\n  {gui,daemon,rpc,wallet,tx,help}\r\n```",
      "created_at": "2025-02-20T13:09:37Z",
      "updated_at": "2025-02-20T15:23:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963537775",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963537775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963540791",
      "pull_request_review_id": 2629536362,
      "id": 1963540791,
      "node_id": "PRRC_kwDOABII5851CUE3",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Some leftovers, I guess from previous incarnation of this which did not use `R\"(...)\"`:\r\n\r\n```suggestion\r\n  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\r\n  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\r\n```",
      "created_at": "2025-02-20T13:11:42Z",
      "updated_at": "2025-02-20T15:23:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963540791",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963540791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963558283",
      "pull_request_review_id": 2629536362,
      "id": 1963558283,
      "node_id": "PRRC_kwDOABII5851CYWL",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This prints \"bitcoin gui\". One might get the impression that the command is \"bitcoin gui\", whereas it is just \"gui\". For comparison:\r\n\r\n```\r\n$ git help\r\nusage: git ... <command> [<args>]\r\n...\r\n   clone     Clone a repository into a new directory\r\n   init      Create an empty Git repository or reinitialize an existing one\r\n...\r\n```\r\nSo maybe:\r\n```suggestion\r\n  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\r\n```",
      "created_at": "2025-02-20T13:23:18Z",
      "updated_at": "2025-02-20T15:23:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963558283",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963558283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963804202",
      "pull_request_review_id": 2630274906,
      "id": 1963804202,
      "node_id": "PRRC_kwDOABII5851DUYq",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // customize this behavior in the future, though.\n+    const fs::path wrapper_argv0_path{fs::PathFromString(std::string{wrapper_argv0})};\n+    fs::path wrapper_path{wrapper_argv0_path};\n+    // Whether to use system PATH variable to locate wrapper executable and\n+    // search for other executables. Only search PATH if wrapper executable was\n+    // invoked using the PATH, to avoid unintentionally launching system\n+    // executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool search_system_path{!wrapper_argv0_path.has_parent_path()};",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 244,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1952885840,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, you can mark this as resolved if not already (I don't see if it is marked as resolved or not). I will followup some related discussion at https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1952943101",
      "created_at": "2025-02-20T15:29:52Z",
      "updated_at": "2025-02-20T15:29:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963804202",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963804202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963845813",
      "pull_request_review_id": 2630345554,
      "id": 1963845813,
      "node_id": "PRRC_kwDOABII5851Dei1",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a\n+    // simplified search that won't work perfectly on every platform and doesn't\n+    // need to, as it is only trying to prioritize locally built or installed\n+    // executables over system executables. We may want to add options to\n+    // customize this behavior in the future, though.\n+    const fs::path wrapper_argv0_path{fs::PathFromString(std::string{wrapper_argv0})};\n+    fs::path wrapper_path{wrapper_argv0_path};\n+    // Whether to use system PATH variable to locate wrapper executable and\n+    // search for other executables. Only search PATH if wrapper executable was\n+    // invoked using the PATH, to avoid unintentionally launching system\n+    // executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool search_system_path{!wrapper_argv0_path.has_parent_path()};\n+    std::error_code ec;\n+#ifndef WIN32\n+    if (search_system_path) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / wrapper_argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    wrapper_path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        wrapper_path = fs::path{module_path};\n+    } else {\n+        tfm::format(std::cerr, \"Warning: Failed to get executable path. Error: %s\\n\", GetLastError());\n+    }\n+#endif\n+\n+    // Try to resolve any symlinks and figure out actual directory containing the wrapper executable.\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // If wrapper is in a CMake build tree, first look for target executable\n+    // relative to it.\n+    (wrapper_dir.filename() == \"src\" && try_exec(wrapper_dir / arg0)) ||\n+    // Otherwise if wrapper is installed in a bin/ directory, look for\n+    // target executable in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||\n+    // Otherwise look for target executable next to current wrapper\n+    try_exec(wrapper_dir / arg0.filename(), search_system_path) ||",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 284,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1952943101,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think I am starting to grasp: `fallback_os_search` (or previously `search_system_path`) is about allowing this  code:\r\n\r\n```cpp\r\n181     // Decide whether to fall back to the operating system to search for the\r\n182     // specified executable. Avoid doing this if it looks like the wrapper\r\n183     // executable was invoked by path, rather than by search, to avoid\r\n184     // unintentionally launching system executables in a local build.\r\n185     // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\r\n186     const bool fallback_os_search{!fs::PathFromString(std::string{wrapper_argv0}).has_parent_path()};\r\n187 \r\n188     // If wrapper is in a CMake build tree, first look for target executable\r\n189     // relative to it.\r\n190     (wrapper_dir.filename() == \"src\" && try_exec(wrapper_dir / arg0)) ||\r\n191     // Otherwise if wrapper is installed in a bin/ directory, look for\r\n192     // target executable in libexec/\r\n193     (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())\r\n194     // Otherwise check the \"daemon\" subdirectory in a windows install.\r\n195     try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||\r\n196     // Otherwise look for target executable next to current wrapper\r\n197     try_exec(wrapper_dir / arg0.filename(), fallback_os_search) ||\r\n198     // Otherwise just look on the system path.\r\n199     (fallback_os_search && try_exec(arg0.filename(), false));\r\n```\r\n\r\nto reach the last `try_exec()` call on line 199 where it would search the system path because we pass a first argument that does not contain `/`. It is not about individual `try_exec()` calls falling back to `$PATH` search.\r\n\r\nI still find line 197 confusing because it gives the impression that we want to instruct that individual `try_exec()` call to search `$PATH` if `fallback_os_search` is `true`, whereas it will never search `$PATH` because the first argument we supply contains `/`.\r\n\r\nI think the code is correct and works as intended, even if I personally find it confusing. So, feel free to ignore.",
      "created_at": "2025-02-20T15:53:58Z",
      "updated_at": "2025-02-20T15:53:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963845813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963845813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963862052",
      "pull_request_review_id": 2630370533,
      "id": 1963862052,
      "node_id": "PRRC_kwDOABII5851Digk",
      "diff_hunk": "@@ -0,0 +1,287 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  %1$s daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  %1$s rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  %1$s wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  %1$s tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  %1$s help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  %1$s bench [ARGS]    Run util command, equivalent to running 'bench_bitcoin [ARGS]'\"\n+  %1$s test [ARGS]     Run unit test, equivalent to running 'test_bitcoin [ARGS]'\"\n+  %1$s test-gui [ARGS] Run unit test, equivalent to running 'test_bitcoin-qt [ARGS]'\"\n+  %1$s util [ARGS]     Run util command, equivalent to running 'bitcoin-util [ARGS]'\"\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            std::string exe_name{fs::PathToString(fs::PathFromString(argv[0]).filename())};\n+            tfm::format(std::cout, HELP_USAGE, exe_name, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL, exe_name);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Cross-platform wrapper for POSIX execvp function\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to this executable.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success { trace(curpsinfo->pr_psargs); }' -c ...\n+void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call execvp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // Will not actually be reached if execvp succeeds\n+    };\n+\n+    // Try to figure out where wrapper executable is located. This does a",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 232,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "0e4ee158cadc3eb8f6af1b33440ae9a95fe19487",
      "in_reply_to_id": 1953144139,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't have any particular suggestion. I will post here if I come up with some significant simplifications.",
      "created_at": "2025-02-20T15:59:43Z",
      "updated_at": "2025-02-20T15:59:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963862052",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1963862052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 232,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1975744016",
      "pull_request_review_id": 2651321758,
      "id": 1975744016,
      "node_id": "PRRC_kwDOABII5851w3YQ",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "in_reply_to_id": 1963523131,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r196352313\r\n\r\n> nit: unused include\r\n\r\nThanks, fixed!",
      "created_at": "2025-02-28T17:05:42Z",
      "updated_at": "2025-02-28T17:12:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1975744016",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1975744016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1975744225",
      "pull_request_review_id": 2651321758,
      "id": 1975744225,
      "node_id": "PRRC_kwDOABII5851w3bh",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "in_reply_to_id": 1963537775,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963537775\r\n\r\n> `tx` is missing and `test` is part of the internal commands, so:\r\n\r\nThanks, fixed!",
      "created_at": "2025-02-28T17:05:52Z",
      "updated_at": "2025-02-28T17:12:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1975744225",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1975744225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1975744363",
      "pull_request_review_id": 2651321758,
      "id": 1975744363,
      "node_id": "PRRC_kwDOABII5851w3dr",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "in_reply_to_id": 1963540791,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963540791\r\n\r\n> Some leftovers, I guess from previous incarnation of this which did not use `R\"(...)\"`:\r\n\r\nThanks, fixed!",
      "created_at": "2025-02-28T17:05:58Z",
      "updated_at": "2025-02-28T17:12:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1975744363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1975744363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 27,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1975744590",
      "pull_request_review_id": 2651321758,
      "id": 1975744590,
      "node_id": "PRRC_kwDOABII5851w3hO",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <optional>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %2$s [OPTIONS] COMMAND...\n+\n+Commands (run help command for more information):\n+  {gui,daemon,rpc,wallet,test,help}\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\\n\"\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\\n\"\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Command overview:\n+  %1$s gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "in_reply_to_id": 1963558283,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963558283\r\n\r\n> This prints \"bitcoin gui\". One might get the impression that the command is \"bitcoin gui\", whereas it is just \"gui\".\r\n\r\nThanks for pointing that out. Changed to just print the commands like git.",
      "created_at": "2025-02-28T17:06:09Z",
      "updated_at": "2025-02-28T17:13:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1975744590",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1975744590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1975745012",
      "pull_request_review_id": 2651321758,
      "id": 1975745012,
      "node_id": "PRRC_kwDOABII5851w3n0",
      "diff_hunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_EXEC_H\n+#define BITCOIN_UTIL_EXEC_H\n+\n+#include <util/fs.h>\n+\n+#include <string_view>\n+\n+namespace util {\n+//! Cross-platform wrapper for POSIX execvp function.\n+int ExecVp(const char *file, char *const argv[]);\n+//! Return path to current_executable.\n+fs::path GetExePath(std::string_view argv0);",
      "path": "src/util/exec.h",
      "position": null,
      "original_position": 16,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "185c6a416df679ddc7b38750aa4d181c0b043d5b",
      "in_reply_to_id": 1963378155,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1963378155\r\n\r\nThanks, fixed!",
      "created_at": "2025-02-28T17:06:30Z",
      "updated_at": "2025-02-28T17:12:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1975745012",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1975745012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 15,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046847353",
      "pull_request_review_id": 2772381731,
      "id": 2046847353,
      "node_id": "PRRC_kwDOABII5856AGl5",
      "diff_hunk": "@@ -17,6 +17,9 @@ Unpack the files into a directory and run:\n \n - `bin/bitcoin-qt` (GUI) or\n - `bin/bitcoind` (headless)\n+- `bin/bitcoin` (command line interface)\n+\n+The command line interface supports subcommands like `bitcoin gui`, `bitcoin daemon`, and `bitcoin rpc` exposing different functionality. Subcommands can be listed with `bitcoin help`.",
      "path": "doc/README.md",
      "position": null,
      "original_position": 6,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Well, `bitcoind` can also be considered \"command line interface\". Also, there is already `bitcoin-cli` which stands for \"**bitcoin-c**ommand **l**ine **i**nterface\".\r\n\r\nThe additions to `doc/build-osx.md` use \"multifunction command line interface\".\r\n\r\nSomewhat of a bikeshed topic, not a blocker. Feel free to ignore.",
      "created_at": "2025-04-16T12:44:18Z",
      "updated_at": "2025-04-16T13:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046847353",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046847353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046856030",
      "pull_request_review_id": 2772381731,
      "id": 2046856030,
      "node_id": "PRRC_kwDOABII5856AIte",
      "diff_hunk": "@@ -204,6 +204,10 @@ cmake --build build --target deploy\n Bitcoin Core should now be available at `./build/bin/bitcoind`.\n If you compiled support for the GUI, it should be available at `./build/bin/bitcoin-qt`.\n \n+There is also a multifunction command line interface at `./build/bin/bitcoin`\n+supporting subcommands like `bitcoin daemon`, `bitcoin gui`, `bitcoin cli`, and",
      "path": "doc/build-osx.md",
      "position": null,
      "original_position": 5,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nsupporting subcommands like `bitcoin daemon`, `bitcoin gui`, `bitcoin rpc`, and\r\n```",
      "created_at": "2025-04-16T12:48:11Z",
      "updated_at": "2025-04-16T13:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046856030",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046856030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046858451",
      "pull_request_review_id": 2772381731,
      "id": 2046858451,
      "node_id": "PRRC_kwDOABII5856AJTT",
      "diff_hunk": "@@ -113,3 +113,5 @@ To see which CJDNS peers your node is connected to, use `bitcoin-cli -netinfo 4`\n or the `getpeerinfo` RPC (i.e. `bitcoin-cli getpeerinfo`).\n \n You can use the `getnodeaddresses` RPC to fetch a number of CJDNS peers known to your node; run `bitcoin-cli help getnodeaddresses` for details.\n+\n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/cjdns.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n`bitcoin rpc` can also be substituted for `bitcoin-cli -named`.\r\n```",
      "created_at": "2025-04-16T12:49:09Z",
      "updated_at": "2025-04-16T13:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046858451",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046858451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 117,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046859666",
      "pull_request_review_id": 2772381731,
      "id": 2046859666,
      "node_id": "PRRC_kwDOABII5856AJmS",
      "diff_hunk": "@@ -40,6 +42,8 @@ Create a wallet, this automatically imports the public keys:\n $ bitcoin-cli createwallet \"hww\" true true \"\" true true true\n ```\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/external-signer.md",
      "position": 13,
      "original_position": 13,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n`bitcoin rpc` can also be substituted for `bitcoin-cli -named`.\r\n```",
      "created_at": "2025-04-16T12:49:47Z",
      "updated_at": "2025-04-16T13:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046859666",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046859666"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046867140",
      "pull_request_review_id": 2772381731,
      "id": 2046867140,
      "node_id": "PRRC_kwDOABII5856ALbE",
      "diff_hunk": "@@ -15,6 +15,8 @@ The following command, for example, creates a descriptor wallet. More informatio\n $ bitcoin-cli createwallet \"wallet-01\"\n ```\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/managing-wallets.md",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n`bitcoin rpc` can also be substituted for `bitcoin-cli -named`.\r\n```",
      "created_at": "2025-04-16T12:53:19Z",
      "updated_at": "2025-04-16T13:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046867140",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046867140"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 18,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046874717",
      "pull_request_review_id": 2772381731,
      "id": 2046874717,
      "node_id": "PRRC_kwDOABII5856ANRd",
      "diff_hunk": "@@ -31,6 +31,11 @@ Alternately, you can install [Cap'n Proto](https://capnproto.org/) and [libmulti\n \n ## Usage\n \n-`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally after [#10102](https://github.com/bitcoin/bitcoin/pull/10102), `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n-[#19460](https://github.com/bitcoin/bitcoin/pull/19460) also adds a new `bitcoin-node` `-ipcbind` option and a `bitcoind-wallet` `-ipcconnect` option to allow new wallet processes to connect to an existing node process.\n-And [#19461](https://github.com/bitcoin/bitcoin/pull/19461) adds a new `bitcoin-gui` `-ipcconnect` option to allow new GUI processes to connect to an existing node process.\n+Recommended way to use multiprocess binaries is to invoke `bitcoin` CLI like `bitcoin -m daemon -debug=ipc` or `bitcoin -m gui -printtoconsole -debug=ipc`.\n+\n+When the `-m` (`--multiprocess`) option is used the `bitcoin` command will execute multiprocess binaries instead of monolithic ones (`bitcoin-node` of `bitcoind`, and `bitcoin-gui` instead of `bitcoin-qt`). The multiprocess binaries can also be invoked directly, but this is not recommended as they may change or be renamed in the future, and they are not installed in the PATH.",
      "path": "doc/multiprocess.md",
      "position": null,
      "original_position": 20,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nWhen the `-m` (`--multiprocess`) option is used the `bitcoin` command will execute multiprocess binaries instead of monolithic ones (`bitcoin-node` instead of `bitcoind`, and `bitcoin-gui` instead of `bitcoin-qt`). The multiprocess binaries can also be invoked directly, but this is not recommended as they may change or be renamed in the future, and they are not installed in the PATH.\r\n```",
      "created_at": "2025-04-16T12:57:11Z",
      "updated_at": "2025-04-16T13:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046874717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046874717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046878917",
      "pull_request_review_id": 2772381731,
      "id": 2046878917,
      "node_id": "PRRC_kwDOABII5856AOTF",
      "diff_hunk": "@@ -31,6 +31,8 @@ do\n done\n ```\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/multisig-tutorial.md",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see this is in a lot of places, but the first one I saw uses `-named`, which think should be everywhere:\r\n\r\n```suggestion\r\n`bitcoin rpc` can also be substituted for `bitcoin-cli -named`.\r\n```",
      "created_at": "2025-04-16T12:59:30Z",
      "updated_at": "2025-04-16T13:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046878917",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046878917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046879416",
      "pull_request_review_id": 2772381731,
      "id": 2046879416,
      "node_id": "PRRC_kwDOABII5856AOa4",
      "diff_hunk": "@@ -34,6 +34,8 @@ We are going to first create an `offline_wallet` on the offline host. We will th\n }\n ```\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/offline-signing-tutorial.md",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n`bitcoin rpc` can also be substituted for `bitcoin-cli -named`.\r\n```",
      "created_at": "2025-04-16T12:59:47Z",
      "updated_at": "2025-04-16T13:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046879416",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046879416"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046880605",
      "pull_request_review_id": 2772381731,
      "id": 2046880605,
      "node_id": "PRRC_kwDOABII5856AOtd",
      "diff_hunk": "@@ -27,6 +27,8 @@ e.g. for `-onlynet=onion`.\n \n You can use the `getnodeaddresses` RPC to fetch a number of onion peers known to your node; run `bitcoin-cli help getnodeaddresses` for details.\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/tor.md",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n`bitcoin rpc` can also be substituted for `bitcoin-cli -named`.\r\n```",
      "created_at": "2025-04-16T13:00:28Z",
      "updated_at": "2025-04-16T13:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046880605",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046880605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046884628",
      "pull_request_review_id": 2772381731,
      "id": 2046884628,
      "node_id": "PRRC_kwDOABII5856APsU",
      "diff_hunk": "@@ -0,0 +1,11 @@\n+New command line interface\n+--------------------------\n+\n+A new `bitcoin` command line tool has been added to make features more\n+discoverable and convenient to use. The `bitcoin` tool just calls other\n+executables and does not implement any functionality on its own.  Specifically\n+`bitcoin daemon` is a synonym for `bitcoind`, `bitcoin gui` is a synonym for\n+`bitcoin-qt`, and `bitcoin rpc` is a synonym for `bitcoin-cli -named`. Other\n+commands and options can be listed with `bitcoin help`. The new tool does not\n+replace other tools, so all existing command should continue working and there",
      "path": "doc/release-notes-31375.md",
      "position": null,
      "original_position": 10,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nreplace other tools, so all existing commands should continue working and there\r\n```",
      "created_at": "2025-04-16T13:02:51Z",
      "updated_at": "2025-04-16T13:03:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046884628",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2046884628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047076115",
      "pull_request_review_id": 2772762791,
      "id": 2047076115,
      "node_id": "PRRC_kwDOABII5856A-cT",
      "diff_hunk": "@@ -17,6 +17,9 @@ Unpack the files into a directory and run:\n \n - `bin/bitcoin-qt` (GUI) or\n - `bin/bitcoind` (headless)\n+- `bin/bitcoin` (command line interface)\n+\n+The command line interface supports subcommands like `bitcoin gui`, `bitcoin daemon`, and `bitcoin rpc` exposing different functionality. Subcommands can be listed with `bitcoin help`.",
      "path": "doc/README.md",
      "position": null,
      "original_position": 6,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046847353,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046847353\r\n\r\nGood catch, that was unintended and unnecessarily confusing. Just switched to \"`bitcoin` command\" to be precise.",
      "created_at": "2025-04-16T14:32:44Z",
      "updated_at": "2025-04-16T15:02:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2047076115",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047076115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047081920",
      "pull_request_review_id": 2772762791,
      "id": 2047081920,
      "node_id": "PRRC_kwDOABII5856A_3A",
      "diff_hunk": "@@ -204,6 +204,10 @@ cmake --build build --target deploy\n Bitcoin Core should now be available at `./build/bin/bitcoind`.\n If you compiled support for the GUI, it should be available at `./build/bin/bitcoin-qt`.\n \n+There is also a multifunction command line interface at `./build/bin/bitcoin`\n+supporting subcommands like `bitcoin daemon`, `bitcoin gui`, `bitcoin cli`, and",
      "path": "doc/build-osx.md",
      "position": null,
      "original_position": 5,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046856030,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046856030\r\n\r\n:man_facepalming:\r\n\r\nThanks!",
      "created_at": "2025-04-16T14:35:40Z",
      "updated_at": "2025-04-16T15:02:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2047081920",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047081920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047105007",
      "pull_request_review_id": 2772762791,
      "id": 2047105007,
      "node_id": "PRRC_kwDOABII5856BFfv",
      "diff_hunk": "@@ -113,3 +113,5 @@ To see which CJDNS peers your node is connected to, use `bitcoin-cli -netinfo 4`\n or the `getpeerinfo` RPC (i.e. `bitcoin-cli getpeerinfo`).\n \n You can use the `getnodeaddresses` RPC to fetch a number of CJDNS peers known to your node; run `bitcoin-cli help getnodeaddresses` for details.\n+\n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/cjdns.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046858451,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same here (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046878917)\r\n",
      "created_at": "2025-04-16T14:46:23Z",
      "updated_at": "2025-04-16T15:02:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2047105007",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047105007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 117,
      "original_line": 117,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047106685",
      "pull_request_review_id": 2772762791,
      "id": 2047106685,
      "node_id": "PRRC_kwDOABII5856BF59",
      "diff_hunk": "@@ -40,6 +42,8 @@ Create a wallet, this automatically imports the public keys:\n $ bitcoin-cli createwallet \"hww\" true true \"\" true true true\n ```\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/external-signer.md",
      "position": 13,
      "original_position": 13,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046859666,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same here (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046878917)\r\n",
      "created_at": "2025-04-16T14:47:18Z",
      "updated_at": "2025-04-16T15:02:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2047106685",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047106685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047106880",
      "pull_request_review_id": 2772762791,
      "id": 2047106880,
      "node_id": "PRRC_kwDOABII5856BF9A",
      "diff_hunk": "@@ -15,6 +15,8 @@ The following command, for example, creates a descriptor wallet. More informatio\n $ bitcoin-cli createwallet \"wallet-01\"\n ```\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/managing-wallets.md",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046867140,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same here (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046878917)\r\n",
      "created_at": "2025-04-16T14:47:25Z",
      "updated_at": "2025-04-16T15:02:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2047106880",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047106880"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 18,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047116451",
      "pull_request_review_id": 2772762791,
      "id": 2047116451,
      "node_id": "PRRC_kwDOABII5856BISj",
      "diff_hunk": "@@ -31,6 +31,11 @@ Alternately, you can install [Cap'n Proto](https://capnproto.org/) and [libmulti\n \n ## Usage\n \n-`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally after [#10102](https://github.com/bitcoin/bitcoin/pull/10102), `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n-[#19460](https://github.com/bitcoin/bitcoin/pull/19460) also adds a new `bitcoin-node` `-ipcbind` option and a `bitcoind-wallet` `-ipcconnect` option to allow new wallet processes to connect to an existing node process.\n-And [#19461](https://github.com/bitcoin/bitcoin/pull/19461) adds a new `bitcoin-gui` `-ipcconnect` option to allow new GUI processes to connect to an existing node process.\n+Recommended way to use multiprocess binaries is to invoke `bitcoin` CLI like `bitcoin -m daemon -debug=ipc` or `bitcoin -m gui -printtoconsole -debug=ipc`.\n+\n+When the `-m` (`--multiprocess`) option is used the `bitcoin` command will execute multiprocess binaries instead of monolithic ones (`bitcoin-node` of `bitcoind`, and `bitcoin-gui` instead of `bitcoin-qt`). The multiprocess binaries can also be invoked directly, but this is not recommended as they may change or be renamed in the future, and they are not installed in the PATH.",
      "path": "doc/multiprocess.md",
      "position": null,
      "original_position": 20,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046874717,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046874717\r\n\r\nThanks, fixed\r\n",
      "created_at": "2025-04-16T14:52:14Z",
      "updated_at": "2025-04-16T15:02:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2047116451",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047116451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047117845",
      "pull_request_review_id": 2772762791,
      "id": 2047117845,
      "node_id": "PRRC_kwDOABII5856BIoV",
      "diff_hunk": "@@ -31,6 +31,8 @@ do\n done\n ```\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/multisig-tutorial.md",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046878917,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046878917\r\n\r\nI feel like adding `-named` here would be confusing and also misleading since `-named` is not mentioned above, so mentioning it here would imply `bitcoin rpc` could not be substituted for the `bitcoin-cli` commands here when this is not the case. The only actual case where `bitcoin rpc` can't be substituted for `bitcoin-cli` is when you need to pass a string parameter by position and the string parameter contains an `=` character, otherwise `-named` is just a generalization and more flexible way to use the cli.",
      "created_at": "2025-04-16T14:52:50Z",
      "updated_at": "2025-04-16T15:02:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2047117845",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047117845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047124809",
      "pull_request_review_id": 2772762791,
      "id": 2047124809,
      "node_id": "PRRC_kwDOABII5856BKVJ",
      "diff_hunk": "@@ -34,6 +34,8 @@ We are going to first create an `offline_wallet` on the offline host. We will th\n }\n ```\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/offline-signing-tutorial.md",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046879416,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same here (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046878917)\r\n",
      "created_at": "2025-04-16T14:56:21Z",
      "updated_at": "2025-04-16T15:02:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2047124809",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047124809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047125078",
      "pull_request_review_id": 2772762791,
      "id": 2047125078,
      "node_id": "PRRC_kwDOABII5856BKZW",
      "diff_hunk": "@@ -27,6 +27,8 @@ e.g. for `-onlynet=onion`.\n \n You can use the `getnodeaddresses` RPC to fetch a number of onion peers known to your node; run `bitcoin-cli help getnodeaddresses` for details.\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/tor.md",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046880605,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Same here (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2046878917)\r\n",
      "created_at": "2025-04-16T14:56:29Z",
      "updated_at": "2025-04-16T15:02:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2047125078",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2047125078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2048440135",
      "pull_request_review_id": 2774913141,
      "id": 2048440135,
      "node_id": "PRRC_kwDOABII5856GLdH",
      "diff_hunk": "@@ -17,6 +17,9 @@ Unpack the files into a directory and run:\n \n - `bin/bitcoin-qt` (GUI) or\n - `bin/bitcoind` (headless)\n+- `bin/bitcoin` (command line interface)\n+\n+The command line interface supports subcommands like `bitcoin gui`, `bitcoin daemon`, and `bitcoin rpc` exposing different functionality. Subcommands can be listed with `bitcoin help`.",
      "path": "doc/README.md",
      "position": null,
      "original_position": 6,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046847353,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe also:\r\n\r\n```diff\r\n- - `bin/bitcoin` (command line interface)\r\n+ - `bin/bitcoin` (wrapper command)\r\n```\r\nif you retouch",
      "created_at": "2025-04-17T07:55:53Z",
      "updated_at": "2025-04-17T07:55:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2048440135",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2048440135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055703942",
      "pull_request_review_id": 2786731277,
      "id": 2055703942,
      "node_id": "PRRC_kwDOABII5856h42G",
      "diff_hunk": "@@ -41,6 +41,11 @@ By default when `-DENABLE_IPC=ON` is enabled, the libmultiprocess sources at [..\n \n ## Usage\n \n-`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally after [#10102](https://github.com/bitcoin/bitcoin/pull/10102), `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n-[#19460](https://github.com/bitcoin/bitcoin/pull/19460) also adds a new `bitcoin-node` `-ipcbind` option and a `bitcoind-wallet` `-ipcconnect` option to allow new wallet processes to connect to an existing node process.\n-And [#19461](https://github.com/bitcoin/bitcoin/pull/19461) adds a new `bitcoin-gui` `-ipcconnect` option to allow new GUI processes to connect to an existing node process.\n+Recommended way to use multiprocess binaries is to invoke `bitcoin` CLI like `bitcoin -m daemon -debug=ipc` or `bitcoin -m gui -printtoconsole -debug=ipc`.\n+\n+When the `-m` (`--multiprocess`) option is used the `bitcoin` command will execute multiprocess binaries instead of monolithic ones (`bitcoin-node` instead of `bitcoind`, and `bitcoin-gui` instead of `bitcoin-qt`). The multiprocess binaries can also be invoked directly, but this is not recommended as they may change or be renamed in the future, and they are not installed in the PATH.\n+\n+The multiprocess binaries currently function the same as the monolithic binaries, except they support an `-ipcbind` option.\n+\n+In the future, after [#10102](https://github.com/bitcoin/bitcoin/pull/10102) they will have other differences. Specficially `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments. [#19460](https://github.com/bitcoin/bitcoin/pull/19460) also adds a new `bitcoind-wallet -ipcconnect` option to allow new wallet processes to connect to an existing node process.",
      "path": "doc/multiprocess.md",
      "position": null,
      "original_position": 24,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Specficially → Specifically\r\n\r\nAlso, `bitcoin*d*-wallet` seems odd.",
      "created_at": "2025-04-23T10:00:40Z",
      "updated_at": "2025-04-23T10:00:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2055703942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055703942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073194474",
      "pull_request_review_id": 2814380926,
      "id": 2073194474,
      "node_id": "PRRC_kwDOABII5857km_q",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+fs::path GetExePath(std::string_view argv0)\n+{\n+    // Try to figure out where executable is located. This does a simplified\n+    // search that won't work perfectly on every platform and doesn't need to,\n+    // as it is only currently being used in a convenience wrapper binary to try\n+    // to prioritize locally built or installed executables over system\n+    // executables.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    // If argv0 doesn't contain a path separator, it was invoked from the system\n+    // PATH and can be searched for there.\n+    if (!argv0_path.has_parent_path()) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        path = fs::path{module_path};\n+    }\n+#endif",
      "path": "src/util/exec.cpp",
      "position": 71,
      "original_position": 103,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "9ac787c7a85c3d2ff407bf149b982fc347537b12",
      "in_reply_to_id": null,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it would be good to check that the file actually exists here. If in future releases more commands are added, and the user applies a command for it on a binary directory with the old version, the error is a bit terse. E.g. removing bitcoind will currently result in:\r\n```\r\n./bitcoin daemon --signet\r\nError: execvp failed to execute '/home/drgrid/bitcoin/build_dev_mode_clang/bin/bitcoind': No such file or directory\r\nTry './bitcoin --help' for more information.\r\n```\r\nWe already print \"Unrecognized command\" if the command doesn't exist. Maybe print something along the lines of \"Could not execute command. Ensure the latest version is installed.\"",
      "created_at": "2025-05-05T10:21:03Z",
      "updated_at": "2025-05-05T10:32:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2073194474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2073194474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077299356",
      "pull_request_review_id": 2821205668,
      "id": 2077299356,
      "node_id": "PRRC_kwDOABII58570RKc",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());",
      "path": "src/util/exec.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Potential for use after free?\r\n\r\nThis relies on `escaped_args`-elements being moved around with the backing `char`-buffers remaining in place as the vector is resized. It probably holds for all stdlib-implementations by now, but might be slightly safer to declare and fill `new_argv` after this loop, or resize `escaped_args` ahead of the loop.\r\n\r\nMaybe there's some standardeese reason this is guaranteed to work that I'm unaware of.\r\n\r\nCould use `const_cast`?",
      "created_at": "2025-05-07T10:13:19Z",
      "updated_at": "2025-05-07T14:42:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077299356",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077299356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077503435",
      "pull_request_review_id": 2821205668,
      "id": 2077503435,
      "node_id": "PRRC_kwDOABII58571C_L",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+fs::path GetExePath(std::string_view argv0)\n+{\n+    // Try to figure out where executable is located. This does a simplified\n+    // search that won't work perfectly on every platform and doesn't need to,\n+    // as it is only currently being used in a convenience wrapper binary to try\n+    // to prioritize locally built or installed executables over system\n+    // executables.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    // If argv0 doesn't contain a path separator, it was invoked from the system\n+    // PATH and can be searched for there.\n+    if (!argv0_path.has_parent_path()) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;",
      "path": "src/util/exec.cpp",
      "position": 58,
      "original_position": 90,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Could use util/string.h:\r\n```suggestion\r\n            for (const auto& element : Split(std::string_view{path_env}, ':')) {\r\n                fs::path candidate = fs::path{std::string_view{element.data(), element.size()}} / argv0_path;\r\n```",
      "created_at": "2025-05-07T12:22:47Z",
      "updated_at": "2025-05-07T14:42:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077503435",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077503435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": 55,
      "original_start_line": 87,
      "start_side": "RIGHT",
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077515690",
      "pull_request_review_id": 2821205668,
      "id": 2077515690,
      "node_id": "PRRC_kwDOABII58571F-q",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])",
      "path": "src/util/exec.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\nCould keep style consistent with function body rather than wrapped function.\r\n```suggestion\r\nint ExecVp(const char* file, char* const argv[])\r\n```",
      "created_at": "2025-05-07T12:30:05Z",
      "updated_at": "2025-05-07T14:42:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077515690",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077515690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077517153",
      "pull_request_review_id": 2821205668,
      "id": 2077517153,
      "node_id": "PRRC_kwDOABII58571GVh",
      "diff_hunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  bench [ARGS]      Run bench command, equivalent to running 'bench_bitcoin [ARGS]'.\n+  chainstate [ARGS] Run bitcoin kernel chainstate util, equivalent to running 'bitcoin-chainstate [ARGS]'.\n+  test [ARGS]       Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+  test-gui [ARGS]   Run GUI unit tests, equivalent to running 'test_bitcoin-qt [ARGS]'.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"chainstate\") {\n+            args.emplace_back(\"bitcoin-chainstate\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to wrapper_argv0.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success  /pid == $target/ { trace(curpsinfo->pr_psargs); }' -c ...\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call ExecVp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (util::ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // In practice, this line should not be reached if execvp succeeds\n+    };\n+\n+    // Get the wrapper executable path.\n+    const fs::path wrapper_path{util::GetExePath(wrapper_argv0)};\n+\n+    // Try to resolve any symlinks and figure out the directory containing the wrapper executable.\n+    std::error_code ec;\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+\n+    // Get path of the executable to be invoked.\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // Decide whether to fall back to the operating system to search for the\n+    // specified executable. Avoid doing this if it looks like the wrapper\n+    // executable was invoked by path, rather than by search, to avoid\n+    // unintentionally launching system executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool fallback_os_search{!fs::PathFromString(std::string{wrapper_argv0}).has_parent_path()};\n+\n+    // If wrapper is installed in a bin/ directory, look for target executable\n+    // in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||\n+    // Otherwise look for target executable next to current wrapper\n+    try_exec(wrapper_dir / arg0.filename(), fallback_os_search) ||\n+    // Otherwise just look on the system path.\n+    (fallback_os_search && try_exec(arg0.filename(), false));\n+};",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 196,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n}\r\n```",
      "created_at": "2025-05-07T12:30:55Z",
      "updated_at": "2025-05-07T14:42:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077517153",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077517153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077548018",
      "pull_request_review_id": 2821205668,
      "id": 2077548018,
      "node_id": "PRRC_kwDOABII58571N3y",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+fs::path GetExePath(std::string_view argv0)\n+{\n+    // Try to figure out where executable is located. This does a simplified\n+    // search that won't work perfectly on every platform and doesn't need to,\n+    // as it is only currently being used in a convenience wrapper binary to try\n+    // to prioritize locally built or installed executables over system\n+    // executables.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    // If argv0 doesn't contain a path separator, it was invoked from the system\n+    // PATH and can be searched for there.\n+    if (!argv0_path.has_parent_path()) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }",
      "path": "src/util/exec.cpp",
      "position": 65,
      "original_position": 97,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Could verify we succeeded:\r\n```suggestion\r\n        assert(path.has_parent_path()); // Failed resolving directory.\r\n    }\r\n```",
      "created_at": "2025-05-07T12:47:00Z",
      "updated_at": "2025-05-07T14:42:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077548018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077548018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077560730",
      "pull_request_review_id": 2821205668,
      "id": 2077560730,
      "node_id": "PRRC_kwDOABII58571Q-a",
      "diff_hunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  bench [ARGS]      Run bench command, equivalent to running 'bench_bitcoin [ARGS]'.\n+  chainstate [ARGS] Run bitcoin kernel chainstate util, equivalent to running 'bitcoin-chainstate [ARGS]'.\n+  test [ARGS]       Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+  test-gui [ARGS]   Run GUI unit tests, equivalent to running 'test_bitcoin-qt [ARGS]'.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"chainstate\") {\n+            args.emplace_back(\"bitcoin-chainstate\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to wrapper_argv0.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success  /pid == $target/ { trace(curpsinfo->pr_psargs); }' -c ...\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call ExecVp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (util::ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // In practice, this line should not be reached if execvp succeeds\n+    };\n+\n+    // Get the wrapper executable path.\n+    const fs::path wrapper_path{util::GetExePath(wrapper_argv0)};\n+\n+    // Try to resolve any symlinks and figure out the directory containing the wrapper executable.\n+    std::error_code ec;\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+\n+    // Get path of the executable to be invoked.\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // Decide whether to fall back to the operating system to search for the\n+    // specified executable. Avoid doing this if it looks like the wrapper\n+    // executable was invoked by path, rather than by search, to avoid\n+    // unintentionally launching system executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool fallback_os_search{!fs::PathFromString(std::string{wrapper_argv0}).has_parent_path()};\n+\n+    // If wrapper is installed in a bin/ directory, look for target executable\n+    // in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||\n+    // Otherwise look for target executable next to current wrapper\n+    try_exec(wrapper_dir / arg0.filename(), fallback_os_search) ||\n+    // Otherwise just look on the system path.\n+    (fallback_os_search && try_exec(arg0.filename(), false));",
      "path": "src/bitcoin.cpp",
      "position": 203,
      "original_position": 195,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would be nice if we printed an error when failing to execute anything at all.\r\n\r\nEdit: Oh, I see now, we throw an exception from the lambda upon failing. Not a fan of exceptions but that ship has sailed.\r\n\r\n(Nice lisp code. :) )",
      "created_at": "2025-05-07T12:53:18Z",
      "updated_at": "2025-05-07T17:33:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077560730",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077560730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 203,
      "original_line": 203,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077565200",
      "pull_request_review_id": 2821205668,
      "id": 2077565200,
      "node_id": "PRRC_kwDOABII58571SEQ",
      "diff_hunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  bench [ARGS]      Run bench command, equivalent to running 'bench_bitcoin [ARGS]'.\n+  chainstate [ARGS] Run bitcoin kernel chainstate util, equivalent to running 'bitcoin-chainstate [ARGS]'.\n+  test [ARGS]       Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+  test-gui [ARGS]   Run GUI unit tests, equivalent to running 'test_bitcoin-qt [ARGS]'.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"chainstate\") {\n+            args.emplace_back(\"bitcoin-chainstate\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to wrapper_argv0.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success  /pid == $target/ { trace(curpsinfo->pr_psargs); }' -c ...\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call ExecVp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (util::ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // In practice, this line should not be reached if execvp succeeds\n+    };\n+\n+    // Get the wrapper executable path.\n+    const fs::path wrapper_path{util::GetExePath(wrapper_argv0)};\n+\n+    // Try to resolve any symlinks and figure out the directory containing the wrapper executable.\n+    std::error_code ec;\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+\n+    // Get path of the executable to be invoked.\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // Decide whether to fall back to the operating system to search for the\n+    // specified executable. Avoid doing this if it looks like the wrapper\n+    // executable was invoked by path, rather than by search, to avoid\n+    // unintentionally launching system executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool fallback_os_search{!fs::PathFromString(std::string{wrapper_argv0}).has_parent_path()};\n+\n+    // If wrapper is installed in a bin/ directory, look for target executable\n+    // in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 191,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Wrap in `#ifdef WIN32`?",
      "created_at": "2025-05-07T12:54:31Z",
      "updated_at": "2025-05-07T14:42:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077565200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077565200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 190,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077722254",
      "pull_request_review_id": 2821205668,
      "id": 2077722254,
      "node_id": "PRRC_kwDOABII585714aO",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {",
      "path": "src/util/exec.cpp",
      "position": 28,
      "original_position": 25,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is `argv` guaranteed to always end with ~an empty string~ `nullptr`?",
      "created_at": "2025-05-07T14:07:26Z",
      "updated_at": "2025-05-07T17:20:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077722254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077722254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077754724",
      "pull_request_review_id": 2821963515,
      "id": 2077754724,
      "node_id": "PRRC_kwDOABII58572AVk",
      "diff_hunk": "@@ -62,6 +62,8 @@ bitcoin-cli -named createwallet wallet_name=mywallet load_on_startup=true\n bitcoin-cli -named createwallet mywallet load_on_startup=true\n ```",
      "path": "doc/JSON-RPC-interface.md",
      "position": 2,
      "original_position": 2,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "b0989e3095f1964fdb523cdd4b44f0b198417014",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In \"doc: Mention bitcoin wrapper executable in documentation\"  b0989e3095f1964fdb523cdd4b44f0b198417014\r\n\r\nI think it would be better to provide a single usage instruction for users. Otherwise, having separate instructions for both `bin/bitcoin` and `bin/bitcoind` in all places could be confusing.\r\n\r\nInstead, I suggest we standardize on `bin/bitcoin` in all places, while still supporting the previous one for backward compatibility. \r\n\r\nThe release notes have clearly indicate this change to users.\r\n\r\n",
      "created_at": "2025-05-07T14:22:48Z",
      "updated_at": "2025-05-07T14:24:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077754724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077754724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077800405",
      "pull_request_review_id": 2821205668,
      "id": 2077800405,
      "node_id": "PRRC_kwDOABII58572LfV",
      "diff_hunk": "",
      "path": "src/bitcoin.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "original_commit_id": "f2c003c927557f97dafa263e6cbb90a4e3421842",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Child executable names leak through\r\n\r\n```\r\n₿ ./build/bin/bitcoin rpc --help\r\nBitcoin Core RPC client version v29.99.0-81c0b9edfe53\r\n\r\nThe bitcoin-cli utility provides a command line interface to interact with a Bitcoin Core RPC server.\r\n\r\nIt can be used to query network information, manage wallets, create or broadcast transactions, and control the Bitcoin Core server.\r\n\r\nUse the \"help\" command to list all commands. Use \"help <command>\" to show help for that command.\r\nThe -named option allows you to specify parameters using the key=value format, eliminating the need to pass unused positional parameters.\r\n\r\nUsage: bitcoin-cli [options] <command> [params]\r\n...\r\n```\r\nSeems okay for now, but would be nice if we sent in an extra `-from_wrapper` arg/env var so they detect being launched by the wrapper and output help with the wrapper invocation instead.",
      "created_at": "2025-05-07T14:41:42Z",
      "updated_at": "2025-05-07T14:42:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077800405",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2077800405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078042033",
      "pull_request_review_id": 2822464858,
      "id": 2078042033,
      "node_id": "PRRC_kwDOABII58573Gex",
      "diff_hunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f2c003c927557f97dafa263e6cbb90a4e3421842",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "On `master`, when `-daemon` is used to start `bitcoind`, it means logs won't be printed to the console. I believe that's also the literal meaning of  daemon: https://en.wikipedia.org/wiki/Daemon_(computing)\r\nThis PR changes makes the keyword ambiguous to mean bitcoin node executable and start the executable in the background so doing the two things at once is now a bit awkard  `bitcoin daemon -daemon`.\r\n\r\nShould it be `node` instead?\r\n\r\nSo that we can distinguish the two and have a cleaner command `bitcoin node -daemon`.\r\n\r\n",
      "created_at": "2025-05-07T16:33:19Z",
      "updated_at": "2025-05-07T16:38:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2078042033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2078042033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2079028306",
      "pull_request_review_id": 2824026372,
      "id": 2079028306,
      "node_id": "PRRC_kwDOABII585763RS",
      "diff_hunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f2c003c927557f97dafa263e6cbb90a4e3421842",
      "in_reply_to_id": 2078042033,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "TIL we have a `-daemon` option. Indeed we'll have to pick a different term here.",
      "created_at": "2025-05-08T06:56:47Z",
      "updated_at": "2025-05-08T06:56:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2079028306",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2079028306"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2079086002",
      "pull_request_review_id": 2824120336,
      "id": 2079086002,
      "node_id": "PRRC_kwDOABII58577FWy",
      "diff_hunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f2c003c927557f97dafa263e6cbb90a4e3421842",
      "in_reply_to_id": 2078042033,
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it is fine as is to be honest. `bitcoind -daemon` already means the same thing (albeit abbreviated).",
      "created_at": "2025-05-08T07:36:58Z",
      "updated_at": "2025-05-08T07:36:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2079086002",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2079086002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2079093221",
      "pull_request_review_id": 2824132023,
      "id": 2079093221,
      "node_id": "PRRC_kwDOABII58577HHl",
      "diff_hunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f2c003c927557f97dafa263e6cbb90a4e3421842",
      "in_reply_to_id": 2078042033,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think `-daemon` detaches, so you can't ctrl + c it.\r\n\r\n(just checked, that's indeed what it does)",
      "created_at": "2025-05-08T07:40:45Z",
      "updated_at": "2025-05-08T07:41:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2079093221",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2079093221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2081139299",
      "pull_request_review_id": 2827362266,
      "id": 2081139299,
      "node_id": "PRRC_kwDOABII5858C6pj",
      "diff_hunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f2c003c927557f97dafa263e6cbb90a4e3421842",
      "in_reply_to_id": 2078042033,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> `bitcoin daemon -daemon`\r\n\r\nGood point. Indeed I find that super not-intuitive, I did not think about that before. I would strongly prefer to rename it to `node`, e.g. `bitcoin node -daemon`.\r\n\r\n> `bitcoind -daemon` already means the same thing\r\n\r\nEh, but somehow I don't find it so perplexing. Or even if it is as confusing, now we have a chance to pick better names.",
      "created_at": "2025-05-09T07:55:24Z",
      "updated_at": "2025-05-09T07:55:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2081139299",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2081139299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2081493334",
      "pull_request_review_id": 2827988490,
      "id": 2081493334,
      "node_id": "PRRC_kwDOABII5858ERFW",
      "diff_hunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "f2c003c927557f97dafa263e6cbb90a4e3421842",
      "in_reply_to_id": 2078042033,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good catch! I do think daemon could be ok but I agree node is better. I will update this (and I also want to look into @theStack's suggestion to use subprocess.h, which I was unaware of and could simplify the PR)",
      "created_at": "2025-05-09T11:38:44Z",
      "updated_at": "2025-05-09T11:38:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2081493334",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2081493334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085288505",
      "pull_request_review_id": 2834221930,
      "id": 2085288505,
      "node_id": "PRRC_kwDOABII5858Svo5",
      "diff_hunk": "@@ -17,6 +17,9 @@ Unpack the files into a directory and run:\n \n - `bin/bitcoin-qt` (GUI) or\n - `bin/bitcoind` (headless)\n+- `bin/bitcoin` (command line interface)\n+\n+The command line interface supports subcommands like `bitcoin gui`, `bitcoin daemon`, and `bitcoin rpc` exposing different functionality. Subcommands can be listed with `bitcoin help`.",
      "path": "doc/README.md",
      "position": null,
      "original_position": 6,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046847353,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2048440135\r\n\r\n> if you retouch\r\n\r\nThanks, updated\r\n",
      "created_at": "2025-05-12T19:08:05Z",
      "updated_at": "2025-05-12T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085288505",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085288505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 20,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085292210",
      "pull_request_review_id": 2834221930,
      "id": 2085292210,
      "node_id": "PRRC_kwDOABII5858Swiy",
      "diff_hunk": "@@ -41,6 +41,11 @@ By default when `-DENABLE_IPC=ON` is enabled, the libmultiprocess sources at [..\n \n ## Usage\n \n-`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally after [#10102](https://github.com/bitcoin/bitcoin/pull/10102), `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n-[#19460](https://github.com/bitcoin/bitcoin/pull/19460) also adds a new `bitcoin-node` `-ipcbind` option and a `bitcoind-wallet` `-ipcconnect` option to allow new wallet processes to connect to an existing node process.\n-And [#19461](https://github.com/bitcoin/bitcoin/pull/19461) adds a new `bitcoin-gui` `-ipcconnect` option to allow new GUI processes to connect to an existing node process.\n+Recommended way to use multiprocess binaries is to invoke `bitcoin` CLI like `bitcoin -m daemon -debug=ipc` or `bitcoin -m gui -printtoconsole -debug=ipc`.\n+\n+When the `-m` (`--multiprocess`) option is used the `bitcoin` command will execute multiprocess binaries instead of monolithic ones (`bitcoin-node` instead of `bitcoind`, and `bitcoin-gui` instead of `bitcoin-qt`). The multiprocess binaries can also be invoked directly, but this is not recommended as they may change or be renamed in the future, and they are not installed in the PATH.\n+\n+The multiprocess binaries currently function the same as the monolithic binaries, except they support an `-ipcbind` option.\n+\n+In the future, after [#10102](https://github.com/bitcoin/bitcoin/pull/10102) they will have other differences. Specficially `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments. [#19460](https://github.com/bitcoin/bitcoin/pull/19460) also adds a new `bitcoind-wallet -ipcconnect` option to allow new wallet processes to connect to an existing node process.",
      "path": "doc/multiprocess.md",
      "position": null,
      "original_position": 24,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2055703942,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2055703942\r\n\r\nThanks, fixed both",
      "created_at": "2025-05-12T19:10:59Z",
      "updated_at": "2025-05-12T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085292210",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085292210"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085306496",
      "pull_request_review_id": 2834221930,
      "id": 2085306496,
      "node_id": "PRRC_kwDOABII5858S0CA",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+fs::path GetExePath(std::string_view argv0)\n+{\n+    // Try to figure out where executable is located. This does a simplified\n+    // search that won't work perfectly on every platform and doesn't need to,\n+    // as it is only currently being used in a convenience wrapper binary to try\n+    // to prioritize locally built or installed executables over system\n+    // executables.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    // If argv0 doesn't contain a path separator, it was invoked from the system\n+    // PATH and can be searched for there.\n+    if (!argv0_path.has_parent_path()) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+#else\n+    wchar_t module_path[MAX_PATH];\n+    if (GetModuleFileNameW(nullptr, module_path, MAX_PATH) > 0) {\n+        path = fs::path{module_path};\n+    }\n+#endif",
      "path": "src/util/exec.cpp",
      "position": 71,
      "original_position": 103,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "9ac787c7a85c3d2ff407bf149b982fc347537b12",
      "in_reply_to_id": 2073194474,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2073194474\r\n\r\nAgree it would be nice to add a friendlier error message that would suggest how to fix the problem. Added this to the list of followups in the PR description that could make the command nicer & easier to use. My goal is to start off with the simplest working implementation and add more niceties from there.",
      "created_at": "2025-05-12T19:21:39Z",
      "updated_at": "2025-05-12T20:58:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085306496",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085306496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085322199",
      "pull_request_review_id": 2834221930,
      "id": 2085322199,
      "node_id": "PRRC_kwDOABII5858S33X",
      "diff_hunk": "@@ -62,6 +62,8 @@ bitcoin-cli -named createwallet wallet_name=mywallet load_on_startup=true\n bitcoin-cli -named createwallet mywallet load_on_startup=true\n ```",
      "path": "doc/JSON-RPC-interface.md",
      "position": 2,
      "original_position": 2,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "b0989e3095f1964fdb523cdd4b44f0b198417014",
      "in_reply_to_id": 2077754724,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think it would be better to provide a single usage instruction for users. Otherwise, having separate instructions for both `bin/bitcoin` and `bin/bitcoind` in all places could be confusing.\r\n\r\nIt seems like it could be more confusing to not mention one of the alternatives than just describe both.\r\n\r\nIf there's something specific that is confusing, would probably want to clarify by adding to the documentation instead of deleting things. Or if you think it is better to just not mention the new wrapper for now I'd also be fine with that, too.",
      "created_at": "2025-05-12T19:33:23Z",
      "updated_at": "2025-05-12T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085322199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085322199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085351896",
      "pull_request_review_id": 2834221930,
      "id": 2085351896,
      "node_id": "PRRC_kwDOABII5858S_HY",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());",
      "path": "src/util/exec.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2077299356,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077299356\r\n\r\nGood catch. If the vector was reallocated and string objects were using a small string optimization, the previous code could easily result in passing pointers to already freed memory. Fixed by adding a separate loop to construct new_argv. Also removed the c cast as that was unnecessary.",
      "created_at": "2025-05-12T19:56:33Z",
      "updated_at": "2025-05-12T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085351896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085351896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085359836",
      "pull_request_review_id": 2834221930,
      "id": 2085359836,
      "node_id": "PRRC_kwDOABII5858TBDc",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+fs::path GetExePath(std::string_view argv0)\n+{\n+    // Try to figure out where executable is located. This does a simplified\n+    // search that won't work perfectly on every platform and doesn't need to,\n+    // as it is only currently being used in a convenience wrapper binary to try\n+    // to prioritize locally built or installed executables over system\n+    // executables.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    // If argv0 doesn't contain a path separator, it was invoked from the system\n+    // PATH and can be searched for there.\n+    if (!argv0_path.has_parent_path()) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;",
      "path": "src/util/exec.cpp",
      "position": 58,
      "original_position": 90,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2077503435,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077503435\r\n\r\n> nit: Could use util/string.h:\r\n\r\nThat's slightly simpler, but doesn't seem enough to want to construct and unneeded vector and pull in an extra  dependency here. Worth keeping in mind if this code needs to be extended though.",
      "created_at": "2025-05-12T20:02:51Z",
      "updated_at": "2025-05-12T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085359836",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085359836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": 55,
      "original_start_line": 87,
      "start_side": "RIGHT",
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085361665",
      "pull_request_review_id": 2834221930,
      "id": 2085361665,
      "node_id": "PRRC_kwDOABII5858TBgB",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])",
      "path": "src/util/exec.cpp",
      "position": null,
      "original_position": 18,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2077515690,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077515690\r\n\r\n> nit: Could keep style consistent with function body rather than wrapped function.\r\n\r\nThanks, I can never remember where the spaces go.\r\n",
      "created_at": "2025-05-12T20:04:13Z",
      "updated_at": "2025-05-12T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085361665",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085361665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085362931",
      "pull_request_review_id": 2834221930,
      "id": 2085362931,
      "node_id": "PRRC_kwDOABII5858TBzz",
      "diff_hunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  bench [ARGS]      Run bench command, equivalent to running 'bench_bitcoin [ARGS]'.\n+  chainstate [ARGS] Run bitcoin kernel chainstate util, equivalent to running 'bitcoin-chainstate [ARGS]'.\n+  test [ARGS]       Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+  test-gui [ARGS]   Run GUI unit tests, equivalent to running 'test_bitcoin-qt [ARGS]'.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"chainstate\") {\n+            args.emplace_back(\"bitcoin-chainstate\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to wrapper_argv0.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success  /pid == $target/ { trace(curpsinfo->pr_psargs); }' -c ...\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call ExecVp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (util::ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // In practice, this line should not be reached if execvp succeeds\n+    };\n+\n+    // Get the wrapper executable path.\n+    const fs::path wrapper_path{util::GetExePath(wrapper_argv0)};\n+\n+    // Try to resolve any symlinks and figure out the directory containing the wrapper executable.\n+    std::error_code ec;\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+\n+    // Get path of the executable to be invoked.\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // Decide whether to fall back to the operating system to search for the\n+    // specified executable. Avoid doing this if it looks like the wrapper\n+    // executable was invoked by path, rather than by search, to avoid\n+    // unintentionally launching system executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool fallback_os_search{!fs::PathFromString(std::string{wrapper_argv0}).has_parent_path()};\n+\n+    // If wrapper is installed in a bin/ directory, look for target executable\n+    // in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||\n+    // Otherwise look for target executable next to current wrapper\n+    try_exec(wrapper_dir / arg0.filename(), fallback_os_search) ||\n+    // Otherwise just look on the system path.\n+    (fallback_os_search && try_exec(arg0.filename(), false));\n+};",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 196,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2077517153,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077517153\r\n\r\nGood catch, removed",
      "created_at": "2025-05-12T20:05:15Z",
      "updated_at": "2025-05-12T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085362931",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085362931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085373623",
      "pull_request_review_id": 2834221930,
      "id": 2085373623,
      "node_id": "PRRC_kwDOABII5858TEa3",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+fs::path GetExePath(std::string_view argv0)\n+{\n+    // Try to figure out where executable is located. This does a simplified\n+    // search that won't work perfectly on every platform and doesn't need to,\n+    // as it is only currently being used in a convenience wrapper binary to try\n+    // to prioritize locally built or installed executables over system\n+    // executables.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    // If argv0 doesn't contain a path separator, it was invoked from the system\n+    // PATH and can be searched for there.\n+    if (!argv0_path.has_parent_path()) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }",
      "path": "src/util/exec.cpp",
      "position": 65,
      "original_position": 97,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2077548018,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077548018\r\n\r\n> nit: Could verify we succeeded:\r\n\r\nGood point. An assert seems extreme here since there could be some OS variation, but this case wasn't being handled well in the calling function and could do things like try to execute the same path twice. Add better handling now in caller.\r\n",
      "created_at": "2025-05-12T20:13:31Z",
      "updated_at": "2025-05-12T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085373623",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085373623"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085376112",
      "pull_request_review_id": 2834221930,
      "id": 2085376112,
      "node_id": "PRRC_kwDOABII5858TFBw",
      "diff_hunk": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  daemon [ARGS]  Start daemon, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  help [-a]      Show this help message. Include -a or --all to show additional internal commands.\n+)\";\n+\n+static constexpr auto HELP_INTERNAL = R\"(\n+Additional internal commands:\n+  bench [ARGS]      Run bench command, equivalent to running 'bench_bitcoin [ARGS]'.\n+  chainstate [ARGS] Run bitcoin kernel chainstate util, equivalent to running 'bitcoin-chainstate [ARGS]'.\n+  test [ARGS]       Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+  test-gui [ARGS]   Run GUI unit tests, equivalent to running 'test_bitcoin-qt [ARGS]'.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_INTERNAL);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"daemon\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"chainstate\") {\n+            args.emplace_back(\"bitcoin-chainstate\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to wrapper_argv0.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...\n+//!     dtrace -n 'proc:::exec-success  /pid == $target/ { trace(curpsinfo->pr_psargs); }' -c ...\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view wrapper_argv0)\n+{\n+    // Construct argument string for execvp\n+    std::vector<const char*> exec_args{args};\n+    exec_args.emplace_back(nullptr);\n+\n+    // Try to call ExecVp with given exe path.\n+    auto try_exec = [&](fs::path exe_path, bool allow_notfound = true) {\n+        std::string exe_path_str{fs::PathToString(exe_path)};\n+        exec_args[0] = exe_path_str.c_str();\n+        if (util::ExecVp(exec_args[0], (char*const*)exec_args.data()) == -1) {\n+            if (allow_notfound && errno == ENOENT) return false;\n+            throw std::system_error(errno, std::system_category(), strprintf(\"execvp failed to execute '%s'\", exec_args[0]));\n+        }\n+        return true; // In practice, this line should not be reached if execvp succeeds\n+    };\n+\n+    // Get the wrapper executable path.\n+    const fs::path wrapper_path{util::GetExePath(wrapper_argv0)};\n+\n+    // Try to resolve any symlinks and figure out the directory containing the wrapper executable.\n+    std::error_code ec;\n+    fs::path wrapper_dir{fs::weakly_canonical(wrapper_path, ec)};\n+    if (wrapper_dir.empty()) wrapper_dir = wrapper_path; // Restore previous path if weakly_canonical failed.\n+    wrapper_dir = wrapper_dir.parent_path();\n+\n+    // Get path of the executable to be invoked.\n+    const fs::path arg0{fs::PathFromString(args[0])};\n+\n+    // Decide whether to fall back to the operating system to search for the\n+    // specified executable. Avoid doing this if it looks like the wrapper\n+    // executable was invoked by path, rather than by search, to avoid\n+    // unintentionally launching system executables in a local build.\n+    // (https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1861814807)\n+    const bool fallback_os_search{!fs::PathFromString(std::string{wrapper_argv0}).has_parent_path()};\n+\n+    // If wrapper is installed in a bin/ directory, look for target executable\n+    // in libexec/\n+    (wrapper_dir.filename() == \"bin\" && try_exec(fs::path{wrapper_dir.parent_path()} / \"libexec\" / arg0.filename())) ||\n+    // Otherwise check the \"daemon\" subdirectory in a windows install.\n+    try_exec(wrapper_dir / \"daemon\" / arg0.filename()) ||",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 191,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2077565200,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> nit: Wrap in `#ifdef WIN32`?\r\n\r\nMakes sense, added.",
      "created_at": "2025-05-12T20:15:33Z",
      "updated_at": "2025-05-12T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085376112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085376112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 190,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085382936",
      "pull_request_review_id": 2834221930,
      "id": 2085382936,
      "node_id": "PRRC_kwDOABII5858TGsY",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {",
      "path": "src/util/exec.cpp",
      "position": 28,
      "original_position": 25,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2077722254,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077722254\r\n\r\n> Is `argv` guaranteed to always end with ~an empty string~ `nullptr`?\r\n\r\nExecVp is our own function so we can require whatever we want from callers, but execvp requires \"The array of pointers must be terminated by a NULL pointer.\" https://linux.die.net/man/3/execvp so using the same interface helps keep things simple.",
      "created_at": "2025-05-12T20:21:08Z",
      "updated_at": "2025-05-12T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085382936",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085382936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085384043",
      "pull_request_review_id": 2834221930,
      "id": 2085384043,
      "node_id": "PRRC_kwDOABII5858TG9r",
      "diff_hunk": "",
      "path": "src/bitcoin.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "original_commit_id": "f2c003c927557f97dafa263e6cbb90a4e3421842",
      "in_reply_to_id": 2077800405,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2077800405\r\n\r\n> nit: Child executable names leak through\r\n\r\nGood suggestion, added it to the list in the PR description.",
      "created_at": "2025-05-12T20:21:56Z",
      "updated_at": "2025-05-12T20:58:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2085384043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2085384043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086894554",
      "pull_request_review_id": 2836891417,
      "id": 2086894554,
      "node_id": "PRRC_kwDOABII5858Y3va",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  node [ARGS]    Start node, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  help [-a]      Show this help message. Include -a or --all to show additional commands.\n+)\";\n+\n+static constexpr auto HELP_EXTRA = R\"(\n+Additional less commonly used commands:\n+  bench [ARGS]      Run bench command, equivalent to running 'bench_bitcoin [ARGS]'.\n+  chainstate [ARGS] Run bitcoin kernel chainstate util, equivalent to running 'bitcoin-chainstate [ARGS]'.\n+  test [ARGS]       Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+  test-gui [ARGS]   Run GUI unit tests, equivalent to running 'test_bitcoin-qt [ARGS]'.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_EXTRA);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"node\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"chainstate\") {\n+            args.emplace_back(\"bitcoin-chainstate\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to wrapper_argv0.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 149,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "fc47f776fbafaaf9062e6b4dc29ba6e42e390d2a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n//!     strace -e trace=execve -s 10000 build/bin/bitcoin ...\r\n```",
      "created_at": "2025-05-13T13:55:18Z",
      "updated_at": "2025-05-13T14:10:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2086894554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086894554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086920895",
      "pull_request_review_id": 2836891417,
      "id": 2086920895,
      "node_id": "PRRC_kwDOABII5858Y-K_",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  node [ARGS]    Start node, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  help [-a]      Show this help message. Include -a or --all to show additional commands.\n+)\";\n+\n+static constexpr auto HELP_EXTRA = R\"(\n+Additional less commonly used commands:\n+  bench [ARGS]      Run bench command, equivalent to running 'bench_bitcoin [ARGS]'.\n+  chainstate [ARGS] Run bitcoin kernel chainstate util, equivalent to running 'bitcoin-chainstate [ARGS]'.\n+  test [ARGS]       Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+  test-gui [ARGS]   Run GUI unit tests, equivalent to running 'test_bitcoin-qt [ARGS]'.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_EXTRA);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"node\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"chainstate\") {\n+            args.emplace_back(\"bitcoin-chainstate\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 89,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "fc47f776fbafaaf9062e6b4dc29ba6e42e390d2a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "are these prepended paths (here and also for the `gui`, `bench` and `test` commands above) still relevant? They seem to reflect a folder structure that doesn't exist anymore since https://github.com/bitcoin/bitcoin/pull/31161",
      "created_at": "2025-05-13T14:06:17Z",
      "updated_at": "2025-05-13T14:10:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2086920895",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2086920895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087286446",
      "pull_request_review_id": 2837543762,
      "id": 2087286446,
      "node_id": "PRRC_kwDOABII5858aXau",
      "diff_hunk": "@@ -62,6 +62,8 @@ bitcoin-cli -named createwallet wallet_name=mywallet load_on_startup=true\n bitcoin-cli -named createwallet mywallet load_on_startup=true\n ```",
      "path": "doc/JSON-RPC-interface.md",
      "position": 2,
      "original_position": 2,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "b0989e3095f1964fdb523cdd4b44f0b198417014",
      "in_reply_to_id": 2077754724,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> It seems like it could be more confusing to not mention one of the alternatives than just describe both.\r\n\r\n\r\nYou are right I think it's okay to include both alternative comment in the `doc/README.md`.\r\n\r\nHowever In my opinion, that's sufficient, and we don't need to repeat in every instance that, for example, `bitcoin node` or `bitcoin GUI` can be substituted with `bitcoind`, etc.\r\n\r\n",
      "created_at": "2025-05-13T17:08:16Z",
      "updated_at": "2025-05-13T17:08:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087286446",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087286446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087562615",
      "pull_request_review_id": 2838013470,
      "id": 2087562615,
      "node_id": "PRRC_kwDOABII5858ba13",
      "diff_hunk": "",
      "path": "src/util/exec.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "4e1aae19512df82af584a064640c2143c5c5fa4f",
      "original_commit_id": "4e1aae19512df82af584a064640c2143c5c5fa4f",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would be nice to merge exec.h/cpp into subprocess.h due to similar functionality. But I don't know what happens to copyright in that case, so might be better to avoid for that reason.",
      "created_at": "2025-05-13T20:15:55Z",
      "updated_at": "2025-05-13T21:15:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087562615",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087562615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087583779",
      "pull_request_review_id": 2838013470,
      "id": 2087583779,
      "node_id": "PRRC_kwDOABII5858bgAj",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+fs::path GetExePath(std::string_view argv0)\n+{\n+    // Try to figure out where executable is located. This does a simplified\n+    // search that won't work perfectly on every platform and doesn't need to,\n+    // as it is only currently being used in a convenience wrapper binary to try\n+    // to prioritize locally built or installed executables over system\n+    // executables.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    // If argv0 doesn't contain a path separator, it was invoked from the system\n+    // PATH and can be searched for there.\n+    if (!argv0_path.has_parent_path()) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }",
      "path": "src/util/exec.cpp",
      "position": 65,
      "original_position": 97,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2077548018,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Might be clearer to return `std::nullopt` upon failure? Feels a bit sloppy currently, but maybe okay for a glorified shell script as you wrote elsewhere: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r1920888966",
      "created_at": "2025-05-13T20:29:49Z",
      "updated_at": "2025-05-13T21:15:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087583779",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087583779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087585166",
      "pull_request_review_id": 2838013470,
      "id": 2087585166,
      "node_id": "PRRC_kwDOABII5858bgWO",
      "diff_hunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+#include <util/subprocess.h>\n+",
      "path": "src/util/exec.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "4e1aae19512df82af584a064640c2143c5c5fa4f",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should this include util/exec.h?",
      "created_at": "2025-05-13T20:30:51Z",
      "updated_at": "2025-05-13T21:15:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087585166",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087585166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 3,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087618429",
      "pull_request_review_id": 2838013470,
      "id": 2087618429,
      "node_id": "PRRC_kwDOABII5858bod9",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {",
      "path": "src/util/exec.cpp",
      "position": 28,
      "original_position": 25,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2077722254,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Could document requirements in header:\r\n```C++\r\n//! Cross-platform wrapper for POSIX execvp function.\r\n//! @param argv Needs to end with nullptr element, in line with execvp.\r\nint ExecVp(const char* file, char* const argv[]);\r\n```",
      "created_at": "2025-05-13T20:54:16Z",
      "updated_at": "2025-05-13T21:15:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087618429",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087618429"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087629089",
      "pull_request_review_id": 2838013470,
      "id": 2087629089,
      "node_id": "PRRC_kwDOABII5858brEh",
      "diff_hunk": "@@ -31,6 +31,8 @@ do\n done\n ```\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/multisig-tutorial.md",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046878917,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Might be nice to add a rationale for `-named` in the commit message of fc47f776fbafaaf9062e6b4dc29ba6e42e390d2a as it isn't discussed in the linked issue.",
      "created_at": "2025-05-13T21:02:26Z",
      "updated_at": "2025-05-13T21:15:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087629089",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087629089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087636740",
      "pull_request_review_id": 2838013470,
      "id": 2087636740,
      "node_id": "PRRC_kwDOABII5858bs8E",
      "diff_hunk": "@@ -73,6 +73,7 @@ Section -Main SEC0000\n     SetOutPath $INSTDIR\n     SetOverwrite on\n     File @abs_top_builddir@/release/@BITCOIN_GUI_NAME@@EXEEXT@\n+    File @abs_top_builddir@/release/@BITCOIN_WRAPPER_NAME@@EXEEXT@",
      "path": "share/setup.nsi.in",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "3eb0d327153f61ef2121a4b261b024f6ee1f3398",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It appears we should also be deleting this in the uninstall section further down, right after:\r\nhttps://github.com/bitcoin/bitcoin/blob/3eb0d327153f61ef2121a4b261b024f6ee1f3398/share/setup.nsi.in#L133",
      "created_at": "2025-05-13T21:08:24Z",
      "updated_at": "2025-05-13T21:15:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087636740",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2087636740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2088367575",
      "pull_request_review_id": 2839243689,
      "id": 2088367575,
      "node_id": "PRRC_kwDOABII5858efXX",
      "diff_hunk": "@@ -73,6 +73,7 @@ Section -Main SEC0000\n     SetOutPath $INSTDIR\n     SetOverwrite on\n     File @abs_top_builddir@/release/@BITCOIN_GUI_NAME@@EXEEXT@\n+    File @abs_top_builddir@/release/@BITCOIN_WRAPPER_NAME@@EXEEXT@",
      "path": "share/setup.nsi.in",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "3eb0d327153f61ef2121a4b261b024f6ee1f3398",
      "in_reply_to_id": 2087636740,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, otherwise it leaves `bitcoin.exe` behind because it's not inside the `daemon` subdirectory.\r\n\r\nI'll add this to my Windows test:\r\n\r\n```diff\r\ndiff --git a/share/setup.nsi.in b/share/setup.nsi.in\r\nindex 270468ad7b..2160cc05a1 100644\r\n--- a/share/setup.nsi.in\r\n+++ b/share/setup.nsi.in\r\n@@ -130,6 +130,7 @@ done${UNSECTION_ID}:\r\n\r\n # Uninstaller sections\r\n Section /o -un.Main UNSEC0000\r\n+    Delete /REBOOTOK $INSTDIR\\@BITCOIN_WRAPPER_NAME@@EXEEXT@\r\n     Delete /REBOOTOK $INSTDIR\\@BITCOIN_GUI_NAME@@EXEEXT@\r\n     Delete /REBOOTOK $INSTDIR\\COPYING.txt\r\n     Delete /REBOOTOK $INSTDIR\\readme.txt\r\n```",
      "created_at": "2025-05-14T08:25:46Z",
      "updated_at": "2025-05-14T08:25:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2088367575",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2088367575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2088424348",
      "pull_request_review_id": 2839335002,
      "id": 2088424348,
      "node_id": "PRRC_kwDOABII5858etOc",
      "diff_hunk": "@@ -73,6 +73,7 @@ Section -Main SEC0000\n     SetOutPath $INSTDIR\n     SetOverwrite on\n     File @abs_top_builddir@/release/@BITCOIN_GUI_NAME@@EXEEXT@\n+    File @abs_top_builddir@/release/@BITCOIN_WRAPPER_NAME@@EXEEXT@",
      "path": "share/setup.nsi.in",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "3eb0d327153f61ef2121a4b261b024f6ee1f3398",
      "in_reply_to_id": 2087636740,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Works like a charm.\r\n\r\nI also briefly tested `bitcoin.exe gui`, `node` and `rpc`.",
      "created_at": "2025-05-14T08:51:36Z",
      "updated_at": "2025-05-14T08:51:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2088424348",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2088424348"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090970340",
      "pull_request_review_id": 2843363337,
      "id": 2090970340,
      "node_id": "PRRC_kwDOABII5858oazk",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  node [ARGS]    Start node, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  help [-a]      Show this help message. Include -a or --all to show additional commands.\n+)\";\n+\n+static constexpr auto HELP_EXTRA = R\"(\n+Additional less commonly used commands:\n+  bench [ARGS]      Run bench command, equivalent to running 'bench_bitcoin [ARGS]'.\n+  chainstate [ARGS] Run bitcoin kernel chainstate util, equivalent to running 'bitcoin-chainstate [ARGS]'.\n+  test [ARGS]       Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+  test-gui [ARGS]   Run GUI unit tests, equivalent to running 'test_bitcoin-qt [ARGS]'.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_EXTRA);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"node\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"chainstate\") {\n+            args.emplace_back(\"bitcoin-chainstate\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");\n+        } else if (cmd.command == \"util\") {\n+            args.emplace_back(\"bitcoin-util\");\n+        } else {\n+            throw std::runtime_error(strprintf(\"Unrecognized command: '%s'\", cmd.command));\n+        }\n+        if (!args.empty()) {\n+            args.insert(args.end(), cmd.args.begin(), cmd.args.end());\n+            ExecCommand(args, argv[0]);\n+        }\n+    } catch (const std::exception& e) {\n+        tfm::format(std::cerr, \"Error: %s\\nTry '%s --help' for more information.\\n\", e.what(), argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+    return EXIT_SUCCESS;\n+}\n+\n+CommandLine ParseCommandLine(int argc, char* argv[])\n+{\n+    CommandLine cmd;\n+    cmd.args.reserve(argc);\n+    for (int i = 1; i < argc; ++i) {\n+        std::string_view arg = argv[i];\n+        if (!cmd.command.empty()) {\n+            cmd.args.emplace_back(argv[i]);\n+        } else if (arg == \"-m\" || arg == \"--multiprocess\") {\n+            cmd.use_multiprocess = true;\n+        } else if (arg == \"-M\" || arg == \"--monolithic\") {\n+            cmd.use_multiprocess = false;\n+        } else if (arg == \"-v\" || arg == \"--version\") {\n+            cmd.show_version = true;\n+        } else if (arg == \"-h\" || arg == \"--help\" || arg == \"help\") {\n+            cmd.show_help = true;\n+        } else if (cmd.show_help && (arg == \"-a\" || arg == \"--all\")) {\n+            cmd.show_help_all = true;\n+        } else if (arg.starts_with(\"-\")) {\n+            throw std::runtime_error(strprintf(\"Unknown option: %s\", arg));\n+        } else if (!arg.empty()) {\n+            cmd.command = arg;\n+        }\n+    }\n+    return cmd;\n+}\n+\n+//! Execute the specified bitcoind, bitcoin-qt or other command line in `args`\n+//! using src, bin and libexec directory paths relative to this executable, where\n+//! the path to this executable is specified in `wrapper_argv0`.\n+//!\n+//! @param args Command line arguments to execute, where first argument should\n+//!             be a relative path to a bitcoind, bitcoin-qt or other executable\n+//!             that will be located on the PATH or relative to wrapper_argv0.\n+//!\n+//! @param wrapper_argv0 String containing first command line argument passed to\n+//!                      main() to run the current executable. This is used to\n+//!                      help determine the path to the current executable and\n+//!                      how to look for new executables.\n+//\n+//! @note This function doesn't currently print anything but can be debugged\n+//! from the command line using strace or dtrace like:\n+//!\n+//!     strace -e trace=execve -s 10000 build/src/bitcoin ...",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 149,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "fc47f776fbafaaf9062e6b4dc29ba6e42e390d2a",
      "in_reply_to_id": 2086894554,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2086894554\r\n\r\nGood catch, fixed!",
      "created_at": "2025-05-15T11:37:09Z",
      "updated_at": "2025-05-15T12:38:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2090970340",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090970340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090976743",
      "pull_request_review_id": 2843363337,
      "id": 2090976743,
      "node_id": "PRRC_kwDOABII5858ocXn",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <bitcoin-build-config.h> // IWYU pragma: keep\n+\n+#include <clientversion.h>\n+#include <util/fs.h>\n+#include <util/exec.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+\n+#include <iostream>\n+#include <string>\n+#include <tinyformat.h>\n+#include <vector>\n+\n+const TranslateFn G_TRANSLATION_FUN{nullptr};\n+\n+static constexpr auto HELP_USAGE = R\"(Usage: %s [OPTIONS] COMMAND...\n+\n+Options:\n+  -m, --multiprocess     Run multiprocess binaries bitcoin-node, bitcoin-gui.\n+  -M, --monolithic       Run monolithic binaries bitcoind, bitcoin-qt. (Default behavior)\n+  -v, --version          Show version information\n+  -h, --help             Show this help message\n+\n+Commands:\n+  gui [ARGS]     Start GUI, equivalent to running 'bitcoin-qt [ARGS]' or 'bitcoin-gui [ARGS]'.\n+  node [ARGS]    Start node, equivalent to running 'bitcoind [ARGS]' or 'bitcoin-node [ARGS]'.\n+  rpc [ARGS]     Call RPC method, equivalent to running 'bitcoin-cli -named [ARGS]'.\n+  wallet [ARGS]  Call wallet command, equivalent to running 'bitcoin-wallet [ARGS]'.\n+  tx [ARGS]      Manipulate hex-encoded transactions, equivalent to running 'bitcoin-tx [ARGS]'.\n+  help [-a]      Show this help message. Include -a or --all to show additional commands.\n+)\";\n+\n+static constexpr auto HELP_EXTRA = R\"(\n+Additional less commonly used commands:\n+  bench [ARGS]      Run bench command, equivalent to running 'bench_bitcoin [ARGS]'.\n+  chainstate [ARGS] Run bitcoin kernel chainstate util, equivalent to running 'bitcoin-chainstate [ARGS]'.\n+  test [ARGS]       Run unit tests, equivalent to running 'test_bitcoin [ARGS]'.\n+  test-gui [ARGS]   Run GUI unit tests, equivalent to running 'test_bitcoin-qt [ARGS]'.\n+)\";\n+\n+struct CommandLine {\n+    bool use_multiprocess{false};\n+    bool show_version{false};\n+    bool show_help{false};\n+    bool show_help_all{false};\n+    std::string_view command;\n+    std::vector<const char*> args;\n+};\n+\n+CommandLine ParseCommandLine(int argc, char* argv[]);\n+static void ExecCommand(const std::vector<const char*>& args, std::string_view argv0);\n+\n+int main(int argc, char* argv[])\n+{\n+    try {\n+        CommandLine cmd{ParseCommandLine(argc, argv)};\n+        if (cmd.show_version) {\n+            tfm::format(std::cout, \"%s version %s\\n%s\", CLIENT_NAME, FormatFullVersion(), FormatParagraph(LicenseInfo()));\n+            return EXIT_SUCCESS;\n+        }\n+\n+        std::vector<const char*> args;\n+        if (cmd.show_help || cmd.command.empty()) {\n+            tfm::format(std::cout, HELP_USAGE, argv[0]);\n+            if (cmd.show_help_all) tfm::format(std::cout, HELP_EXTRA);\n+            return cmd.show_help ? EXIT_SUCCESS : EXIT_FAILURE;\n+        } else if (cmd.command == \"gui\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"qt/bitcoin-gui\" : \"qt/bitcoin-qt\");\n+        } else if (cmd.command == \"node\") {\n+            args.emplace_back(cmd.use_multiprocess ? \"bitcoin-node\" : \"bitcoind\");\n+        } else if (cmd.command == \"rpc\") {\n+            args.emplace_back(\"bitcoin-cli\");\n+            args.emplace_back(\"-named\");\n+        } else if (cmd.command == \"wallet\") {\n+            args.emplace_back(\"bitcoin-wallet\");\n+        } else if (cmd.command == \"tx\") {\n+            args.emplace_back(\"bitcoin-tx\");\n+        } else if (cmd.command == \"bench\") {\n+            args.emplace_back(\"bench/bench_bitcoin\");\n+        } else if (cmd.command == \"chainstate\") {\n+            args.emplace_back(\"bitcoin-chainstate\");\n+        } else if (cmd.command == \"test\") {\n+            args.emplace_back(\"test/test_bitcoin\");\n+        } else if (cmd.command == \"test-gui\") {\n+            args.emplace_back(\"qt/test/test_bitcoin-qt\");",
      "path": "src/bitcoin.cpp",
      "position": null,
      "original_position": 89,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "fc47f776fbafaaf9062e6b4dc29ba6e42e390d2a",
      "in_reply_to_id": 2086920895,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2086920895\r\n\r\n> are these prepended paths (here and also for the `gui`, `bench` and `test` commands above) still relevant? They seem to reflect a folder structure that doesn't exist anymore since #31161\r\n\r\nGood find, removed these. The prefixes were harmless but no longer do anything after the update in https://github.com/bitcoin/bitcoin/pull/31375#issuecomment-2819431273 following the #31161 merge.\r\n\r\n\r\n\r\n",
      "created_at": "2025-05-15T11:41:14Z",
      "updated_at": "2025-05-15T12:38:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2090976743",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090976743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090999369",
      "pull_request_review_id": 2843363337,
      "id": 2090999369,
      "node_id": "PRRC_kwDOABII5858oh5J",
      "diff_hunk": "",
      "path": "src/util/exec.h",
      "position": 1,
      "original_position": 1,
      "commit_id": "4e1aae19512df82af584a064640c2143c5c5fa4f",
      "original_commit_id": "4e1aae19512df82af584a064640c2143c5c5fa4f",
      "in_reply_to_id": 2087562615,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087562615\r\n\r\nI think they are somewhat distinct. The subprocess header is trying to mimic python's subprocess API and provides functions for starting and interacting with child processes. This header provides functions for getting information about and replacing the current process that don't have any equivalent in python's subprocess API. So not sure I'd want to merge them, though it could be a possibility.\r\n\r\nFor copyright probably we could just add our own copyright line to the subprocess header without removing the existing one, but I don't think it matters that much.",
      "created_at": "2025-05-15T11:54:28Z",
      "updated_at": "2025-05-15T12:38:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2090999369",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2090999369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091019509",
      "pull_request_review_id": 2843363337,
      "id": 2091019509,
      "node_id": "PRRC_kwDOABII5858omz1",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {\n+        std::string_view arg{*arg_ptr};\n+        if (arg.find_first_of(\" \\t\\\"\") == std::string_view::npos) {\n+            // Argument has no quotes or spaces so escaping not necessary.\n+            new_argv.push_back(*arg_ptr);\n+        } else {\n+            // Add escaping to the command line that the executable being\n+            // invoked will split up using the CommandLineToArgvW function,\n+            // which expects arguments with spaces to be quoted, quote\n+            // characters to be backslash-escaped, and backslashes to also be\n+            // backslash-escaped, but only if they precede a quote character.\n+            std::string escaped{'\"'}; // Start with a quote\n+            for (size_t i = 0; i < arg.size(); ++i) {\n+                if (arg[i] == '\\\\') {\n+                    // Count consecutive backslashes\n+                    size_t backslash_count = 0;\n+                    while (i < arg.size() && arg[i] == '\\\\') {\n+                        ++backslash_count;\n+                        ++i;\n+                    }\n+                    if (i < arg.size() && arg[i] == '\"') {\n+                        // Backslashes before a quote need to be doubled\n+                        escaped.append(backslash_count * 2 + 1, '\\\\');\n+                        escaped.push_back('\"');\n+                    } else {\n+                        // Otherwise, backslashes remain as-is\n+                        escaped.append(backslash_count, '\\\\');\n+                        --i; // Compensate for the outer loop's increment\n+                    }\n+                } else if (arg[i] == '\"') {\n+                    // Escape double quotes with a backslash\n+                    escaped.push_back('\\\\');\n+                    escaped.push_back('\"');\n+                } else {\n+                    escaped.push_back(arg[i]);\n+                }\n+            }\n+            escaped.push_back('\"'); // End with a quote\n+            escaped_args.emplace_back(std::move(escaped));\n+            new_argv.push_back((char *)escaped_args.back().c_str());\n+        }\n+    }\n+    new_argv.push_back(nullptr);\n+    return _execvp(file, new_argv.data());\n+#endif\n+}\n+\n+fs::path GetExePath(std::string_view argv0)\n+{\n+    // Try to figure out where executable is located. This does a simplified\n+    // search that won't work perfectly on every platform and doesn't need to,\n+    // as it is only currently being used in a convenience wrapper binary to try\n+    // to prioritize locally built or installed executables over system\n+    // executables.\n+    const fs::path argv0_path{fs::PathFromString(std::string{argv0})};\n+    fs::path path{argv0_path};\n+    std::error_code ec;\n+#ifndef WIN32\n+    // If argv0 doesn't contain a path separator, it was invoked from the system\n+    // PATH and can be searched for there.\n+    if (!argv0_path.has_parent_path()) {\n+        if (const char* path_env = std::getenv(\"PATH\")) {\n+            size_t start{0}, end{0};\n+            for (std::string_view paths{path_env}; end != std::string_view::npos; start = end + 1) {\n+                end = paths.find(':', start);\n+                fs::path candidate = fs::path(paths.substr(start, end - start)) / argv0_path;\n+                if (fs::is_regular_file(candidate, ec)) {\n+                    path = candidate;\n+                    break;\n+                }\n+            }\n+        }\n+    }",
      "path": "src/util/exec.cpp",
      "position": 65,
      "original_position": 97,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2077548018,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087583779\r\n\r\nJust added a note to the `GetExePath` doc, because I'm not really sure `std::nullopt` is better representation of a path that could not be determined than `path.empty()`. Returning {empty path, nonempty path} seems safer than returning {null path, empty path, nonempty path} if the goal is to avoid bugs.\r\n\r\nTheoretically if we had a `not_empty<T>` wrapper which asserted the wrapped value is non-empty on construction maybe `optional<not_empty<path>>` could be a better return type than just `path`, but `path` is simple and basically equivalent to that.",
      "created_at": "2025-05-15T12:06:00Z",
      "updated_at": "2025-05-15T12:38:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2091019509",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091019509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 65,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091025097",
      "pull_request_review_id": 2843363337,
      "id": 2091025097,
      "node_id": "PRRC_kwDOABII5858ooLJ",
      "diff_hunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+#include <util/subprocess.h>\n+",
      "path": "src/util/exec.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "4e1aae19512df82af584a064640c2143c5c5fa4f",
      "in_reply_to_id": 2087585166,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087585166\r\n\r\nGood catch, added.\r\n\r\n",
      "created_at": "2025-05-15T12:09:08Z",
      "updated_at": "2025-05-15T12:38:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2091025097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091025097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": 3,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091026948",
      "pull_request_review_id": 2843363337,
      "id": 2091026948,
      "node_id": "PRRC_kwDOABII5858oooE",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/fs.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#ifdef WIN32\n+#include <process.h>\n+#include <windows.h>\n+#else\n+#include <unistd.h>\n+#endif\n+\n+namespace util {\n+int ExecVp(const char *file, char *const argv[])\n+{\n+#ifndef WIN32\n+    return execvp(file, argv);\n+#else\n+    std::vector<char*> new_argv;\n+    std::vector<std::string> escaped_args;\n+    for (char* const* arg_ptr{argv}; *arg_ptr; ++arg_ptr) {",
      "path": "src/util/exec.cpp",
      "position": 28,
      "original_position": 25,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "81c0b9edfe533afbb2f4dda56142afdedffdb347",
      "in_reply_to_id": 2077722254,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087585166\r\n\r\nThanks, added a similar comment",
      "created_at": "2025-05-15T12:09:57Z",
      "updated_at": "2025-05-15T12:38:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2091026948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091026948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091049127",
      "pull_request_review_id": 2843363337,
      "id": 2091049127,
      "node_id": "PRRC_kwDOABII5858ouCn",
      "diff_hunk": "@@ -31,6 +31,8 @@ do\n done\n ```\n \n+`bitcoin rpc` can also be substituted for `bitcoin-cli`.",
      "path": "doc/multisig-tutorial.md",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "86eedd3c1243d4fdbe1c0f44920340ccacbac13e",
      "in_reply_to_id": 2046878917,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087629089\r\n\r\nThanks, added a code comment with this information",
      "created_at": "2025-05-15T12:22:09Z",
      "updated_at": "2025-05-15T12:38:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2091049127",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091049127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091059112",
      "pull_request_review_id": 2843363337,
      "id": 2091059112,
      "node_id": "PRRC_kwDOABII5858oweo",
      "diff_hunk": "@@ -73,6 +73,7 @@ Section -Main SEC0000\n     SetOutPath $INSTDIR\n     SetOverwrite on\n     File @abs_top_builddir@/release/@BITCOIN_GUI_NAME@@EXEEXT@\n+    File @abs_top_builddir@/release/@BITCOIN_WRAPPER_NAME@@EXEEXT@",
      "path": "share/setup.nsi.in",
      "position": 4,
      "original_position": 4,
      "commit_id": "7af6e1089ea264e870b26ac83e81e7aa374acbe1",
      "original_commit_id": "3eb0d327153f61ef2121a4b261b024f6ee1f3398",
      "in_reply_to_id": 2087636740,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2087636740\r\n\r\nThanks to both for the suggestion and testing. Added this line",
      "created_at": "2025-05-15T12:27:49Z",
      "updated_at": "2025-05-15T12:38:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31375#discussion_r2091059112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2091059112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31375"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    }
  ]
}