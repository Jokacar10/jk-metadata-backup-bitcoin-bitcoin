{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553",
    "id": 2248495552,
    "node_id": "PR_kwDOABII586GBVHA",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31553",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31553.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31553.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/0ee96747f27ba32199cc048cbb553035efa1d174",
    "number": 31553,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "cluster mempool: add TxGraph reorg functionality",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Part of cluster mempool (#30289). Builds on top of #31444.\r\n\r\nDuring reorganisations, it is possible that dependencies get added which would result in clusters that violate policy limits (cluster count, cluster weight), when linking the new from-block transactions to the old from-mempool transactions. Unlike RBF scenarios, we cannot simply reject the changes when they are due to received blocks. To accommodate this, add a `TxGraph::Trim()`, which removes some subset of transactions (including descendants) in order to make all resulting clusters satisfy the limits.\r\n\r\nConceptually, the way this is done is by defining a rudimentary linearization for the entire would-be too-large cluster, iterating it from beginning to end, and reasoning about the counts and weights of the clusters that would be reached using transactions up to that point. If a transaction is encountered whose addition would violate the limit, it is removed, together with all its descendants.\r\n\r\nThis rudimentary linearization is like a merge sort of the chunks of the clusters being combined, but respecting topology. More specifically, it is continuously picking the highest-chunk-feerate remaining transaction among those which have no unmet dependencies left. For efficiency, this rudimentary linearization is computed lazily, by putting all viable transactions in a heap, sorted by chunk feerate, and adding new transactions to it as they become viable.\r\n\r\nThe `Trim()` function is rather unusual compared to the `TxGraph` functionality added in previous PRs, in that `Trim()` makes it own decisions about what the resulting graph contents will be, without good specification of how it makes that decision - it is just a best-effort attempt (which is improved in the last commit). All other `TxGraph` mutators are simply to inform the graph about changes the calling mempool code decided on; this one lets the decision be made by txgraph.\r\n\r\nAs part of this, the \"oversized\" property is expanded to also encompass a configurable cluster weight limit (in addition to cluster count limit). \r\n",
    "labels": [
      {
        "id": 164208572,
        "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
        "name": "Mempool",
        "color": "fef2c0",
        "default": false
      }
    ],
    "created_at": "2024-12-22T19:06:05Z",
    "updated_at": "2025-05-12T21:15:51Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "621b37fb476165423871133e64fc93f2ccf9ca72",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "sipa:202412_txgraph_trim",
      "ref": "202412_txgraph_trim",
      "sha": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1458655,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDU4NjU1",
        "name": "bitcoin",
        "full_name": "sipa/bitcoin",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/sipa/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bitcoin",
        "archive_url": "https://api.github.com/repos/sipa/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sipa/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sipa/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sipa/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sipa/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sipa/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sipa/bitcoin/hooks",
        "svn_url": "https://github.com/sipa/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "TypeScript",
        "forks_count": 20,
        "stargazers_count": 90,
        "watchers_count": 90,
        "size": 260512,
        "default_branch": "lows",
        "open_issues_count": 16,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-12T21:13:17Z",
        "created_at": "2011-03-09T10:46:59Z",
        "updated_at": "2025-02-27T11:11:39Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "663a9cabf811e2fc53102bc6da00d09fc99d1d81",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37206,
        "stargazers_count": 83530,
        "watchers_count": 83530,
        "size": 281593,
        "default_branch": "master",
        "open_issues_count": 719,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-12T18:49:20Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-05-12T21:51:17Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 1190,
    "deletions": 83,
    "changed_files": 3,
    "commits": 14,
    "review_comments": 21,
    "comments": 12
  },
  "events": [
    {
      "event": "commented",
      "id": 2558561140,
      "node_id": "IC_kwDOABII586YgIt0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2558561140",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-22T19:06:08Z",
      "updated_at": "2025-05-12T21:15:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31553.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n- `// Note that missing_real.fee < missing_expected.fee is possible to due the presence of` -> `// Note that missing_real.fee < missing_expected.fee is possible due to the presence of` [incorrect phrase \"to due\"]\n- `/** If this is a root, the total number of transactions in the parition. */` -> `/** If this is a root, the total number of transactions in the partition. */` [typo \"parition\"]\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2558561140",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "labeled",
      "id": 15798589053,
      "node_id": "LE_lADOABII586kMugSzwAAAAOtq1Z9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15798589053",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-02T13:05:14Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15861077490,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAOxZNXy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15861077490",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3e809fa9e6c0fc025ad180fe2d47e03cb9e6da4b",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/3e809fa9e6c0fc025ad180fe2d47e03cb9e6da4b",
      "created_at": "2025-01-08T23:27:48Z"
    },
    {
      "event": "labeled",
      "id": 15861624638,
      "node_id": "LE_lADOABII586kMugSzwAAAAOxbS8-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15861624638",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T00:52:10Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2578976969,
      "node_id": "IC_kwDOABII586ZuBDJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2578976969",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T00:52:11Z",
      "updated_at": "2025-01-09T00:52:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/35343429418</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2578976969",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15861756974,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAOxbzQu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15861756974",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "75c675702ae91a234eca58a8733f69ebcf21eef4",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/75c675702ae91a234eca58a8733f69ebcf21eef4",
      "created_at": "2025-01-09T01:12:51Z"
    },
    {
      "event": "unlabeled",
      "id": 15862045073,
      "node_id": "UNLE_lADOABII586kMugSzwAAAAOxc5mR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15862045073",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T02:34:45Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15868145094,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAOx0K3G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15868145094",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5a6550f8cafae8317eccf7bfc797669189176924",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/5a6550f8cafae8317eccf7bfc797669189176924",
      "created_at": "2025-01-09T13:41:37Z"
    },
    {
      "event": "reviewed",
      "id": 2540686525,
      "node_id": "PRR_kwDOABII586Xb8y9",
      "url": null,
      "actor": null,
      "commit_id": "5a6550f8cafae8317eccf7bfc797669189176924",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Very quick and shallow pass through the initial impl commit. This PR is a lot to get through :)",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#pullrequestreview-2540686525",
      "submitted_at": "2025-01-09T20:03:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15873846189,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAOyJ6ut",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15873846189",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fa14d0679f9362024cf5513e498b969cd74819a2",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/fa14d0679f9362024cf5513e498b969cd74819a2",
      "created_at": "2025-01-09T21:34:39Z"
    },
    {
      "event": "labeled",
      "id": 15874780470,
      "node_id": "LE_lADOABII586kMugSzwAAAAOyNe02",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15874780470",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T23:22:13Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2581434615,
      "node_id": "IC_kwDOABII586Z3ZD3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2581434615",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T23:22:14Z",
      "updated_at": "2025-01-09T23:22:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/35398283653</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2581434615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15875391286,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAOyPz82",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15875391286",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ab08987564dee21f805f8bc789b717e71eece9b7",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/ab08987564dee21f805f8bc789b717e71eece9b7",
      "created_at": "2025-01-10T01:19:28Z"
    },
    {
      "event": "unlabeled",
      "id": 15875791692,
      "node_id": "UNLE_lADOABII586kMugSzwAAAAOyRVtM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15875791692",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-10T02:22:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15876195420,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAOyS4Rc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15876195420",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fbd6568f6590726a3f786577628df1e6bcf971cc",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/fbd6568f6590726a3f786577628df1e6bcf971cc",
      "created_at": "2025-01-10T03:34:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15967733445,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAO3wEbF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15967733445",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9046cbf9ed4426ff8d2b9bec06f2ca72378f644c",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/9046cbf9ed4426ff8d2b9bec06f2ca72378f644c",
      "created_at": "2025-01-16T21:13:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16034249752,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAO7tzwY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16034249752",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e4a2fd900cdf417b231dc6cca33d0532adf1e9d4",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/e4a2fd900cdf417b231dc6cca33d0532adf1e9d4",
      "created_at": "2025-01-22T20:02:02Z"
    },
    {
      "event": "reviewed",
      "id": 2572752495,
      "node_id": "PRR_kwDOABII586ZWRZv",
      "url": null,
      "actor": null,
      "commit_id": "6cb99b067cf9028777a2036a8a3240c2511a3caf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#pullrequestreview-2572752495",
      "submitted_at": "2025-01-24T14:10:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16064776329,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAO9iQiJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16064776329",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a312648704640dc946939dfe42f21ebfcd62ae92",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/a312648704640dc946939dfe42f21ebfcd62ae92",
      "created_at": "2025-01-24T22:11:35Z"
    },
    {
      "event": "commented",
      "id": 2613488644,
      "node_id": "IC_kwDOABII586bxqwE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2613488644",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T22:14:46Z",
      "updated_at": "2025-01-24T22:14:46Z",
      "author_association": "MEMBER",
      "body": "Some changes:\r\n* As a result of dropping `Cleanup` in the base PR, `Trim` now reports which transactions it removed, as it becomes the caller's responsibility of destroying Refs.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2613488644",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "labeled",
      "id": 16065345293,
      "node_id": "LE_lADOABII586kMugSzwAAAAO9kbcN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16065345293",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T23:23:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2613584141,
      "node_id": "IC_kwDOABII586byCEN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2613584141",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-24T23:23:37Z",
      "updated_at": "2025-01-24T23:23:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/36148923463</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2613584141",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16068867983,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAO9x3eP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16068867983",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "52c4105a1c341a7a82dab3e792a2f8f5b9ca51b4",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/52c4105a1c341a7a82dab3e792a2f8f5b9ca51b4",
      "created_at": "2025-01-26T04:37:22Z"
    },
    {
      "event": "commented",
      "id": 2614209321,
      "node_id": "IC_kwDOABII586b0asp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2614209321",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-26T04:42:19Z",
      "updated_at": "2025-01-26T04:42:19Z",
      "author_association": "MEMBER",
      "body": "* Add support for calling `AddTransaction` with a feerate whose size already violates the cluster size limit.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2614209321",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "unlabeled",
      "id": 16070110443,
      "node_id": "UNLE_lADOABII586kMugSzwAAAAO92mzr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16070110443",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-26T13:42:29Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16070941633,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAO95xvB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16070941633",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "df7185517f2d9ecae9a7c0114bf4a33ca73638a0",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/df7185517f2d9ecae9a7c0114bf4a33ca73638a0",
      "created_at": "2025-01-26T19:57:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16131781541,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPBh3Ol",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16131781541",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "265ad9efa9401c4cbe4395b88370c778fc5e6ae3",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/265ad9efa9401c4cbe4395b88370c778fc5e6ae3",
      "created_at": "2025-01-30T23:46:30Z"
    },
    {
      "event": "commented",
      "id": 2626051202,
      "node_id": "IC_kwDOABII586chlyC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2626051202",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T01:01:46Z",
      "updated_at": "2025-01-31T01:01:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/36451226624</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2626051202",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "labeled",
      "id": 16132409137,
      "node_id": "LE_lADOABII586kMugSzwAAAAPBkQcx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16132409137",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T01:01:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16134011538,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPBqXqS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16134011538",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e9b4cb1e9bd6309717372c4cc9d0dea3bb4010fa",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/e9b4cb1e9bd6309717372c4cc9d0dea3bb4010fa",
      "created_at": "2025-01-31T05:00:00Z"
    },
    {
      "event": "unlabeled",
      "id": 16134472638,
      "node_id": "UNLE_lADOABII586kMugSzwAAAAPBsIO-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16134472638",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T06:09:40Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16146246231,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPCZCpX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16146246231",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2cac7317b6d799e276ccb3536c30d7b84fb2a765",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/2cac7317b6d799e276ccb3536c30d7b84fb2a765",
      "created_at": "2025-01-31T22:01:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16148263464,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPCgvIo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16148263464",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "42d725960c70c22c2ad7d94cb02dc12c407ae111",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/42d725960c70c22c2ad7d94cb02dc12c407ae111",
      "created_at": "2025-02-01T03:43:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16181709103,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPEgUkv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16181709103",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c4f31251b0e85079f6abfe776a23fecb2c832317",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/c4f31251b0e85079f6abfe776a23fecb2c832317",
      "created_at": "2025-02-04T16:18:01Z"
    },
    {
      "event": "labeled",
      "id": 16184169710,
      "node_id": "LE_lADOABII586kMugSzwAAAAPEptTu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16184169710",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T19:32:57Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 16186256526,
      "node_id": "UNLE_lADOABII586kMugSzwAAAAPExqyO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16186256526",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T23:03:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16204090793,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPF1s2p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16204090793",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9618a33eb754443a6bd7d1504d60896013d3a102",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/9618a33eb754443a6bd7d1504d60896013d3a102",
      "created_at": "2025-02-06T04:28:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16271005473,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPJ09ch",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16271005473",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9da91b512cc1c0ff1df657473b601ff6d1a4786c",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/9da91b512cc1c0ff1df657473b601ff6d1a4786c",
      "created_at": "2025-02-11T20:33:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16287907888,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPK1cAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16287907888",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c7624ac16934bdf1dc106f87ce66da328ceeed3d",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/c7624ac16934bdf1dc106f87ce66da328ceeed3d",
      "created_at": "2025-02-12T22:29:24Z"
    },
    {
      "event": "commented",
      "id": 2655103200,
      "node_id": "IC_kwDOABII586eQajg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2655103200",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T23:49:28Z",
      "updated_at": "2025-02-12T23:49:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/37128455883</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2655103200",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "labeled",
      "id": 16288507322,
      "node_id": "LE_lADOABII586kMugSzwAAAAPK3uW6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16288507322",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T23:49:28Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16290332108,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPK-r3M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16290332108",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "490981ff0b9c745793fc6edf43cc28954386fab5",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/490981ff0b9c745793fc6edf43cc28954386fab5",
      "created_at": "2025-02-13T04:33:43Z"
    },
    {
      "event": "unlabeled",
      "id": 16290929989,
      "node_id": "UNLE_lADOABII586kMugSzwAAAAPLA91F",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16290929989",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T05:52:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16318032388,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPMoWoE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16318032388",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1dfe3ca0f712e8effaff9cb4b1f22a3e1377f160",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/1dfe3ca0f712e8effaff9cb4b1f22a3e1377f160",
      "created_at": "2025-02-14T22:27:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16386455066,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPQtXYa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16386455066",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e1e90c7004327e9bde8de4fabcd78fc75361362c",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/e1e90c7004327e9bde8de4fabcd78fc75361362c",
      "created_at": "2025-02-20T17:20:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16407979573,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPR_eY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16407979573",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e43f6ca3b80cff2e05f88223ee9de3e2fe014243",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/e43f6ca3b80cff2e05f88223ee9de3e2fe014243",
      "created_at": "2025-02-21T22:09:24Z"
    },
    {
      "event": "reviewed",
      "id": 2638575710,
      "node_id": "PRR_kwDOABII586dRXhe",
      "url": null,
      "actor": null,
      "commit_id": "e43f6ca3b80cff2e05f88223ee9de3e2fe014243",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#pullrequestreview-2638575710",
      "submitted_at": "2025-02-24T22:20:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
    },
    {
      "event": "reviewed",
      "id": 2638627438,
      "node_id": "PRR_kwDOABII586dRkJu",
      "url": null,
      "actor": null,
      "commit_id": "e43f6ca3b80cff2e05f88223ee9de3e2fe014243",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#pullrequestreview-2638627438",
      "submitted_at": "2025-02-24T22:48:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16541382065,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPZ8XWx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16541382065",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8400928ba1d0e89547c480482a41e05edda05126",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/8400928ba1d0e89547c480482a41e05edda05126",
      "created_at": "2025-03-03T21:51:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16878631671,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPuC3r3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16878631671",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a6ac3751048b4ee3b52de54f38fac338c7a5834b",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/a6ac3751048b4ee3b52de54f38fac338c7a5834b",
      "created_at": "2025-03-19T20:28:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16879645092,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPuGvGk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16879645092",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7e7a49cd2e3b456b95fbc5c75cb5b62472f7d908",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/7e7a49cd2e3b456b95fbc5c75cb5b62472f7d908",
      "created_at": "2025-03-19T21:06:28Z"
    },
    {
      "event": "labeled",
      "id": 16879645757,
      "node_id": "LE_lADOABII586kMugSzwAAAAPuGvQ9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16879645757",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T21:06:33Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2738113567,
      "node_id": "IC_kwDOABII586jNEwf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2738113567",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-19T21:06:34Z",
      "updated_at": "2025-03-19T21:06:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/39067440822</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2738113567",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16880113528,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPuIhd4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16880113528",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3744b8318d8f465603f0e6f9eb72e679d763c4ca",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/3744b8318d8f465603f0e6f9eb72e679d763c4ca",
      "created_at": "2025-03-19T21:23:32Z"
    },
    {
      "event": "unlabeled",
      "id": 16883487972,
      "node_id": "UNLE_lADOABII586kMugSzwAAAAPuVZTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16883487972",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T00:05:26Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 16899699546,
      "node_id": "LE_lADOABII586kMugSzwAAAAPvTPNa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16899699546",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T10:14:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16909702100,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPv5ZPU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16909702100",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c82139ec96573bef6383c974a7c91b8c17954359",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/c82139ec96573bef6383c974a7c91b8c17954359",
      "created_at": "2025-03-20T13:38:12Z"
    },
    {
      "event": "labeled",
      "id": 16909783228,
      "node_id": "LE_lADOABII586kMugSzwAAAAPv5tC8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16909783228",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T13:42:34Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2740502028,
      "node_id": "IC_kwDOABII586jWL4M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2740502028",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T13:42:40Z",
      "updated_at": "2025-03-20T13:42:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/39111492257</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2740502028",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16909798709,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPv5w01",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16909798709",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d9502966c05cc9bf8ff0530066305e7b2e59d797",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/d9502966c05cc9bf8ff0530066305e7b2e59d797",
      "created_at": "2025-03-20T13:43:26Z"
    },
    {
      "event": "unlabeled",
      "id": 16912137947,
      "node_id": "UNLE_lADOABII586kMugSzwAAAAPwCr7b",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16912137947",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T14:35:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 16915115505,
      "node_id": "UNLE_lADOABII586kMugSzwAAAAPwOC3x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16915115505",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T17:24:35Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16937113482,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPxh9eK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16937113482",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "57b885db51557330f63230fa6f73f6d826ae37f4",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/57b885db51557330f63230fa6f73f6d826ae37f4",
      "created_at": "2025-03-22T00:06:33Z"
    },
    {
      "event": "labeled",
      "id": 16937719527,
      "node_id": "LE_lADOABII586kMugSzwAAAAPxkRbn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16937719527",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-22T01:23:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2744862487,
      "node_id": "IC_kwDOABII586jm0cX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2744862487",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-22T01:23:06Z",
      "updated_at": "2025-03-22T01:23:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/39212785621</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2744862487",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16938297667,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPxmelD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16938297667",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d0863b0274e6f223aefaa7f8fd2ec3eb321ec261",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/d0863b0274e6f223aefaa7f8fd2ec3eb321ec261",
      "created_at": "2025-03-22T03:36:19Z"
    },
    {
      "event": "unlabeled",
      "id": 16938715289,
      "node_id": "UNLE_lADOABII586kMugSzwAAAAPxoEiZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16938715289",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-22T04:59:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16945221320,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPyA47I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16945221320",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ed024431a3db758ea9cf21692abc4cd76a693ee9",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/ed024431a3db758ea9cf21692abc4cd76a693ee9",
      "created_at": "2025-03-23T17:53:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16956606117,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAPysUal",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16956606117",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2205de3abbfffb268cf913dd3a46ecd8eca3df5b",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/2205de3abbfffb268cf913dd3a46ecd8eca3df5b",
      "created_at": "2025-03-24T14:05:50Z"
    },
    {
      "event": "referenced",
      "id": 17000519298,
      "node_id": "REFE_lADOABII586kMugSzwAAAAP1T1aC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17000519298",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f1d129d96340503ec5f6b347c2fdf6a6901b1f7e",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1d129d96340503ec5f6b347c2fdf6a6901b1f7e",
      "created_at": "2025-03-26T21:43:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17004233253,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAP1iAIl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17004233253",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ca69204b7496ebcb5fff1efe051157b42601fec8",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/ca69204b7496ebcb5fff1efe051157b42601fec8",
      "created_at": "2025-03-27T03:46:33Z"
    },
    {
      "event": "commented",
      "id": 2756541999,
      "node_id": "IC_kwDOABII586kTX4v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2756541999",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-27T03:49:57Z",
      "updated_at": "2025-03-27T03:49:57Z",
      "author_association": "MEMBER",
      "body": "Rebased after merge of #31363, and on top of #32151.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#issuecomment-2756541999",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31553"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17015944390,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAP2OrTG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17015944390",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fe21d19d3693a5f0d5a888ac4b27a925b1aed168",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/fe21d19d3693a5f0d5a888ac4b27a925b1aed168",
      "created_at": "2025-03-27T15:15:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17021106491,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAP2iXk7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17021106491",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8d600a0b89d629d6d96c555dc0e9f0b5f6d3bfcf",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/8d600a0b89d629d6d96c555dc0e9f0b5f6d3bfcf",
      "created_at": "2025-03-27T19:49:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17025229967,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAP2yGSP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17025229967",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "79b0aded221618e186442ddef3d64f2debe4d7a0",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/79b0aded221618e186442ddef3d64f2debe4d7a0",
      "created_at": "2025-03-28T03:52:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17033522057,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAP3RuuJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17033522057",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "22cc58dc0d26927f4aca1c8f8409a1aa1fdb46a5",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/22cc58dc0d26927f4aca1c8f8409a1aa1fdb46a5",
      "created_at": "2025-03-28T14:23:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17038791248,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAP3l1JQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17038791248",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "deaa870b2c3b54ddd5520e5af54dbd25fa5b4636",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/deaa870b2c3b54ddd5520e5af54dbd25fa5b4636",
      "created_at": "2025-03-28T20:58:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17134231822,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAP9R6EO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17134231822",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "597a4fb2da55a49208563f470bda80fa080345f8",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/597a4fb2da55a49208563f470bda80fa080345f8",
      "created_at": "2025-04-04T18:16:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17135880170,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAP9YMfq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17135880170",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "516e4621ffa7cfcfb1582608ef13c42b1945cdf5",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/516e4621ffa7cfcfb1582608ef13c42b1945cdf5",
      "created_at": "2025-04-04T21:09:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17154021384,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAP-dZgI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17154021384",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5d0ab95dda09d45491aa82ef0d4b7f28575184d0",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/5d0ab95dda09d45491aa82ef0d4b7f28575184d0",
      "created_at": "2025-04-07T13:39:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17157249366,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAP-ptlW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17157249366",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "acab35f29e51faa5760bcf6a2e8acb2bb820a0ba",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/acab35f29e51faa5760bcf6a2e8acb2bb820a0ba",
      "created_at": "2025-04-07T16:50:10Z"
    },
    {
      "event": "labeled",
      "id": 17310623665,
      "node_id": "LE_lADOABII586kMugSzwAAAAQHyyex",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17310623665",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-17T19:02:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17312268115,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAQH5D9T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17312268115",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "03ba813edf927233e7990bc40b8cb50f4c942460",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/03ba813edf927233e7990bc40b8cb50f4c942460",
      "created_at": "2025-04-17T21:57:30Z"
    },
    {
      "event": "unsubscribed",
      "id": 17312320887,
      "node_id": "UE_lADOABII586kMugSzwAAAAQH5Q13",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17312320887",
      "actor": {
        "login": "Hasnainkhan14",
        "id": 190982247,
        "node_id": "U_kgDOC2IoZw",
        "avatar_url": "https://avatars.githubusercontent.com/u/190982247?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Hasnainkhan14",
        "html_url": "https://github.com/Hasnainkhan14",
        "followers_url": "https://api.github.com/users/Hasnainkhan14/followers",
        "following_url": "https://api.github.com/users/Hasnainkhan14/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Hasnainkhan14/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Hasnainkhan14/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Hasnainkhan14/subscriptions",
        "organizations_url": "https://api.github.com/users/Hasnainkhan14/orgs",
        "repos_url": "https://api.github.com/users/Hasnainkhan14/repos",
        "events_url": "https://api.github.com/users/Hasnainkhan14/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Hasnainkhan14/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-17T22:03:16Z"
    },
    {
      "event": "unlabeled",
      "id": 17312832585,
      "node_id": "UNLE_lADOABII586kMugSzwAAAAQH7NxJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17312832585",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-17T23:19:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17360140983,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAQKvrq3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17360140983",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3566dca6c92e4e35ed63fba6fa1c9854e272ed2f",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/3566dca6c92e4e35ed63fba6fa1c9854e272ed2f",
      "created_at": "2025-04-22T20:51:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17475263605,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAQRm1x1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17475263605",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b004e9d8d75925cd461f9c4a084f794021c28bb5",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/b004e9d8d75925cd461f9c4a084f794021c28bb5",
      "created_at": "2025-04-30T15:25:43Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI2MTRmZWExN2ZlM2MxNzljYTNhMjU2ZmFkZjQ5OGFlOGNiYzAzZTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2614fea17fe3c179ca3a256fadf498ae8cbc03e0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2614fea17fe3c179ca3a256fadf498ae8cbc03e0",
      "tree": {
        "sha": "3c588d40497d574f332e96f125a952223016a772",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c588d40497d574f332e96f125a952223016a772"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/663a9cabf811e2fc53102bc6da00d09fc99d1d81",
          "sha": "663a9cabf811e2fc53102bc6da00d09fc99d1d81",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/663a9cabf811e2fc53102bc6da00d09fc99d1d81"
        }
      ],
      "message": "txgraph: Add GetMainStagingDiagrams function (feature)\n\nThis allows determining whether the changes in a staging diagram unambiguously improve\nthe graph, through CompareChunks().",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T20:00:24Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-11-28T15:40:42Z"
      },
      "sha": "2614fea17fe3c179ca3a256fadf498ae8cbc03e0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg3ZTc0ZTEyNDJlY2U1ZmMzMGU2NWQ0ODgxZjI0YmUzYTBkMDJlNDQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87e74e1242ece5fc30e65d4881f24be3a0d02e44",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/87e74e1242ece5fc30e65d4881f24be3a0d02e44",
      "tree": {
        "sha": "554b420de3308e9d0038a272277b0760390fd21f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/554b420de3308e9d0038a272277b0760390fd21f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2614fea17fe3c179ca3a256fadf498ae8cbc03e0",
          "sha": "2614fea17fe3c179ca3a256fadf498ae8cbc03e0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2614fea17fe3c179ca3a256fadf498ae8cbc03e0"
        }
      ],
      "message": "txgraph: abstract out transaction ordering (refactor)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:00:33Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:00:33Z"
      },
      "sha": "87e74e1242ece5fc30e65d4881f24be3a0d02e44"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkwOTVkOGFjMWMzMTljZGYxYjlkNDRhMWZhNTk5M2U5YTU1Y2NiMjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9095d8ac1c319cdf1b9d44a1fa5993e9a55ccb21",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9095d8ac1c319cdf1b9d44a1fa5993e9a55ccb21",
      "tree": {
        "sha": "7d1d5380b17bab3eb41e3c65c6b47f3e360db7b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d1d5380b17bab3eb41e3c65c6b47f3e360db7b4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87e74e1242ece5fc30e65d4881f24be3a0d02e44",
          "sha": "87e74e1242ece5fc30e65d4881f24be3a0d02e44",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/87e74e1242ece5fc30e65d4881f24be3a0d02e44"
        }
      ],
      "message": "txgraph: Maintain chunk index (preparation)\n\nThis is preparation for exposing mining and eviction functionality in\nTxGraph.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:28Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-11-14T20:54:03Z"
      },
      "sha": "9095d8ac1c319cdf1b9d44a1fa5993e9a55ccb21"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMyOGE2MDJlMDA3ZmNjMDI3NWJjMzRmNTg2OTA4MjBlYmU0YzkxNjI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c28a602e007fcc0275bc34f58690820ebe4c9162",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c28a602e007fcc0275bc34f58690820ebe4c9162",
      "tree": {
        "sha": "2fcbabe6686834db83178fcc24c4b69bffd15022",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fcbabe6686834db83178fcc24c4b69bffd15022"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9095d8ac1c319cdf1b9d44a1fa5993e9a55ccb21",
          "sha": "9095d8ac1c319cdf1b9d44a1fa5993e9a55ccb21",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9095d8ac1c319cdf1b9d44a1fa5993e9a55ccb21"
        }
      ],
      "message": "txgraph: Introduce TxGraphImpl observer tracking (preparation)\n\nThis is preparation for a next commit which will introduce a class whose\nobjects hold references to internals in TxGraphImpl, which disallows\nmodifications to the graph while such objects exist.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:30Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-11-25T16:31:02Z"
      },
      "sha": "c28a602e007fcc0275bc34f58690820ebe4c9162"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg4M2RmMzY0OGVlOTI4NDFlNTE1YmI2ZDhkMjU5Y2I3MDU0NDkzYjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/883df3648ee92841e515bb6d8d259cb7054493b1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/883df3648ee92841e515bb6d8d259cb7054493b1",
      "tree": {
        "sha": "7e38f59f9edcb1cee6b81b6a40da91d248110edd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e38f59f9edcb1cee6b81b6a40da91d248110edd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c28a602e007fcc0275bc34f58690820ebe4c9162",
          "sha": "c28a602e007fcc0275bc34f58690820ebe4c9162",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c28a602e007fcc0275bc34f58690820ebe4c9162"
        }
      ],
      "message": "txgraph: Generalize GetClusterRefs to support subsections (preparation)\n\nThis is preparation for a next commit which will need a way to extract Refs\nfor just individual chunks from a cluster.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:30Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-03-28T14:04:28Z"
      },
      "sha": "883df3648ee92841e515bb6d8d259cb7054493b1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDM5NGRiZTIxNDI3ZWUzMGNjYTczZDJiMWUzMWYxOGEwMGE3NmExYTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/394dbe21427ee30cca73d2b1e31f18a00a76a1a1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/394dbe21427ee30cca73d2b1e31f18a00a76a1a1",
      "tree": {
        "sha": "33cc4c33c5e380a38694ac3f9fe97f26d43806f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33cc4c33c5e380a38694ac3f9fe97f26d43806f6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/883df3648ee92841e515bb6d8d259cb7054493b1",
          "sha": "883df3648ee92841e515bb6d8d259cb7054493b1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/883df3648ee92841e515bb6d8d259cb7054493b1"
        }
      ],
      "message": "txgraph: Introduce BlockBuilder interface (feature)\n\nThis interface lets one iterate efficiently over the chunks of the main\ngraph in a TxGraph, in the same order as CompareMainOrder. Each chunk\ncan be marked as \"included\" or \"skipped\" (and in the latter case,\ndependent chunks will be skipped).",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:30Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-03-28T13:58:09Z"
      },
      "sha": "394dbe21427ee30cca73d2b1e31f18a00a76a1a1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM3MzQwODE0NTRkN2Q3NTUyYjEzODhhMjdkZTY0OGJjZGQyZTRiM2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c734081454d7d7552b1388a27de648bcdd2e4b3a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c734081454d7d7552b1388a27de648bcdd2e4b3a",
      "tree": {
        "sha": "2542e488028b6b6e3fe7071d45ea18fcde363314",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2542e488028b6b6e3fe7071d45ea18fcde363314"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/394dbe21427ee30cca73d2b1e31f18a00a76a1a1",
          "sha": "394dbe21427ee30cca73d2b1e31f18a00a76a1a1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/394dbe21427ee30cca73d2b1e31f18a00a76a1a1"
        }
      ],
      "message": "txgraph: Introduce TxGraph::GetWorstMainChunk (feature)\n\nIt returns the last chunk that would be suggested for mining by BlockBuilder\nobjects. This is intended for eviction.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:30Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-01-08T22:18:12Z"
      },
      "sha": "c734081454d7d7552b1388a27de648bcdd2e4b3a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYwNGFjYzJjMjg5ZmIxODdmNTU0MzlhMjlkY2EwMmQzOTE2M2RmMjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/604acc2c289fb187f55439a29dca02d39163df25",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/604acc2c289fb187f55439a29dca02d39163df25",
      "tree": {
        "sha": "0be0e68afdd5906b724a03f773753faab83d2595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0be0e68afdd5906b724a03f773753faab83d2595"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c734081454d7d7552b1388a27de648bcdd2e4b3a",
          "sha": "c734081454d7d7552b1388a27de648bcdd2e4b3a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c734081454d7d7552b1388a27de648bcdd2e4b3a"
        }
      ],
      "message": "txgraph: Reuse discarded chunkindex entries (optimization)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:30Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-12-02T18:33:41Z"
      },
      "sha": "604acc2c289fb187f55439a29dca02d39163df25"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFiZGQ5ZDM1YTM0ZGQ5Y2Q1ODljMWI5MjVhYjQyNDFkMTVlNjQ0NmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abdd9d35a34dd9cd589c1b925ab4241d15e6446c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/abdd9d35a34dd9cd589c1b925ab4241d15e6446c",
      "tree": {
        "sha": "4d4d6028aa230bdf11e17e57748b1e3a3861bb4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d4d6028aa230bdf11e17e57748b1e3a3861bb4f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/604acc2c289fb187f55439a29dca02d39163df25",
          "sha": "604acc2c289fb187f55439a29dca02d39163df25",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/604acc2c289fb187f55439a29dca02d39163df25"
        }
      ],
      "message": "txgraph: Skipping end of cluster has no impact (optimization)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:30Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-11-27T21:12:10Z"
      },
      "sha": "abdd9d35a34dd9cd589c1b925ab4241d15e6446c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg2NzNlOGYwMTkxN2I0OGE1ZjU0NzY3OTJmNzU5ZjQ0ZWE0OWQ1YTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8673e8f01917b48a5f5476792f759f44ea49d5a5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8673e8f01917b48a5f5476792f759f44ea49d5a5",
      "tree": {
        "sha": "d2540a0dd8349a1471380c27a15a1f002a00c8ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2540a0dd8349a1471380c27a15a1f002a00c8ec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abdd9d35a34dd9cd589c1b925ab4241d15e6446c",
          "sha": "abdd9d35a34dd9cd589c1b925ab4241d15e6446c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/abdd9d35a34dd9cd589c1b925ab4241d15e6446c"
        }
      ],
      "message": "txgraph: Special-case singletons in chunk index (optimization)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:30Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-11-27T20:29:40Z"
      },
      "sha": "8673e8f01917b48a5f5476792f759f44ea49d5a5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY2MmMyZjQ1ZmM4ZWExZDgzYWFjY2RlOTQ5OGM2YzhiNGI0ZDExOTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/662c2f45fc8ea1d83aaccde9498c6c8b4b4d1196",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/662c2f45fc8ea1d83aaccde9498c6c8b4b4d1196",
      "tree": {
        "sha": "9de95c5b3bd22728334872634dc0e81b482112de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9de95c5b3bd22728334872634dc0e81b482112de"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8673e8f01917b48a5f5476792f759f44ea49d5a5",
          "sha": "8673e8f01917b48a5f5476792f759f44ea49d5a5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8673e8f01917b48a5f5476792f759f44ea49d5a5"
        }
      ],
      "message": "txgraph: Add ability to configure maximum cluster size/weight (feature)\n\nThis is integrated with the oversized property: the graph is oversized when\nany connected component within it contains more than the cluster count limit\nmany transactions, or when their combined size/weight exceeds the cluster size\nlimit.\n\nIt becomes disallowed to call AddTransaction with a size larger than this limit.\nIn addition, SetTransactionFeeRate becomes SetTransactionFee, so that we do not\nneed to deal with the case that a call to this function might affect the\noversizedness.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:30Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-12-17T13:13:25Z"
      },
      "sha": "662c2f45fc8ea1d83aaccde9498c6c8b4b4d1196"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNhOGY2YzRmNjdkYTllZGVkYmU1Y2NkZGIxOWFmODlmOWYyMTVhZjQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a8f6c4f67da9ededbe5ccddb19af89f9f215af4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3a8f6c4f67da9ededbe5ccddb19af89f9f215af4",
      "tree": {
        "sha": "ac4a86696e8dcfba8e07d7fd63a531d857c40aec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac4a86696e8dcfba8e07d7fd63a531d857c40aec"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/662c2f45fc8ea1d83aaccde9498c6c8b4b4d1196",
          "sha": "662c2f45fc8ea1d83aaccde9498c6c8b4b4d1196",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/662c2f45fc8ea1d83aaccde9498c6c8b4b4d1196"
        }
      ],
      "message": "txgraph: Permit transactions that exceed cluster size limit (feature)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:30Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-01-25T19:24:41Z"
      },
      "sha": "3a8f6c4f67da9ededbe5ccddb19af89f9f215af4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU4Y2MxMWMyYmEwNzE2Y2QxYWQyMjY0MDU2YWNmYWYzYTA0Yjc5YjU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8cc11c2ba0716cd1ad2264056acfaf3a04b79b5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e8cc11c2ba0716cd1ad2264056acfaf3a04b79b5",
      "tree": {
        "sha": "bcbb70f0004de8e33eb9d8f2c7a0edb82094a75b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcbb70f0004de8e33eb9d8f2c7a0edb82094a75b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a8f6c4f67da9ededbe5ccddb19af89f9f215af4",
          "sha": "3a8f6c4f67da9ededbe5ccddb19af89f9f215af4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3a8f6c4f67da9ededbe5ccddb19af89f9f215af4"
        }
      ],
      "message": "txgraph: Add ability to trim oversized clusters (feature)\n\nDuring reorganisations, it is possible that dependencies get add which\nresult in clusters that violate limits (count, size), when linking the\nnew from-block transactions to the old from-mempool transactions.\n\nUnlike RBF scenarios, we cannot simply reject these policy violations\nwhen they are due to received blocks. To accomodate this, add a Trim()\nfunction to TxGraph, which removes transactions (including descendants)\nin order to make all resulting clusters satisfy the limits.",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:30Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-12-16T22:57:57Z"
      },
      "sha": "e8cc11c2ba0716cd1ad2264056acfaf3a04b79b5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBlZTk2NzQ3ZjI3YmEzMjE5OWNjMDQ4Y2JiNTUzMDM1ZWZhMWQxNzQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ee96747f27ba32199cc048cbb553035efa1d174",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0ee96747f27ba32199cc048cbb553035efa1d174",
      "tree": {
        "sha": "4d18ed46b0ec95d63aedb44c78ae7feabc530670",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d18ed46b0ec95d63aedb44c78ae7feabc530670"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8cc11c2ba0716cd1ad2264056acfaf3a04b79b5",
          "sha": "e8cc11c2ba0716cd1ad2264056acfaf3a04b79b5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e8cc11c2ba0716cd1ad2264056acfaf3a04b79b5"
        }
      ],
      "message": "txgraph: Track multiple potential would-be clusters in Trim (improvement)\n\nIn a Trim function, for any given would-be group of clusters, a (rudimentary)\nlinearization for the would-be cluster is constructed on the fly by adding\neligible transactions to a heap. This continues until the total count or\nsize of the transaction exists a configured limit. Any transactions which\nappear later in this linearization are discarded.\n\nHowever, given that transactions at the end are discarded, it is possible that\nthe would-be cluster splits apart into multiple clusters. And those clusters\nmay well permit far more transactions before their limits are reached.\n\nTake this into account by using a union-find structure inside TrimTxData to\nkeep track of the count/size of all would-be clusters that would be formed\nat any point.\n\nThis is not an optimization in terms of CPU usage or memory; it just\nimproves the quality of the transactions removed by Trim().",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2025-05-12T21:07:30Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2024-12-20T04:06:07Z"
      },
      "sha": "0ee96747f27ba32199cc048cbb553035efa1d174"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17624308358,
      "node_id": "HRFPE_lADOABII586kMugSzwAAAAQafZqG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17624308358",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "commit_url": "https://api.github.com/repos/sipa/bitcoin/commits/0ee96747f27ba32199cc048cbb553035efa1d174",
      "created_at": "2025-05-12T21:13:01Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909286865",
      "pull_request_review_id": 2540686525,
      "id": 1909286865,
      "node_id": "PRRC_kwDOABII585xzWfR",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {\n+            ClusterIndex idx = m_linearization[lin_idx++];\n+            GraphIndex graph_idx = m_mapping[idx];\n+            auto& entry = graph.m_entries[graph_idx];\n+            entry.m_chunk_feerate = chunk.feerate;\n+            chunk.transactions.Reset(idx);\n+            if (chunk.transactions.None()) break;\n+        }\n+    }\n+}\n+\n+void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // Iterate over the prefix of to_remove that applies to this cluster.\n+    SetType todo;\n+    do {\n+        GraphIndex idx = to_remove.front();\n+        auto& entry = graph.m_entries[idx];\n+        auto& locator = entry.m_locator;\n+        // Stop once we hit an entry that applies to another Cluster.\n+        if (locator.cluster != this) break;\n+        // - Remember it in a set of to-remove ClusterIndexes.\n+        todo.Set(locator.index);\n+        // - Remove from m_mapping.\n+        m_mapping[locator.index] = GraphIndex(-1);\n+        // - Mark it as removed in the Entry's locator.\n+        locator.SetMissing();\n+        if (entry.IsWiped()) graph.m_wiped.push_back(idx);\n+        to_remove = to_remove.subspan(1);\n+        --graph.m_txcount;\n+    } while(!to_remove.empty());\n+\n+    Assume(todo.Any());\n+    // Wipe from the Cluster's DepGraph (this is O(n) regardless of the number of entries\n+    // removed, so we benefit from batching all the removals).\n+    m_depgraph.RemoveTransactions(todo);\n+    m_mapping.resize(m_depgraph.PositionRange());\n+\n+    // Filter removals out of m_linearization.\n+    m_linearization.erase(std::remove_if(\n+        m_linearization.begin(),\n+        m_linearization.end(),\n+        [&](auto pos) { return todo[pos]; }), m_linearization.end());\n+\n+    graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    Updated(graph);\n+}\n+\n+bool Cluster::Split(TxGraphImpl& graph) noexcept\n+{\n+    // This function can only be called when the Cluster needs splitting.\n+    Assume(m_quality == QualityLevel::NEEDS_SPLIT);\n+    /** Which positions are still left in this Cluster. */\n+    auto todo = m_depgraph.Positions();\n+    /** Mapping from transaction positions in this Cluster to the Cluster where it ends up, and\n+     *  its position therein. */\n+    std::vector<std::pair<Cluster*, ClusterIndex>> remap(m_depgraph.PositionRange());\n+    std::vector<Cluster*> new_clusters;\n+    bool first{true};\n+    // Iterate over the connected components of this Cluster's m_depgraph.\n+    while (todo.Any()) {\n+        auto component = m_depgraph.FindConnectedComponent(todo);\n+        if (first && component == todo) {\n+            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+            graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+            // We need to recompute and cache its chunking.\n+            Updated(graph);\n+            return false;\n+        }\n+        first = false;\n+        // Construct a new Cluster to hold the found component.\n+        auto new_cluster = std::make_unique<Cluster>();\n+        new_clusters.push_back(new_cluster.get());\n+        // Remember that all the component's transaction go to this new Cluster. The positions\n+        // will be determined below, so use -1 for now.\n+        for (auto i : component) {\n+            remap[i] = {new_cluster.get(), ClusterIndex(-1)};\n+        }\n+        graph.InsertCluster(std::move(new_cluster), QualityLevel::NEEDS_RELINEARIZE);\n+        todo -= component;\n+    }\n+    // Redistribute the transactions.\n+    for (auto i : m_linearization) {\n+        /** The cluster which transaction originally in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy the transaction to the new cluster's depgraph, and remember the position.\n+        remap[i].second = new_cluster->m_depgraph.AddTransaction(m_depgraph.FeeRate(i));\n+        // Create new mapping entry.\n+        new_cluster->m_mapping.push_back(m_mapping[i]);\n+        // Create a new linearization entry. As we're only appending transactions, they equal the\n+        // ClusterIndex.\n+        new_cluster->m_linearization.push_back(remap[i].second);\n+    }\n+    // Redistribute the dependencies.\n+    for (auto i : m_linearization) {\n+        /** The cluster transaction in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy its parents, translating positions.\n+        SetType new_parents;\n+        for (auto par : m_depgraph.GetReducedParents(i)) new_parents.Set(remap[par].second);\n+        new_cluster->m_depgraph.AddDependencies(new_parents, remap[i].second);\n+    }\n+    // Update all the Locators of moved transactions.\n+    for (Cluster* new_cluster : new_clusters) {\n+        new_cluster->Updated(graph);\n+    }\n+    // Wipe this Cluster, and return that it needs to be deleted.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_mapping.clear();\n+    m_linearization.clear();\n+    return true;\n+}\n+\n+void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+{\n+    /** Vector to store the positions in this Cluster for each position in other. */\n+    std::vector<ClusterIndex> remap(other.m_depgraph.PositionRange());\n+    // Iterate over all transactions in the other Cluster (the one being absorbed).\n+    for (auto pos : other.m_linearization) {\n+        auto idx = other.m_mapping[pos];\n+        // Copy the transaction into this Cluster, and remember its position.\n+        auto new_pos = m_depgraph.AddTransaction(other.m_depgraph.FeeRate(pos));\n+        remap[pos] = new_pos;\n+        if (new_pos == m_mapping.size()) {\n+            m_mapping.push_back(idx);\n+        } else {\n+            m_mapping[new_pos] = idx;\n+        }\n+        m_linearization.push_back(new_pos);\n+        // Copy the transaction's dependencies, translating them using remap.\n+        SetType parents;\n+        for (auto par : other.m_depgraph.GetReducedParents(pos)) {\n+            parents.Set(remap[par]);\n+        }\n+        m_depgraph.AddDependencies(parents, remap[pos]);\n+        // Update the transaction's Locator. There is no need to call Updated() to update chunk\n+        // feerates, as Updated() will be invoked by Cluster::ApplyDependencies on the resulting\n+        // merged Cluster later anyway).\n+        graph.m_entries[idx].m_locator.SetPresent(this, new_pos);\n+    }\n+    // Purge the other Cluster, now that everything has been moved.\n+    other.m_depgraph = DepGraph<SetType>{};\n+    other.m_linearization.clear();\n+    other.m_mapping.clear();\n+}\n+\n+void Cluster::ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept\n+{\n+    // This function is invoked by TxGraphImpl::ApplyDependencies after merging groups of Clusters\n+    // between which dependencies are added, which simply concatenates their linearizations. Invoke\n+    // PostLinearize, which has the effect that the linearization becomes a merge-sort of the\n+    // constituent linearizations. Do this here rather than in Cluster::Merge, because this\n+    // function is only invoked once per merged Cluster, rather than once per constituent one.\n+    // This concatenation + post-linearization could be replaced with an explicit merge-sort.\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Sort the list of dependencies to apply by child, so those can be applied in batch.\n+    std::sort(to_apply.begin(), to_apply.end(), [](auto& a, auto& b) { return a.second < b.second; });\n+    // Iterate over groups of to-be-added dependencies with the same child.\n+    auto it = to_apply.begin();\n+    while (it != to_apply.end()) {\n+        auto& first_child = graph.m_entries[it->second].m_locator;\n+        ClusterIndex child_idx = first_child.index;\n+        // Iterate over all to-be-added dependencies within that same child, gather the relevant\n+        // parents.\n+        SetType parents;\n+        while (it != to_apply.end()) {\n+            auto& child = graph.m_entries[it->second].m_locator;\n+            auto& parent = graph.m_entries[it->first].m_locator;\n+            Assume(child.cluster == this && parent.cluster == this);\n+            if (child.index != child_idx) break;\n+            parents.Set(parent.index);\n+            ++it;\n+        }\n+        // Push all dependencies to the underlying DepGraph. Note that this is O(N) in the size of\n+        // the cluster, regardless of the number of parents being added, so batching them together\n+        // has a performance benefit.\n+        m_depgraph.AddDependencies(parents, child_idx);\n+    }\n+\n+    // Finally fix the linearization, as the new dependencies may have invalidated the\n+    // linearization, and post-linearize it to fix up the worst problems with it.\n+    FixLinearization(m_depgraph, m_linearization);\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Finally push the changes to graph.m_entries.\n+    Updated(graph);\n+}\n+\n+std::unique_ptr<Cluster> TxGraphImpl::ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept\n+{\n+    Assume(quality != QualityLevel::NONE);\n+\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    Assume(setindex < quality_clusters.size());\n+\n+    // Extract the Cluster-owning unique_ptr.\n+    std::unique_ptr<Cluster> ret = std::move(quality_clusters[setindex]);\n+    ret->m_quality = QualityLevel::NONE;\n+    ret->m_setindex = ClusterSetIndex(-1);\n+\n+    // Clean up space in quality_cluster.\n+    auto max_setindex = quality_clusters.size() - 1;\n+    if (setindex != max_setindex) {\n+        // If the cluster was not the last element of quality_clusters, move that to take its place.\n+        quality_clusters.back()->m_quality = quality;\n+        quality_clusters.back()->m_setindex = setindex;\n+        quality_clusters[setindex] = std::move(quality_clusters.back());\n+    }\n+    // The last element of quality_clusters is now unused; drop it.\n+    quality_clusters.pop_back();\n+\n+    return ret;\n+}\n+\n+ClusterSetIndex TxGraphImpl::InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept\n+{\n+    // Cannot insert with quality level NONE (as that would mean not inserted).\n+    Assume(quality != QualityLevel::NONE);\n+    // The passed-in Cluster must not currently be in the TxGraphImpl.\n+    Assume(cluster->m_quality == QualityLevel::NONE);\n+\n+    // Append it at the end of the relevant TxGraphImpl::m_cluster.\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    ClusterSetIndex ret = quality_clusters.size();\n+    cluster->m_quality = quality;\n+    cluster->m_setindex = ret;\n+    quality_clusters.push_back(std::move(cluster));\n+    return ret;\n+}\n+\n+void TxGraphImpl::SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept\n+{\n+    Assume(new_quality != QualityLevel::NONE);\n+\n+    // Don't do anything if the quality did not change.\n+    if (old_quality == new_quality) return;\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(old_quality, old_index);\n+    // And re-insert it where it belongs.\n+    InsertCluster(std::move(cluster_ptr), new_quality);\n+}\n+\n+void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+{\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(cluster.m_quality, cluster.m_setindex);\n+    // And throw it away.\n+    cluster_ptr.reset();\n+}\n+\n+void TxGraphImpl::ApplyRemovals() noexcept\n+{\n+    auto& to_remove = m_to_remove;\n+    // Skip if there is nothing to remove.\n+    if (to_remove.empty()) return;\n+    // Wipe cached m_group_data, as it may be invalidated by removals.\n+    m_group_data = std::nullopt;\n+    m_group_clusters.clear();\n+    // Group the set of to-be-removed entries by Cluster*.\n+    std::sort(m_to_remove.begin(), m_to_remove.end(), [&](GraphIndex a, GraphIndex b) noexcept {\n+        return std::less{}(m_entries[a].m_locator.cluster, m_entries[b].m_locator.cluster);\n+    });\n+    // Process per Cluster.\n+    std::span to_remove_span{m_to_remove};\n+    while (!to_remove_span.empty()) {\n+        Cluster* cluster = m_entries[to_remove_span.front()].m_locator.cluster;\n+        if (cluster != nullptr) {\n+            // If the first to_remove_span entry's Cluster exists, hand to_remove_span to it, so it\n+            // can pop off whatever applies to it.\n+            cluster->ApplyRemovals(*this, to_remove_span);\n+        } else {\n+            // Otherwise, skip this already-removed entry.\n+            to_remove_span = to_remove_span.subspan(1);\n+        }\n+    }\n+    m_to_remove.clear();\n+}\n+\n+void TxGraphImpl::SwapIndexes(GraphIndex a, GraphIndex b) noexcept\n+{\n+    Assume(a < m_entries.size());\n+    Assume(b < m_entries.size());\n+    // Swap the Entry objects.\n+    std::swap(m_entries[a], m_entries[b]);\n+    // Iterate over both objects.\n+    for (int i = 0; i < 2; ++i) {\n+        GraphIndex idx = i ? b : a;\n+        Entry& entry = m_entries[idx];\n+        // Update linked Ref.\n+        if (entry.m_ref) GetRefIndex(*entry.m_ref) = idx;\n+        // Update the locator. The rest of the Entry information will not change, so no need to\n+        // invoke Cluster::Updated().\n+        Locator& locator = entry.m_locator;\n+        if (locator.IsPresent()) {\n+            locator.cluster->UpdateMapping(locator.index, idx);\n+        }\n+    }\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::Cleanup() noexcept\n+{\n+    ApplyDependencies();\n+    std::vector<Ref*> ret;\n+    // Sort the GraphIndex that need to be cleaned up. This groups them (so duplicates can be\n+    // processed just once). They are sorted in reverse, so the last ones get processed first.\n+    // This means earlier-processed GraphIndexes will not move of later-processed ones (which\n+    // might invalidate them).\n+    std::sort(m_wiped.begin(), m_wiped.end(), std::greater{});\n+    GraphIndex last(-1);\n+    for (GraphIndex idx : m_wiped) {\n+        // m_wiped should never contain the same GraphIndex twice (the code below would fail\n+        // if so, because GraphIndexes get invalidated by removing them).\n+        Assume(idx != last);\n+        last = idx;\n+        Entry& entry = m_entries[idx];\n+        // Gather Ref pointers that are being unlinked.\n+        if (entry.m_ref != nullptr) {\n+            ret.push_back(entry.m_ref);\n+            GetRefGraph(*entry.m_ref) = nullptr;\n+            m_entries[idx].m_ref = nullptr;\n+        }\n+        // Verify removed entries don't have anything that could hold a reference back.\n+        Assume(!entry.m_locator.IsPresent());\n+        if (idx != m_entries.size() - 1) SwapIndexes(idx, m_entries.size() - 1);\n+        m_entries.pop_back();\n+    }\n+    m_wiped.clear();\n+    return ret;\n+}\n+\n+void TxGraphImpl::Split(Cluster& cluster) noexcept\n+{\n+    // To split a Cluster, first make sure all removals are applied (as we might need to split\n+    // again afterwards otherwise).\n+    ApplyRemovals();\n+    bool del = cluster.Split(*this);\n+    if (del) {\n+        // Cluster::Split reports whether the Cluster is to be deleted.\n+        DeleteCluster(cluster);\n+    }\n+}\n+\n+void TxGraphImpl::SplitAll() noexcept\n+{\n+    // Before splitting all Cluster, first make sure all removals are applied.\n+    ApplyRemovals();\n+    auto& queue = m_clusters[int(QualityLevel::NEEDS_SPLIT)];\n+    while (!queue.empty()) {\n+        Split(*queue.back().get());\n+    }\n+}\n+\n+void TxGraphImpl::GroupClusters() noexcept\n+{\n+    // Before computing which Clusters need to be merged together, first apply all removals and\n+    // split the Clusters into connected components. If we would group first, we might end up\n+    // with inefficient Clusters which just end up being split again anyway.\n+    SplitAll();\n+\n+    // If the groupings have been computed already, nothing is left to be done.\n+    if (m_group_data.has_value()) return;\n+\n+    /** Annotated clusters: an entry for each Cluster, together with the representative for the\n+     *  partition it is in if known, or with nullptr if not yet known. */\n+    std::vector<std::pair<Cluster*, Cluster*>> an_clusters;\n+    /** Annotated dependencies: an entry for each m_deps_to_apply entry (excluding ones that apply\n+     *  to removed transactions), together with the representative root of the partition of\n+     *  Clusters it applies to. */\n+    std::vector<std::pair<std::pair<GraphIndex, GraphIndex>, Cluster*>> an_deps;\n+\n+    // Construct a an_clusters entry for every parent and child in the to-be-applied dependencies.\n+    for (const auto& [par, chl] : m_deps_to_add) {\n+        auto par_cluster = m_entries[par].m_locator.cluster;\n+        auto chl_cluster = m_entries[chl].m_locator.cluster;\n+        // Skip dependencies for which the parent or child transaction is removed.\n+        if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+        an_clusters.emplace_back(par_cluster, nullptr);\n+        // Do not include a duplicate when parent and child are identical, as it'll be removed\n+        // below anyway.\n+        if (chl_cluster != par_cluster) an_clusters.emplace_back(chl_cluster, nullptr);\n+    }\n+    // Sort and deduplicate an_clusters, so we end up with a sorted list of all involved Clusters\n+    // to which dependencies apply.\n+    std::sort(an_clusters.begin(), an_clusters.end());\n+    an_clusters.erase(std::unique(an_clusters.begin(), an_clusters.end()), an_clusters.end());\n+\n+    // Sort the dependencies by child Cluster.\n+    std::sort(m_deps_to_add.begin(), m_deps_to_add.end(), [&](auto& a, auto& b) noexcept {\n+        auto [_a_par, a_chl] = a;\n+        auto [_b_par, b_chl] = b;\n+        auto a_chl_cluster = m_entries[a_chl].m_locator.cluster;\n+        auto b_chl_cluster = m_entries[b_chl].m_locator.cluster;\n+        return std::less{}(a_chl_cluster, b_chl_cluster);\n+    });\n+\n+    // Run the union-find algorithm to to find partitions of the input Clusters which need to be\n+    // grouped together. See https://en.wikipedia.org/wiki/Disjoint-set_data_structure.\n+    {\n+        /** Each PartitionData entry contains information about a single input Cluster. */\n+        struct PartitionData\n+        {\n+            /** The cluster this holds information for. */\n+            Cluster* cluster;\n+            /** All PartitionData entries belonging to the same partition are organized in a tree.\n+             *  Each element points to its parent, or to itself if it is the root. The root is then\n+             *  a representative for the entire tree, and can be found by walking upwards from any\n+             *  element. */\n+            PartitionData* parent;\n+            /** (only if this is a root, so when parent == this) An upper bound on the height of\n+             *  tree for this partition. */\n+            unsigned rank;\n+        };\n+        /** Information about each input Cluster. Sorted by Cluster* pointer. */\n+        std::vector<PartitionData> partition_data;\n+\n+        /** Given a Cluster, find its corresponding PartitionData. */\n+        auto locate_uf = [&](Cluster* arg) noexcept -> PartitionData* {\n+            auto it = std::lower_bound(partition_data.begin(), partition_data.end(), arg,\n+                                       [](auto& a, Cluster* ptr) noexcept { return a.cluster < ptr; });\n+            Assume(it != partition_data.end());\n+            Assume(it->cluster == arg);\n+            return &*it;\n+        };\n+\n+        /** Given a PartitionData, find the root of the tree it is in (its representative). */\n+        static constexpr auto find_uf = [](PartitionData* data) noexcept -> PartitionData* {\n+            while (data->parent != data) {\n+                // Replace pointers to parents with pointers to grandparents.\n+                // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Finding_set_representatives.\n+                auto par = data->parent;\n+                data->parent = par->parent;\n+                data = par;\n+            }\n+            return data;\n+        };\n+\n+        /** Given two PartitionDatas, union the partitions they are in, and return their\n+         *  representative. */\n+        static constexpr auto union_uf = [](PartitionData* arg1, PartitionData* arg2) noexcept {\n+            // Find the roots of the trees, and bail out if they are already equal (which would\n+            // mean they are in the same partition already).\n+            auto rep1 = find_uf(arg1);\n+            auto rep2 = find_uf(arg2);\n+            if (rep1 == rep2) return rep1;\n+            // Pick the lower-rank root to become a child of the higher-rank one.\n+            // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Union_by_rank.\n+            if (rep1->rank < rep2->rank) std::swap(rep1, rep2);\n+            rep2->parent = rep1;\n+            rep1->rank += (rep1->rank == rep2->rank);\n+            return rep1;\n+        };\n+\n+        // Start by initializing every Cluster as its own singleton partition.\n+        partition_data.resize(an_clusters.size());\n+        for (size_t i = 0; i < an_clusters.size(); ++i) {\n+            partition_data[i].cluster = an_clusters[i].first;\n+            partition_data[i].parent = &partition_data[i];\n+            partition_data[i].rank = 0;\n+        }\n+\n+        // Run through all parent/child pairs in m_deps_to_add, and union the\n+        // the partitions their Clusters are in.\n+        Cluster* last_chl_cluster{nullptr};\n+        PartitionData* last_partition{nullptr};\n+        for (const auto& [par, chl] : m_deps_to_add) {\n+            auto par_cluster = m_entries[par].m_locator.cluster;\n+            auto chl_cluster = m_entries[chl].m_locator.cluster;\n+            // Nothing to do if parent and child are in the same Cluster.\n+            if (par_cluster == chl_cluster) continue;\n+            // Nothing to do if either parent or child transaction is removed already.\n+            if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+            Assume(par != chl);\n+            if (chl_cluster == last_chl_cluster) {\n+                // If the child Clusters is the same as the previous iteration, union with the\n+                // tree they were in, avoiding the need for another lookup. Note that m_deps_to_add\n+                // is sorted by child Cluster, so batches with the same child are expected.\n+                last_partition = union_uf(locate_uf(par_cluster), last_partition);\n+            } else {\n+                last_chl_cluster = chl_cluster;\n+                last_partition = union_uf(locate_uf(par_cluster), locate_uf(chl_cluster));\n+            }\n+        }\n+\n+        // Populate the an_clusters and an_deps data structures with the list of input Clusters,\n+        // and the input dependencies, annotated with the representative of the Cluster partition\n+        // it applies to.\n+        an_deps.reserve(m_deps_to_add.size());\n+        auto deps_it = m_deps_to_add.begin();\n+        for (size_t i = 0; i < partition_data.size(); ++i) {\n+            auto& data = partition_data[i];\n+            // Find the representative of the partition Cluster i is in, and store it with the\n+            // Cluster.\n+            auto rep = find_uf(&data)->cluster;\n+            an_clusters[i].second = rep;\n+            // Find all dependencies whose child Cluster is Cluster i, and annotate them with rep.\n+            while (deps_it != m_deps_to_add.end()) {\n+                auto [par, chl] = *deps_it;\n+                auto chl_cluster = m_entries[chl].m_locator.cluster;\n+                // Skip dependencies that apply to earlier Clusters (those necessary are for\n+                // deleted transactions, as otherwise we'd have processed them already).\n+                if (!std::less{}(chl_cluster, data.cluster)) {\n+                    if (chl_cluster != data.cluster) break;\n+                    auto par_cluster = m_entries[par].m_locator.cluster;\n+                    // Also filter out dependencies applying to a removed parent.\n+                    if (par_cluster != nullptr) an_deps.emplace_back(*deps_it, rep);\n+                }\n+                ++deps_it;\n+            }\n+        }\n+    }\n+\n+    // Sort both an_clusters and an_deps by representative of the partition they are in, grouping\n+    // all those applying to the same partition together.\n+    std::sort(an_deps.begin(), an_deps.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+    std::sort(an_clusters.begin(), an_clusters.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+\n+    // Translate the resulting cluster groups to the m_group_data structure.\n+    m_group_data = std::vector<GroupData>{};\n+    m_group_clusters.clear();\n+    m_group_clusters.reserve(an_clusters.size());\n+    m_deps_to_add.clear();\n+    m_deps_to_add.reserve(an_deps.size());\n+    auto an_deps_it = an_deps.begin();\n+    auto an_clusters_it = an_clusters.begin();\n+    while (an_deps_it != an_deps.end()) {\n+        auto rep = an_deps_it->second;\n+        // Create and initialize a new GroupData entry for the partition.\n+        auto& new_entry = m_group_data->emplace_back();\n+        new_entry.m_cluster_offset = m_group_clusters.size();\n+        new_entry.m_cluster_count = 0;\n+        new_entry.m_deps_offset = m_deps_to_add.size();\n+        new_entry.m_deps_count = 0;\n+        // Add all its clusters to it (copying those from an_clusters to m_group_clusters).\n+        while (an_clusters_it != an_clusters.end() && an_clusters_it->second == rep) {\n+            m_group_clusters.push_back(an_clusters_it->first);\n+            ++an_clusters_it;\n+            ++new_entry.m_cluster_count;\n+        }\n+        // Add all its dependencies to it (copying those back from an_deps to m_deps_to_add).\n+        while (an_deps_it != an_deps.end() && an_deps_it->second == rep) {\n+            m_deps_to_add.push_back(an_deps_it->first);\n+            ++an_deps_it;\n+            ++new_entry.m_deps_count;\n+        }\n+    }\n+    Assume(an_deps_it == an_deps.end());\n+    Assume(an_clusters_it == an_clusters.end());\n+}\n+\n+void TxGraphImpl::Merge(std::span<Cluster*> to_merge) noexcept\n+{\n+    Assume(!to_merge.empty());\n+    // Nothing to do if a group consists of just a single Cluster.\n+    if (to_merge.size() == 1) return;\n+\n+    // Move the largest Cluster to the front of to_merge. As all transactions in other to-be-merged\n+    // Clusters will be moved to that one, putting the largest one first minimizes the number of\n+    // moves.\n+    size_t max_size_pos{0};\n+    ClusterIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        ClusterIndex size = to_merge[i]->GetTxCount();\n+        if (size > max_size) {\n+            max_size_pos = i;\n+            max_size = size;\n+        }\n+    }\n+    if (max_size_pos != 0) std::swap(to_merge[0], to_merge[max_size_pos]);\n+\n+    // Merge all further Clusters in the group into the first one, and delete them.\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        to_merge[0]->Merge(*this, *to_merge[i]);\n+        DeleteCluster(*to_merge[i]);\n+    }\n+}\n+\n+void TxGraphImpl::ApplyDependencies() noexcept\n+{\n+    // Compute the groups of to-be-merged Clusters (which also applies all removals, and splits).\n+    GroupClusters();\n+    Assume(m_group_data.has_value());\n+    // Nothing to do if there are no dependencies to be added.\n+    if (m_deps_to_add.empty()) return;\n+\n+    // For each group of to-be-merged Clusters.\n+    Assume(m_group_data.has_value());\n+    for (const auto& group_data : *m_group_data) {\n+        // Invoke Merge() to merge them into a single Cluster.\n+        auto cluster_span = std::span{m_group_clusters}\n+                                .subspan(group_data.m_cluster_offset, group_data.m_cluster_count);\n+        Merge(cluster_span);\n+        // Actually apply all to-be-added dependencies (for each, parent and child belong to the\n+        // same Cluster because of the merging above).\n+        auto deps_span = std::span{m_deps_to_add}\n+                             .subspan(group_data.m_deps_offset, group_data.m_deps_count);\n+        Assume(!deps_span.empty());\n+        const auto& loc = m_entries[deps_span[0].second].m_locator;\n+        Assume(loc.IsPresent());\n+        loc.cluster->ApplyDependencies(*this, deps_span);\n+    }\n+\n+    // Wipe the list of to-be-added dependencies now that they are applied.\n+    m_deps_to_add.clear();\n+    // Also no further Cluster mergings are needed (note that we clear, but don't set to\n+    // std::nullopt, as that would imply the groupings are unknown).\n+    m_group_data->clear();\n+    m_group_clusters.clear();\n+}\n+\n+void Cluster::Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept\n+{\n+    // We can only relinearize Clusters that do not need splitting.\n+    Assume(m_quality == QualityLevel::OPTIMAL || m_quality == QualityLevel::ACCEPTABLE ||\n+           m_quality == QualityLevel::NEEDS_RELINEARIZE);\n+    // No work is required for Clusters which are already optimally linearized.\n+    if (m_quality == QualityLevel::OPTIMAL) return;\n+    // Invoke the actual linearization algorithm (passing in the existing one).\n+    uint64_t rng_seed = graph.m_rng.rand64();\n+    auto [linearization, optimal] = Linearize(m_depgraph, max_iters, rng_seed, m_linearization);\n+    // Postlinearize if the result isn't optimal already. This guarantees (among other things)\n+    // that the chunks of the resulting linearization are all connected.\n+    if (!optimal) PostLinearize(m_depgraph, linearization);\n+    // Update the linearization.\n+    m_linearization = std::move(linearization);\n+    // Update the Cluster's quality.\n+    auto new_quality = optimal ? QualityLevel::OPTIMAL : QualityLevel::ACCEPTABLE;\n+    graph.SetClusterQuality(m_quality, m_setindex, new_quality);\n+    // Update the Entry objects.\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::MakeAcceptable(Cluster& cluster) noexcept\n+{\n+    // Relinearize the Cluster if needed.\n+    if (cluster.m_quality == QualityLevel::NEEDS_RELINEARIZE) {\n+        cluster.Relinearize(*this, 10000);\n+    }\n+}\n+\n+Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept\n+{\n+    // Create a new transaction in the DepGraph, and remember its position in m_mapping.\n+    auto cluster_idx = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_index);\n+    m_linearization.push_back(cluster_idx);\n+}\n+\n+TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n+{\n+    // Construct a new Ref.\n+    Ref ret;\n+    // Construct a new Entry, and link it with the Ref.\n+    auto idx = m_entries.size();\n+    m_entries.emplace_back();\n+    auto& entry = m_entries.back();\n+    entry.m_ref = &ret;",
      "path": "src/txgraph.cpp",
      "position": 624,
      "original_position": 953,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure how this is intended to be used, but storing a stack address seems like a problem? RVO may help but that seems brittle. I imagine the caller should be passing in their own `Ref` instead?",
      "created_at": "2025-01-09T18:43:50Z",
      "updated_at": "2025-01-09T20:03:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909286865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909286865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1715,
      "original_line": 1715,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909293407",
      "pull_request_review_id": 2540686525,
      "id": 1909293407,
      "node_id": "PRRC_kwDOABII585xzYFf",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {\n+            ClusterIndex idx = m_linearization[lin_idx++];\n+            GraphIndex graph_idx = m_mapping[idx];\n+            auto& entry = graph.m_entries[graph_idx];\n+            entry.m_chunk_feerate = chunk.feerate;\n+            chunk.transactions.Reset(idx);\n+            if (chunk.transactions.None()) break;\n+        }\n+    }\n+}\n+\n+void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // Iterate over the prefix of to_remove that applies to this cluster.\n+    SetType todo;\n+    do {\n+        GraphIndex idx = to_remove.front();\n+        auto& entry = graph.m_entries[idx];\n+        auto& locator = entry.m_locator;\n+        // Stop once we hit an entry that applies to another Cluster.\n+        if (locator.cluster != this) break;\n+        // - Remember it in a set of to-remove ClusterIndexes.\n+        todo.Set(locator.index);\n+        // - Remove from m_mapping.\n+        m_mapping[locator.index] = GraphIndex(-1);\n+        // - Mark it as removed in the Entry's locator.\n+        locator.SetMissing();\n+        if (entry.IsWiped()) graph.m_wiped.push_back(idx);\n+        to_remove = to_remove.subspan(1);\n+        --graph.m_txcount;\n+    } while(!to_remove.empty());\n+\n+    Assume(todo.Any());\n+    // Wipe from the Cluster's DepGraph (this is O(n) regardless of the number of entries\n+    // removed, so we benefit from batching all the removals).\n+    m_depgraph.RemoveTransactions(todo);\n+    m_mapping.resize(m_depgraph.PositionRange());\n+\n+    // Filter removals out of m_linearization.\n+    m_linearization.erase(std::remove_if(\n+        m_linearization.begin(),\n+        m_linearization.end(),\n+        [&](auto pos) { return todo[pos]; }), m_linearization.end());\n+\n+    graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    Updated(graph);\n+}\n+\n+bool Cluster::Split(TxGraphImpl& graph) noexcept\n+{\n+    // This function can only be called when the Cluster needs splitting.\n+    Assume(m_quality == QualityLevel::NEEDS_SPLIT);\n+    /** Which positions are still left in this Cluster. */\n+    auto todo = m_depgraph.Positions();\n+    /** Mapping from transaction positions in this Cluster to the Cluster where it ends up, and\n+     *  its position therein. */\n+    std::vector<std::pair<Cluster*, ClusterIndex>> remap(m_depgraph.PositionRange());\n+    std::vector<Cluster*> new_clusters;\n+    bool first{true};\n+    // Iterate over the connected components of this Cluster's m_depgraph.\n+    while (todo.Any()) {\n+        auto component = m_depgraph.FindConnectedComponent(todo);\n+        if (first && component == todo) {\n+            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+            graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+            // We need to recompute and cache its chunking.\n+            Updated(graph);\n+            return false;\n+        }\n+        first = false;\n+        // Construct a new Cluster to hold the found component.\n+        auto new_cluster = std::make_unique<Cluster>();\n+        new_clusters.push_back(new_cluster.get());\n+        // Remember that all the component's transaction go to this new Cluster. The positions\n+        // will be determined below, so use -1 for now.\n+        for (auto i : component) {\n+            remap[i] = {new_cluster.get(), ClusterIndex(-1)};\n+        }\n+        graph.InsertCluster(std::move(new_cluster), QualityLevel::NEEDS_RELINEARIZE);\n+        todo -= component;\n+    }\n+    // Redistribute the transactions.\n+    for (auto i : m_linearization) {\n+        /** The cluster which transaction originally in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy the transaction to the new cluster's depgraph, and remember the position.\n+        remap[i].second = new_cluster->m_depgraph.AddTransaction(m_depgraph.FeeRate(i));\n+        // Create new mapping entry.\n+        new_cluster->m_mapping.push_back(m_mapping[i]);\n+        // Create a new linearization entry. As we're only appending transactions, they equal the\n+        // ClusterIndex.\n+        new_cluster->m_linearization.push_back(remap[i].second);\n+    }\n+    // Redistribute the dependencies.\n+    for (auto i : m_linearization) {\n+        /** The cluster transaction in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy its parents, translating positions.\n+        SetType new_parents;\n+        for (auto par : m_depgraph.GetReducedParents(i)) new_parents.Set(remap[par].second);\n+        new_cluster->m_depgraph.AddDependencies(new_parents, remap[i].second);\n+    }\n+    // Update all the Locators of moved transactions.\n+    for (Cluster* new_cluster : new_clusters) {\n+        new_cluster->Updated(graph);\n+    }\n+    // Wipe this Cluster, and return that it needs to be deleted.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_mapping.clear();\n+    m_linearization.clear();\n+    return true;\n+}\n+\n+void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+{\n+    /** Vector to store the positions in this Cluster for each position in other. */\n+    std::vector<ClusterIndex> remap(other.m_depgraph.PositionRange());\n+    // Iterate over all transactions in the other Cluster (the one being absorbed).\n+    for (auto pos : other.m_linearization) {\n+        auto idx = other.m_mapping[pos];\n+        // Copy the transaction into this Cluster, and remember its position.\n+        auto new_pos = m_depgraph.AddTransaction(other.m_depgraph.FeeRate(pos));\n+        remap[pos] = new_pos;\n+        if (new_pos == m_mapping.size()) {\n+            m_mapping.push_back(idx);\n+        } else {\n+            m_mapping[new_pos] = idx;\n+        }\n+        m_linearization.push_back(new_pos);\n+        // Copy the transaction's dependencies, translating them using remap.\n+        SetType parents;\n+        for (auto par : other.m_depgraph.GetReducedParents(pos)) {\n+            parents.Set(remap[par]);\n+        }\n+        m_depgraph.AddDependencies(parents, remap[pos]);\n+        // Update the transaction's Locator. There is no need to call Updated() to update chunk\n+        // feerates, as Updated() will be invoked by Cluster::ApplyDependencies on the resulting\n+        // merged Cluster later anyway).\n+        graph.m_entries[idx].m_locator.SetPresent(this, new_pos);\n+    }\n+    // Purge the other Cluster, now that everything has been moved.\n+    other.m_depgraph = DepGraph<SetType>{};\n+    other.m_linearization.clear();\n+    other.m_mapping.clear();\n+}\n+\n+void Cluster::ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept\n+{\n+    // This function is invoked by TxGraphImpl::ApplyDependencies after merging groups of Clusters\n+    // between which dependencies are added, which simply concatenates their linearizations. Invoke\n+    // PostLinearize, which has the effect that the linearization becomes a merge-sort of the\n+    // constituent linearizations. Do this here rather than in Cluster::Merge, because this\n+    // function is only invoked once per merged Cluster, rather than once per constituent one.\n+    // This concatenation + post-linearization could be replaced with an explicit merge-sort.\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Sort the list of dependencies to apply by child, so those can be applied in batch.\n+    std::sort(to_apply.begin(), to_apply.end(), [](auto& a, auto& b) { return a.second < b.second; });\n+    // Iterate over groups of to-be-added dependencies with the same child.\n+    auto it = to_apply.begin();\n+    while (it != to_apply.end()) {\n+        auto& first_child = graph.m_entries[it->second].m_locator;\n+        ClusterIndex child_idx = first_child.index;\n+        // Iterate over all to-be-added dependencies within that same child, gather the relevant\n+        // parents.\n+        SetType parents;\n+        while (it != to_apply.end()) {\n+            auto& child = graph.m_entries[it->second].m_locator;\n+            auto& parent = graph.m_entries[it->first].m_locator;\n+            Assume(child.cluster == this && parent.cluster == this);\n+            if (child.index != child_idx) break;\n+            parents.Set(parent.index);\n+            ++it;\n+        }\n+        // Push all dependencies to the underlying DepGraph. Note that this is O(N) in the size of\n+        // the cluster, regardless of the number of parents being added, so batching them together\n+        // has a performance benefit.\n+        m_depgraph.AddDependencies(parents, child_idx);\n+    }\n+\n+    // Finally fix the linearization, as the new dependencies may have invalidated the\n+    // linearization, and post-linearize it to fix up the worst problems with it.\n+    FixLinearization(m_depgraph, m_linearization);\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Finally push the changes to graph.m_entries.\n+    Updated(graph);\n+}\n+\n+std::unique_ptr<Cluster> TxGraphImpl::ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept\n+{\n+    Assume(quality != QualityLevel::NONE);\n+\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    Assume(setindex < quality_clusters.size());\n+\n+    // Extract the Cluster-owning unique_ptr.\n+    std::unique_ptr<Cluster> ret = std::move(quality_clusters[setindex]);\n+    ret->m_quality = QualityLevel::NONE;\n+    ret->m_setindex = ClusterSetIndex(-1);\n+\n+    // Clean up space in quality_cluster.\n+    auto max_setindex = quality_clusters.size() - 1;\n+    if (setindex != max_setindex) {\n+        // If the cluster was not the last element of quality_clusters, move that to take its place.\n+        quality_clusters.back()->m_quality = quality;\n+        quality_clusters.back()->m_setindex = setindex;\n+        quality_clusters[setindex] = std::move(quality_clusters.back());\n+    }\n+    // The last element of quality_clusters is now unused; drop it.\n+    quality_clusters.pop_back();\n+\n+    return ret;\n+}\n+\n+ClusterSetIndex TxGraphImpl::InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept\n+{\n+    // Cannot insert with quality level NONE (as that would mean not inserted).\n+    Assume(quality != QualityLevel::NONE);\n+    // The passed-in Cluster must not currently be in the TxGraphImpl.\n+    Assume(cluster->m_quality == QualityLevel::NONE);\n+\n+    // Append it at the end of the relevant TxGraphImpl::m_cluster.\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    ClusterSetIndex ret = quality_clusters.size();\n+    cluster->m_quality = quality;\n+    cluster->m_setindex = ret;\n+    quality_clusters.push_back(std::move(cluster));\n+    return ret;\n+}\n+\n+void TxGraphImpl::SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept\n+{\n+    Assume(new_quality != QualityLevel::NONE);\n+\n+    // Don't do anything if the quality did not change.\n+    if (old_quality == new_quality) return;\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(old_quality, old_index);\n+    // And re-insert it where it belongs.\n+    InsertCluster(std::move(cluster_ptr), new_quality);\n+}\n+\n+void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+{\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(cluster.m_quality, cluster.m_setindex);\n+    // And throw it away.\n+    cluster_ptr.reset();\n+}\n+\n+void TxGraphImpl::ApplyRemovals() noexcept\n+{\n+    auto& to_remove = m_to_remove;\n+    // Skip if there is nothing to remove.\n+    if (to_remove.empty()) return;\n+    // Wipe cached m_group_data, as it may be invalidated by removals.\n+    m_group_data = std::nullopt;\n+    m_group_clusters.clear();\n+    // Group the set of to-be-removed entries by Cluster*.\n+    std::sort(m_to_remove.begin(), m_to_remove.end(), [&](GraphIndex a, GraphIndex b) noexcept {\n+        return std::less{}(m_entries[a].m_locator.cluster, m_entries[b].m_locator.cluster);\n+    });\n+    // Process per Cluster.\n+    std::span to_remove_span{m_to_remove};\n+    while (!to_remove_span.empty()) {\n+        Cluster* cluster = m_entries[to_remove_span.front()].m_locator.cluster;\n+        if (cluster != nullptr) {\n+            // If the first to_remove_span entry's Cluster exists, hand to_remove_span to it, so it\n+            // can pop off whatever applies to it.\n+            cluster->ApplyRemovals(*this, to_remove_span);\n+        } else {\n+            // Otherwise, skip this already-removed entry.\n+            to_remove_span = to_remove_span.subspan(1);\n+        }\n+    }\n+    m_to_remove.clear();\n+}\n+\n+void TxGraphImpl::SwapIndexes(GraphIndex a, GraphIndex b) noexcept\n+{\n+    Assume(a < m_entries.size());\n+    Assume(b < m_entries.size());\n+    // Swap the Entry objects.\n+    std::swap(m_entries[a], m_entries[b]);\n+    // Iterate over both objects.\n+    for (int i = 0; i < 2; ++i) {\n+        GraphIndex idx = i ? b : a;\n+        Entry& entry = m_entries[idx];\n+        // Update linked Ref.\n+        if (entry.m_ref) GetRefIndex(*entry.m_ref) = idx;\n+        // Update the locator. The rest of the Entry information will not change, so no need to\n+        // invoke Cluster::Updated().\n+        Locator& locator = entry.m_locator;\n+        if (locator.IsPresent()) {\n+            locator.cluster->UpdateMapping(locator.index, idx);\n+        }\n+    }\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::Cleanup() noexcept\n+{\n+    ApplyDependencies();\n+    std::vector<Ref*> ret;\n+    // Sort the GraphIndex that need to be cleaned up. This groups them (so duplicates can be\n+    // processed just once). They are sorted in reverse, so the last ones get processed first.\n+    // This means earlier-processed GraphIndexes will not move of later-processed ones (which\n+    // might invalidate them).\n+    std::sort(m_wiped.begin(), m_wiped.end(), std::greater{});\n+    GraphIndex last(-1);\n+    for (GraphIndex idx : m_wiped) {\n+        // m_wiped should never contain the same GraphIndex twice (the code below would fail\n+        // if so, because GraphIndexes get invalidated by removing them).\n+        Assume(idx != last);\n+        last = idx;\n+        Entry& entry = m_entries[idx];\n+        // Gather Ref pointers that are being unlinked.\n+        if (entry.m_ref != nullptr) {\n+            ret.push_back(entry.m_ref);\n+            GetRefGraph(*entry.m_ref) = nullptr;\n+            m_entries[idx].m_ref = nullptr;\n+        }\n+        // Verify removed entries don't have anything that could hold a reference back.\n+        Assume(!entry.m_locator.IsPresent());\n+        if (idx != m_entries.size() - 1) SwapIndexes(idx, m_entries.size() - 1);\n+        m_entries.pop_back();\n+    }\n+    m_wiped.clear();\n+    return ret;\n+}\n+\n+void TxGraphImpl::Split(Cluster& cluster) noexcept\n+{\n+    // To split a Cluster, first make sure all removals are applied (as we might need to split\n+    // again afterwards otherwise).\n+    ApplyRemovals();\n+    bool del = cluster.Split(*this);\n+    if (del) {\n+        // Cluster::Split reports whether the Cluster is to be deleted.\n+        DeleteCluster(cluster);\n+    }\n+}\n+\n+void TxGraphImpl::SplitAll() noexcept\n+{\n+    // Before splitting all Cluster, first make sure all removals are applied.\n+    ApplyRemovals();\n+    auto& queue = m_clusters[int(QualityLevel::NEEDS_SPLIT)];\n+    while (!queue.empty()) {\n+        Split(*queue.back().get());\n+    }\n+}\n+\n+void TxGraphImpl::GroupClusters() noexcept\n+{\n+    // Before computing which Clusters need to be merged together, first apply all removals and\n+    // split the Clusters into connected components. If we would group first, we might end up\n+    // with inefficient Clusters which just end up being split again anyway.\n+    SplitAll();\n+\n+    // If the groupings have been computed already, nothing is left to be done.\n+    if (m_group_data.has_value()) return;\n+\n+    /** Annotated clusters: an entry for each Cluster, together with the representative for the\n+     *  partition it is in if known, or with nullptr if not yet known. */\n+    std::vector<std::pair<Cluster*, Cluster*>> an_clusters;\n+    /** Annotated dependencies: an entry for each m_deps_to_apply entry (excluding ones that apply\n+     *  to removed transactions), together with the representative root of the partition of\n+     *  Clusters it applies to. */\n+    std::vector<std::pair<std::pair<GraphIndex, GraphIndex>, Cluster*>> an_deps;\n+\n+    // Construct a an_clusters entry for every parent and child in the to-be-applied dependencies.\n+    for (const auto& [par, chl] : m_deps_to_add) {\n+        auto par_cluster = m_entries[par].m_locator.cluster;\n+        auto chl_cluster = m_entries[chl].m_locator.cluster;\n+        // Skip dependencies for which the parent or child transaction is removed.\n+        if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+        an_clusters.emplace_back(par_cluster, nullptr);\n+        // Do not include a duplicate when parent and child are identical, as it'll be removed\n+        // below anyway.\n+        if (chl_cluster != par_cluster) an_clusters.emplace_back(chl_cluster, nullptr);\n+    }\n+    // Sort and deduplicate an_clusters, so we end up with a sorted list of all involved Clusters\n+    // to which dependencies apply.\n+    std::sort(an_clusters.begin(), an_clusters.end());\n+    an_clusters.erase(std::unique(an_clusters.begin(), an_clusters.end()), an_clusters.end());\n+\n+    // Sort the dependencies by child Cluster.\n+    std::sort(m_deps_to_add.begin(), m_deps_to_add.end(), [&](auto& a, auto& b) noexcept {\n+        auto [_a_par, a_chl] = a;\n+        auto [_b_par, b_chl] = b;\n+        auto a_chl_cluster = m_entries[a_chl].m_locator.cluster;\n+        auto b_chl_cluster = m_entries[b_chl].m_locator.cluster;\n+        return std::less{}(a_chl_cluster, b_chl_cluster);\n+    });\n+\n+    // Run the union-find algorithm to to find partitions of the input Clusters which need to be\n+    // grouped together. See https://en.wikipedia.org/wiki/Disjoint-set_data_structure.\n+    {\n+        /** Each PartitionData entry contains information about a single input Cluster. */\n+        struct PartitionData\n+        {\n+            /** The cluster this holds information for. */\n+            Cluster* cluster;\n+            /** All PartitionData entries belonging to the same partition are organized in a tree.\n+             *  Each element points to its parent, or to itself if it is the root. The root is then\n+             *  a representative for the entire tree, and can be found by walking upwards from any\n+             *  element. */\n+            PartitionData* parent;\n+            /** (only if this is a root, so when parent == this) An upper bound on the height of\n+             *  tree for this partition. */\n+            unsigned rank;\n+        };\n+        /** Information about each input Cluster. Sorted by Cluster* pointer. */\n+        std::vector<PartitionData> partition_data;\n+\n+        /** Given a Cluster, find its corresponding PartitionData. */\n+        auto locate_uf = [&](Cluster* arg) noexcept -> PartitionData* {\n+            auto it = std::lower_bound(partition_data.begin(), partition_data.end(), arg,\n+                                       [](auto& a, Cluster* ptr) noexcept { return a.cluster < ptr; });\n+            Assume(it != partition_data.end());\n+            Assume(it->cluster == arg);\n+            return &*it;\n+        };\n+\n+        /** Given a PartitionData, find the root of the tree it is in (its representative). */\n+        static constexpr auto find_uf = [](PartitionData* data) noexcept -> PartitionData* {\n+            while (data->parent != data) {\n+                // Replace pointers to parents with pointers to grandparents.\n+                // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Finding_set_representatives.\n+                auto par = data->parent;\n+                data->parent = par->parent;\n+                data = par;\n+            }\n+            return data;\n+        };\n+\n+        /** Given two PartitionDatas, union the partitions they are in, and return their\n+         *  representative. */\n+        static constexpr auto union_uf = [](PartitionData* arg1, PartitionData* arg2) noexcept {\n+            // Find the roots of the trees, and bail out if they are already equal (which would\n+            // mean they are in the same partition already).\n+            auto rep1 = find_uf(arg1);\n+            auto rep2 = find_uf(arg2);\n+            if (rep1 == rep2) return rep1;\n+            // Pick the lower-rank root to become a child of the higher-rank one.\n+            // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Union_by_rank.\n+            if (rep1->rank < rep2->rank) std::swap(rep1, rep2);\n+            rep2->parent = rep1;\n+            rep1->rank += (rep1->rank == rep2->rank);\n+            return rep1;\n+        };\n+\n+        // Start by initializing every Cluster as its own singleton partition.\n+        partition_data.resize(an_clusters.size());\n+        for (size_t i = 0; i < an_clusters.size(); ++i) {\n+            partition_data[i].cluster = an_clusters[i].first;\n+            partition_data[i].parent = &partition_data[i];\n+            partition_data[i].rank = 0;\n+        }\n+\n+        // Run through all parent/child pairs in m_deps_to_add, and union the\n+        // the partitions their Clusters are in.\n+        Cluster* last_chl_cluster{nullptr};\n+        PartitionData* last_partition{nullptr};\n+        for (const auto& [par, chl] : m_deps_to_add) {\n+            auto par_cluster = m_entries[par].m_locator.cluster;\n+            auto chl_cluster = m_entries[chl].m_locator.cluster;\n+            // Nothing to do if parent and child are in the same Cluster.\n+            if (par_cluster == chl_cluster) continue;\n+            // Nothing to do if either parent or child transaction is removed already.\n+            if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+            Assume(par != chl);\n+            if (chl_cluster == last_chl_cluster) {\n+                // If the child Clusters is the same as the previous iteration, union with the\n+                // tree they were in, avoiding the need for another lookup. Note that m_deps_to_add\n+                // is sorted by child Cluster, so batches with the same child are expected.\n+                last_partition = union_uf(locate_uf(par_cluster), last_partition);\n+            } else {\n+                last_chl_cluster = chl_cluster;\n+                last_partition = union_uf(locate_uf(par_cluster), locate_uf(chl_cluster));\n+            }\n+        }\n+\n+        // Populate the an_clusters and an_deps data structures with the list of input Clusters,\n+        // and the input dependencies, annotated with the representative of the Cluster partition\n+        // it applies to.\n+        an_deps.reserve(m_deps_to_add.size());\n+        auto deps_it = m_deps_to_add.begin();\n+        for (size_t i = 0; i < partition_data.size(); ++i) {\n+            auto& data = partition_data[i];\n+            // Find the representative of the partition Cluster i is in, and store it with the\n+            // Cluster.\n+            auto rep = find_uf(&data)->cluster;\n+            an_clusters[i].second = rep;\n+            // Find all dependencies whose child Cluster is Cluster i, and annotate them with rep.\n+            while (deps_it != m_deps_to_add.end()) {\n+                auto [par, chl] = *deps_it;\n+                auto chl_cluster = m_entries[chl].m_locator.cluster;\n+                // Skip dependencies that apply to earlier Clusters (those necessary are for\n+                // deleted transactions, as otherwise we'd have processed them already).\n+                if (!std::less{}(chl_cluster, data.cluster)) {\n+                    if (chl_cluster != data.cluster) break;\n+                    auto par_cluster = m_entries[par].m_locator.cluster;\n+                    // Also filter out dependencies applying to a removed parent.\n+                    if (par_cluster != nullptr) an_deps.emplace_back(*deps_it, rep);\n+                }\n+                ++deps_it;\n+            }\n+        }\n+    }\n+\n+    // Sort both an_clusters and an_deps by representative of the partition they are in, grouping\n+    // all those applying to the same partition together.\n+    std::sort(an_deps.begin(), an_deps.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+    std::sort(an_clusters.begin(), an_clusters.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+\n+    // Translate the resulting cluster groups to the m_group_data structure.\n+    m_group_data = std::vector<GroupData>{};\n+    m_group_clusters.clear();\n+    m_group_clusters.reserve(an_clusters.size());\n+    m_deps_to_add.clear();\n+    m_deps_to_add.reserve(an_deps.size());\n+    auto an_deps_it = an_deps.begin();\n+    auto an_clusters_it = an_clusters.begin();\n+    while (an_deps_it != an_deps.end()) {\n+        auto rep = an_deps_it->second;\n+        // Create and initialize a new GroupData entry for the partition.\n+        auto& new_entry = m_group_data->emplace_back();\n+        new_entry.m_cluster_offset = m_group_clusters.size();\n+        new_entry.m_cluster_count = 0;\n+        new_entry.m_deps_offset = m_deps_to_add.size();\n+        new_entry.m_deps_count = 0;\n+        // Add all its clusters to it (copying those from an_clusters to m_group_clusters).\n+        while (an_clusters_it != an_clusters.end() && an_clusters_it->second == rep) {\n+            m_group_clusters.push_back(an_clusters_it->first);\n+            ++an_clusters_it;\n+            ++new_entry.m_cluster_count;\n+        }\n+        // Add all its dependencies to it (copying those back from an_deps to m_deps_to_add).\n+        while (an_deps_it != an_deps.end() && an_deps_it->second == rep) {\n+            m_deps_to_add.push_back(an_deps_it->first);\n+            ++an_deps_it;\n+            ++new_entry.m_deps_count;\n+        }\n+    }\n+    Assume(an_deps_it == an_deps.end());\n+    Assume(an_clusters_it == an_clusters.end());\n+}\n+\n+void TxGraphImpl::Merge(std::span<Cluster*> to_merge) noexcept\n+{\n+    Assume(!to_merge.empty());\n+    // Nothing to do if a group consists of just a single Cluster.\n+    if (to_merge.size() == 1) return;\n+\n+    // Move the largest Cluster to the front of to_merge. As all transactions in other to-be-merged\n+    // Clusters will be moved to that one, putting the largest one first minimizes the number of\n+    // moves.\n+    size_t max_size_pos{0};\n+    ClusterIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        ClusterIndex size = to_merge[i]->GetTxCount();\n+        if (size > max_size) {\n+            max_size_pos = i;\n+            max_size = size;\n+        }\n+    }\n+    if (max_size_pos != 0) std::swap(to_merge[0], to_merge[max_size_pos]);\n+\n+    // Merge all further Clusters in the group into the first one, and delete them.\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        to_merge[0]->Merge(*this, *to_merge[i]);\n+        DeleteCluster(*to_merge[i]);\n+    }\n+}\n+\n+void TxGraphImpl::ApplyDependencies() noexcept\n+{\n+    // Compute the groups of to-be-merged Clusters (which also applies all removals, and splits).\n+    GroupClusters();\n+    Assume(m_group_data.has_value());\n+    // Nothing to do if there are no dependencies to be added.\n+    if (m_deps_to_add.empty()) return;\n+\n+    // For each group of to-be-merged Clusters.\n+    Assume(m_group_data.has_value());\n+    for (const auto& group_data : *m_group_data) {\n+        // Invoke Merge() to merge them into a single Cluster.\n+        auto cluster_span = std::span{m_group_clusters}\n+                                .subspan(group_data.m_cluster_offset, group_data.m_cluster_count);\n+        Merge(cluster_span);\n+        // Actually apply all to-be-added dependencies (for each, parent and child belong to the\n+        // same Cluster because of the merging above).\n+        auto deps_span = std::span{m_deps_to_add}\n+                             .subspan(group_data.m_deps_offset, group_data.m_deps_count);\n+        Assume(!deps_span.empty());\n+        const auto& loc = m_entries[deps_span[0].second].m_locator;\n+        Assume(loc.IsPresent());\n+        loc.cluster->ApplyDependencies(*this, deps_span);\n+    }\n+\n+    // Wipe the list of to-be-added dependencies now that they are applied.\n+    m_deps_to_add.clear();\n+    // Also no further Cluster mergings are needed (note that we clear, but don't set to\n+    // std::nullopt, as that would imply the groupings are unknown).\n+    m_group_data->clear();\n+    m_group_clusters.clear();\n+}\n+\n+void Cluster::Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept\n+{\n+    // We can only relinearize Clusters that do not need splitting.\n+    Assume(m_quality == QualityLevel::OPTIMAL || m_quality == QualityLevel::ACCEPTABLE ||\n+           m_quality == QualityLevel::NEEDS_RELINEARIZE);\n+    // No work is required for Clusters which are already optimally linearized.\n+    if (m_quality == QualityLevel::OPTIMAL) return;\n+    // Invoke the actual linearization algorithm (passing in the existing one).\n+    uint64_t rng_seed = graph.m_rng.rand64();\n+    auto [linearization, optimal] = Linearize(m_depgraph, max_iters, rng_seed, m_linearization);\n+    // Postlinearize if the result isn't optimal already. This guarantees (among other things)\n+    // that the chunks of the resulting linearization are all connected.\n+    if (!optimal) PostLinearize(m_depgraph, linearization);\n+    // Update the linearization.\n+    m_linearization = std::move(linearization);\n+    // Update the Cluster's quality.\n+    auto new_quality = optimal ? QualityLevel::OPTIMAL : QualityLevel::ACCEPTABLE;\n+    graph.SetClusterQuality(m_quality, m_setindex, new_quality);\n+    // Update the Entry objects.\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::MakeAcceptable(Cluster& cluster) noexcept\n+{\n+    // Relinearize the Cluster if needed.\n+    if (cluster.m_quality == QualityLevel::NEEDS_RELINEARIZE) {\n+        cluster.Relinearize(*this, 10000);\n+    }\n+}\n+\n+Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept\n+{\n+    // Create a new transaction in the DepGraph, and remember its position in m_mapping.\n+    auto cluster_idx = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_index);\n+    m_linearization.push_back(cluster_idx);\n+}\n+\n+TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n+{\n+    // Construct a new Ref.\n+    Ref ret;\n+    // Construct a new Entry, and link it with the Ref.\n+    auto idx = m_entries.size();\n+    m_entries.emplace_back();\n+    auto& entry = m_entries.back();\n+    entry.m_ref = &ret;\n+    GetRefGraph(ret) = this;\n+    GetRefIndex(ret) = idx;\n+    // Construct a new singleton Cluster (which is necessarily optimally linearized).\n+    auto cluster = std::make_unique<Cluster>(*this, feerate, idx);\n+    auto cluster_ptr = cluster.get();\n+    InsertCluster(std::move(cluster), QualityLevel::OPTIMAL);\n+    cluster_ptr->Updated(*this);\n+    ++m_txcount;\n+    // Return the Ref.\n+    return ret;\n+}\n+\n+void TxGraphImpl::RemoveTransaction(Ref& arg) noexcept\n+{\n+    // Don't do anything if the Ref is empty (which may be indicative of the transaction already\n+    // having been removed).\n+    if (GetRefGraph(arg) == nullptr) return;\n+    Assume(GetRefGraph(arg) == this);\n+    // Find the Cluster the transaction is in, and stop if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return;\n+    // Remember that the transaction is to be removed.\n+    m_to_remove.push_back(GetRefIndex(arg));\n+}\n+\n+void TxGraphImpl::AddDependency(Ref& parent, Ref& child) noexcept\n+{\n+    // Don't do anything if either Ref is empty (which may be indicative of it having already been\n+    // removed).\n+    if (GetRefGraph(parent) == nullptr || GetRefGraph(child) == nullptr) return;\n+    Assume(GetRefGraph(parent) == this && GetRefGraph(child) == this);\n+    // Find the Cluster the parent and child transaction are in, and stop if either appears to be\n+    // already removed.\n+    auto par_cluster = m_entries[GetRefIndex(parent)].m_locator.cluster;\n+    if (par_cluster == nullptr) return;\n+    auto chl_cluster = m_entries[GetRefIndex(child)].m_locator.cluster;\n+    if (chl_cluster == nullptr) return;\n+    // Wipe m_group_data (as it will need to be recomputed).\n+    m_group_data.reset();\n+    m_group_clusters.clear();\n+    // Remember that this dependency is to be applied.\n+    m_deps_to_add.emplace_back(GetRefIndex(parent), GetRefIndex(child));\n+}\n+\n+bool TxGraphImpl::Exists(const Ref& arg) noexcept\n+{\n+    if (GetRefGraph(arg) == nullptr) return false;\n+    Assume(GetRefGraph(arg) == this);\n+    // Make sure the transaction isn't scheduled for removal.\n+    ApplyRemovals();\n+    return m_entries[GetRefIndex(arg)].m_locator.IsPresent();\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all ancestors (in arbitrary order) to Refs (if they have any), and return them.\n+    for (auto idx : m_depgraph.Ancestors(idx)) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all descendants (in arbitrary order) to Refs (if they have any), and return them.\n+    for (auto idx : m_depgraph.Descendants(idx)) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetClusterRefs(const TxGraphImpl& graph) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all transactions in the Cluster (in linearization order) to Refs.\n+    for (auto idx : m_linearization) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+FeeFrac Cluster::GetIndividualFeerate(ClusterIndex idx) noexcept\n+{\n+    return m_depgraph.FeeRate(idx);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetAncestors(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetAncestorRefs(*this, m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetDescendants(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetDescendantRefs(*this, m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetCluster(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Make sure the Cluster has an acceptable quality level, and then dispatch to it.\n+    MakeAcceptable(*cluster);\n+    return cluster->GetClusterRefs(*this);\n+}\n+\n+TxGraph::GraphIndex TxGraphImpl::GetTransactionCount() noexcept\n+{\n+    ApplyRemovals();\n+    return m_txcount;\n+}\n+\n+FeeFrac TxGraphImpl::GetIndividualFeerate(const Ref& arg) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply removals, so that we can correctly report FeeFrac{} for non-existing transaction.\n+    ApplyRemovals();\n+    // Find the cluster the argument is in, and return the empty FeeFrac if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetIndividualFeerate(m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+FeeFrac TxGraphImpl::GetChunkFeerate(const Ref& arg) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be inaccurate otherwise.\n+    ApplyDependencies();\n+    // Find the cluster the argument is in, and return the empty FeeFrac if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Make sure the Cluster has an acceptable quality level, and then return the transaction's\n+    // chunk feerate.\n+    MakeAcceptable(*cluster);\n+    const auto& entry = m_entries[GetRefIndex(arg)];\n+    return entry.m_chunk_feerate;\n+}\n+\n+void Cluster::SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept\n+{\n+    // Make sure the specified ClusterIndex exists in this Cluster.\n+    Assume(m_depgraph.Positions()[idx]);\n+    // Bail out if the fee isn't actually being changed.\n+    if (m_depgraph.FeeRate(idx).fee == fee) return;\n+    // Update the fee, remember that relinearization will be necessary, and update the Entries\n+    // in the same Cluster.\n+    m_depgraph.FeeRate(idx).fee = fee;\n+    if (m_quality != QualityLevel::NEEDS_SPLIT) {\n+        graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+    }\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::SetTransactionFee(Ref& ref, int64_t fee) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(ref) == nullptr) return;\n+    Assume(GetRefGraph(ref) == this);\n+    // Find the entry, its locator, and inform its Cluster about the new feerate, if any.\n+    auto& entry = m_entries[GetRefIndex(ref)];\n+    auto& locator = entry.m_locator;\n+    if (locator.IsPresent()) {\n+        locator.cluster->SetFee(*this, locator.index, fee);\n+    }\n+}\n+\n+} // namespace\n+\n+TxGraph::Ref::~Ref()\n+{\n+    if (m_graph) {\n+        // Inform the TxGraph about the Ref being destroyed.\n+        m_graph->UnlinkRef(m_index);\n+        m_graph = nullptr;\n+    }\n+}\n+\n+TxGraph::Ref& TxGraph::Ref::operator=(Ref&& other) noexcept\n+{\n+    // Inform both TxGraphs about the Refs being swapped.",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 1172,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why is this doing an effective swap? I would expect this to call `UnlinkRef` on the moved-from value and reset its `m_graph` and `m_index`. Otherwise it wouldn't be unlinked until the moved-from variable goes out of scope, no?",
      "created_at": "2025-01-09T18:48:55Z",
      "updated_at": "2025-01-09T20:03:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909293407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909293407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909295799",
      "pull_request_review_id": 2540686525,
      "id": 1909295799,
      "node_id": "PRRC_kwDOABII585xzYq3",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`m_ref{nullptr};`",
      "created_at": "2025-01-09T18:51:18Z",
      "updated_at": "2025-01-09T20:03:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909295799",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909295799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909307659",
      "pull_request_review_id": 2540686525,
      "id": 1909307659,
      "node_id": "PRRC_kwDOABII585xzbkL",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 297,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Trying to convince myself this is guaranteed to terminate...\r\n\r\n`do{} while (!chunk.transactions.None())` rather than the `break` for readability? Or just `while()` if we need to guard against an empty linearization (presumably not?)",
      "created_at": "2025-01-09T19:02:47Z",
      "updated_at": "2025-01-09T20:03:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909307659",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909307659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909321579",
      "pull_request_review_id": 2540686525,
      "id": 1909321579,
      "node_id": "PRRC_kwDOABII585xze9r",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {\n+            ClusterIndex idx = m_linearization[lin_idx++];\n+            GraphIndex graph_idx = m_mapping[idx];\n+            auto& entry = graph.m_entries[graph_idx];\n+            entry.m_chunk_feerate = chunk.feerate;\n+            chunk.transactions.Reset(idx);\n+            if (chunk.transactions.None()) break;\n+        }\n+    }\n+}\n+\n+void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // Iterate over the prefix of to_remove that applies to this cluster.\n+    SetType todo;",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 311,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Assume `!to_remove.empty()` or early return if it's allowed?",
      "created_at": "2025-01-09T19:17:27Z",
      "updated_at": "2025-01-09T20:03:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909321579",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909321579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909348870",
      "pull_request_review_id": 2540686525,
      "id": 1909348870,
      "node_id": "PRRC_kwDOABII585xzloG",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {\n+            ClusterIndex idx = m_linearization[lin_idx++];\n+            GraphIndex graph_idx = m_mapping[idx];\n+            auto& entry = graph.m_entries[graph_idx];\n+            entry.m_chunk_feerate = chunk.feerate;\n+            chunk.transactions.Reset(idx);\n+            if (chunk.transactions.None()) break;\n+        }\n+    }\n+}\n+\n+void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // Iterate over the prefix of to_remove that applies to this cluster.\n+    SetType todo;\n+    do {\n+        GraphIndex idx = to_remove.front();\n+        auto& entry = graph.m_entries[idx];\n+        auto& locator = entry.m_locator;\n+        // Stop once we hit an entry that applies to another Cluster.\n+        if (locator.cluster != this) break;\n+        // - Remember it in a set of to-remove ClusterIndexes.\n+        todo.Set(locator.index);\n+        // - Remove from m_mapping.\n+        m_mapping[locator.index] = GraphIndex(-1);\n+        // - Mark it as removed in the Entry's locator.\n+        locator.SetMissing();\n+        if (entry.IsWiped()) graph.m_wiped.push_back(idx);\n+        to_remove = to_remove.subspan(1);\n+        --graph.m_txcount;\n+    } while(!to_remove.empty());\n+\n+    Assume(todo.Any());\n+    // Wipe from the Cluster's DepGraph (this is O(n) regardless of the number of entries\n+    // removed, so we benefit from batching all the removals).\n+    m_depgraph.RemoveTransactions(todo);\n+    m_mapping.resize(m_depgraph.PositionRange());\n+\n+    // Filter removals out of m_linearization.\n+    m_linearization.erase(std::remove_if(\n+        m_linearization.begin(),\n+        m_linearization.end(),\n+        [&](auto pos) { return todo[pos]; }), m_linearization.end());\n+\n+    graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    Updated(graph);\n+}\n+\n+bool Cluster::Split(TxGraphImpl& graph) noexcept\n+{\n+    // This function can only be called when the Cluster needs splitting.\n+    Assume(m_quality == QualityLevel::NEEDS_SPLIT);\n+    /** Which positions are still left in this Cluster. */\n+    auto todo = m_depgraph.Positions();\n+    /** Mapping from transaction positions in this Cluster to the Cluster where it ends up, and\n+     *  its position therein. */\n+    std::vector<std::pair<Cluster*, ClusterIndex>> remap(m_depgraph.PositionRange());\n+    std::vector<Cluster*> new_clusters;\n+    bool first{true};\n+    // Iterate over the connected components of this Cluster's m_depgraph.\n+    while (todo.Any()) {\n+        auto component = m_depgraph.FindConnectedComponent(todo);\n+        if (first && component == todo) {\n+            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+            graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+            // We need to recompute and cache its chunking.\n+            Updated(graph);\n+            return false;\n+        }\n+        first = false;\n+        // Construct a new Cluster to hold the found component.\n+        auto new_cluster = std::make_unique<Cluster>();\n+        new_clusters.push_back(new_cluster.get());\n+        // Remember that all the component's transaction go to this new Cluster. The positions\n+        // will be determined below, so use -1 for now.\n+        for (auto i : component) {\n+            remap[i] = {new_cluster.get(), ClusterIndex(-1)};\n+        }\n+        graph.InsertCluster(std::move(new_cluster), QualityLevel::NEEDS_RELINEARIZE);\n+        todo -= component;\n+    }\n+    // Redistribute the transactions.\n+    for (auto i : m_linearization) {\n+        /** The cluster which transaction originally in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy the transaction to the new cluster's depgraph, and remember the position.\n+        remap[i].second = new_cluster->m_depgraph.AddTransaction(m_depgraph.FeeRate(i));\n+        // Create new mapping entry.\n+        new_cluster->m_mapping.push_back(m_mapping[i]);\n+        // Create a new linearization entry. As we're only appending transactions, they equal the\n+        // ClusterIndex.\n+        new_cluster->m_linearization.push_back(remap[i].second);\n+    }\n+    // Redistribute the dependencies.\n+    for (auto i : m_linearization) {\n+        /** The cluster transaction in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy its parents, translating positions.\n+        SetType new_parents;\n+        for (auto par : m_depgraph.GetReducedParents(i)) new_parents.Set(remap[par].second);\n+        new_cluster->m_depgraph.AddDependencies(new_parents, remap[i].second);\n+    }\n+    // Update all the Locators of moved transactions.\n+    for (Cluster* new_cluster : new_clusters) {\n+        new_cluster->Updated(graph);\n+    }\n+    // Wipe this Cluster, and return that it needs to be deleted.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_mapping.clear();\n+    m_linearization.clear();\n+    return true;\n+}\n+\n+void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+{\n+    /** Vector to store the positions in this Cluster for each position in other. */\n+    std::vector<ClusterIndex> remap(other.m_depgraph.PositionRange());\n+    // Iterate over all transactions in the other Cluster (the one being absorbed).\n+    for (auto pos : other.m_linearization) {\n+        auto idx = other.m_mapping[pos];\n+        // Copy the transaction into this Cluster, and remember its position.\n+        auto new_pos = m_depgraph.AddTransaction(other.m_depgraph.FeeRate(pos));\n+        remap[pos] = new_pos;\n+        if (new_pos == m_mapping.size()) {\n+            m_mapping.push_back(idx);\n+        } else {\n+            m_mapping[new_pos] = idx;\n+        }\n+        m_linearization.push_back(new_pos);\n+        // Copy the transaction's dependencies, translating them using remap.\n+        SetType parents;\n+        for (auto par : other.m_depgraph.GetReducedParents(pos)) {\n+            parents.Set(remap[par]);\n+        }\n+        m_depgraph.AddDependencies(parents, remap[pos]);\n+        // Update the transaction's Locator. There is no need to call Updated() to update chunk\n+        // feerates, as Updated() will be invoked by Cluster::ApplyDependencies on the resulting\n+        // merged Cluster later anyway).\n+        graph.m_entries[idx].m_locator.SetPresent(this, new_pos);\n+    }\n+    // Purge the other Cluster, now that everything has been moved.\n+    other.m_depgraph = DepGraph<SetType>{};\n+    other.m_linearization.clear();\n+    other.m_mapping.clear();\n+}\n+\n+void Cluster::ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept\n+{\n+    // This function is invoked by TxGraphImpl::ApplyDependencies after merging groups of Clusters\n+    // between which dependencies are added, which simply concatenates their linearizations. Invoke\n+    // PostLinearize, which has the effect that the linearization becomes a merge-sort of the\n+    // constituent linearizations. Do this here rather than in Cluster::Merge, because this\n+    // function is only invoked once per merged Cluster, rather than once per constituent one.\n+    // This concatenation + post-linearization could be replaced with an explicit merge-sort.\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Sort the list of dependencies to apply by child, so those can be applied in batch.\n+    std::sort(to_apply.begin(), to_apply.end(), [](auto& a, auto& b) { return a.second < b.second; });\n+    // Iterate over groups of to-be-added dependencies with the same child.\n+    auto it = to_apply.begin();\n+    while (it != to_apply.end()) {\n+        auto& first_child = graph.m_entries[it->second].m_locator;\n+        ClusterIndex child_idx = first_child.index;\n+        // Iterate over all to-be-added dependencies within that same child, gather the relevant\n+        // parents.\n+        SetType parents;\n+        while (it != to_apply.end()) {\n+            auto& child = graph.m_entries[it->second].m_locator;\n+            auto& parent = graph.m_entries[it->first].m_locator;\n+            Assume(child.cluster == this && parent.cluster == this);\n+            if (child.index != child_idx) break;\n+            parents.Set(parent.index);\n+            ++it;\n+        }\n+        // Push all dependencies to the underlying DepGraph. Note that this is O(N) in the size of\n+        // the cluster, regardless of the number of parents being added, so batching them together\n+        // has a performance benefit.\n+        m_depgraph.AddDependencies(parents, child_idx);\n+    }\n+\n+    // Finally fix the linearization, as the new dependencies may have invalidated the\n+    // linearization, and post-linearize it to fix up the worst problems with it.\n+    FixLinearization(m_depgraph, m_linearization);\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Finally push the changes to graph.m_entries.\n+    Updated(graph);\n+}\n+\n+std::unique_ptr<Cluster> TxGraphImpl::ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept\n+{\n+    Assume(quality != QualityLevel::NONE);\n+\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    Assume(setindex < quality_clusters.size());\n+\n+    // Extract the Cluster-owning unique_ptr.\n+    std::unique_ptr<Cluster> ret = std::move(quality_clusters[setindex]);\n+    ret->m_quality = QualityLevel::NONE;\n+    ret->m_setindex = ClusterSetIndex(-1);\n+\n+    // Clean up space in quality_cluster.\n+    auto max_setindex = quality_clusters.size() - 1;\n+    if (setindex != max_setindex) {\n+        // If the cluster was not the last element of quality_clusters, move that to take its place.\n+        quality_clusters.back()->m_quality = quality;\n+        quality_clusters.back()->m_setindex = setindex;\n+        quality_clusters[setindex] = std::move(quality_clusters.back());\n+    }\n+    // The last element of quality_clusters is now unused; drop it.\n+    quality_clusters.pop_back();\n+\n+    return ret;\n+}\n+\n+ClusterSetIndex TxGraphImpl::InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept\n+{\n+    // Cannot insert with quality level NONE (as that would mean not inserted).\n+    Assume(quality != QualityLevel::NONE);\n+    // The passed-in Cluster must not currently be in the TxGraphImpl.\n+    Assume(cluster->m_quality == QualityLevel::NONE);\n+\n+    // Append it at the end of the relevant TxGraphImpl::m_cluster.\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    ClusterSetIndex ret = quality_clusters.size();\n+    cluster->m_quality = quality;\n+    cluster->m_setindex = ret;\n+    quality_clusters.push_back(std::move(cluster));\n+    return ret;\n+}\n+\n+void TxGraphImpl::SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept\n+{\n+    Assume(new_quality != QualityLevel::NONE);\n+\n+    // Don't do anything if the quality did not change.\n+    if (old_quality == new_quality) return;\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(old_quality, old_index);\n+    // And re-insert it where it belongs.\n+    InsertCluster(std::move(cluster_ptr), new_quality);\n+}\n+\n+void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+{\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(cluster.m_quality, cluster.m_setindex);\n+    // And throw it away.\n+    cluster_ptr.reset();\n+}\n+\n+void TxGraphImpl::ApplyRemovals() noexcept\n+{\n+    auto& to_remove = m_to_remove;\n+    // Skip if there is nothing to remove.\n+    if (to_remove.empty()) return;\n+    // Wipe cached m_group_data, as it may be invalidated by removals.\n+    m_group_data = std::nullopt;\n+    m_group_clusters.clear();\n+    // Group the set of to-be-removed entries by Cluster*.\n+    std::sort(m_to_remove.begin(), m_to_remove.end(), [&](GraphIndex a, GraphIndex b) noexcept {\n+        return std::less{}(m_entries[a].m_locator.cluster, m_entries[b].m_locator.cluster);\n+    });\n+    // Process per Cluster.\n+    std::span to_remove_span{m_to_remove};\n+    while (!to_remove_span.empty()) {\n+        Cluster* cluster = m_entries[to_remove_span.front()].m_locator.cluster;\n+        if (cluster != nullptr) {\n+            // If the first to_remove_span entry's Cluster exists, hand to_remove_span to it, so it\n+            // can pop off whatever applies to it.\n+            cluster->ApplyRemovals(*this, to_remove_span);\n+        } else {\n+            // Otherwise, skip this already-removed entry.\n+            to_remove_span = to_remove_span.subspan(1);\n+        }\n+    }\n+    m_to_remove.clear();\n+}\n+\n+void TxGraphImpl::SwapIndexes(GraphIndex a, GraphIndex b) noexcept\n+{\n+    Assume(a < m_entries.size());\n+    Assume(b < m_entries.size());\n+    // Swap the Entry objects.\n+    std::swap(m_entries[a], m_entries[b]);\n+    // Iterate over both objects.\n+    for (int i = 0; i < 2; ++i) {\n+        GraphIndex idx = i ? b : a;\n+        Entry& entry = m_entries[idx];\n+        // Update linked Ref.\n+        if (entry.m_ref) GetRefIndex(*entry.m_ref) = idx;\n+        // Update the locator. The rest of the Entry information will not change, so no need to\n+        // invoke Cluster::Updated().\n+        Locator& locator = entry.m_locator;\n+        if (locator.IsPresent()) {\n+            locator.cluster->UpdateMapping(locator.index, idx);\n+        }\n+    }\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::Cleanup() noexcept\n+{\n+    ApplyDependencies();\n+    std::vector<Ref*> ret;\n+    // Sort the GraphIndex that need to be cleaned up. This groups them (so duplicates can be\n+    // processed just once). They are sorted in reverse, so the last ones get processed first.\n+    // This means earlier-processed GraphIndexes will not move of later-processed ones (which\n+    // might invalidate them).\n+    std::sort(m_wiped.begin(), m_wiped.end(), std::greater{});\n+    GraphIndex last(-1);\n+    for (GraphIndex idx : m_wiped) {\n+        // m_wiped should never contain the same GraphIndex twice (the code below would fail\n+        // if so, because GraphIndexes get invalidated by removing them).\n+        Assume(idx != last);\n+        last = idx;\n+        Entry& entry = m_entries[idx];\n+        // Gather Ref pointers that are being unlinked.\n+        if (entry.m_ref != nullptr) {\n+            ret.push_back(entry.m_ref);\n+            GetRefGraph(*entry.m_ref) = nullptr;\n+            m_entries[idx].m_ref = nullptr;\n+        }\n+        // Verify removed entries don't have anything that could hold a reference back.\n+        Assume(!entry.m_locator.IsPresent());\n+        if (idx != m_entries.size() - 1) SwapIndexes(idx, m_entries.size() - 1);\n+        m_entries.pop_back();\n+    }\n+    m_wiped.clear();\n+    return ret;\n+}\n+\n+void TxGraphImpl::Split(Cluster& cluster) noexcept\n+{\n+    // To split a Cluster, first make sure all removals are applied (as we might need to split\n+    // again afterwards otherwise).\n+    ApplyRemovals();\n+    bool del = cluster.Split(*this);\n+    if (del) {\n+        // Cluster::Split reports whether the Cluster is to be deleted.\n+        DeleteCluster(cluster);\n+    }\n+}\n+\n+void TxGraphImpl::SplitAll() noexcept\n+{\n+    // Before splitting all Cluster, first make sure all removals are applied.\n+    ApplyRemovals();\n+    auto& queue = m_clusters[int(QualityLevel::NEEDS_SPLIT)];\n+    while (!queue.empty()) {\n+        Split(*queue.back().get());\n+    }\n+}\n+\n+void TxGraphImpl::GroupClusters() noexcept\n+{\n+    // Before computing which Clusters need to be merged together, first apply all removals and\n+    // split the Clusters into connected components. If we would group first, we might end up\n+    // with inefficient Clusters which just end up being split again anyway.\n+    SplitAll();\n+\n+    // If the groupings have been computed already, nothing is left to be done.\n+    if (m_group_data.has_value()) return;\n+\n+    /** Annotated clusters: an entry for each Cluster, together with the representative for the\n+     *  partition it is in if known, or with nullptr if not yet known. */\n+    std::vector<std::pair<Cluster*, Cluster*>> an_clusters;\n+    /** Annotated dependencies: an entry for each m_deps_to_apply entry (excluding ones that apply\n+     *  to removed transactions), together with the representative root of the partition of\n+     *  Clusters it applies to. */\n+    std::vector<std::pair<std::pair<GraphIndex, GraphIndex>, Cluster*>> an_deps;\n+\n+    // Construct a an_clusters entry for every parent and child in the to-be-applied dependencies.\n+    for (const auto& [par, chl] : m_deps_to_add) {\n+        auto par_cluster = m_entries[par].m_locator.cluster;\n+        auto chl_cluster = m_entries[chl].m_locator.cluster;\n+        // Skip dependencies for which the parent or child transaction is removed.\n+        if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+        an_clusters.emplace_back(par_cluster, nullptr);\n+        // Do not include a duplicate when parent and child are identical, as it'll be removed\n+        // below anyway.\n+        if (chl_cluster != par_cluster) an_clusters.emplace_back(chl_cluster, nullptr);\n+    }\n+    // Sort and deduplicate an_clusters, so we end up with a sorted list of all involved Clusters\n+    // to which dependencies apply.\n+    std::sort(an_clusters.begin(), an_clusters.end());\n+    an_clusters.erase(std::unique(an_clusters.begin(), an_clusters.end()), an_clusters.end());\n+\n+    // Sort the dependencies by child Cluster.\n+    std::sort(m_deps_to_add.begin(), m_deps_to_add.end(), [&](auto& a, auto& b) noexcept {\n+        auto [_a_par, a_chl] = a;\n+        auto [_b_par, b_chl] = b;\n+        auto a_chl_cluster = m_entries[a_chl].m_locator.cluster;\n+        auto b_chl_cluster = m_entries[b_chl].m_locator.cluster;\n+        return std::less{}(a_chl_cluster, b_chl_cluster);\n+    });\n+\n+    // Run the union-find algorithm to to find partitions of the input Clusters which need to be\n+    // grouped together. See https://en.wikipedia.org/wiki/Disjoint-set_data_structure.\n+    {\n+        /** Each PartitionData entry contains information about a single input Cluster. */\n+        struct PartitionData\n+        {\n+            /** The cluster this holds information for. */\n+            Cluster* cluster;\n+            /** All PartitionData entries belonging to the same partition are organized in a tree.\n+             *  Each element points to its parent, or to itself if it is the root. The root is then\n+             *  a representative for the entire tree, and can be found by walking upwards from any\n+             *  element. */\n+            PartitionData* parent;\n+            /** (only if this is a root, so when parent == this) An upper bound on the height of\n+             *  tree for this partition. */\n+            unsigned rank;\n+        };\n+        /** Information about each input Cluster. Sorted by Cluster* pointer. */\n+        std::vector<PartitionData> partition_data;\n+\n+        /** Given a Cluster, find its corresponding PartitionData. */\n+        auto locate_uf = [&](Cluster* arg) noexcept -> PartitionData* {\n+            auto it = std::lower_bound(partition_data.begin(), partition_data.end(), arg,\n+                                       [](auto& a, Cluster* ptr) noexcept { return a.cluster < ptr; });\n+            Assume(it != partition_data.end());\n+            Assume(it->cluster == arg);\n+            return &*it;\n+        };\n+\n+        /** Given a PartitionData, find the root of the tree it is in (its representative). */\n+        static constexpr auto find_uf = [](PartitionData* data) noexcept -> PartitionData* {\n+            while (data->parent != data) {\n+                // Replace pointers to parents with pointers to grandparents.\n+                // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Finding_set_representatives.\n+                auto par = data->parent;\n+                data->parent = par->parent;\n+                data = par;\n+            }\n+            return data;\n+        };\n+\n+        /** Given two PartitionDatas, union the partitions they are in, and return their\n+         *  representative. */\n+        static constexpr auto union_uf = [](PartitionData* arg1, PartitionData* arg2) noexcept {\n+            // Find the roots of the trees, and bail out if they are already equal (which would\n+            // mean they are in the same partition already).\n+            auto rep1 = find_uf(arg1);\n+            auto rep2 = find_uf(arg2);\n+            if (rep1 == rep2) return rep1;\n+            // Pick the lower-rank root to become a child of the higher-rank one.\n+            // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Union_by_rank.\n+            if (rep1->rank < rep2->rank) std::swap(rep1, rep2);\n+            rep2->parent = rep1;\n+            rep1->rank += (rep1->rank == rep2->rank);\n+            return rep1;\n+        };\n+\n+        // Start by initializing every Cluster as its own singleton partition.\n+        partition_data.resize(an_clusters.size());\n+        for (size_t i = 0; i < an_clusters.size(); ++i) {\n+            partition_data[i].cluster = an_clusters[i].first;\n+            partition_data[i].parent = &partition_data[i];\n+            partition_data[i].rank = 0;\n+        }\n+\n+        // Run through all parent/child pairs in m_deps_to_add, and union the\n+        // the partitions their Clusters are in.\n+        Cluster* last_chl_cluster{nullptr};\n+        PartitionData* last_partition{nullptr};\n+        for (const auto& [par, chl] : m_deps_to_add) {\n+            auto par_cluster = m_entries[par].m_locator.cluster;\n+            auto chl_cluster = m_entries[chl].m_locator.cluster;\n+            // Nothing to do if parent and child are in the same Cluster.\n+            if (par_cluster == chl_cluster) continue;\n+            // Nothing to do if either parent or child transaction is removed already.\n+            if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+            Assume(par != chl);\n+            if (chl_cluster == last_chl_cluster) {\n+                // If the child Clusters is the same as the previous iteration, union with the\n+                // tree they were in, avoiding the need for another lookup. Note that m_deps_to_add\n+                // is sorted by child Cluster, so batches with the same child are expected.\n+                last_partition = union_uf(locate_uf(par_cluster), last_partition);\n+            } else {\n+                last_chl_cluster = chl_cluster;\n+                last_partition = union_uf(locate_uf(par_cluster), locate_uf(chl_cluster));\n+            }\n+        }\n+\n+        // Populate the an_clusters and an_deps data structures with the list of input Clusters,\n+        // and the input dependencies, annotated with the representative of the Cluster partition\n+        // it applies to.\n+        an_deps.reserve(m_deps_to_add.size());\n+        auto deps_it = m_deps_to_add.begin();\n+        for (size_t i = 0; i < partition_data.size(); ++i) {\n+            auto& data = partition_data[i];\n+            // Find the representative of the partition Cluster i is in, and store it with the\n+            // Cluster.\n+            auto rep = find_uf(&data)->cluster;\n+            an_clusters[i].second = rep;\n+            // Find all dependencies whose child Cluster is Cluster i, and annotate them with rep.\n+            while (deps_it != m_deps_to_add.end()) {\n+                auto [par, chl] = *deps_it;\n+                auto chl_cluster = m_entries[chl].m_locator.cluster;\n+                // Skip dependencies that apply to earlier Clusters (those necessary are for\n+                // deleted transactions, as otherwise we'd have processed them already).\n+                if (!std::less{}(chl_cluster, data.cluster)) {\n+                    if (chl_cluster != data.cluster) break;\n+                    auto par_cluster = m_entries[par].m_locator.cluster;\n+                    // Also filter out dependencies applying to a removed parent.\n+                    if (par_cluster != nullptr) an_deps.emplace_back(*deps_it, rep);\n+                }\n+                ++deps_it;\n+            }\n+        }\n+    }\n+\n+    // Sort both an_clusters and an_deps by representative of the partition they are in, grouping\n+    // all those applying to the same partition together.\n+    std::sort(an_deps.begin(), an_deps.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+    std::sort(an_clusters.begin(), an_clusters.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+\n+    // Translate the resulting cluster groups to the m_group_data structure.\n+    m_group_data = std::vector<GroupData>{};\n+    m_group_clusters.clear();\n+    m_group_clusters.reserve(an_clusters.size());\n+    m_deps_to_add.clear();\n+    m_deps_to_add.reserve(an_deps.size());\n+    auto an_deps_it = an_deps.begin();\n+    auto an_clusters_it = an_clusters.begin();\n+    while (an_deps_it != an_deps.end()) {\n+        auto rep = an_deps_it->second;\n+        // Create and initialize a new GroupData entry for the partition.\n+        auto& new_entry = m_group_data->emplace_back();\n+        new_entry.m_cluster_offset = m_group_clusters.size();\n+        new_entry.m_cluster_count = 0;\n+        new_entry.m_deps_offset = m_deps_to_add.size();\n+        new_entry.m_deps_count = 0;\n+        // Add all its clusters to it (copying those from an_clusters to m_group_clusters).\n+        while (an_clusters_it != an_clusters.end() && an_clusters_it->second == rep) {\n+            m_group_clusters.push_back(an_clusters_it->first);\n+            ++an_clusters_it;\n+            ++new_entry.m_cluster_count;\n+        }\n+        // Add all its dependencies to it (copying those back from an_deps to m_deps_to_add).\n+        while (an_deps_it != an_deps.end() && an_deps_it->second == rep) {\n+            m_deps_to_add.push_back(an_deps_it->first);\n+            ++an_deps_it;\n+            ++new_entry.m_deps_count;\n+        }\n+    }\n+    Assume(an_deps_it == an_deps.end());\n+    Assume(an_clusters_it == an_clusters.end());\n+}\n+\n+void TxGraphImpl::Merge(std::span<Cluster*> to_merge) noexcept\n+{\n+    Assume(!to_merge.empty());\n+    // Nothing to do if a group consists of just a single Cluster.\n+    if (to_merge.size() == 1) return;\n+\n+    // Move the largest Cluster to the front of to_merge. As all transactions in other to-be-merged\n+    // Clusters will be moved to that one, putting the largest one first minimizes the number of\n+    // moves.\n+    size_t max_size_pos{0};\n+    ClusterIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        ClusterIndex size = to_merge[i]->GetTxCount();\n+        if (size > max_size) {\n+            max_size_pos = i;\n+            max_size = size;\n+        }\n+    }\n+    if (max_size_pos != 0) std::swap(to_merge[0], to_merge[max_size_pos]);\n+\n+    // Merge all further Clusters in the group into the first one, and delete them.\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        to_merge[0]->Merge(*this, *to_merge[i]);\n+        DeleteCluster(*to_merge[i]);\n+    }\n+}\n+\n+void TxGraphImpl::ApplyDependencies() noexcept\n+{\n+    // Compute the groups of to-be-merged Clusters (which also applies all removals, and splits).\n+    GroupClusters();\n+    Assume(m_group_data.has_value());\n+    // Nothing to do if there are no dependencies to be added.\n+    if (m_deps_to_add.empty()) return;\n+\n+    // For each group of to-be-merged Clusters.\n+    Assume(m_group_data.has_value());\n+    for (const auto& group_data : *m_group_data) {\n+        // Invoke Merge() to merge them into a single Cluster.\n+        auto cluster_span = std::span{m_group_clusters}\n+                                .subspan(group_data.m_cluster_offset, group_data.m_cluster_count);\n+        Merge(cluster_span);\n+        // Actually apply all to-be-added dependencies (for each, parent and child belong to the\n+        // same Cluster because of the merging above).\n+        auto deps_span = std::span{m_deps_to_add}\n+                             .subspan(group_data.m_deps_offset, group_data.m_deps_count);\n+        Assume(!deps_span.empty());\n+        const auto& loc = m_entries[deps_span[0].second].m_locator;\n+        Assume(loc.IsPresent());\n+        loc.cluster->ApplyDependencies(*this, deps_span);\n+    }\n+\n+    // Wipe the list of to-be-added dependencies now that they are applied.\n+    m_deps_to_add.clear();\n+    // Also no further Cluster mergings are needed (note that we clear, but don't set to\n+    // std::nullopt, as that would imply the groupings are unknown).\n+    m_group_data->clear();\n+    m_group_clusters.clear();\n+}\n+\n+void Cluster::Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept\n+{\n+    // We can only relinearize Clusters that do not need splitting.\n+    Assume(m_quality == QualityLevel::OPTIMAL || m_quality == QualityLevel::ACCEPTABLE ||\n+           m_quality == QualityLevel::NEEDS_RELINEARIZE);\n+    // No work is required for Clusters which are already optimally linearized.\n+    if (m_quality == QualityLevel::OPTIMAL) return;\n+    // Invoke the actual linearization algorithm (passing in the existing one).\n+    uint64_t rng_seed = graph.m_rng.rand64();\n+    auto [linearization, optimal] = Linearize(m_depgraph, max_iters, rng_seed, m_linearization);\n+    // Postlinearize if the result isn't optimal already. This guarantees (among other things)\n+    // that the chunks of the resulting linearization are all connected.\n+    if (!optimal) PostLinearize(m_depgraph, linearization);\n+    // Update the linearization.\n+    m_linearization = std::move(linearization);\n+    // Update the Cluster's quality.\n+    auto new_quality = optimal ? QualityLevel::OPTIMAL : QualityLevel::ACCEPTABLE;\n+    graph.SetClusterQuality(m_quality, m_setindex, new_quality);\n+    // Update the Entry objects.\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::MakeAcceptable(Cluster& cluster) noexcept\n+{\n+    // Relinearize the Cluster if needed.\n+    if (cluster.m_quality == QualityLevel::NEEDS_RELINEARIZE) {\n+        cluster.Relinearize(*this, 10000);\n+    }\n+}\n+\n+Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept\n+{\n+    // Create a new transaction in the DepGraph, and remember its position in m_mapping.\n+    auto cluster_idx = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_index);\n+    m_linearization.push_back(cluster_idx);\n+}\n+\n+TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n+{\n+    // Construct a new Ref.\n+    Ref ret;\n+    // Construct a new Entry, and link it with the Ref.\n+    auto idx = m_entries.size();\n+    m_entries.emplace_back();\n+    auto& entry = m_entries.back();\n+    entry.m_ref = &ret;\n+    GetRefGraph(ret) = this;\n+    GetRefIndex(ret) = idx;\n+    // Construct a new singleton Cluster (which is necessarily optimally linearized).\n+    auto cluster = std::make_unique<Cluster>(*this, feerate, idx);\n+    auto cluster_ptr = cluster.get();\n+    InsertCluster(std::move(cluster), QualityLevel::OPTIMAL);\n+    cluster_ptr->Updated(*this);\n+    ++m_txcount;\n+    // Return the Ref.\n+    return ret;\n+}\n+\n+void TxGraphImpl::RemoveTransaction(Ref& arg) noexcept\n+{\n+    // Don't do anything if the Ref is empty (which may be indicative of the transaction already\n+    // having been removed).\n+    if (GetRefGraph(arg) == nullptr) return;\n+    Assume(GetRefGraph(arg) == this);\n+    // Find the Cluster the transaction is in, and stop if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return;\n+    // Remember that the transaction is to be removed.\n+    m_to_remove.push_back(GetRefIndex(arg));\n+}\n+\n+void TxGraphImpl::AddDependency(Ref& parent, Ref& child) noexcept\n+{\n+    // Don't do anything if either Ref is empty (which may be indicative of it having already been\n+    // removed).\n+    if (GetRefGraph(parent) == nullptr || GetRefGraph(child) == nullptr) return;\n+    Assume(GetRefGraph(parent) == this && GetRefGraph(child) == this);\n+    // Find the Cluster the parent and child transaction are in, and stop if either appears to be\n+    // already removed.\n+    auto par_cluster = m_entries[GetRefIndex(parent)].m_locator.cluster;\n+    if (par_cluster == nullptr) return;\n+    auto chl_cluster = m_entries[GetRefIndex(child)].m_locator.cluster;\n+    if (chl_cluster == nullptr) return;\n+    // Wipe m_group_data (as it will need to be recomputed).\n+    m_group_data.reset();\n+    m_group_clusters.clear();\n+    // Remember that this dependency is to be applied.\n+    m_deps_to_add.emplace_back(GetRefIndex(parent), GetRefIndex(child));\n+}\n+\n+bool TxGraphImpl::Exists(const Ref& arg) noexcept\n+{\n+    if (GetRefGraph(arg) == nullptr) return false;\n+    Assume(GetRefGraph(arg) == this);\n+    // Make sure the transaction isn't scheduled for removal.\n+    ApplyRemovals();\n+    return m_entries[GetRefIndex(arg)].m_locator.IsPresent();\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 1007,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": null,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looks like these 3 functions could `reserve()` for their `ret` vectors.",
      "created_at": "2025-01-09T19:42:45Z",
      "updated_at": "2025-01-09T20:03:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909348870",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909348870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1662,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909385059",
      "pull_request_review_id": 2540851568,
      "id": 1909385059,
      "node_id": "PRRC_kwDOABII585xzudj",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {\n+            ClusterIndex idx = m_linearization[lin_idx++];\n+            GraphIndex graph_idx = m_mapping[idx];\n+            auto& entry = graph.m_entries[graph_idx];\n+            entry.m_chunk_feerate = chunk.feerate;\n+            chunk.transactions.Reset(idx);\n+            if (chunk.transactions.None()) break;\n+        }\n+    }\n+}\n+\n+void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // Iterate over the prefix of to_remove that applies to this cluster.\n+    SetType todo;\n+    do {\n+        GraphIndex idx = to_remove.front();\n+        auto& entry = graph.m_entries[idx];\n+        auto& locator = entry.m_locator;\n+        // Stop once we hit an entry that applies to another Cluster.\n+        if (locator.cluster != this) break;\n+        // - Remember it in a set of to-remove ClusterIndexes.\n+        todo.Set(locator.index);\n+        // - Remove from m_mapping.\n+        m_mapping[locator.index] = GraphIndex(-1);\n+        // - Mark it as removed in the Entry's locator.\n+        locator.SetMissing();\n+        if (entry.IsWiped()) graph.m_wiped.push_back(idx);\n+        to_remove = to_remove.subspan(1);\n+        --graph.m_txcount;\n+    } while(!to_remove.empty());\n+\n+    Assume(todo.Any());\n+    // Wipe from the Cluster's DepGraph (this is O(n) regardless of the number of entries\n+    // removed, so we benefit from batching all the removals).\n+    m_depgraph.RemoveTransactions(todo);\n+    m_mapping.resize(m_depgraph.PositionRange());\n+\n+    // Filter removals out of m_linearization.\n+    m_linearization.erase(std::remove_if(\n+        m_linearization.begin(),\n+        m_linearization.end(),\n+        [&](auto pos) { return todo[pos]; }), m_linearization.end());\n+\n+    graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    Updated(graph);\n+}\n+\n+bool Cluster::Split(TxGraphImpl& graph) noexcept\n+{\n+    // This function can only be called when the Cluster needs splitting.\n+    Assume(m_quality == QualityLevel::NEEDS_SPLIT);\n+    /** Which positions are still left in this Cluster. */\n+    auto todo = m_depgraph.Positions();\n+    /** Mapping from transaction positions in this Cluster to the Cluster where it ends up, and\n+     *  its position therein. */\n+    std::vector<std::pair<Cluster*, ClusterIndex>> remap(m_depgraph.PositionRange());\n+    std::vector<Cluster*> new_clusters;\n+    bool first{true};\n+    // Iterate over the connected components of this Cluster's m_depgraph.\n+    while (todo.Any()) {\n+        auto component = m_depgraph.FindConnectedComponent(todo);\n+        if (first && component == todo) {\n+            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+            graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+            // We need to recompute and cache its chunking.\n+            Updated(graph);\n+            return false;\n+        }\n+        first = false;\n+        // Construct a new Cluster to hold the found component.\n+        auto new_cluster = std::make_unique<Cluster>();\n+        new_clusters.push_back(new_cluster.get());\n+        // Remember that all the component's transaction go to this new Cluster. The positions\n+        // will be determined below, so use -1 for now.\n+        for (auto i : component) {\n+            remap[i] = {new_cluster.get(), ClusterIndex(-1)};\n+        }\n+        graph.InsertCluster(std::move(new_cluster), QualityLevel::NEEDS_RELINEARIZE);\n+        todo -= component;\n+    }\n+    // Redistribute the transactions.\n+    for (auto i : m_linearization) {\n+        /** The cluster which transaction originally in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy the transaction to the new cluster's depgraph, and remember the position.\n+        remap[i].second = new_cluster->m_depgraph.AddTransaction(m_depgraph.FeeRate(i));\n+        // Create new mapping entry.\n+        new_cluster->m_mapping.push_back(m_mapping[i]);\n+        // Create a new linearization entry. As we're only appending transactions, they equal the\n+        // ClusterIndex.\n+        new_cluster->m_linearization.push_back(remap[i].second);\n+    }\n+    // Redistribute the dependencies.\n+    for (auto i : m_linearization) {\n+        /** The cluster transaction in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy its parents, translating positions.\n+        SetType new_parents;\n+        for (auto par : m_depgraph.GetReducedParents(i)) new_parents.Set(remap[par].second);\n+        new_cluster->m_depgraph.AddDependencies(new_parents, remap[i].second);\n+    }\n+    // Update all the Locators of moved transactions.\n+    for (Cluster* new_cluster : new_clusters) {\n+        new_cluster->Updated(graph);\n+    }\n+    // Wipe this Cluster, and return that it needs to be deleted.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_mapping.clear();\n+    m_linearization.clear();\n+    return true;\n+}\n+\n+void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+{\n+    /** Vector to store the positions in this Cluster for each position in other. */\n+    std::vector<ClusterIndex> remap(other.m_depgraph.PositionRange());\n+    // Iterate over all transactions in the other Cluster (the one being absorbed).\n+    for (auto pos : other.m_linearization) {\n+        auto idx = other.m_mapping[pos];\n+        // Copy the transaction into this Cluster, and remember its position.\n+        auto new_pos = m_depgraph.AddTransaction(other.m_depgraph.FeeRate(pos));\n+        remap[pos] = new_pos;\n+        if (new_pos == m_mapping.size()) {\n+            m_mapping.push_back(idx);\n+        } else {\n+            m_mapping[new_pos] = idx;\n+        }\n+        m_linearization.push_back(new_pos);\n+        // Copy the transaction's dependencies, translating them using remap.\n+        SetType parents;\n+        for (auto par : other.m_depgraph.GetReducedParents(pos)) {\n+            parents.Set(remap[par]);\n+        }\n+        m_depgraph.AddDependencies(parents, remap[pos]);\n+        // Update the transaction's Locator. There is no need to call Updated() to update chunk\n+        // feerates, as Updated() will be invoked by Cluster::ApplyDependencies on the resulting\n+        // merged Cluster later anyway).\n+        graph.m_entries[idx].m_locator.SetPresent(this, new_pos);\n+    }\n+    // Purge the other Cluster, now that everything has been moved.\n+    other.m_depgraph = DepGraph<SetType>{};\n+    other.m_linearization.clear();\n+    other.m_mapping.clear();\n+}\n+\n+void Cluster::ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept\n+{\n+    // This function is invoked by TxGraphImpl::ApplyDependencies after merging groups of Clusters\n+    // between which dependencies are added, which simply concatenates their linearizations. Invoke\n+    // PostLinearize, which has the effect that the linearization becomes a merge-sort of the\n+    // constituent linearizations. Do this here rather than in Cluster::Merge, because this\n+    // function is only invoked once per merged Cluster, rather than once per constituent one.\n+    // This concatenation + post-linearization could be replaced with an explicit merge-sort.\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Sort the list of dependencies to apply by child, so those can be applied in batch.\n+    std::sort(to_apply.begin(), to_apply.end(), [](auto& a, auto& b) { return a.second < b.second; });\n+    // Iterate over groups of to-be-added dependencies with the same child.\n+    auto it = to_apply.begin();\n+    while (it != to_apply.end()) {\n+        auto& first_child = graph.m_entries[it->second].m_locator;\n+        ClusterIndex child_idx = first_child.index;\n+        // Iterate over all to-be-added dependencies within that same child, gather the relevant\n+        // parents.\n+        SetType parents;\n+        while (it != to_apply.end()) {\n+            auto& child = graph.m_entries[it->second].m_locator;\n+            auto& parent = graph.m_entries[it->first].m_locator;\n+            Assume(child.cluster == this && parent.cluster == this);\n+            if (child.index != child_idx) break;\n+            parents.Set(parent.index);\n+            ++it;\n+        }\n+        // Push all dependencies to the underlying DepGraph. Note that this is O(N) in the size of\n+        // the cluster, regardless of the number of parents being added, so batching them together\n+        // has a performance benefit.\n+        m_depgraph.AddDependencies(parents, child_idx);\n+    }\n+\n+    // Finally fix the linearization, as the new dependencies may have invalidated the\n+    // linearization, and post-linearize it to fix up the worst problems with it.\n+    FixLinearization(m_depgraph, m_linearization);\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Finally push the changes to graph.m_entries.\n+    Updated(graph);\n+}\n+\n+std::unique_ptr<Cluster> TxGraphImpl::ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept\n+{\n+    Assume(quality != QualityLevel::NONE);\n+\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    Assume(setindex < quality_clusters.size());\n+\n+    // Extract the Cluster-owning unique_ptr.\n+    std::unique_ptr<Cluster> ret = std::move(quality_clusters[setindex]);\n+    ret->m_quality = QualityLevel::NONE;\n+    ret->m_setindex = ClusterSetIndex(-1);\n+\n+    // Clean up space in quality_cluster.\n+    auto max_setindex = quality_clusters.size() - 1;\n+    if (setindex != max_setindex) {\n+        // If the cluster was not the last element of quality_clusters, move that to take its place.\n+        quality_clusters.back()->m_quality = quality;\n+        quality_clusters.back()->m_setindex = setindex;\n+        quality_clusters[setindex] = std::move(quality_clusters.back());\n+    }\n+    // The last element of quality_clusters is now unused; drop it.\n+    quality_clusters.pop_back();\n+\n+    return ret;\n+}\n+\n+ClusterSetIndex TxGraphImpl::InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept\n+{\n+    // Cannot insert with quality level NONE (as that would mean not inserted).\n+    Assume(quality != QualityLevel::NONE);\n+    // The passed-in Cluster must not currently be in the TxGraphImpl.\n+    Assume(cluster->m_quality == QualityLevel::NONE);\n+\n+    // Append it at the end of the relevant TxGraphImpl::m_cluster.\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    ClusterSetIndex ret = quality_clusters.size();\n+    cluster->m_quality = quality;\n+    cluster->m_setindex = ret;\n+    quality_clusters.push_back(std::move(cluster));\n+    return ret;\n+}\n+\n+void TxGraphImpl::SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept\n+{\n+    Assume(new_quality != QualityLevel::NONE);\n+\n+    // Don't do anything if the quality did not change.\n+    if (old_quality == new_quality) return;\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(old_quality, old_index);\n+    // And re-insert it where it belongs.\n+    InsertCluster(std::move(cluster_ptr), new_quality);\n+}\n+\n+void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+{\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(cluster.m_quality, cluster.m_setindex);\n+    // And throw it away.\n+    cluster_ptr.reset();\n+}\n+\n+void TxGraphImpl::ApplyRemovals() noexcept\n+{\n+    auto& to_remove = m_to_remove;\n+    // Skip if there is nothing to remove.\n+    if (to_remove.empty()) return;\n+    // Wipe cached m_group_data, as it may be invalidated by removals.\n+    m_group_data = std::nullopt;\n+    m_group_clusters.clear();\n+    // Group the set of to-be-removed entries by Cluster*.\n+    std::sort(m_to_remove.begin(), m_to_remove.end(), [&](GraphIndex a, GraphIndex b) noexcept {\n+        return std::less{}(m_entries[a].m_locator.cluster, m_entries[b].m_locator.cluster);\n+    });\n+    // Process per Cluster.\n+    std::span to_remove_span{m_to_remove};\n+    while (!to_remove_span.empty()) {\n+        Cluster* cluster = m_entries[to_remove_span.front()].m_locator.cluster;\n+        if (cluster != nullptr) {\n+            // If the first to_remove_span entry's Cluster exists, hand to_remove_span to it, so it\n+            // can pop off whatever applies to it.\n+            cluster->ApplyRemovals(*this, to_remove_span);\n+        } else {\n+            // Otherwise, skip this already-removed entry.\n+            to_remove_span = to_remove_span.subspan(1);\n+        }\n+    }\n+    m_to_remove.clear();\n+}\n+\n+void TxGraphImpl::SwapIndexes(GraphIndex a, GraphIndex b) noexcept\n+{\n+    Assume(a < m_entries.size());\n+    Assume(b < m_entries.size());\n+    // Swap the Entry objects.\n+    std::swap(m_entries[a], m_entries[b]);\n+    // Iterate over both objects.\n+    for (int i = 0; i < 2; ++i) {\n+        GraphIndex idx = i ? b : a;\n+        Entry& entry = m_entries[idx];\n+        // Update linked Ref.\n+        if (entry.m_ref) GetRefIndex(*entry.m_ref) = idx;\n+        // Update the locator. The rest of the Entry information will not change, so no need to\n+        // invoke Cluster::Updated().\n+        Locator& locator = entry.m_locator;\n+        if (locator.IsPresent()) {\n+            locator.cluster->UpdateMapping(locator.index, idx);\n+        }\n+    }\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::Cleanup() noexcept\n+{\n+    ApplyDependencies();\n+    std::vector<Ref*> ret;\n+    // Sort the GraphIndex that need to be cleaned up. This groups them (so duplicates can be\n+    // processed just once). They are sorted in reverse, so the last ones get processed first.\n+    // This means earlier-processed GraphIndexes will not move of later-processed ones (which\n+    // might invalidate them).\n+    std::sort(m_wiped.begin(), m_wiped.end(), std::greater{});\n+    GraphIndex last(-1);\n+    for (GraphIndex idx : m_wiped) {\n+        // m_wiped should never contain the same GraphIndex twice (the code below would fail\n+        // if so, because GraphIndexes get invalidated by removing them).\n+        Assume(idx != last);\n+        last = idx;\n+        Entry& entry = m_entries[idx];\n+        // Gather Ref pointers that are being unlinked.\n+        if (entry.m_ref != nullptr) {\n+            ret.push_back(entry.m_ref);\n+            GetRefGraph(*entry.m_ref) = nullptr;\n+            m_entries[idx].m_ref = nullptr;\n+        }\n+        // Verify removed entries don't have anything that could hold a reference back.\n+        Assume(!entry.m_locator.IsPresent());\n+        if (idx != m_entries.size() - 1) SwapIndexes(idx, m_entries.size() - 1);\n+        m_entries.pop_back();\n+    }\n+    m_wiped.clear();\n+    return ret;\n+}\n+\n+void TxGraphImpl::Split(Cluster& cluster) noexcept\n+{\n+    // To split a Cluster, first make sure all removals are applied (as we might need to split\n+    // again afterwards otherwise).\n+    ApplyRemovals();\n+    bool del = cluster.Split(*this);\n+    if (del) {\n+        // Cluster::Split reports whether the Cluster is to be deleted.\n+        DeleteCluster(cluster);\n+    }\n+}\n+\n+void TxGraphImpl::SplitAll() noexcept\n+{\n+    // Before splitting all Cluster, first make sure all removals are applied.\n+    ApplyRemovals();\n+    auto& queue = m_clusters[int(QualityLevel::NEEDS_SPLIT)];\n+    while (!queue.empty()) {\n+        Split(*queue.back().get());\n+    }\n+}\n+\n+void TxGraphImpl::GroupClusters() noexcept\n+{\n+    // Before computing which Clusters need to be merged together, first apply all removals and\n+    // split the Clusters into connected components. If we would group first, we might end up\n+    // with inefficient Clusters which just end up being split again anyway.\n+    SplitAll();\n+\n+    // If the groupings have been computed already, nothing is left to be done.\n+    if (m_group_data.has_value()) return;\n+\n+    /** Annotated clusters: an entry for each Cluster, together with the representative for the\n+     *  partition it is in if known, or with nullptr if not yet known. */\n+    std::vector<std::pair<Cluster*, Cluster*>> an_clusters;\n+    /** Annotated dependencies: an entry for each m_deps_to_apply entry (excluding ones that apply\n+     *  to removed transactions), together with the representative root of the partition of\n+     *  Clusters it applies to. */\n+    std::vector<std::pair<std::pair<GraphIndex, GraphIndex>, Cluster*>> an_deps;\n+\n+    // Construct a an_clusters entry for every parent and child in the to-be-applied dependencies.\n+    for (const auto& [par, chl] : m_deps_to_add) {\n+        auto par_cluster = m_entries[par].m_locator.cluster;\n+        auto chl_cluster = m_entries[chl].m_locator.cluster;\n+        // Skip dependencies for which the parent or child transaction is removed.\n+        if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+        an_clusters.emplace_back(par_cluster, nullptr);\n+        // Do not include a duplicate when parent and child are identical, as it'll be removed\n+        // below anyway.\n+        if (chl_cluster != par_cluster) an_clusters.emplace_back(chl_cluster, nullptr);\n+    }\n+    // Sort and deduplicate an_clusters, so we end up with a sorted list of all involved Clusters\n+    // to which dependencies apply.\n+    std::sort(an_clusters.begin(), an_clusters.end());\n+    an_clusters.erase(std::unique(an_clusters.begin(), an_clusters.end()), an_clusters.end());\n+\n+    // Sort the dependencies by child Cluster.\n+    std::sort(m_deps_to_add.begin(), m_deps_to_add.end(), [&](auto& a, auto& b) noexcept {\n+        auto [_a_par, a_chl] = a;\n+        auto [_b_par, b_chl] = b;\n+        auto a_chl_cluster = m_entries[a_chl].m_locator.cluster;\n+        auto b_chl_cluster = m_entries[b_chl].m_locator.cluster;\n+        return std::less{}(a_chl_cluster, b_chl_cluster);\n+    });\n+\n+    // Run the union-find algorithm to to find partitions of the input Clusters which need to be\n+    // grouped together. See https://en.wikipedia.org/wiki/Disjoint-set_data_structure.\n+    {\n+        /** Each PartitionData entry contains information about a single input Cluster. */\n+        struct PartitionData\n+        {\n+            /** The cluster this holds information for. */\n+            Cluster* cluster;\n+            /** All PartitionData entries belonging to the same partition are organized in a tree.\n+             *  Each element points to its parent, or to itself if it is the root. The root is then\n+             *  a representative for the entire tree, and can be found by walking upwards from any\n+             *  element. */\n+            PartitionData* parent;\n+            /** (only if this is a root, so when parent == this) An upper bound on the height of\n+             *  tree for this partition. */\n+            unsigned rank;\n+        };\n+        /** Information about each input Cluster. Sorted by Cluster* pointer. */\n+        std::vector<PartitionData> partition_data;\n+\n+        /** Given a Cluster, find its corresponding PartitionData. */\n+        auto locate_uf = [&](Cluster* arg) noexcept -> PartitionData* {\n+            auto it = std::lower_bound(partition_data.begin(), partition_data.end(), arg,\n+                                       [](auto& a, Cluster* ptr) noexcept { return a.cluster < ptr; });\n+            Assume(it != partition_data.end());\n+            Assume(it->cluster == arg);\n+            return &*it;\n+        };\n+\n+        /** Given a PartitionData, find the root of the tree it is in (its representative). */\n+        static constexpr auto find_uf = [](PartitionData* data) noexcept -> PartitionData* {\n+            while (data->parent != data) {\n+                // Replace pointers to parents with pointers to grandparents.\n+                // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Finding_set_representatives.\n+                auto par = data->parent;\n+                data->parent = par->parent;\n+                data = par;\n+            }\n+            return data;\n+        };\n+\n+        /** Given two PartitionDatas, union the partitions they are in, and return their\n+         *  representative. */\n+        static constexpr auto union_uf = [](PartitionData* arg1, PartitionData* arg2) noexcept {\n+            // Find the roots of the trees, and bail out if they are already equal (which would\n+            // mean they are in the same partition already).\n+            auto rep1 = find_uf(arg1);\n+            auto rep2 = find_uf(arg2);\n+            if (rep1 == rep2) return rep1;\n+            // Pick the lower-rank root to become a child of the higher-rank one.\n+            // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Union_by_rank.\n+            if (rep1->rank < rep2->rank) std::swap(rep1, rep2);\n+            rep2->parent = rep1;\n+            rep1->rank += (rep1->rank == rep2->rank);\n+            return rep1;\n+        };\n+\n+        // Start by initializing every Cluster as its own singleton partition.\n+        partition_data.resize(an_clusters.size());\n+        for (size_t i = 0; i < an_clusters.size(); ++i) {\n+            partition_data[i].cluster = an_clusters[i].first;\n+            partition_data[i].parent = &partition_data[i];\n+            partition_data[i].rank = 0;\n+        }\n+\n+        // Run through all parent/child pairs in m_deps_to_add, and union the\n+        // the partitions their Clusters are in.\n+        Cluster* last_chl_cluster{nullptr};\n+        PartitionData* last_partition{nullptr};\n+        for (const auto& [par, chl] : m_deps_to_add) {\n+            auto par_cluster = m_entries[par].m_locator.cluster;\n+            auto chl_cluster = m_entries[chl].m_locator.cluster;\n+            // Nothing to do if parent and child are in the same Cluster.\n+            if (par_cluster == chl_cluster) continue;\n+            // Nothing to do if either parent or child transaction is removed already.\n+            if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+            Assume(par != chl);\n+            if (chl_cluster == last_chl_cluster) {\n+                // If the child Clusters is the same as the previous iteration, union with the\n+                // tree they were in, avoiding the need for another lookup. Note that m_deps_to_add\n+                // is sorted by child Cluster, so batches with the same child are expected.\n+                last_partition = union_uf(locate_uf(par_cluster), last_partition);\n+            } else {\n+                last_chl_cluster = chl_cluster;\n+                last_partition = union_uf(locate_uf(par_cluster), locate_uf(chl_cluster));\n+            }\n+        }\n+\n+        // Populate the an_clusters and an_deps data structures with the list of input Clusters,\n+        // and the input dependencies, annotated with the representative of the Cluster partition\n+        // it applies to.\n+        an_deps.reserve(m_deps_to_add.size());\n+        auto deps_it = m_deps_to_add.begin();\n+        for (size_t i = 0; i < partition_data.size(); ++i) {\n+            auto& data = partition_data[i];\n+            // Find the representative of the partition Cluster i is in, and store it with the\n+            // Cluster.\n+            auto rep = find_uf(&data)->cluster;\n+            an_clusters[i].second = rep;\n+            // Find all dependencies whose child Cluster is Cluster i, and annotate them with rep.\n+            while (deps_it != m_deps_to_add.end()) {\n+                auto [par, chl] = *deps_it;\n+                auto chl_cluster = m_entries[chl].m_locator.cluster;\n+                // Skip dependencies that apply to earlier Clusters (those necessary are for\n+                // deleted transactions, as otherwise we'd have processed them already).\n+                if (!std::less{}(chl_cluster, data.cluster)) {\n+                    if (chl_cluster != data.cluster) break;\n+                    auto par_cluster = m_entries[par].m_locator.cluster;\n+                    // Also filter out dependencies applying to a removed parent.\n+                    if (par_cluster != nullptr) an_deps.emplace_back(*deps_it, rep);\n+                }\n+                ++deps_it;\n+            }\n+        }\n+    }\n+\n+    // Sort both an_clusters and an_deps by representative of the partition they are in, grouping\n+    // all those applying to the same partition together.\n+    std::sort(an_deps.begin(), an_deps.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+    std::sort(an_clusters.begin(), an_clusters.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+\n+    // Translate the resulting cluster groups to the m_group_data structure.\n+    m_group_data = std::vector<GroupData>{};\n+    m_group_clusters.clear();\n+    m_group_clusters.reserve(an_clusters.size());\n+    m_deps_to_add.clear();\n+    m_deps_to_add.reserve(an_deps.size());\n+    auto an_deps_it = an_deps.begin();\n+    auto an_clusters_it = an_clusters.begin();\n+    while (an_deps_it != an_deps.end()) {\n+        auto rep = an_deps_it->second;\n+        // Create and initialize a new GroupData entry for the partition.\n+        auto& new_entry = m_group_data->emplace_back();\n+        new_entry.m_cluster_offset = m_group_clusters.size();\n+        new_entry.m_cluster_count = 0;\n+        new_entry.m_deps_offset = m_deps_to_add.size();\n+        new_entry.m_deps_count = 0;\n+        // Add all its clusters to it (copying those from an_clusters to m_group_clusters).\n+        while (an_clusters_it != an_clusters.end() && an_clusters_it->second == rep) {\n+            m_group_clusters.push_back(an_clusters_it->first);\n+            ++an_clusters_it;\n+            ++new_entry.m_cluster_count;\n+        }\n+        // Add all its dependencies to it (copying those back from an_deps to m_deps_to_add).\n+        while (an_deps_it != an_deps.end() && an_deps_it->second == rep) {\n+            m_deps_to_add.push_back(an_deps_it->first);\n+            ++an_deps_it;\n+            ++new_entry.m_deps_count;\n+        }\n+    }\n+    Assume(an_deps_it == an_deps.end());\n+    Assume(an_clusters_it == an_clusters.end());\n+}\n+\n+void TxGraphImpl::Merge(std::span<Cluster*> to_merge) noexcept\n+{\n+    Assume(!to_merge.empty());\n+    // Nothing to do if a group consists of just a single Cluster.\n+    if (to_merge.size() == 1) return;\n+\n+    // Move the largest Cluster to the front of to_merge. As all transactions in other to-be-merged\n+    // Clusters will be moved to that one, putting the largest one first minimizes the number of\n+    // moves.\n+    size_t max_size_pos{0};\n+    ClusterIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        ClusterIndex size = to_merge[i]->GetTxCount();\n+        if (size > max_size) {\n+            max_size_pos = i;\n+            max_size = size;\n+        }\n+    }\n+    if (max_size_pos != 0) std::swap(to_merge[0], to_merge[max_size_pos]);\n+\n+    // Merge all further Clusters in the group into the first one, and delete them.\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        to_merge[0]->Merge(*this, *to_merge[i]);\n+        DeleteCluster(*to_merge[i]);\n+    }\n+}\n+\n+void TxGraphImpl::ApplyDependencies() noexcept\n+{\n+    // Compute the groups of to-be-merged Clusters (which also applies all removals, and splits).\n+    GroupClusters();\n+    Assume(m_group_data.has_value());\n+    // Nothing to do if there are no dependencies to be added.\n+    if (m_deps_to_add.empty()) return;\n+\n+    // For each group of to-be-merged Clusters.\n+    Assume(m_group_data.has_value());\n+    for (const auto& group_data : *m_group_data) {\n+        // Invoke Merge() to merge them into a single Cluster.\n+        auto cluster_span = std::span{m_group_clusters}\n+                                .subspan(group_data.m_cluster_offset, group_data.m_cluster_count);\n+        Merge(cluster_span);\n+        // Actually apply all to-be-added dependencies (for each, parent and child belong to the\n+        // same Cluster because of the merging above).\n+        auto deps_span = std::span{m_deps_to_add}\n+                             .subspan(group_data.m_deps_offset, group_data.m_deps_count);\n+        Assume(!deps_span.empty());\n+        const auto& loc = m_entries[deps_span[0].second].m_locator;\n+        Assume(loc.IsPresent());\n+        loc.cluster->ApplyDependencies(*this, deps_span);\n+    }\n+\n+    // Wipe the list of to-be-added dependencies now that they are applied.\n+    m_deps_to_add.clear();\n+    // Also no further Cluster mergings are needed (note that we clear, but don't set to\n+    // std::nullopt, as that would imply the groupings are unknown).\n+    m_group_data->clear();\n+    m_group_clusters.clear();\n+}\n+\n+void Cluster::Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept\n+{\n+    // We can only relinearize Clusters that do not need splitting.\n+    Assume(m_quality == QualityLevel::OPTIMAL || m_quality == QualityLevel::ACCEPTABLE ||\n+           m_quality == QualityLevel::NEEDS_RELINEARIZE);\n+    // No work is required for Clusters which are already optimally linearized.\n+    if (m_quality == QualityLevel::OPTIMAL) return;\n+    // Invoke the actual linearization algorithm (passing in the existing one).\n+    uint64_t rng_seed = graph.m_rng.rand64();\n+    auto [linearization, optimal] = Linearize(m_depgraph, max_iters, rng_seed, m_linearization);\n+    // Postlinearize if the result isn't optimal already. This guarantees (among other things)\n+    // that the chunks of the resulting linearization are all connected.\n+    if (!optimal) PostLinearize(m_depgraph, linearization);\n+    // Update the linearization.\n+    m_linearization = std::move(linearization);\n+    // Update the Cluster's quality.\n+    auto new_quality = optimal ? QualityLevel::OPTIMAL : QualityLevel::ACCEPTABLE;\n+    graph.SetClusterQuality(m_quality, m_setindex, new_quality);\n+    // Update the Entry objects.\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::MakeAcceptable(Cluster& cluster) noexcept\n+{\n+    // Relinearize the Cluster if needed.\n+    if (cluster.m_quality == QualityLevel::NEEDS_RELINEARIZE) {\n+        cluster.Relinearize(*this, 10000);\n+    }\n+}\n+\n+Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept\n+{\n+    // Create a new transaction in the DepGraph, and remember its position in m_mapping.\n+    auto cluster_idx = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_index);\n+    m_linearization.push_back(cluster_idx);\n+}\n+\n+TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n+{\n+    // Construct a new Ref.\n+    Ref ret;\n+    // Construct a new Entry, and link it with the Ref.\n+    auto idx = m_entries.size();\n+    m_entries.emplace_back();\n+    auto& entry = m_entries.back();\n+    entry.m_ref = &ret;",
      "path": "src/txgraph.cpp",
      "position": 624,
      "original_position": 953,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": 1909286865,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I believe it is safe, both with NRVO and without.\r\n\r\nWith NRVO, `ret` is constructed directly in the caller's target destination, so this isn't a pointer to local stack space.\r\n\r\nWithout NRVO, the `Ref(Ref&&)` move constructor is invoked by `return ret;`, which will update the pointer to the caller's destination.",
      "created_at": "2025-01-09T20:19:28Z",
      "updated_at": "2025-01-09T21:17:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909385059",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909385059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1715,
      "original_line": 1715,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909403690",
      "pull_request_review_id": 2540882536,
      "id": 1909403690,
      "node_id": "PRRC_kwDOABII585xzzAq",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {\n+            ClusterIndex idx = m_linearization[lin_idx++];\n+            GraphIndex graph_idx = m_mapping[idx];\n+            auto& entry = graph.m_entries[graph_idx];\n+            entry.m_chunk_feerate = chunk.feerate;\n+            chunk.transactions.Reset(idx);\n+            if (chunk.transactions.None()) break;\n+        }\n+    }\n+}\n+\n+void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // Iterate over the prefix of to_remove that applies to this cluster.\n+    SetType todo;\n+    do {\n+        GraphIndex idx = to_remove.front();\n+        auto& entry = graph.m_entries[idx];\n+        auto& locator = entry.m_locator;\n+        // Stop once we hit an entry that applies to another Cluster.\n+        if (locator.cluster != this) break;\n+        // - Remember it in a set of to-remove ClusterIndexes.\n+        todo.Set(locator.index);\n+        // - Remove from m_mapping.\n+        m_mapping[locator.index] = GraphIndex(-1);\n+        // - Mark it as removed in the Entry's locator.\n+        locator.SetMissing();\n+        if (entry.IsWiped()) graph.m_wiped.push_back(idx);\n+        to_remove = to_remove.subspan(1);\n+        --graph.m_txcount;\n+    } while(!to_remove.empty());\n+\n+    Assume(todo.Any());\n+    // Wipe from the Cluster's DepGraph (this is O(n) regardless of the number of entries\n+    // removed, so we benefit from batching all the removals).\n+    m_depgraph.RemoveTransactions(todo);\n+    m_mapping.resize(m_depgraph.PositionRange());\n+\n+    // Filter removals out of m_linearization.\n+    m_linearization.erase(std::remove_if(\n+        m_linearization.begin(),\n+        m_linearization.end(),\n+        [&](auto pos) { return todo[pos]; }), m_linearization.end());\n+\n+    graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    Updated(graph);\n+}\n+\n+bool Cluster::Split(TxGraphImpl& graph) noexcept\n+{\n+    // This function can only be called when the Cluster needs splitting.\n+    Assume(m_quality == QualityLevel::NEEDS_SPLIT);\n+    /** Which positions are still left in this Cluster. */\n+    auto todo = m_depgraph.Positions();\n+    /** Mapping from transaction positions in this Cluster to the Cluster where it ends up, and\n+     *  its position therein. */\n+    std::vector<std::pair<Cluster*, ClusterIndex>> remap(m_depgraph.PositionRange());\n+    std::vector<Cluster*> new_clusters;\n+    bool first{true};\n+    // Iterate over the connected components of this Cluster's m_depgraph.\n+    while (todo.Any()) {\n+        auto component = m_depgraph.FindConnectedComponent(todo);\n+        if (first && component == todo) {\n+            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+            graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+            // We need to recompute and cache its chunking.\n+            Updated(graph);\n+            return false;\n+        }\n+        first = false;\n+        // Construct a new Cluster to hold the found component.\n+        auto new_cluster = std::make_unique<Cluster>();\n+        new_clusters.push_back(new_cluster.get());\n+        // Remember that all the component's transaction go to this new Cluster. The positions\n+        // will be determined below, so use -1 for now.\n+        for (auto i : component) {\n+            remap[i] = {new_cluster.get(), ClusterIndex(-1)};\n+        }\n+        graph.InsertCluster(std::move(new_cluster), QualityLevel::NEEDS_RELINEARIZE);\n+        todo -= component;\n+    }\n+    // Redistribute the transactions.\n+    for (auto i : m_linearization) {\n+        /** The cluster which transaction originally in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy the transaction to the new cluster's depgraph, and remember the position.\n+        remap[i].second = new_cluster->m_depgraph.AddTransaction(m_depgraph.FeeRate(i));\n+        // Create new mapping entry.\n+        new_cluster->m_mapping.push_back(m_mapping[i]);\n+        // Create a new linearization entry. As we're only appending transactions, they equal the\n+        // ClusterIndex.\n+        new_cluster->m_linearization.push_back(remap[i].second);\n+    }\n+    // Redistribute the dependencies.\n+    for (auto i : m_linearization) {\n+        /** The cluster transaction in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy its parents, translating positions.\n+        SetType new_parents;\n+        for (auto par : m_depgraph.GetReducedParents(i)) new_parents.Set(remap[par].second);\n+        new_cluster->m_depgraph.AddDependencies(new_parents, remap[i].second);\n+    }\n+    // Update all the Locators of moved transactions.\n+    for (Cluster* new_cluster : new_clusters) {\n+        new_cluster->Updated(graph);\n+    }\n+    // Wipe this Cluster, and return that it needs to be deleted.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_mapping.clear();\n+    m_linearization.clear();\n+    return true;\n+}\n+\n+void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+{\n+    /** Vector to store the positions in this Cluster for each position in other. */\n+    std::vector<ClusterIndex> remap(other.m_depgraph.PositionRange());\n+    // Iterate over all transactions in the other Cluster (the one being absorbed).\n+    for (auto pos : other.m_linearization) {\n+        auto idx = other.m_mapping[pos];\n+        // Copy the transaction into this Cluster, and remember its position.\n+        auto new_pos = m_depgraph.AddTransaction(other.m_depgraph.FeeRate(pos));\n+        remap[pos] = new_pos;\n+        if (new_pos == m_mapping.size()) {\n+            m_mapping.push_back(idx);\n+        } else {\n+            m_mapping[new_pos] = idx;\n+        }\n+        m_linearization.push_back(new_pos);\n+        // Copy the transaction's dependencies, translating them using remap.\n+        SetType parents;\n+        for (auto par : other.m_depgraph.GetReducedParents(pos)) {\n+            parents.Set(remap[par]);\n+        }\n+        m_depgraph.AddDependencies(parents, remap[pos]);\n+        // Update the transaction's Locator. There is no need to call Updated() to update chunk\n+        // feerates, as Updated() will be invoked by Cluster::ApplyDependencies on the resulting\n+        // merged Cluster later anyway).\n+        graph.m_entries[idx].m_locator.SetPresent(this, new_pos);\n+    }\n+    // Purge the other Cluster, now that everything has been moved.\n+    other.m_depgraph = DepGraph<SetType>{};\n+    other.m_linearization.clear();\n+    other.m_mapping.clear();\n+}\n+\n+void Cluster::ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept\n+{\n+    // This function is invoked by TxGraphImpl::ApplyDependencies after merging groups of Clusters\n+    // between which dependencies are added, which simply concatenates their linearizations. Invoke\n+    // PostLinearize, which has the effect that the linearization becomes a merge-sort of the\n+    // constituent linearizations. Do this here rather than in Cluster::Merge, because this\n+    // function is only invoked once per merged Cluster, rather than once per constituent one.\n+    // This concatenation + post-linearization could be replaced with an explicit merge-sort.\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Sort the list of dependencies to apply by child, so those can be applied in batch.\n+    std::sort(to_apply.begin(), to_apply.end(), [](auto& a, auto& b) { return a.second < b.second; });\n+    // Iterate over groups of to-be-added dependencies with the same child.\n+    auto it = to_apply.begin();\n+    while (it != to_apply.end()) {\n+        auto& first_child = graph.m_entries[it->second].m_locator;\n+        ClusterIndex child_idx = first_child.index;\n+        // Iterate over all to-be-added dependencies within that same child, gather the relevant\n+        // parents.\n+        SetType parents;\n+        while (it != to_apply.end()) {\n+            auto& child = graph.m_entries[it->second].m_locator;\n+            auto& parent = graph.m_entries[it->first].m_locator;\n+            Assume(child.cluster == this && parent.cluster == this);\n+            if (child.index != child_idx) break;\n+            parents.Set(parent.index);\n+            ++it;\n+        }\n+        // Push all dependencies to the underlying DepGraph. Note that this is O(N) in the size of\n+        // the cluster, regardless of the number of parents being added, so batching them together\n+        // has a performance benefit.\n+        m_depgraph.AddDependencies(parents, child_idx);\n+    }\n+\n+    // Finally fix the linearization, as the new dependencies may have invalidated the\n+    // linearization, and post-linearize it to fix up the worst problems with it.\n+    FixLinearization(m_depgraph, m_linearization);\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Finally push the changes to graph.m_entries.\n+    Updated(graph);\n+}\n+\n+std::unique_ptr<Cluster> TxGraphImpl::ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept\n+{\n+    Assume(quality != QualityLevel::NONE);\n+\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    Assume(setindex < quality_clusters.size());\n+\n+    // Extract the Cluster-owning unique_ptr.\n+    std::unique_ptr<Cluster> ret = std::move(quality_clusters[setindex]);\n+    ret->m_quality = QualityLevel::NONE;\n+    ret->m_setindex = ClusterSetIndex(-1);\n+\n+    // Clean up space in quality_cluster.\n+    auto max_setindex = quality_clusters.size() - 1;\n+    if (setindex != max_setindex) {\n+        // If the cluster was not the last element of quality_clusters, move that to take its place.\n+        quality_clusters.back()->m_quality = quality;\n+        quality_clusters.back()->m_setindex = setindex;\n+        quality_clusters[setindex] = std::move(quality_clusters.back());\n+    }\n+    // The last element of quality_clusters is now unused; drop it.\n+    quality_clusters.pop_back();\n+\n+    return ret;\n+}\n+\n+ClusterSetIndex TxGraphImpl::InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept\n+{\n+    // Cannot insert with quality level NONE (as that would mean not inserted).\n+    Assume(quality != QualityLevel::NONE);\n+    // The passed-in Cluster must not currently be in the TxGraphImpl.\n+    Assume(cluster->m_quality == QualityLevel::NONE);\n+\n+    // Append it at the end of the relevant TxGraphImpl::m_cluster.\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    ClusterSetIndex ret = quality_clusters.size();\n+    cluster->m_quality = quality;\n+    cluster->m_setindex = ret;\n+    quality_clusters.push_back(std::move(cluster));\n+    return ret;\n+}\n+\n+void TxGraphImpl::SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept\n+{\n+    Assume(new_quality != QualityLevel::NONE);\n+\n+    // Don't do anything if the quality did not change.\n+    if (old_quality == new_quality) return;\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(old_quality, old_index);\n+    // And re-insert it where it belongs.\n+    InsertCluster(std::move(cluster_ptr), new_quality);\n+}\n+\n+void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+{\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(cluster.m_quality, cluster.m_setindex);\n+    // And throw it away.\n+    cluster_ptr.reset();\n+}\n+\n+void TxGraphImpl::ApplyRemovals() noexcept\n+{\n+    auto& to_remove = m_to_remove;\n+    // Skip if there is nothing to remove.\n+    if (to_remove.empty()) return;\n+    // Wipe cached m_group_data, as it may be invalidated by removals.\n+    m_group_data = std::nullopt;\n+    m_group_clusters.clear();\n+    // Group the set of to-be-removed entries by Cluster*.\n+    std::sort(m_to_remove.begin(), m_to_remove.end(), [&](GraphIndex a, GraphIndex b) noexcept {\n+        return std::less{}(m_entries[a].m_locator.cluster, m_entries[b].m_locator.cluster);\n+    });\n+    // Process per Cluster.\n+    std::span to_remove_span{m_to_remove};\n+    while (!to_remove_span.empty()) {\n+        Cluster* cluster = m_entries[to_remove_span.front()].m_locator.cluster;\n+        if (cluster != nullptr) {\n+            // If the first to_remove_span entry's Cluster exists, hand to_remove_span to it, so it\n+            // can pop off whatever applies to it.\n+            cluster->ApplyRemovals(*this, to_remove_span);\n+        } else {\n+            // Otherwise, skip this already-removed entry.\n+            to_remove_span = to_remove_span.subspan(1);\n+        }\n+    }\n+    m_to_remove.clear();\n+}\n+\n+void TxGraphImpl::SwapIndexes(GraphIndex a, GraphIndex b) noexcept\n+{\n+    Assume(a < m_entries.size());\n+    Assume(b < m_entries.size());\n+    // Swap the Entry objects.\n+    std::swap(m_entries[a], m_entries[b]);\n+    // Iterate over both objects.\n+    for (int i = 0; i < 2; ++i) {\n+        GraphIndex idx = i ? b : a;\n+        Entry& entry = m_entries[idx];\n+        // Update linked Ref.\n+        if (entry.m_ref) GetRefIndex(*entry.m_ref) = idx;\n+        // Update the locator. The rest of the Entry information will not change, so no need to\n+        // invoke Cluster::Updated().\n+        Locator& locator = entry.m_locator;\n+        if (locator.IsPresent()) {\n+            locator.cluster->UpdateMapping(locator.index, idx);\n+        }\n+    }\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::Cleanup() noexcept\n+{\n+    ApplyDependencies();\n+    std::vector<Ref*> ret;\n+    // Sort the GraphIndex that need to be cleaned up. This groups them (so duplicates can be\n+    // processed just once). They are sorted in reverse, so the last ones get processed first.\n+    // This means earlier-processed GraphIndexes will not move of later-processed ones (which\n+    // might invalidate them).\n+    std::sort(m_wiped.begin(), m_wiped.end(), std::greater{});\n+    GraphIndex last(-1);\n+    for (GraphIndex idx : m_wiped) {\n+        // m_wiped should never contain the same GraphIndex twice (the code below would fail\n+        // if so, because GraphIndexes get invalidated by removing them).\n+        Assume(idx != last);\n+        last = idx;\n+        Entry& entry = m_entries[idx];\n+        // Gather Ref pointers that are being unlinked.\n+        if (entry.m_ref != nullptr) {\n+            ret.push_back(entry.m_ref);\n+            GetRefGraph(*entry.m_ref) = nullptr;\n+            m_entries[idx].m_ref = nullptr;\n+        }\n+        // Verify removed entries don't have anything that could hold a reference back.\n+        Assume(!entry.m_locator.IsPresent());\n+        if (idx != m_entries.size() - 1) SwapIndexes(idx, m_entries.size() - 1);\n+        m_entries.pop_back();\n+    }\n+    m_wiped.clear();\n+    return ret;\n+}\n+\n+void TxGraphImpl::Split(Cluster& cluster) noexcept\n+{\n+    // To split a Cluster, first make sure all removals are applied (as we might need to split\n+    // again afterwards otherwise).\n+    ApplyRemovals();\n+    bool del = cluster.Split(*this);\n+    if (del) {\n+        // Cluster::Split reports whether the Cluster is to be deleted.\n+        DeleteCluster(cluster);\n+    }\n+}\n+\n+void TxGraphImpl::SplitAll() noexcept\n+{\n+    // Before splitting all Cluster, first make sure all removals are applied.\n+    ApplyRemovals();\n+    auto& queue = m_clusters[int(QualityLevel::NEEDS_SPLIT)];\n+    while (!queue.empty()) {\n+        Split(*queue.back().get());\n+    }\n+}\n+\n+void TxGraphImpl::GroupClusters() noexcept\n+{\n+    // Before computing which Clusters need to be merged together, first apply all removals and\n+    // split the Clusters into connected components. If we would group first, we might end up\n+    // with inefficient Clusters which just end up being split again anyway.\n+    SplitAll();\n+\n+    // If the groupings have been computed already, nothing is left to be done.\n+    if (m_group_data.has_value()) return;\n+\n+    /** Annotated clusters: an entry for each Cluster, together with the representative for the\n+     *  partition it is in if known, or with nullptr if not yet known. */\n+    std::vector<std::pair<Cluster*, Cluster*>> an_clusters;\n+    /** Annotated dependencies: an entry for each m_deps_to_apply entry (excluding ones that apply\n+     *  to removed transactions), together with the representative root of the partition of\n+     *  Clusters it applies to. */\n+    std::vector<std::pair<std::pair<GraphIndex, GraphIndex>, Cluster*>> an_deps;\n+\n+    // Construct a an_clusters entry for every parent and child in the to-be-applied dependencies.\n+    for (const auto& [par, chl] : m_deps_to_add) {\n+        auto par_cluster = m_entries[par].m_locator.cluster;\n+        auto chl_cluster = m_entries[chl].m_locator.cluster;\n+        // Skip dependencies for which the parent or child transaction is removed.\n+        if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+        an_clusters.emplace_back(par_cluster, nullptr);\n+        // Do not include a duplicate when parent and child are identical, as it'll be removed\n+        // below anyway.\n+        if (chl_cluster != par_cluster) an_clusters.emplace_back(chl_cluster, nullptr);\n+    }\n+    // Sort and deduplicate an_clusters, so we end up with a sorted list of all involved Clusters\n+    // to which dependencies apply.\n+    std::sort(an_clusters.begin(), an_clusters.end());\n+    an_clusters.erase(std::unique(an_clusters.begin(), an_clusters.end()), an_clusters.end());\n+\n+    // Sort the dependencies by child Cluster.\n+    std::sort(m_deps_to_add.begin(), m_deps_to_add.end(), [&](auto& a, auto& b) noexcept {\n+        auto [_a_par, a_chl] = a;\n+        auto [_b_par, b_chl] = b;\n+        auto a_chl_cluster = m_entries[a_chl].m_locator.cluster;\n+        auto b_chl_cluster = m_entries[b_chl].m_locator.cluster;\n+        return std::less{}(a_chl_cluster, b_chl_cluster);\n+    });\n+\n+    // Run the union-find algorithm to to find partitions of the input Clusters which need to be\n+    // grouped together. See https://en.wikipedia.org/wiki/Disjoint-set_data_structure.\n+    {\n+        /** Each PartitionData entry contains information about a single input Cluster. */\n+        struct PartitionData\n+        {\n+            /** The cluster this holds information for. */\n+            Cluster* cluster;\n+            /** All PartitionData entries belonging to the same partition are organized in a tree.\n+             *  Each element points to its parent, or to itself if it is the root. The root is then\n+             *  a representative for the entire tree, and can be found by walking upwards from any\n+             *  element. */\n+            PartitionData* parent;\n+            /** (only if this is a root, so when parent == this) An upper bound on the height of\n+             *  tree for this partition. */\n+            unsigned rank;\n+        };\n+        /** Information about each input Cluster. Sorted by Cluster* pointer. */\n+        std::vector<PartitionData> partition_data;\n+\n+        /** Given a Cluster, find its corresponding PartitionData. */\n+        auto locate_uf = [&](Cluster* arg) noexcept -> PartitionData* {\n+            auto it = std::lower_bound(partition_data.begin(), partition_data.end(), arg,\n+                                       [](auto& a, Cluster* ptr) noexcept { return a.cluster < ptr; });\n+            Assume(it != partition_data.end());\n+            Assume(it->cluster == arg);\n+            return &*it;\n+        };\n+\n+        /** Given a PartitionData, find the root of the tree it is in (its representative). */\n+        static constexpr auto find_uf = [](PartitionData* data) noexcept -> PartitionData* {\n+            while (data->parent != data) {\n+                // Replace pointers to parents with pointers to grandparents.\n+                // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Finding_set_representatives.\n+                auto par = data->parent;\n+                data->parent = par->parent;\n+                data = par;\n+            }\n+            return data;\n+        };\n+\n+        /** Given two PartitionDatas, union the partitions they are in, and return their\n+         *  representative. */\n+        static constexpr auto union_uf = [](PartitionData* arg1, PartitionData* arg2) noexcept {\n+            // Find the roots of the trees, and bail out if they are already equal (which would\n+            // mean they are in the same partition already).\n+            auto rep1 = find_uf(arg1);\n+            auto rep2 = find_uf(arg2);\n+            if (rep1 == rep2) return rep1;\n+            // Pick the lower-rank root to become a child of the higher-rank one.\n+            // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Union_by_rank.\n+            if (rep1->rank < rep2->rank) std::swap(rep1, rep2);\n+            rep2->parent = rep1;\n+            rep1->rank += (rep1->rank == rep2->rank);\n+            return rep1;\n+        };\n+\n+        // Start by initializing every Cluster as its own singleton partition.\n+        partition_data.resize(an_clusters.size());\n+        for (size_t i = 0; i < an_clusters.size(); ++i) {\n+            partition_data[i].cluster = an_clusters[i].first;\n+            partition_data[i].parent = &partition_data[i];\n+            partition_data[i].rank = 0;\n+        }\n+\n+        // Run through all parent/child pairs in m_deps_to_add, and union the\n+        // the partitions their Clusters are in.\n+        Cluster* last_chl_cluster{nullptr};\n+        PartitionData* last_partition{nullptr};\n+        for (const auto& [par, chl] : m_deps_to_add) {\n+            auto par_cluster = m_entries[par].m_locator.cluster;\n+            auto chl_cluster = m_entries[chl].m_locator.cluster;\n+            // Nothing to do if parent and child are in the same Cluster.\n+            if (par_cluster == chl_cluster) continue;\n+            // Nothing to do if either parent or child transaction is removed already.\n+            if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+            Assume(par != chl);\n+            if (chl_cluster == last_chl_cluster) {\n+                // If the child Clusters is the same as the previous iteration, union with the\n+                // tree they were in, avoiding the need for another lookup. Note that m_deps_to_add\n+                // is sorted by child Cluster, so batches with the same child are expected.\n+                last_partition = union_uf(locate_uf(par_cluster), last_partition);\n+            } else {\n+                last_chl_cluster = chl_cluster;\n+                last_partition = union_uf(locate_uf(par_cluster), locate_uf(chl_cluster));\n+            }\n+        }\n+\n+        // Populate the an_clusters and an_deps data structures with the list of input Clusters,\n+        // and the input dependencies, annotated with the representative of the Cluster partition\n+        // it applies to.\n+        an_deps.reserve(m_deps_to_add.size());\n+        auto deps_it = m_deps_to_add.begin();\n+        for (size_t i = 0; i < partition_data.size(); ++i) {\n+            auto& data = partition_data[i];\n+            // Find the representative of the partition Cluster i is in, and store it with the\n+            // Cluster.\n+            auto rep = find_uf(&data)->cluster;\n+            an_clusters[i].second = rep;\n+            // Find all dependencies whose child Cluster is Cluster i, and annotate them with rep.\n+            while (deps_it != m_deps_to_add.end()) {\n+                auto [par, chl] = *deps_it;\n+                auto chl_cluster = m_entries[chl].m_locator.cluster;\n+                // Skip dependencies that apply to earlier Clusters (those necessary are for\n+                // deleted transactions, as otherwise we'd have processed them already).\n+                if (!std::less{}(chl_cluster, data.cluster)) {\n+                    if (chl_cluster != data.cluster) break;\n+                    auto par_cluster = m_entries[par].m_locator.cluster;\n+                    // Also filter out dependencies applying to a removed parent.\n+                    if (par_cluster != nullptr) an_deps.emplace_back(*deps_it, rep);\n+                }\n+                ++deps_it;\n+            }\n+        }\n+    }\n+\n+    // Sort both an_clusters and an_deps by representative of the partition they are in, grouping\n+    // all those applying to the same partition together.\n+    std::sort(an_deps.begin(), an_deps.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+    std::sort(an_clusters.begin(), an_clusters.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+\n+    // Translate the resulting cluster groups to the m_group_data structure.\n+    m_group_data = std::vector<GroupData>{};\n+    m_group_clusters.clear();\n+    m_group_clusters.reserve(an_clusters.size());\n+    m_deps_to_add.clear();\n+    m_deps_to_add.reserve(an_deps.size());\n+    auto an_deps_it = an_deps.begin();\n+    auto an_clusters_it = an_clusters.begin();\n+    while (an_deps_it != an_deps.end()) {\n+        auto rep = an_deps_it->second;\n+        // Create and initialize a new GroupData entry for the partition.\n+        auto& new_entry = m_group_data->emplace_back();\n+        new_entry.m_cluster_offset = m_group_clusters.size();\n+        new_entry.m_cluster_count = 0;\n+        new_entry.m_deps_offset = m_deps_to_add.size();\n+        new_entry.m_deps_count = 0;\n+        // Add all its clusters to it (copying those from an_clusters to m_group_clusters).\n+        while (an_clusters_it != an_clusters.end() && an_clusters_it->second == rep) {\n+            m_group_clusters.push_back(an_clusters_it->first);\n+            ++an_clusters_it;\n+            ++new_entry.m_cluster_count;\n+        }\n+        // Add all its dependencies to it (copying those back from an_deps to m_deps_to_add).\n+        while (an_deps_it != an_deps.end() && an_deps_it->second == rep) {\n+            m_deps_to_add.push_back(an_deps_it->first);\n+            ++an_deps_it;\n+            ++new_entry.m_deps_count;\n+        }\n+    }\n+    Assume(an_deps_it == an_deps.end());\n+    Assume(an_clusters_it == an_clusters.end());\n+}\n+\n+void TxGraphImpl::Merge(std::span<Cluster*> to_merge) noexcept\n+{\n+    Assume(!to_merge.empty());\n+    // Nothing to do if a group consists of just a single Cluster.\n+    if (to_merge.size() == 1) return;\n+\n+    // Move the largest Cluster to the front of to_merge. As all transactions in other to-be-merged\n+    // Clusters will be moved to that one, putting the largest one first minimizes the number of\n+    // moves.\n+    size_t max_size_pos{0};\n+    ClusterIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        ClusterIndex size = to_merge[i]->GetTxCount();\n+        if (size > max_size) {\n+            max_size_pos = i;\n+            max_size = size;\n+        }\n+    }\n+    if (max_size_pos != 0) std::swap(to_merge[0], to_merge[max_size_pos]);\n+\n+    // Merge all further Clusters in the group into the first one, and delete them.\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        to_merge[0]->Merge(*this, *to_merge[i]);\n+        DeleteCluster(*to_merge[i]);\n+    }\n+}\n+\n+void TxGraphImpl::ApplyDependencies() noexcept\n+{\n+    // Compute the groups of to-be-merged Clusters (which also applies all removals, and splits).\n+    GroupClusters();\n+    Assume(m_group_data.has_value());\n+    // Nothing to do if there are no dependencies to be added.\n+    if (m_deps_to_add.empty()) return;\n+\n+    // For each group of to-be-merged Clusters.\n+    Assume(m_group_data.has_value());\n+    for (const auto& group_data : *m_group_data) {\n+        // Invoke Merge() to merge them into a single Cluster.\n+        auto cluster_span = std::span{m_group_clusters}\n+                                .subspan(group_data.m_cluster_offset, group_data.m_cluster_count);\n+        Merge(cluster_span);\n+        // Actually apply all to-be-added dependencies (for each, parent and child belong to the\n+        // same Cluster because of the merging above).\n+        auto deps_span = std::span{m_deps_to_add}\n+                             .subspan(group_data.m_deps_offset, group_data.m_deps_count);\n+        Assume(!deps_span.empty());\n+        const auto& loc = m_entries[deps_span[0].second].m_locator;\n+        Assume(loc.IsPresent());\n+        loc.cluster->ApplyDependencies(*this, deps_span);\n+    }\n+\n+    // Wipe the list of to-be-added dependencies now that they are applied.\n+    m_deps_to_add.clear();\n+    // Also no further Cluster mergings are needed (note that we clear, but don't set to\n+    // std::nullopt, as that would imply the groupings are unknown).\n+    m_group_data->clear();\n+    m_group_clusters.clear();\n+}\n+\n+void Cluster::Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept\n+{\n+    // We can only relinearize Clusters that do not need splitting.\n+    Assume(m_quality == QualityLevel::OPTIMAL || m_quality == QualityLevel::ACCEPTABLE ||\n+           m_quality == QualityLevel::NEEDS_RELINEARIZE);\n+    // No work is required for Clusters which are already optimally linearized.\n+    if (m_quality == QualityLevel::OPTIMAL) return;\n+    // Invoke the actual linearization algorithm (passing in the existing one).\n+    uint64_t rng_seed = graph.m_rng.rand64();\n+    auto [linearization, optimal] = Linearize(m_depgraph, max_iters, rng_seed, m_linearization);\n+    // Postlinearize if the result isn't optimal already. This guarantees (among other things)\n+    // that the chunks of the resulting linearization are all connected.\n+    if (!optimal) PostLinearize(m_depgraph, linearization);\n+    // Update the linearization.\n+    m_linearization = std::move(linearization);\n+    // Update the Cluster's quality.\n+    auto new_quality = optimal ? QualityLevel::OPTIMAL : QualityLevel::ACCEPTABLE;\n+    graph.SetClusterQuality(m_quality, m_setindex, new_quality);\n+    // Update the Entry objects.\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::MakeAcceptable(Cluster& cluster) noexcept\n+{\n+    // Relinearize the Cluster if needed.\n+    if (cluster.m_quality == QualityLevel::NEEDS_RELINEARIZE) {\n+        cluster.Relinearize(*this, 10000);\n+    }\n+}\n+\n+Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept\n+{\n+    // Create a new transaction in the DepGraph, and remember its position in m_mapping.\n+    auto cluster_idx = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_index);\n+    m_linearization.push_back(cluster_idx);\n+}\n+\n+TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n+{\n+    // Construct a new Ref.\n+    Ref ret;\n+    // Construct a new Entry, and link it with the Ref.\n+    auto idx = m_entries.size();\n+    m_entries.emplace_back();\n+    auto& entry = m_entries.back();\n+    entry.m_ref = &ret;\n+    GetRefGraph(ret) = this;\n+    GetRefIndex(ret) = idx;\n+    // Construct a new singleton Cluster (which is necessarily optimally linearized).\n+    auto cluster = std::make_unique<Cluster>(*this, feerate, idx);\n+    auto cluster_ptr = cluster.get();\n+    InsertCluster(std::move(cluster), QualityLevel::OPTIMAL);\n+    cluster_ptr->Updated(*this);\n+    ++m_txcount;\n+    // Return the Ref.\n+    return ret;\n+}\n+\n+void TxGraphImpl::RemoveTransaction(Ref& arg) noexcept\n+{\n+    // Don't do anything if the Ref is empty (which may be indicative of the transaction already\n+    // having been removed).\n+    if (GetRefGraph(arg) == nullptr) return;\n+    Assume(GetRefGraph(arg) == this);\n+    // Find the Cluster the transaction is in, and stop if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return;\n+    // Remember that the transaction is to be removed.\n+    m_to_remove.push_back(GetRefIndex(arg));\n+}\n+\n+void TxGraphImpl::AddDependency(Ref& parent, Ref& child) noexcept\n+{\n+    // Don't do anything if either Ref is empty (which may be indicative of it having already been\n+    // removed).\n+    if (GetRefGraph(parent) == nullptr || GetRefGraph(child) == nullptr) return;\n+    Assume(GetRefGraph(parent) == this && GetRefGraph(child) == this);\n+    // Find the Cluster the parent and child transaction are in, and stop if either appears to be\n+    // already removed.\n+    auto par_cluster = m_entries[GetRefIndex(parent)].m_locator.cluster;\n+    if (par_cluster == nullptr) return;\n+    auto chl_cluster = m_entries[GetRefIndex(child)].m_locator.cluster;\n+    if (chl_cluster == nullptr) return;\n+    // Wipe m_group_data (as it will need to be recomputed).\n+    m_group_data.reset();\n+    m_group_clusters.clear();\n+    // Remember that this dependency is to be applied.\n+    m_deps_to_add.emplace_back(GetRefIndex(parent), GetRefIndex(child));\n+}\n+\n+bool TxGraphImpl::Exists(const Ref& arg) noexcept\n+{\n+    if (GetRefGraph(arg) == nullptr) return false;\n+    Assume(GetRefGraph(arg) == this);\n+    // Make sure the transaction isn't scheduled for removal.\n+    ApplyRemovals();\n+    return m_entries[GetRefIndex(arg)].m_locator.IsPresent();\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all ancestors (in arbitrary order) to Refs (if they have any), and return them.\n+    for (auto idx : m_depgraph.Ancestors(idx)) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all descendants (in arbitrary order) to Refs (if they have any), and return them.\n+    for (auto idx : m_depgraph.Descendants(idx)) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetClusterRefs(const TxGraphImpl& graph) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all transactions in the Cluster (in linearization order) to Refs.\n+    for (auto idx : m_linearization) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+FeeFrac Cluster::GetIndividualFeerate(ClusterIndex idx) noexcept\n+{\n+    return m_depgraph.FeeRate(idx);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetAncestors(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetAncestorRefs(*this, m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetDescendants(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetDescendantRefs(*this, m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetCluster(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Make sure the Cluster has an acceptable quality level, and then dispatch to it.\n+    MakeAcceptable(*cluster);\n+    return cluster->GetClusterRefs(*this);\n+}\n+\n+TxGraph::GraphIndex TxGraphImpl::GetTransactionCount() noexcept\n+{\n+    ApplyRemovals();\n+    return m_txcount;\n+}\n+\n+FeeFrac TxGraphImpl::GetIndividualFeerate(const Ref& arg) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply removals, so that we can correctly report FeeFrac{} for non-existing transaction.\n+    ApplyRemovals();\n+    // Find the cluster the argument is in, and return the empty FeeFrac if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetIndividualFeerate(m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+FeeFrac TxGraphImpl::GetChunkFeerate(const Ref& arg) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be inaccurate otherwise.\n+    ApplyDependencies();\n+    // Find the cluster the argument is in, and return the empty FeeFrac if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Make sure the Cluster has an acceptable quality level, and then return the transaction's\n+    // chunk feerate.\n+    MakeAcceptable(*cluster);\n+    const auto& entry = m_entries[GetRefIndex(arg)];\n+    return entry.m_chunk_feerate;\n+}\n+\n+void Cluster::SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept\n+{\n+    // Make sure the specified ClusterIndex exists in this Cluster.\n+    Assume(m_depgraph.Positions()[idx]);\n+    // Bail out if the fee isn't actually being changed.\n+    if (m_depgraph.FeeRate(idx).fee == fee) return;\n+    // Update the fee, remember that relinearization will be necessary, and update the Entries\n+    // in the same Cluster.\n+    m_depgraph.FeeRate(idx).fee = fee;\n+    if (m_quality != QualityLevel::NEEDS_SPLIT) {\n+        graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+    }\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::SetTransactionFee(Ref& ref, int64_t fee) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(ref) == nullptr) return;\n+    Assume(GetRefGraph(ref) == this);\n+    // Find the entry, its locator, and inform its Cluster about the new feerate, if any.\n+    auto& entry = m_entries[GetRefIndex(ref)];\n+    auto& locator = entry.m_locator;\n+    if (locator.IsPresent()) {\n+        locator.cluster->SetFee(*this, locator.index, fee);\n+    }\n+}\n+\n+} // namespace\n+\n+TxGraph::Ref::~Ref()\n+{\n+    if (m_graph) {\n+        // Inform the TxGraph about the Ref being destroyed.\n+        m_graph->UnlinkRef(m_index);\n+        m_graph = nullptr;\n+    }\n+}\n+\n+TxGraph::Ref& TxGraph::Ref::operator=(Ref&& other) noexcept\n+{\n+    // Inform both TxGraphs about the Refs being swapped.",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 1172,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": 1909293407,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Why is this doing an effective swap? \r\n\r\nI think this is quite common, that move-construction is effectively performing a swap.\r\n\r\n> I would expect this to call `UnlinkRef` on the moved-from value and reset its `m_graph` and `m_index`\r\n\r\nThat's possible too, and slightly more efficient I guess.\r\n\r\n> Otherwise it wouldn't be unlinked until the moved-from variable goes out of scope, no?\r\n\r\nIndeed. I don't think that's a problem.\r\n\r\n",
      "created_at": "2025-01-09T20:38:36Z",
      "updated_at": "2025-01-09T20:38:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909403690",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909403690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909458303",
      "pull_request_review_id": 2540971508,
      "id": 1909458303,
      "node_id": "PRRC_kwDOABII585x0AV_",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {\n+            ClusterIndex idx = m_linearization[lin_idx++];\n+            GraphIndex graph_idx = m_mapping[idx];\n+            auto& entry = graph.m_entries[graph_idx];\n+            entry.m_chunk_feerate = chunk.feerate;\n+            chunk.transactions.Reset(idx);\n+            if (chunk.transactions.None()) break;\n+        }\n+    }\n+}\n+\n+void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // Iterate over the prefix of to_remove that applies to this cluster.\n+    SetType todo;\n+    do {\n+        GraphIndex idx = to_remove.front();\n+        auto& entry = graph.m_entries[idx];\n+        auto& locator = entry.m_locator;\n+        // Stop once we hit an entry that applies to another Cluster.\n+        if (locator.cluster != this) break;\n+        // - Remember it in a set of to-remove ClusterIndexes.\n+        todo.Set(locator.index);\n+        // - Remove from m_mapping.\n+        m_mapping[locator.index] = GraphIndex(-1);\n+        // - Mark it as removed in the Entry's locator.\n+        locator.SetMissing();\n+        if (entry.IsWiped()) graph.m_wiped.push_back(idx);\n+        to_remove = to_remove.subspan(1);\n+        --graph.m_txcount;\n+    } while(!to_remove.empty());\n+\n+    Assume(todo.Any());\n+    // Wipe from the Cluster's DepGraph (this is O(n) regardless of the number of entries\n+    // removed, so we benefit from batching all the removals).\n+    m_depgraph.RemoveTransactions(todo);\n+    m_mapping.resize(m_depgraph.PositionRange());\n+\n+    // Filter removals out of m_linearization.\n+    m_linearization.erase(std::remove_if(\n+        m_linearization.begin(),\n+        m_linearization.end(),\n+        [&](auto pos) { return todo[pos]; }), m_linearization.end());\n+\n+    graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    Updated(graph);\n+}\n+\n+bool Cluster::Split(TxGraphImpl& graph) noexcept\n+{\n+    // This function can only be called when the Cluster needs splitting.\n+    Assume(m_quality == QualityLevel::NEEDS_SPLIT);\n+    /** Which positions are still left in this Cluster. */\n+    auto todo = m_depgraph.Positions();\n+    /** Mapping from transaction positions in this Cluster to the Cluster where it ends up, and\n+     *  its position therein. */\n+    std::vector<std::pair<Cluster*, ClusterIndex>> remap(m_depgraph.PositionRange());\n+    std::vector<Cluster*> new_clusters;\n+    bool first{true};\n+    // Iterate over the connected components of this Cluster's m_depgraph.\n+    while (todo.Any()) {\n+        auto component = m_depgraph.FindConnectedComponent(todo);\n+        if (first && component == todo) {\n+            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+            graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+            // We need to recompute and cache its chunking.\n+            Updated(graph);\n+            return false;\n+        }\n+        first = false;\n+        // Construct a new Cluster to hold the found component.\n+        auto new_cluster = std::make_unique<Cluster>();\n+        new_clusters.push_back(new_cluster.get());\n+        // Remember that all the component's transaction go to this new Cluster. The positions\n+        // will be determined below, so use -1 for now.\n+        for (auto i : component) {\n+            remap[i] = {new_cluster.get(), ClusterIndex(-1)};\n+        }\n+        graph.InsertCluster(std::move(new_cluster), QualityLevel::NEEDS_RELINEARIZE);\n+        todo -= component;\n+    }\n+    // Redistribute the transactions.\n+    for (auto i : m_linearization) {\n+        /** The cluster which transaction originally in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy the transaction to the new cluster's depgraph, and remember the position.\n+        remap[i].second = new_cluster->m_depgraph.AddTransaction(m_depgraph.FeeRate(i));\n+        // Create new mapping entry.\n+        new_cluster->m_mapping.push_back(m_mapping[i]);\n+        // Create a new linearization entry. As we're only appending transactions, they equal the\n+        // ClusterIndex.\n+        new_cluster->m_linearization.push_back(remap[i].second);\n+    }\n+    // Redistribute the dependencies.\n+    for (auto i : m_linearization) {\n+        /** The cluster transaction in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy its parents, translating positions.\n+        SetType new_parents;\n+        for (auto par : m_depgraph.GetReducedParents(i)) new_parents.Set(remap[par].second);\n+        new_cluster->m_depgraph.AddDependencies(new_parents, remap[i].second);\n+    }\n+    // Update all the Locators of moved transactions.\n+    for (Cluster* new_cluster : new_clusters) {\n+        new_cluster->Updated(graph);\n+    }\n+    // Wipe this Cluster, and return that it needs to be deleted.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_mapping.clear();\n+    m_linearization.clear();\n+    return true;\n+}\n+\n+void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+{\n+    /** Vector to store the positions in this Cluster for each position in other. */\n+    std::vector<ClusterIndex> remap(other.m_depgraph.PositionRange());\n+    // Iterate over all transactions in the other Cluster (the one being absorbed).\n+    for (auto pos : other.m_linearization) {\n+        auto idx = other.m_mapping[pos];\n+        // Copy the transaction into this Cluster, and remember its position.\n+        auto new_pos = m_depgraph.AddTransaction(other.m_depgraph.FeeRate(pos));\n+        remap[pos] = new_pos;\n+        if (new_pos == m_mapping.size()) {\n+            m_mapping.push_back(idx);\n+        } else {\n+            m_mapping[new_pos] = idx;\n+        }\n+        m_linearization.push_back(new_pos);\n+        // Copy the transaction's dependencies, translating them using remap.\n+        SetType parents;\n+        for (auto par : other.m_depgraph.GetReducedParents(pos)) {\n+            parents.Set(remap[par]);\n+        }\n+        m_depgraph.AddDependencies(parents, remap[pos]);\n+        // Update the transaction's Locator. There is no need to call Updated() to update chunk\n+        // feerates, as Updated() will be invoked by Cluster::ApplyDependencies on the resulting\n+        // merged Cluster later anyway).\n+        graph.m_entries[idx].m_locator.SetPresent(this, new_pos);\n+    }\n+    // Purge the other Cluster, now that everything has been moved.\n+    other.m_depgraph = DepGraph<SetType>{};\n+    other.m_linearization.clear();\n+    other.m_mapping.clear();\n+}\n+\n+void Cluster::ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept\n+{\n+    // This function is invoked by TxGraphImpl::ApplyDependencies after merging groups of Clusters\n+    // between which dependencies are added, which simply concatenates their linearizations. Invoke\n+    // PostLinearize, which has the effect that the linearization becomes a merge-sort of the\n+    // constituent linearizations. Do this here rather than in Cluster::Merge, because this\n+    // function is only invoked once per merged Cluster, rather than once per constituent one.\n+    // This concatenation + post-linearization could be replaced with an explicit merge-sort.\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Sort the list of dependencies to apply by child, so those can be applied in batch.\n+    std::sort(to_apply.begin(), to_apply.end(), [](auto& a, auto& b) { return a.second < b.second; });\n+    // Iterate over groups of to-be-added dependencies with the same child.\n+    auto it = to_apply.begin();\n+    while (it != to_apply.end()) {\n+        auto& first_child = graph.m_entries[it->second].m_locator;\n+        ClusterIndex child_idx = first_child.index;\n+        // Iterate over all to-be-added dependencies within that same child, gather the relevant\n+        // parents.\n+        SetType parents;\n+        while (it != to_apply.end()) {\n+            auto& child = graph.m_entries[it->second].m_locator;\n+            auto& parent = graph.m_entries[it->first].m_locator;\n+            Assume(child.cluster == this && parent.cluster == this);\n+            if (child.index != child_idx) break;\n+            parents.Set(parent.index);\n+            ++it;\n+        }\n+        // Push all dependencies to the underlying DepGraph. Note that this is O(N) in the size of\n+        // the cluster, regardless of the number of parents being added, so batching them together\n+        // has a performance benefit.\n+        m_depgraph.AddDependencies(parents, child_idx);\n+    }\n+\n+    // Finally fix the linearization, as the new dependencies may have invalidated the\n+    // linearization, and post-linearize it to fix up the worst problems with it.\n+    FixLinearization(m_depgraph, m_linearization);\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Finally push the changes to graph.m_entries.\n+    Updated(graph);\n+}\n+\n+std::unique_ptr<Cluster> TxGraphImpl::ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept\n+{\n+    Assume(quality != QualityLevel::NONE);\n+\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    Assume(setindex < quality_clusters.size());\n+\n+    // Extract the Cluster-owning unique_ptr.\n+    std::unique_ptr<Cluster> ret = std::move(quality_clusters[setindex]);\n+    ret->m_quality = QualityLevel::NONE;\n+    ret->m_setindex = ClusterSetIndex(-1);\n+\n+    // Clean up space in quality_cluster.\n+    auto max_setindex = quality_clusters.size() - 1;\n+    if (setindex != max_setindex) {\n+        // If the cluster was not the last element of quality_clusters, move that to take its place.\n+        quality_clusters.back()->m_quality = quality;\n+        quality_clusters.back()->m_setindex = setindex;\n+        quality_clusters[setindex] = std::move(quality_clusters.back());\n+    }\n+    // The last element of quality_clusters is now unused; drop it.\n+    quality_clusters.pop_back();\n+\n+    return ret;\n+}\n+\n+ClusterSetIndex TxGraphImpl::InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept\n+{\n+    // Cannot insert with quality level NONE (as that would mean not inserted).\n+    Assume(quality != QualityLevel::NONE);\n+    // The passed-in Cluster must not currently be in the TxGraphImpl.\n+    Assume(cluster->m_quality == QualityLevel::NONE);\n+\n+    // Append it at the end of the relevant TxGraphImpl::m_cluster.\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    ClusterSetIndex ret = quality_clusters.size();\n+    cluster->m_quality = quality;\n+    cluster->m_setindex = ret;\n+    quality_clusters.push_back(std::move(cluster));\n+    return ret;\n+}\n+\n+void TxGraphImpl::SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept\n+{\n+    Assume(new_quality != QualityLevel::NONE);\n+\n+    // Don't do anything if the quality did not change.\n+    if (old_quality == new_quality) return;\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(old_quality, old_index);\n+    // And re-insert it where it belongs.\n+    InsertCluster(std::move(cluster_ptr), new_quality);\n+}\n+\n+void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+{\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(cluster.m_quality, cluster.m_setindex);\n+    // And throw it away.\n+    cluster_ptr.reset();\n+}\n+\n+void TxGraphImpl::ApplyRemovals() noexcept\n+{\n+    auto& to_remove = m_to_remove;\n+    // Skip if there is nothing to remove.\n+    if (to_remove.empty()) return;\n+    // Wipe cached m_group_data, as it may be invalidated by removals.\n+    m_group_data = std::nullopt;\n+    m_group_clusters.clear();\n+    // Group the set of to-be-removed entries by Cluster*.\n+    std::sort(m_to_remove.begin(), m_to_remove.end(), [&](GraphIndex a, GraphIndex b) noexcept {\n+        return std::less{}(m_entries[a].m_locator.cluster, m_entries[b].m_locator.cluster);\n+    });\n+    // Process per Cluster.\n+    std::span to_remove_span{m_to_remove};\n+    while (!to_remove_span.empty()) {\n+        Cluster* cluster = m_entries[to_remove_span.front()].m_locator.cluster;\n+        if (cluster != nullptr) {\n+            // If the first to_remove_span entry's Cluster exists, hand to_remove_span to it, so it\n+            // can pop off whatever applies to it.\n+            cluster->ApplyRemovals(*this, to_remove_span);\n+        } else {\n+            // Otherwise, skip this already-removed entry.\n+            to_remove_span = to_remove_span.subspan(1);\n+        }\n+    }\n+    m_to_remove.clear();\n+}\n+\n+void TxGraphImpl::SwapIndexes(GraphIndex a, GraphIndex b) noexcept\n+{\n+    Assume(a < m_entries.size());\n+    Assume(b < m_entries.size());\n+    // Swap the Entry objects.\n+    std::swap(m_entries[a], m_entries[b]);\n+    // Iterate over both objects.\n+    for (int i = 0; i < 2; ++i) {\n+        GraphIndex idx = i ? b : a;\n+        Entry& entry = m_entries[idx];\n+        // Update linked Ref.\n+        if (entry.m_ref) GetRefIndex(*entry.m_ref) = idx;\n+        // Update the locator. The rest of the Entry information will not change, so no need to\n+        // invoke Cluster::Updated().\n+        Locator& locator = entry.m_locator;\n+        if (locator.IsPresent()) {\n+            locator.cluster->UpdateMapping(locator.index, idx);\n+        }\n+    }\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::Cleanup() noexcept\n+{\n+    ApplyDependencies();\n+    std::vector<Ref*> ret;\n+    // Sort the GraphIndex that need to be cleaned up. This groups them (so duplicates can be\n+    // processed just once). They are sorted in reverse, so the last ones get processed first.\n+    // This means earlier-processed GraphIndexes will not move of later-processed ones (which\n+    // might invalidate them).\n+    std::sort(m_wiped.begin(), m_wiped.end(), std::greater{});\n+    GraphIndex last(-1);\n+    for (GraphIndex idx : m_wiped) {\n+        // m_wiped should never contain the same GraphIndex twice (the code below would fail\n+        // if so, because GraphIndexes get invalidated by removing them).\n+        Assume(idx != last);\n+        last = idx;\n+        Entry& entry = m_entries[idx];\n+        // Gather Ref pointers that are being unlinked.\n+        if (entry.m_ref != nullptr) {\n+            ret.push_back(entry.m_ref);\n+            GetRefGraph(*entry.m_ref) = nullptr;\n+            m_entries[idx].m_ref = nullptr;\n+        }\n+        // Verify removed entries don't have anything that could hold a reference back.\n+        Assume(!entry.m_locator.IsPresent());\n+        if (idx != m_entries.size() - 1) SwapIndexes(idx, m_entries.size() - 1);\n+        m_entries.pop_back();\n+    }\n+    m_wiped.clear();\n+    return ret;\n+}\n+\n+void TxGraphImpl::Split(Cluster& cluster) noexcept\n+{\n+    // To split a Cluster, first make sure all removals are applied (as we might need to split\n+    // again afterwards otherwise).\n+    ApplyRemovals();\n+    bool del = cluster.Split(*this);\n+    if (del) {\n+        // Cluster::Split reports whether the Cluster is to be deleted.\n+        DeleteCluster(cluster);\n+    }\n+}\n+\n+void TxGraphImpl::SplitAll() noexcept\n+{\n+    // Before splitting all Cluster, first make sure all removals are applied.\n+    ApplyRemovals();\n+    auto& queue = m_clusters[int(QualityLevel::NEEDS_SPLIT)];\n+    while (!queue.empty()) {\n+        Split(*queue.back().get());\n+    }\n+}\n+\n+void TxGraphImpl::GroupClusters() noexcept\n+{\n+    // Before computing which Clusters need to be merged together, first apply all removals and\n+    // split the Clusters into connected components. If we would group first, we might end up\n+    // with inefficient Clusters which just end up being split again anyway.\n+    SplitAll();\n+\n+    // If the groupings have been computed already, nothing is left to be done.\n+    if (m_group_data.has_value()) return;\n+\n+    /** Annotated clusters: an entry for each Cluster, together with the representative for the\n+     *  partition it is in if known, or with nullptr if not yet known. */\n+    std::vector<std::pair<Cluster*, Cluster*>> an_clusters;\n+    /** Annotated dependencies: an entry for each m_deps_to_apply entry (excluding ones that apply\n+     *  to removed transactions), together with the representative root of the partition of\n+     *  Clusters it applies to. */\n+    std::vector<std::pair<std::pair<GraphIndex, GraphIndex>, Cluster*>> an_deps;\n+\n+    // Construct a an_clusters entry for every parent and child in the to-be-applied dependencies.\n+    for (const auto& [par, chl] : m_deps_to_add) {\n+        auto par_cluster = m_entries[par].m_locator.cluster;\n+        auto chl_cluster = m_entries[chl].m_locator.cluster;\n+        // Skip dependencies for which the parent or child transaction is removed.\n+        if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+        an_clusters.emplace_back(par_cluster, nullptr);\n+        // Do not include a duplicate when parent and child are identical, as it'll be removed\n+        // below anyway.\n+        if (chl_cluster != par_cluster) an_clusters.emplace_back(chl_cluster, nullptr);\n+    }\n+    // Sort and deduplicate an_clusters, so we end up with a sorted list of all involved Clusters\n+    // to which dependencies apply.\n+    std::sort(an_clusters.begin(), an_clusters.end());\n+    an_clusters.erase(std::unique(an_clusters.begin(), an_clusters.end()), an_clusters.end());\n+\n+    // Sort the dependencies by child Cluster.\n+    std::sort(m_deps_to_add.begin(), m_deps_to_add.end(), [&](auto& a, auto& b) noexcept {\n+        auto [_a_par, a_chl] = a;\n+        auto [_b_par, b_chl] = b;\n+        auto a_chl_cluster = m_entries[a_chl].m_locator.cluster;\n+        auto b_chl_cluster = m_entries[b_chl].m_locator.cluster;\n+        return std::less{}(a_chl_cluster, b_chl_cluster);\n+    });\n+\n+    // Run the union-find algorithm to to find partitions of the input Clusters which need to be\n+    // grouped together. See https://en.wikipedia.org/wiki/Disjoint-set_data_structure.\n+    {\n+        /** Each PartitionData entry contains information about a single input Cluster. */\n+        struct PartitionData\n+        {\n+            /** The cluster this holds information for. */\n+            Cluster* cluster;\n+            /** All PartitionData entries belonging to the same partition are organized in a tree.\n+             *  Each element points to its parent, or to itself if it is the root. The root is then\n+             *  a representative for the entire tree, and can be found by walking upwards from any\n+             *  element. */\n+            PartitionData* parent;\n+            /** (only if this is a root, so when parent == this) An upper bound on the height of\n+             *  tree for this partition. */\n+            unsigned rank;\n+        };\n+        /** Information about each input Cluster. Sorted by Cluster* pointer. */\n+        std::vector<PartitionData> partition_data;\n+\n+        /** Given a Cluster, find its corresponding PartitionData. */\n+        auto locate_uf = [&](Cluster* arg) noexcept -> PartitionData* {\n+            auto it = std::lower_bound(partition_data.begin(), partition_data.end(), arg,\n+                                       [](auto& a, Cluster* ptr) noexcept { return a.cluster < ptr; });\n+            Assume(it != partition_data.end());\n+            Assume(it->cluster == arg);\n+            return &*it;\n+        };\n+\n+        /** Given a PartitionData, find the root of the tree it is in (its representative). */\n+        static constexpr auto find_uf = [](PartitionData* data) noexcept -> PartitionData* {\n+            while (data->parent != data) {\n+                // Replace pointers to parents with pointers to grandparents.\n+                // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Finding_set_representatives.\n+                auto par = data->parent;\n+                data->parent = par->parent;\n+                data = par;\n+            }\n+            return data;\n+        };\n+\n+        /** Given two PartitionDatas, union the partitions they are in, and return their\n+         *  representative. */\n+        static constexpr auto union_uf = [](PartitionData* arg1, PartitionData* arg2) noexcept {\n+            // Find the roots of the trees, and bail out if they are already equal (which would\n+            // mean they are in the same partition already).\n+            auto rep1 = find_uf(arg1);\n+            auto rep2 = find_uf(arg2);\n+            if (rep1 == rep2) return rep1;\n+            // Pick the lower-rank root to become a child of the higher-rank one.\n+            // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Union_by_rank.\n+            if (rep1->rank < rep2->rank) std::swap(rep1, rep2);\n+            rep2->parent = rep1;\n+            rep1->rank += (rep1->rank == rep2->rank);\n+            return rep1;\n+        };\n+\n+        // Start by initializing every Cluster as its own singleton partition.\n+        partition_data.resize(an_clusters.size());\n+        for (size_t i = 0; i < an_clusters.size(); ++i) {\n+            partition_data[i].cluster = an_clusters[i].first;\n+            partition_data[i].parent = &partition_data[i];\n+            partition_data[i].rank = 0;\n+        }\n+\n+        // Run through all parent/child pairs in m_deps_to_add, and union the\n+        // the partitions their Clusters are in.\n+        Cluster* last_chl_cluster{nullptr};\n+        PartitionData* last_partition{nullptr};\n+        for (const auto& [par, chl] : m_deps_to_add) {\n+            auto par_cluster = m_entries[par].m_locator.cluster;\n+            auto chl_cluster = m_entries[chl].m_locator.cluster;\n+            // Nothing to do if parent and child are in the same Cluster.\n+            if (par_cluster == chl_cluster) continue;\n+            // Nothing to do if either parent or child transaction is removed already.\n+            if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+            Assume(par != chl);\n+            if (chl_cluster == last_chl_cluster) {\n+                // If the child Clusters is the same as the previous iteration, union with the\n+                // tree they were in, avoiding the need for another lookup. Note that m_deps_to_add\n+                // is sorted by child Cluster, so batches with the same child are expected.\n+                last_partition = union_uf(locate_uf(par_cluster), last_partition);\n+            } else {\n+                last_chl_cluster = chl_cluster;\n+                last_partition = union_uf(locate_uf(par_cluster), locate_uf(chl_cluster));\n+            }\n+        }\n+\n+        // Populate the an_clusters and an_deps data structures with the list of input Clusters,\n+        // and the input dependencies, annotated with the representative of the Cluster partition\n+        // it applies to.\n+        an_deps.reserve(m_deps_to_add.size());\n+        auto deps_it = m_deps_to_add.begin();\n+        for (size_t i = 0; i < partition_data.size(); ++i) {\n+            auto& data = partition_data[i];\n+            // Find the representative of the partition Cluster i is in, and store it with the\n+            // Cluster.\n+            auto rep = find_uf(&data)->cluster;\n+            an_clusters[i].second = rep;\n+            // Find all dependencies whose child Cluster is Cluster i, and annotate them with rep.\n+            while (deps_it != m_deps_to_add.end()) {\n+                auto [par, chl] = *deps_it;\n+                auto chl_cluster = m_entries[chl].m_locator.cluster;\n+                // Skip dependencies that apply to earlier Clusters (those necessary are for\n+                // deleted transactions, as otherwise we'd have processed them already).\n+                if (!std::less{}(chl_cluster, data.cluster)) {\n+                    if (chl_cluster != data.cluster) break;\n+                    auto par_cluster = m_entries[par].m_locator.cluster;\n+                    // Also filter out dependencies applying to a removed parent.\n+                    if (par_cluster != nullptr) an_deps.emplace_back(*deps_it, rep);\n+                }\n+                ++deps_it;\n+            }\n+        }\n+    }\n+\n+    // Sort both an_clusters and an_deps by representative of the partition they are in, grouping\n+    // all those applying to the same partition together.\n+    std::sort(an_deps.begin(), an_deps.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+    std::sort(an_clusters.begin(), an_clusters.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+\n+    // Translate the resulting cluster groups to the m_group_data structure.\n+    m_group_data = std::vector<GroupData>{};\n+    m_group_clusters.clear();\n+    m_group_clusters.reserve(an_clusters.size());\n+    m_deps_to_add.clear();\n+    m_deps_to_add.reserve(an_deps.size());\n+    auto an_deps_it = an_deps.begin();\n+    auto an_clusters_it = an_clusters.begin();\n+    while (an_deps_it != an_deps.end()) {\n+        auto rep = an_deps_it->second;\n+        // Create and initialize a new GroupData entry for the partition.\n+        auto& new_entry = m_group_data->emplace_back();\n+        new_entry.m_cluster_offset = m_group_clusters.size();\n+        new_entry.m_cluster_count = 0;\n+        new_entry.m_deps_offset = m_deps_to_add.size();\n+        new_entry.m_deps_count = 0;\n+        // Add all its clusters to it (copying those from an_clusters to m_group_clusters).\n+        while (an_clusters_it != an_clusters.end() && an_clusters_it->second == rep) {\n+            m_group_clusters.push_back(an_clusters_it->first);\n+            ++an_clusters_it;\n+            ++new_entry.m_cluster_count;\n+        }\n+        // Add all its dependencies to it (copying those back from an_deps to m_deps_to_add).\n+        while (an_deps_it != an_deps.end() && an_deps_it->second == rep) {\n+            m_deps_to_add.push_back(an_deps_it->first);\n+            ++an_deps_it;\n+            ++new_entry.m_deps_count;\n+        }\n+    }\n+    Assume(an_deps_it == an_deps.end());\n+    Assume(an_clusters_it == an_clusters.end());\n+}\n+\n+void TxGraphImpl::Merge(std::span<Cluster*> to_merge) noexcept\n+{\n+    Assume(!to_merge.empty());\n+    // Nothing to do if a group consists of just a single Cluster.\n+    if (to_merge.size() == 1) return;\n+\n+    // Move the largest Cluster to the front of to_merge. As all transactions in other to-be-merged\n+    // Clusters will be moved to that one, putting the largest one first minimizes the number of\n+    // moves.\n+    size_t max_size_pos{0};\n+    ClusterIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        ClusterIndex size = to_merge[i]->GetTxCount();\n+        if (size > max_size) {\n+            max_size_pos = i;\n+            max_size = size;\n+        }\n+    }\n+    if (max_size_pos != 0) std::swap(to_merge[0], to_merge[max_size_pos]);\n+\n+    // Merge all further Clusters in the group into the first one, and delete them.\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        to_merge[0]->Merge(*this, *to_merge[i]);\n+        DeleteCluster(*to_merge[i]);\n+    }\n+}\n+\n+void TxGraphImpl::ApplyDependencies() noexcept\n+{\n+    // Compute the groups of to-be-merged Clusters (which also applies all removals, and splits).\n+    GroupClusters();\n+    Assume(m_group_data.has_value());\n+    // Nothing to do if there are no dependencies to be added.\n+    if (m_deps_to_add.empty()) return;\n+\n+    // For each group of to-be-merged Clusters.\n+    Assume(m_group_data.has_value());\n+    for (const auto& group_data : *m_group_data) {\n+        // Invoke Merge() to merge them into a single Cluster.\n+        auto cluster_span = std::span{m_group_clusters}\n+                                .subspan(group_data.m_cluster_offset, group_data.m_cluster_count);\n+        Merge(cluster_span);\n+        // Actually apply all to-be-added dependencies (for each, parent and child belong to the\n+        // same Cluster because of the merging above).\n+        auto deps_span = std::span{m_deps_to_add}\n+                             .subspan(group_data.m_deps_offset, group_data.m_deps_count);\n+        Assume(!deps_span.empty());\n+        const auto& loc = m_entries[deps_span[0].second].m_locator;\n+        Assume(loc.IsPresent());\n+        loc.cluster->ApplyDependencies(*this, deps_span);\n+    }\n+\n+    // Wipe the list of to-be-added dependencies now that they are applied.\n+    m_deps_to_add.clear();\n+    // Also no further Cluster mergings are needed (note that we clear, but don't set to\n+    // std::nullopt, as that would imply the groupings are unknown).\n+    m_group_data->clear();\n+    m_group_clusters.clear();\n+}\n+\n+void Cluster::Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept\n+{\n+    // We can only relinearize Clusters that do not need splitting.\n+    Assume(m_quality == QualityLevel::OPTIMAL || m_quality == QualityLevel::ACCEPTABLE ||\n+           m_quality == QualityLevel::NEEDS_RELINEARIZE);\n+    // No work is required for Clusters which are already optimally linearized.\n+    if (m_quality == QualityLevel::OPTIMAL) return;\n+    // Invoke the actual linearization algorithm (passing in the existing one).\n+    uint64_t rng_seed = graph.m_rng.rand64();\n+    auto [linearization, optimal] = Linearize(m_depgraph, max_iters, rng_seed, m_linearization);\n+    // Postlinearize if the result isn't optimal already. This guarantees (among other things)\n+    // that the chunks of the resulting linearization are all connected.\n+    if (!optimal) PostLinearize(m_depgraph, linearization);\n+    // Update the linearization.\n+    m_linearization = std::move(linearization);\n+    // Update the Cluster's quality.\n+    auto new_quality = optimal ? QualityLevel::OPTIMAL : QualityLevel::ACCEPTABLE;\n+    graph.SetClusterQuality(m_quality, m_setindex, new_quality);\n+    // Update the Entry objects.\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::MakeAcceptable(Cluster& cluster) noexcept\n+{\n+    // Relinearize the Cluster if needed.\n+    if (cluster.m_quality == QualityLevel::NEEDS_RELINEARIZE) {\n+        cluster.Relinearize(*this, 10000);\n+    }\n+}\n+\n+Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept\n+{\n+    // Create a new transaction in the DepGraph, and remember its position in m_mapping.\n+    auto cluster_idx = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_index);\n+    m_linearization.push_back(cluster_idx);\n+}\n+\n+TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n+{\n+    // Construct a new Ref.\n+    Ref ret;\n+    // Construct a new Entry, and link it with the Ref.\n+    auto idx = m_entries.size();\n+    m_entries.emplace_back();\n+    auto& entry = m_entries.back();\n+    entry.m_ref = &ret;\n+    GetRefGraph(ret) = this;\n+    GetRefIndex(ret) = idx;\n+    // Construct a new singleton Cluster (which is necessarily optimally linearized).\n+    auto cluster = std::make_unique<Cluster>(*this, feerate, idx);\n+    auto cluster_ptr = cluster.get();\n+    InsertCluster(std::move(cluster), QualityLevel::OPTIMAL);\n+    cluster_ptr->Updated(*this);\n+    ++m_txcount;\n+    // Return the Ref.\n+    return ret;\n+}\n+\n+void TxGraphImpl::RemoveTransaction(Ref& arg) noexcept\n+{\n+    // Don't do anything if the Ref is empty (which may be indicative of the transaction already\n+    // having been removed).\n+    if (GetRefGraph(arg) == nullptr) return;\n+    Assume(GetRefGraph(arg) == this);\n+    // Find the Cluster the transaction is in, and stop if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return;\n+    // Remember that the transaction is to be removed.\n+    m_to_remove.push_back(GetRefIndex(arg));\n+}\n+\n+void TxGraphImpl::AddDependency(Ref& parent, Ref& child) noexcept\n+{\n+    // Don't do anything if either Ref is empty (which may be indicative of it having already been\n+    // removed).\n+    if (GetRefGraph(parent) == nullptr || GetRefGraph(child) == nullptr) return;\n+    Assume(GetRefGraph(parent) == this && GetRefGraph(child) == this);\n+    // Find the Cluster the parent and child transaction are in, and stop if either appears to be\n+    // already removed.\n+    auto par_cluster = m_entries[GetRefIndex(parent)].m_locator.cluster;\n+    if (par_cluster == nullptr) return;\n+    auto chl_cluster = m_entries[GetRefIndex(child)].m_locator.cluster;\n+    if (chl_cluster == nullptr) return;\n+    // Wipe m_group_data (as it will need to be recomputed).\n+    m_group_data.reset();\n+    m_group_clusters.clear();\n+    // Remember that this dependency is to be applied.\n+    m_deps_to_add.emplace_back(GetRefIndex(parent), GetRefIndex(child));\n+}\n+\n+bool TxGraphImpl::Exists(const Ref& arg) noexcept\n+{\n+    if (GetRefGraph(arg) == nullptr) return false;\n+    Assume(GetRefGraph(arg) == this);\n+    // Make sure the transaction isn't scheduled for removal.\n+    ApplyRemovals();\n+    return m_entries[GetRefIndex(arg)].m_locator.IsPresent();\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all ancestors (in arbitrary order) to Refs (if they have any), and return them.\n+    for (auto idx : m_depgraph.Ancestors(idx)) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all descendants (in arbitrary order) to Refs (if they have any), and return them.\n+    for (auto idx : m_depgraph.Descendants(idx)) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetClusterRefs(const TxGraphImpl& graph) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all transactions in the Cluster (in linearization order) to Refs.\n+    for (auto idx : m_linearization) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+FeeFrac Cluster::GetIndividualFeerate(ClusterIndex idx) noexcept\n+{\n+    return m_depgraph.FeeRate(idx);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetAncestors(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetAncestorRefs(*this, m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetDescendants(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetDescendantRefs(*this, m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetCluster(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Make sure the Cluster has an acceptable quality level, and then dispatch to it.\n+    MakeAcceptable(*cluster);\n+    return cluster->GetClusterRefs(*this);\n+}\n+\n+TxGraph::GraphIndex TxGraphImpl::GetTransactionCount() noexcept\n+{\n+    ApplyRemovals();\n+    return m_txcount;\n+}\n+\n+FeeFrac TxGraphImpl::GetIndividualFeerate(const Ref& arg) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply removals, so that we can correctly report FeeFrac{} for non-existing transaction.\n+    ApplyRemovals();\n+    // Find the cluster the argument is in, and return the empty FeeFrac if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetIndividualFeerate(m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+FeeFrac TxGraphImpl::GetChunkFeerate(const Ref& arg) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be inaccurate otherwise.\n+    ApplyDependencies();\n+    // Find the cluster the argument is in, and return the empty FeeFrac if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Make sure the Cluster has an acceptable quality level, and then return the transaction's\n+    // chunk feerate.\n+    MakeAcceptable(*cluster);\n+    const auto& entry = m_entries[GetRefIndex(arg)];\n+    return entry.m_chunk_feerate;\n+}\n+\n+void Cluster::SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept\n+{\n+    // Make sure the specified ClusterIndex exists in this Cluster.\n+    Assume(m_depgraph.Positions()[idx]);\n+    // Bail out if the fee isn't actually being changed.\n+    if (m_depgraph.FeeRate(idx).fee == fee) return;\n+    // Update the fee, remember that relinearization will be necessary, and update the Entries\n+    // in the same Cluster.\n+    m_depgraph.FeeRate(idx).fee = fee;\n+    if (m_quality != QualityLevel::NEEDS_SPLIT) {\n+        graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+    }\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::SetTransactionFee(Ref& ref, int64_t fee) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(ref) == nullptr) return;\n+    Assume(GetRefGraph(ref) == this);\n+    // Find the entry, its locator, and inform its Cluster about the new feerate, if any.\n+    auto& entry = m_entries[GetRefIndex(ref)];\n+    auto& locator = entry.m_locator;\n+    if (locator.IsPresent()) {\n+        locator.cluster->SetFee(*this, locator.index, fee);\n+    }\n+}\n+\n+} // namespace\n+\n+TxGraph::Ref::~Ref()\n+{\n+    if (m_graph) {\n+        // Inform the TxGraph about the Ref being destroyed.\n+        m_graph->UnlinkRef(m_index);\n+        m_graph = nullptr;\n+    }\n+}\n+\n+TxGraph::Ref& TxGraph::Ref::operator=(Ref&& other) noexcept\n+{\n+    // Inform both TxGraphs about the Refs being swapped.",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 1172,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": 1909293407,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Anyway, done!",
      "created_at": "2025-01-09T21:34:51Z",
      "updated_at": "2025-01-09T21:34:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909458303",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909458303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909458391",
      "pull_request_review_id": 2540971629,
      "id": 1909458391,
      "node_id": "PRRC_kwDOABII585x0AXX",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": 1909295799,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-01-09T21:34:56Z",
      "updated_at": "2025-01-09T21:34:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909458391",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909458391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909462275",
      "pull_request_review_id": 2540977582,
      "id": 1909462275,
      "node_id": "PRRC_kwDOABII585x0BUD",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 297,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": 1909307659,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It terminates because:\r\n* Every chunk contains at least one element (added an Assume for that)\r\n* In the inner loop, one element from that chunk is Reset() (added an Assume that it indeed resets a bit that was previously set).\r\n\r\nI've changed it to a `do {} while(chunk.transactions.Any());` loop in the first commits, though it reverts back to a `while (true) { ... }` loop later, when the loop becomes a bit more complex.",
      "created_at": "2025-01-09T21:39:12Z",
      "updated_at": "2025-01-09T21:39:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909462275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909462275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909463152",
      "pull_request_review_id": 2540978925,
      "id": 1909463152,
      "node_id": "PRRC_kwDOABII585x0Bhw",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {\n+            ClusterIndex idx = m_linearization[lin_idx++];\n+            GraphIndex graph_idx = m_mapping[idx];\n+            auto& entry = graph.m_entries[graph_idx];\n+            entry.m_chunk_feerate = chunk.feerate;\n+            chunk.transactions.Reset(idx);\n+            if (chunk.transactions.None()) break;\n+        }\n+    }\n+}\n+\n+void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // Iterate over the prefix of to_remove that applies to this cluster.\n+    SetType todo;",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 311,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": 1909321579,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. I've also added a comment to the `Cluster::ApplyRemovals()` function definition stating that at least one element from the front of `to_remove` must belong to `this` Cluster (which is really why that requirement exists).",
      "created_at": "2025-01-09T21:40:05Z",
      "updated_at": "2025-01-09T21:40:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909463152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909463152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909463444",
      "pull_request_review_id": 2540979340,
      "id": 1909463444,
      "node_id": "PRRC_kwDOABII585x0BmU",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {\n+            ClusterIndex idx = m_linearization[lin_idx++];\n+            GraphIndex graph_idx = m_mapping[idx];\n+            auto& entry = graph.m_entries[graph_idx];\n+            entry.m_chunk_feerate = chunk.feerate;\n+            chunk.transactions.Reset(idx);\n+            if (chunk.transactions.None()) break;\n+        }\n+    }\n+}\n+\n+void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // Iterate over the prefix of to_remove that applies to this cluster.\n+    SetType todo;\n+    do {\n+        GraphIndex idx = to_remove.front();\n+        auto& entry = graph.m_entries[idx];\n+        auto& locator = entry.m_locator;\n+        // Stop once we hit an entry that applies to another Cluster.\n+        if (locator.cluster != this) break;\n+        // - Remember it in a set of to-remove ClusterIndexes.\n+        todo.Set(locator.index);\n+        // - Remove from m_mapping.\n+        m_mapping[locator.index] = GraphIndex(-1);\n+        // - Mark it as removed in the Entry's locator.\n+        locator.SetMissing();\n+        if (entry.IsWiped()) graph.m_wiped.push_back(idx);\n+        to_remove = to_remove.subspan(1);\n+        --graph.m_txcount;\n+    } while(!to_remove.empty());\n+\n+    Assume(todo.Any());\n+    // Wipe from the Cluster's DepGraph (this is O(n) regardless of the number of entries\n+    // removed, so we benefit from batching all the removals).\n+    m_depgraph.RemoveTransactions(todo);\n+    m_mapping.resize(m_depgraph.PositionRange());\n+\n+    // Filter removals out of m_linearization.\n+    m_linearization.erase(std::remove_if(\n+        m_linearization.begin(),\n+        m_linearization.end(),\n+        [&](auto pos) { return todo[pos]; }), m_linearization.end());\n+\n+    graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    Updated(graph);\n+}\n+\n+bool Cluster::Split(TxGraphImpl& graph) noexcept\n+{\n+    // This function can only be called when the Cluster needs splitting.\n+    Assume(m_quality == QualityLevel::NEEDS_SPLIT);\n+    /** Which positions are still left in this Cluster. */\n+    auto todo = m_depgraph.Positions();\n+    /** Mapping from transaction positions in this Cluster to the Cluster where it ends up, and\n+     *  its position therein. */\n+    std::vector<std::pair<Cluster*, ClusterIndex>> remap(m_depgraph.PositionRange());\n+    std::vector<Cluster*> new_clusters;\n+    bool first{true};\n+    // Iterate over the connected components of this Cluster's m_depgraph.\n+    while (todo.Any()) {\n+        auto component = m_depgraph.FindConnectedComponent(todo);\n+        if (first && component == todo) {\n+            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+            graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+            // We need to recompute and cache its chunking.\n+            Updated(graph);\n+            return false;\n+        }\n+        first = false;\n+        // Construct a new Cluster to hold the found component.\n+        auto new_cluster = std::make_unique<Cluster>();\n+        new_clusters.push_back(new_cluster.get());\n+        // Remember that all the component's transaction go to this new Cluster. The positions\n+        // will be determined below, so use -1 for now.\n+        for (auto i : component) {\n+            remap[i] = {new_cluster.get(), ClusterIndex(-1)};\n+        }\n+        graph.InsertCluster(std::move(new_cluster), QualityLevel::NEEDS_RELINEARIZE);\n+        todo -= component;\n+    }\n+    // Redistribute the transactions.\n+    for (auto i : m_linearization) {\n+        /** The cluster which transaction originally in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy the transaction to the new cluster's depgraph, and remember the position.\n+        remap[i].second = new_cluster->m_depgraph.AddTransaction(m_depgraph.FeeRate(i));\n+        // Create new mapping entry.\n+        new_cluster->m_mapping.push_back(m_mapping[i]);\n+        // Create a new linearization entry. As we're only appending transactions, they equal the\n+        // ClusterIndex.\n+        new_cluster->m_linearization.push_back(remap[i].second);\n+    }\n+    // Redistribute the dependencies.\n+    for (auto i : m_linearization) {\n+        /** The cluster transaction in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy its parents, translating positions.\n+        SetType new_parents;\n+        for (auto par : m_depgraph.GetReducedParents(i)) new_parents.Set(remap[par].second);\n+        new_cluster->m_depgraph.AddDependencies(new_parents, remap[i].second);\n+    }\n+    // Update all the Locators of moved transactions.\n+    for (Cluster* new_cluster : new_clusters) {\n+        new_cluster->Updated(graph);\n+    }\n+    // Wipe this Cluster, and return that it needs to be deleted.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_mapping.clear();\n+    m_linearization.clear();\n+    return true;\n+}\n+\n+void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+{\n+    /** Vector to store the positions in this Cluster for each position in other. */\n+    std::vector<ClusterIndex> remap(other.m_depgraph.PositionRange());\n+    // Iterate over all transactions in the other Cluster (the one being absorbed).\n+    for (auto pos : other.m_linearization) {\n+        auto idx = other.m_mapping[pos];\n+        // Copy the transaction into this Cluster, and remember its position.\n+        auto new_pos = m_depgraph.AddTransaction(other.m_depgraph.FeeRate(pos));\n+        remap[pos] = new_pos;\n+        if (new_pos == m_mapping.size()) {\n+            m_mapping.push_back(idx);\n+        } else {\n+            m_mapping[new_pos] = idx;\n+        }\n+        m_linearization.push_back(new_pos);\n+        // Copy the transaction's dependencies, translating them using remap.\n+        SetType parents;\n+        for (auto par : other.m_depgraph.GetReducedParents(pos)) {\n+            parents.Set(remap[par]);\n+        }\n+        m_depgraph.AddDependencies(parents, remap[pos]);\n+        // Update the transaction's Locator. There is no need to call Updated() to update chunk\n+        // feerates, as Updated() will be invoked by Cluster::ApplyDependencies on the resulting\n+        // merged Cluster later anyway).\n+        graph.m_entries[idx].m_locator.SetPresent(this, new_pos);\n+    }\n+    // Purge the other Cluster, now that everything has been moved.\n+    other.m_depgraph = DepGraph<SetType>{};\n+    other.m_linearization.clear();\n+    other.m_mapping.clear();\n+}\n+\n+void Cluster::ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept\n+{\n+    // This function is invoked by TxGraphImpl::ApplyDependencies after merging groups of Clusters\n+    // between which dependencies are added, which simply concatenates their linearizations. Invoke\n+    // PostLinearize, which has the effect that the linearization becomes a merge-sort of the\n+    // constituent linearizations. Do this here rather than in Cluster::Merge, because this\n+    // function is only invoked once per merged Cluster, rather than once per constituent one.\n+    // This concatenation + post-linearization could be replaced with an explicit merge-sort.\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Sort the list of dependencies to apply by child, so those can be applied in batch.\n+    std::sort(to_apply.begin(), to_apply.end(), [](auto& a, auto& b) { return a.second < b.second; });\n+    // Iterate over groups of to-be-added dependencies with the same child.\n+    auto it = to_apply.begin();\n+    while (it != to_apply.end()) {\n+        auto& first_child = graph.m_entries[it->second].m_locator;\n+        ClusterIndex child_idx = first_child.index;\n+        // Iterate over all to-be-added dependencies within that same child, gather the relevant\n+        // parents.\n+        SetType parents;\n+        while (it != to_apply.end()) {\n+            auto& child = graph.m_entries[it->second].m_locator;\n+            auto& parent = graph.m_entries[it->first].m_locator;\n+            Assume(child.cluster == this && parent.cluster == this);\n+            if (child.index != child_idx) break;\n+            parents.Set(parent.index);\n+            ++it;\n+        }\n+        // Push all dependencies to the underlying DepGraph. Note that this is O(N) in the size of\n+        // the cluster, regardless of the number of parents being added, so batching them together\n+        // has a performance benefit.\n+        m_depgraph.AddDependencies(parents, child_idx);\n+    }\n+\n+    // Finally fix the linearization, as the new dependencies may have invalidated the\n+    // linearization, and post-linearize it to fix up the worst problems with it.\n+    FixLinearization(m_depgraph, m_linearization);\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Finally push the changes to graph.m_entries.\n+    Updated(graph);\n+}\n+\n+std::unique_ptr<Cluster> TxGraphImpl::ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept\n+{\n+    Assume(quality != QualityLevel::NONE);\n+\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    Assume(setindex < quality_clusters.size());\n+\n+    // Extract the Cluster-owning unique_ptr.\n+    std::unique_ptr<Cluster> ret = std::move(quality_clusters[setindex]);\n+    ret->m_quality = QualityLevel::NONE;\n+    ret->m_setindex = ClusterSetIndex(-1);\n+\n+    // Clean up space in quality_cluster.\n+    auto max_setindex = quality_clusters.size() - 1;\n+    if (setindex != max_setindex) {\n+        // If the cluster was not the last element of quality_clusters, move that to take its place.\n+        quality_clusters.back()->m_quality = quality;\n+        quality_clusters.back()->m_setindex = setindex;\n+        quality_clusters[setindex] = std::move(quality_clusters.back());\n+    }\n+    // The last element of quality_clusters is now unused; drop it.\n+    quality_clusters.pop_back();\n+\n+    return ret;\n+}\n+\n+ClusterSetIndex TxGraphImpl::InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept\n+{\n+    // Cannot insert with quality level NONE (as that would mean not inserted).\n+    Assume(quality != QualityLevel::NONE);\n+    // The passed-in Cluster must not currently be in the TxGraphImpl.\n+    Assume(cluster->m_quality == QualityLevel::NONE);\n+\n+    // Append it at the end of the relevant TxGraphImpl::m_cluster.\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    ClusterSetIndex ret = quality_clusters.size();\n+    cluster->m_quality = quality;\n+    cluster->m_setindex = ret;\n+    quality_clusters.push_back(std::move(cluster));\n+    return ret;\n+}\n+\n+void TxGraphImpl::SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept\n+{\n+    Assume(new_quality != QualityLevel::NONE);\n+\n+    // Don't do anything if the quality did not change.\n+    if (old_quality == new_quality) return;\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(old_quality, old_index);\n+    // And re-insert it where it belongs.\n+    InsertCluster(std::move(cluster_ptr), new_quality);\n+}\n+\n+void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+{\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(cluster.m_quality, cluster.m_setindex);\n+    // And throw it away.\n+    cluster_ptr.reset();\n+}\n+\n+void TxGraphImpl::ApplyRemovals() noexcept\n+{\n+    auto& to_remove = m_to_remove;\n+    // Skip if there is nothing to remove.\n+    if (to_remove.empty()) return;\n+    // Wipe cached m_group_data, as it may be invalidated by removals.\n+    m_group_data = std::nullopt;\n+    m_group_clusters.clear();\n+    // Group the set of to-be-removed entries by Cluster*.\n+    std::sort(m_to_remove.begin(), m_to_remove.end(), [&](GraphIndex a, GraphIndex b) noexcept {\n+        return std::less{}(m_entries[a].m_locator.cluster, m_entries[b].m_locator.cluster);\n+    });\n+    // Process per Cluster.\n+    std::span to_remove_span{m_to_remove};\n+    while (!to_remove_span.empty()) {\n+        Cluster* cluster = m_entries[to_remove_span.front()].m_locator.cluster;\n+        if (cluster != nullptr) {\n+            // If the first to_remove_span entry's Cluster exists, hand to_remove_span to it, so it\n+            // can pop off whatever applies to it.\n+            cluster->ApplyRemovals(*this, to_remove_span);\n+        } else {\n+            // Otherwise, skip this already-removed entry.\n+            to_remove_span = to_remove_span.subspan(1);\n+        }\n+    }\n+    m_to_remove.clear();\n+}\n+\n+void TxGraphImpl::SwapIndexes(GraphIndex a, GraphIndex b) noexcept\n+{\n+    Assume(a < m_entries.size());\n+    Assume(b < m_entries.size());\n+    // Swap the Entry objects.\n+    std::swap(m_entries[a], m_entries[b]);\n+    // Iterate over both objects.\n+    for (int i = 0; i < 2; ++i) {\n+        GraphIndex idx = i ? b : a;\n+        Entry& entry = m_entries[idx];\n+        // Update linked Ref.\n+        if (entry.m_ref) GetRefIndex(*entry.m_ref) = idx;\n+        // Update the locator. The rest of the Entry information will not change, so no need to\n+        // invoke Cluster::Updated().\n+        Locator& locator = entry.m_locator;\n+        if (locator.IsPresent()) {\n+            locator.cluster->UpdateMapping(locator.index, idx);\n+        }\n+    }\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::Cleanup() noexcept\n+{\n+    ApplyDependencies();\n+    std::vector<Ref*> ret;\n+    // Sort the GraphIndex that need to be cleaned up. This groups them (so duplicates can be\n+    // processed just once). They are sorted in reverse, so the last ones get processed first.\n+    // This means earlier-processed GraphIndexes will not move of later-processed ones (which\n+    // might invalidate them).\n+    std::sort(m_wiped.begin(), m_wiped.end(), std::greater{});\n+    GraphIndex last(-1);\n+    for (GraphIndex idx : m_wiped) {\n+        // m_wiped should never contain the same GraphIndex twice (the code below would fail\n+        // if so, because GraphIndexes get invalidated by removing them).\n+        Assume(idx != last);\n+        last = idx;\n+        Entry& entry = m_entries[idx];\n+        // Gather Ref pointers that are being unlinked.\n+        if (entry.m_ref != nullptr) {\n+            ret.push_back(entry.m_ref);\n+            GetRefGraph(*entry.m_ref) = nullptr;\n+            m_entries[idx].m_ref = nullptr;\n+        }\n+        // Verify removed entries don't have anything that could hold a reference back.\n+        Assume(!entry.m_locator.IsPresent());\n+        if (idx != m_entries.size() - 1) SwapIndexes(idx, m_entries.size() - 1);\n+        m_entries.pop_back();\n+    }\n+    m_wiped.clear();\n+    return ret;\n+}\n+\n+void TxGraphImpl::Split(Cluster& cluster) noexcept\n+{\n+    // To split a Cluster, first make sure all removals are applied (as we might need to split\n+    // again afterwards otherwise).\n+    ApplyRemovals();\n+    bool del = cluster.Split(*this);\n+    if (del) {\n+        // Cluster::Split reports whether the Cluster is to be deleted.\n+        DeleteCluster(cluster);\n+    }\n+}\n+\n+void TxGraphImpl::SplitAll() noexcept\n+{\n+    // Before splitting all Cluster, first make sure all removals are applied.\n+    ApplyRemovals();\n+    auto& queue = m_clusters[int(QualityLevel::NEEDS_SPLIT)];\n+    while (!queue.empty()) {\n+        Split(*queue.back().get());\n+    }\n+}\n+\n+void TxGraphImpl::GroupClusters() noexcept\n+{\n+    // Before computing which Clusters need to be merged together, first apply all removals and\n+    // split the Clusters into connected components. If we would group first, we might end up\n+    // with inefficient Clusters which just end up being split again anyway.\n+    SplitAll();\n+\n+    // If the groupings have been computed already, nothing is left to be done.\n+    if (m_group_data.has_value()) return;\n+\n+    /** Annotated clusters: an entry for each Cluster, together with the representative for the\n+     *  partition it is in if known, or with nullptr if not yet known. */\n+    std::vector<std::pair<Cluster*, Cluster*>> an_clusters;\n+    /** Annotated dependencies: an entry for each m_deps_to_apply entry (excluding ones that apply\n+     *  to removed transactions), together with the representative root of the partition of\n+     *  Clusters it applies to. */\n+    std::vector<std::pair<std::pair<GraphIndex, GraphIndex>, Cluster*>> an_deps;\n+\n+    // Construct a an_clusters entry for every parent and child in the to-be-applied dependencies.\n+    for (const auto& [par, chl] : m_deps_to_add) {\n+        auto par_cluster = m_entries[par].m_locator.cluster;\n+        auto chl_cluster = m_entries[chl].m_locator.cluster;\n+        // Skip dependencies for which the parent or child transaction is removed.\n+        if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+        an_clusters.emplace_back(par_cluster, nullptr);\n+        // Do not include a duplicate when parent and child are identical, as it'll be removed\n+        // below anyway.\n+        if (chl_cluster != par_cluster) an_clusters.emplace_back(chl_cluster, nullptr);\n+    }\n+    // Sort and deduplicate an_clusters, so we end up with a sorted list of all involved Clusters\n+    // to which dependencies apply.\n+    std::sort(an_clusters.begin(), an_clusters.end());\n+    an_clusters.erase(std::unique(an_clusters.begin(), an_clusters.end()), an_clusters.end());\n+\n+    // Sort the dependencies by child Cluster.\n+    std::sort(m_deps_to_add.begin(), m_deps_to_add.end(), [&](auto& a, auto& b) noexcept {\n+        auto [_a_par, a_chl] = a;\n+        auto [_b_par, b_chl] = b;\n+        auto a_chl_cluster = m_entries[a_chl].m_locator.cluster;\n+        auto b_chl_cluster = m_entries[b_chl].m_locator.cluster;\n+        return std::less{}(a_chl_cluster, b_chl_cluster);\n+    });\n+\n+    // Run the union-find algorithm to to find partitions of the input Clusters which need to be\n+    // grouped together. See https://en.wikipedia.org/wiki/Disjoint-set_data_structure.\n+    {\n+        /** Each PartitionData entry contains information about a single input Cluster. */\n+        struct PartitionData\n+        {\n+            /** The cluster this holds information for. */\n+            Cluster* cluster;\n+            /** All PartitionData entries belonging to the same partition are organized in a tree.\n+             *  Each element points to its parent, or to itself if it is the root. The root is then\n+             *  a representative for the entire tree, and can be found by walking upwards from any\n+             *  element. */\n+            PartitionData* parent;\n+            /** (only if this is a root, so when parent == this) An upper bound on the height of\n+             *  tree for this partition. */\n+            unsigned rank;\n+        };\n+        /** Information about each input Cluster. Sorted by Cluster* pointer. */\n+        std::vector<PartitionData> partition_data;\n+\n+        /** Given a Cluster, find its corresponding PartitionData. */\n+        auto locate_uf = [&](Cluster* arg) noexcept -> PartitionData* {\n+            auto it = std::lower_bound(partition_data.begin(), partition_data.end(), arg,\n+                                       [](auto& a, Cluster* ptr) noexcept { return a.cluster < ptr; });\n+            Assume(it != partition_data.end());\n+            Assume(it->cluster == arg);\n+            return &*it;\n+        };\n+\n+        /** Given a PartitionData, find the root of the tree it is in (its representative). */\n+        static constexpr auto find_uf = [](PartitionData* data) noexcept -> PartitionData* {\n+            while (data->parent != data) {\n+                // Replace pointers to parents with pointers to grandparents.\n+                // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Finding_set_representatives.\n+                auto par = data->parent;\n+                data->parent = par->parent;\n+                data = par;\n+            }\n+            return data;\n+        };\n+\n+        /** Given two PartitionDatas, union the partitions they are in, and return their\n+         *  representative. */\n+        static constexpr auto union_uf = [](PartitionData* arg1, PartitionData* arg2) noexcept {\n+            // Find the roots of the trees, and bail out if they are already equal (which would\n+            // mean they are in the same partition already).\n+            auto rep1 = find_uf(arg1);\n+            auto rep2 = find_uf(arg2);\n+            if (rep1 == rep2) return rep1;\n+            // Pick the lower-rank root to become a child of the higher-rank one.\n+            // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Union_by_rank.\n+            if (rep1->rank < rep2->rank) std::swap(rep1, rep2);\n+            rep2->parent = rep1;\n+            rep1->rank += (rep1->rank == rep2->rank);\n+            return rep1;\n+        };\n+\n+        // Start by initializing every Cluster as its own singleton partition.\n+        partition_data.resize(an_clusters.size());\n+        for (size_t i = 0; i < an_clusters.size(); ++i) {\n+            partition_data[i].cluster = an_clusters[i].first;\n+            partition_data[i].parent = &partition_data[i];\n+            partition_data[i].rank = 0;\n+        }\n+\n+        // Run through all parent/child pairs in m_deps_to_add, and union the\n+        // the partitions their Clusters are in.\n+        Cluster* last_chl_cluster{nullptr};\n+        PartitionData* last_partition{nullptr};\n+        for (const auto& [par, chl] : m_deps_to_add) {\n+            auto par_cluster = m_entries[par].m_locator.cluster;\n+            auto chl_cluster = m_entries[chl].m_locator.cluster;\n+            // Nothing to do if parent and child are in the same Cluster.\n+            if (par_cluster == chl_cluster) continue;\n+            // Nothing to do if either parent or child transaction is removed already.\n+            if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+            Assume(par != chl);\n+            if (chl_cluster == last_chl_cluster) {\n+                // If the child Clusters is the same as the previous iteration, union with the\n+                // tree they were in, avoiding the need for another lookup. Note that m_deps_to_add\n+                // is sorted by child Cluster, so batches with the same child are expected.\n+                last_partition = union_uf(locate_uf(par_cluster), last_partition);\n+            } else {\n+                last_chl_cluster = chl_cluster;\n+                last_partition = union_uf(locate_uf(par_cluster), locate_uf(chl_cluster));\n+            }\n+        }\n+\n+        // Populate the an_clusters and an_deps data structures with the list of input Clusters,\n+        // and the input dependencies, annotated with the representative of the Cluster partition\n+        // it applies to.\n+        an_deps.reserve(m_deps_to_add.size());\n+        auto deps_it = m_deps_to_add.begin();\n+        for (size_t i = 0; i < partition_data.size(); ++i) {\n+            auto& data = partition_data[i];\n+            // Find the representative of the partition Cluster i is in, and store it with the\n+            // Cluster.\n+            auto rep = find_uf(&data)->cluster;\n+            an_clusters[i].second = rep;\n+            // Find all dependencies whose child Cluster is Cluster i, and annotate them with rep.\n+            while (deps_it != m_deps_to_add.end()) {\n+                auto [par, chl] = *deps_it;\n+                auto chl_cluster = m_entries[chl].m_locator.cluster;\n+                // Skip dependencies that apply to earlier Clusters (those necessary are for\n+                // deleted transactions, as otherwise we'd have processed them already).\n+                if (!std::less{}(chl_cluster, data.cluster)) {\n+                    if (chl_cluster != data.cluster) break;\n+                    auto par_cluster = m_entries[par].m_locator.cluster;\n+                    // Also filter out dependencies applying to a removed parent.\n+                    if (par_cluster != nullptr) an_deps.emplace_back(*deps_it, rep);\n+                }\n+                ++deps_it;\n+            }\n+        }\n+    }\n+\n+    // Sort both an_clusters and an_deps by representative of the partition they are in, grouping\n+    // all those applying to the same partition together.\n+    std::sort(an_deps.begin(), an_deps.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+    std::sort(an_clusters.begin(), an_clusters.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+\n+    // Translate the resulting cluster groups to the m_group_data structure.\n+    m_group_data = std::vector<GroupData>{};\n+    m_group_clusters.clear();\n+    m_group_clusters.reserve(an_clusters.size());\n+    m_deps_to_add.clear();\n+    m_deps_to_add.reserve(an_deps.size());\n+    auto an_deps_it = an_deps.begin();\n+    auto an_clusters_it = an_clusters.begin();\n+    while (an_deps_it != an_deps.end()) {\n+        auto rep = an_deps_it->second;\n+        // Create and initialize a new GroupData entry for the partition.\n+        auto& new_entry = m_group_data->emplace_back();\n+        new_entry.m_cluster_offset = m_group_clusters.size();\n+        new_entry.m_cluster_count = 0;\n+        new_entry.m_deps_offset = m_deps_to_add.size();\n+        new_entry.m_deps_count = 0;\n+        // Add all its clusters to it (copying those from an_clusters to m_group_clusters).\n+        while (an_clusters_it != an_clusters.end() && an_clusters_it->second == rep) {\n+            m_group_clusters.push_back(an_clusters_it->first);\n+            ++an_clusters_it;\n+            ++new_entry.m_cluster_count;\n+        }\n+        // Add all its dependencies to it (copying those back from an_deps to m_deps_to_add).\n+        while (an_deps_it != an_deps.end() && an_deps_it->second == rep) {\n+            m_deps_to_add.push_back(an_deps_it->first);\n+            ++an_deps_it;\n+            ++new_entry.m_deps_count;\n+        }\n+    }\n+    Assume(an_deps_it == an_deps.end());\n+    Assume(an_clusters_it == an_clusters.end());\n+}\n+\n+void TxGraphImpl::Merge(std::span<Cluster*> to_merge) noexcept\n+{\n+    Assume(!to_merge.empty());\n+    // Nothing to do if a group consists of just a single Cluster.\n+    if (to_merge.size() == 1) return;\n+\n+    // Move the largest Cluster to the front of to_merge. As all transactions in other to-be-merged\n+    // Clusters will be moved to that one, putting the largest one first minimizes the number of\n+    // moves.\n+    size_t max_size_pos{0};\n+    ClusterIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        ClusterIndex size = to_merge[i]->GetTxCount();\n+        if (size > max_size) {\n+            max_size_pos = i;\n+            max_size = size;\n+        }\n+    }\n+    if (max_size_pos != 0) std::swap(to_merge[0], to_merge[max_size_pos]);\n+\n+    // Merge all further Clusters in the group into the first one, and delete them.\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        to_merge[0]->Merge(*this, *to_merge[i]);\n+        DeleteCluster(*to_merge[i]);\n+    }\n+}\n+\n+void TxGraphImpl::ApplyDependencies() noexcept\n+{\n+    // Compute the groups of to-be-merged Clusters (which also applies all removals, and splits).\n+    GroupClusters();\n+    Assume(m_group_data.has_value());\n+    // Nothing to do if there are no dependencies to be added.\n+    if (m_deps_to_add.empty()) return;\n+\n+    // For each group of to-be-merged Clusters.\n+    Assume(m_group_data.has_value());\n+    for (const auto& group_data : *m_group_data) {\n+        // Invoke Merge() to merge them into a single Cluster.\n+        auto cluster_span = std::span{m_group_clusters}\n+                                .subspan(group_data.m_cluster_offset, group_data.m_cluster_count);\n+        Merge(cluster_span);\n+        // Actually apply all to-be-added dependencies (for each, parent and child belong to the\n+        // same Cluster because of the merging above).\n+        auto deps_span = std::span{m_deps_to_add}\n+                             .subspan(group_data.m_deps_offset, group_data.m_deps_count);\n+        Assume(!deps_span.empty());\n+        const auto& loc = m_entries[deps_span[0].second].m_locator;\n+        Assume(loc.IsPresent());\n+        loc.cluster->ApplyDependencies(*this, deps_span);\n+    }\n+\n+    // Wipe the list of to-be-added dependencies now that they are applied.\n+    m_deps_to_add.clear();\n+    // Also no further Cluster mergings are needed (note that we clear, but don't set to\n+    // std::nullopt, as that would imply the groupings are unknown).\n+    m_group_data->clear();\n+    m_group_clusters.clear();\n+}\n+\n+void Cluster::Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept\n+{\n+    // We can only relinearize Clusters that do not need splitting.\n+    Assume(m_quality == QualityLevel::OPTIMAL || m_quality == QualityLevel::ACCEPTABLE ||\n+           m_quality == QualityLevel::NEEDS_RELINEARIZE);\n+    // No work is required for Clusters which are already optimally linearized.\n+    if (m_quality == QualityLevel::OPTIMAL) return;\n+    // Invoke the actual linearization algorithm (passing in the existing one).\n+    uint64_t rng_seed = graph.m_rng.rand64();\n+    auto [linearization, optimal] = Linearize(m_depgraph, max_iters, rng_seed, m_linearization);\n+    // Postlinearize if the result isn't optimal already. This guarantees (among other things)\n+    // that the chunks of the resulting linearization are all connected.\n+    if (!optimal) PostLinearize(m_depgraph, linearization);\n+    // Update the linearization.\n+    m_linearization = std::move(linearization);\n+    // Update the Cluster's quality.\n+    auto new_quality = optimal ? QualityLevel::OPTIMAL : QualityLevel::ACCEPTABLE;\n+    graph.SetClusterQuality(m_quality, m_setindex, new_quality);\n+    // Update the Entry objects.\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::MakeAcceptable(Cluster& cluster) noexcept\n+{\n+    // Relinearize the Cluster if needed.\n+    if (cluster.m_quality == QualityLevel::NEEDS_RELINEARIZE) {\n+        cluster.Relinearize(*this, 10000);\n+    }\n+}\n+\n+Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept\n+{\n+    // Create a new transaction in the DepGraph, and remember its position in m_mapping.\n+    auto cluster_idx = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_index);\n+    m_linearization.push_back(cluster_idx);\n+}\n+\n+TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n+{\n+    // Construct a new Ref.\n+    Ref ret;\n+    // Construct a new Entry, and link it with the Ref.\n+    auto idx = m_entries.size();\n+    m_entries.emplace_back();\n+    auto& entry = m_entries.back();\n+    entry.m_ref = &ret;\n+    GetRefGraph(ret) = this;\n+    GetRefIndex(ret) = idx;\n+    // Construct a new singleton Cluster (which is necessarily optimally linearized).\n+    auto cluster = std::make_unique<Cluster>(*this, feerate, idx);\n+    auto cluster_ptr = cluster.get();\n+    InsertCluster(std::move(cluster), QualityLevel::OPTIMAL);\n+    cluster_ptr->Updated(*this);\n+    ++m_txcount;\n+    // Return the Ref.\n+    return ret;\n+}\n+\n+void TxGraphImpl::RemoveTransaction(Ref& arg) noexcept\n+{\n+    // Don't do anything if the Ref is empty (which may be indicative of the transaction already\n+    // having been removed).\n+    if (GetRefGraph(arg) == nullptr) return;\n+    Assume(GetRefGraph(arg) == this);\n+    // Find the Cluster the transaction is in, and stop if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return;\n+    // Remember that the transaction is to be removed.\n+    m_to_remove.push_back(GetRefIndex(arg));\n+}\n+\n+void TxGraphImpl::AddDependency(Ref& parent, Ref& child) noexcept\n+{\n+    // Don't do anything if either Ref is empty (which may be indicative of it having already been\n+    // removed).\n+    if (GetRefGraph(parent) == nullptr || GetRefGraph(child) == nullptr) return;\n+    Assume(GetRefGraph(parent) == this && GetRefGraph(child) == this);\n+    // Find the Cluster the parent and child transaction are in, and stop if either appears to be\n+    // already removed.\n+    auto par_cluster = m_entries[GetRefIndex(parent)].m_locator.cluster;\n+    if (par_cluster == nullptr) return;\n+    auto chl_cluster = m_entries[GetRefIndex(child)].m_locator.cluster;\n+    if (chl_cluster == nullptr) return;\n+    // Wipe m_group_data (as it will need to be recomputed).\n+    m_group_data.reset();\n+    m_group_clusters.clear();\n+    // Remember that this dependency is to be applied.\n+    m_deps_to_add.emplace_back(GetRefIndex(parent), GetRefIndex(child));\n+}\n+\n+bool TxGraphImpl::Exists(const Ref& arg) noexcept\n+{\n+    if (GetRefGraph(arg) == nullptr) return false;\n+    Assume(GetRefGraph(arg) == this);\n+    // Make sure the transaction isn't scheduled for removal.\n+    ApplyRemovals();\n+    return m_entries[GetRefIndex(arg)].m_locator.IsPresent();\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 1007,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": 1909348870,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. The third one disappears in a later commit, though.",
      "created_at": "2025-01-09T21:40:22Z",
      "updated_at": "2025-01-09T21:40:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909463444",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909463444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1662,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909477090",
      "pull_request_review_id": 2541000748,
      "id": 1909477090,
      "node_id": "PRRC_kwDOABII585x0E7i",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {\n+            ClusterIndex idx = m_linearization[lin_idx++];\n+            GraphIndex graph_idx = m_mapping[idx];\n+            auto& entry = graph.m_entries[graph_idx];\n+            entry.m_chunk_feerate = chunk.feerate;\n+            chunk.transactions.Reset(idx);\n+            if (chunk.transactions.None()) break;\n+        }\n+    }\n+}\n+\n+void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // Iterate over the prefix of to_remove that applies to this cluster.\n+    SetType todo;\n+    do {\n+        GraphIndex idx = to_remove.front();\n+        auto& entry = graph.m_entries[idx];\n+        auto& locator = entry.m_locator;\n+        // Stop once we hit an entry that applies to another Cluster.\n+        if (locator.cluster != this) break;\n+        // - Remember it in a set of to-remove ClusterIndexes.\n+        todo.Set(locator.index);\n+        // - Remove from m_mapping.\n+        m_mapping[locator.index] = GraphIndex(-1);\n+        // - Mark it as removed in the Entry's locator.\n+        locator.SetMissing();\n+        if (entry.IsWiped()) graph.m_wiped.push_back(idx);\n+        to_remove = to_remove.subspan(1);\n+        --graph.m_txcount;\n+    } while(!to_remove.empty());\n+\n+    Assume(todo.Any());\n+    // Wipe from the Cluster's DepGraph (this is O(n) regardless of the number of entries\n+    // removed, so we benefit from batching all the removals).\n+    m_depgraph.RemoveTransactions(todo);\n+    m_mapping.resize(m_depgraph.PositionRange());\n+\n+    // Filter removals out of m_linearization.\n+    m_linearization.erase(std::remove_if(\n+        m_linearization.begin(),\n+        m_linearization.end(),\n+        [&](auto pos) { return todo[pos]; }), m_linearization.end());\n+\n+    graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    Updated(graph);\n+}\n+\n+bool Cluster::Split(TxGraphImpl& graph) noexcept\n+{\n+    // This function can only be called when the Cluster needs splitting.\n+    Assume(m_quality == QualityLevel::NEEDS_SPLIT);\n+    /** Which positions are still left in this Cluster. */\n+    auto todo = m_depgraph.Positions();\n+    /** Mapping from transaction positions in this Cluster to the Cluster where it ends up, and\n+     *  its position therein. */\n+    std::vector<std::pair<Cluster*, ClusterIndex>> remap(m_depgraph.PositionRange());\n+    std::vector<Cluster*> new_clusters;\n+    bool first{true};\n+    // Iterate over the connected components of this Cluster's m_depgraph.\n+    while (todo.Any()) {\n+        auto component = m_depgraph.FindConnectedComponent(todo);\n+        if (first && component == todo) {\n+            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+            graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+            // We need to recompute and cache its chunking.\n+            Updated(graph);\n+            return false;\n+        }\n+        first = false;\n+        // Construct a new Cluster to hold the found component.\n+        auto new_cluster = std::make_unique<Cluster>();\n+        new_clusters.push_back(new_cluster.get());\n+        // Remember that all the component's transaction go to this new Cluster. The positions\n+        // will be determined below, so use -1 for now.\n+        for (auto i : component) {\n+            remap[i] = {new_cluster.get(), ClusterIndex(-1)};\n+        }\n+        graph.InsertCluster(std::move(new_cluster), QualityLevel::NEEDS_RELINEARIZE);\n+        todo -= component;\n+    }\n+    // Redistribute the transactions.\n+    for (auto i : m_linearization) {\n+        /** The cluster which transaction originally in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy the transaction to the new cluster's depgraph, and remember the position.\n+        remap[i].second = new_cluster->m_depgraph.AddTransaction(m_depgraph.FeeRate(i));\n+        // Create new mapping entry.\n+        new_cluster->m_mapping.push_back(m_mapping[i]);\n+        // Create a new linearization entry. As we're only appending transactions, they equal the\n+        // ClusterIndex.\n+        new_cluster->m_linearization.push_back(remap[i].second);\n+    }\n+    // Redistribute the dependencies.\n+    for (auto i : m_linearization) {\n+        /** The cluster transaction in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy its parents, translating positions.\n+        SetType new_parents;\n+        for (auto par : m_depgraph.GetReducedParents(i)) new_parents.Set(remap[par].second);\n+        new_cluster->m_depgraph.AddDependencies(new_parents, remap[i].second);\n+    }\n+    // Update all the Locators of moved transactions.\n+    for (Cluster* new_cluster : new_clusters) {\n+        new_cluster->Updated(graph);\n+    }\n+    // Wipe this Cluster, and return that it needs to be deleted.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_mapping.clear();\n+    m_linearization.clear();\n+    return true;\n+}\n+\n+void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+{\n+    /** Vector to store the positions in this Cluster for each position in other. */\n+    std::vector<ClusterIndex> remap(other.m_depgraph.PositionRange());\n+    // Iterate over all transactions in the other Cluster (the one being absorbed).\n+    for (auto pos : other.m_linearization) {\n+        auto idx = other.m_mapping[pos];\n+        // Copy the transaction into this Cluster, and remember its position.\n+        auto new_pos = m_depgraph.AddTransaction(other.m_depgraph.FeeRate(pos));\n+        remap[pos] = new_pos;\n+        if (new_pos == m_mapping.size()) {\n+            m_mapping.push_back(idx);\n+        } else {\n+            m_mapping[new_pos] = idx;\n+        }\n+        m_linearization.push_back(new_pos);\n+        // Copy the transaction's dependencies, translating them using remap.\n+        SetType parents;\n+        for (auto par : other.m_depgraph.GetReducedParents(pos)) {\n+            parents.Set(remap[par]);\n+        }\n+        m_depgraph.AddDependencies(parents, remap[pos]);\n+        // Update the transaction's Locator. There is no need to call Updated() to update chunk\n+        // feerates, as Updated() will be invoked by Cluster::ApplyDependencies on the resulting\n+        // merged Cluster later anyway).\n+        graph.m_entries[idx].m_locator.SetPresent(this, new_pos);\n+    }\n+    // Purge the other Cluster, now that everything has been moved.\n+    other.m_depgraph = DepGraph<SetType>{};\n+    other.m_linearization.clear();\n+    other.m_mapping.clear();\n+}\n+\n+void Cluster::ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept\n+{\n+    // This function is invoked by TxGraphImpl::ApplyDependencies after merging groups of Clusters\n+    // between which dependencies are added, which simply concatenates their linearizations. Invoke\n+    // PostLinearize, which has the effect that the linearization becomes a merge-sort of the\n+    // constituent linearizations. Do this here rather than in Cluster::Merge, because this\n+    // function is only invoked once per merged Cluster, rather than once per constituent one.\n+    // This concatenation + post-linearization could be replaced with an explicit merge-sort.\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Sort the list of dependencies to apply by child, so those can be applied in batch.\n+    std::sort(to_apply.begin(), to_apply.end(), [](auto& a, auto& b) { return a.second < b.second; });\n+    // Iterate over groups of to-be-added dependencies with the same child.\n+    auto it = to_apply.begin();\n+    while (it != to_apply.end()) {\n+        auto& first_child = graph.m_entries[it->second].m_locator;\n+        ClusterIndex child_idx = first_child.index;\n+        // Iterate over all to-be-added dependencies within that same child, gather the relevant\n+        // parents.\n+        SetType parents;\n+        while (it != to_apply.end()) {\n+            auto& child = graph.m_entries[it->second].m_locator;\n+            auto& parent = graph.m_entries[it->first].m_locator;\n+            Assume(child.cluster == this && parent.cluster == this);\n+            if (child.index != child_idx) break;\n+            parents.Set(parent.index);\n+            ++it;\n+        }\n+        // Push all dependencies to the underlying DepGraph. Note that this is O(N) in the size of\n+        // the cluster, regardless of the number of parents being added, so batching them together\n+        // has a performance benefit.\n+        m_depgraph.AddDependencies(parents, child_idx);\n+    }\n+\n+    // Finally fix the linearization, as the new dependencies may have invalidated the\n+    // linearization, and post-linearize it to fix up the worst problems with it.\n+    FixLinearization(m_depgraph, m_linearization);\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Finally push the changes to graph.m_entries.\n+    Updated(graph);\n+}\n+\n+std::unique_ptr<Cluster> TxGraphImpl::ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept\n+{\n+    Assume(quality != QualityLevel::NONE);\n+\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    Assume(setindex < quality_clusters.size());\n+\n+    // Extract the Cluster-owning unique_ptr.\n+    std::unique_ptr<Cluster> ret = std::move(quality_clusters[setindex]);\n+    ret->m_quality = QualityLevel::NONE;\n+    ret->m_setindex = ClusterSetIndex(-1);\n+\n+    // Clean up space in quality_cluster.\n+    auto max_setindex = quality_clusters.size() - 1;\n+    if (setindex != max_setindex) {\n+        // If the cluster was not the last element of quality_clusters, move that to take its place.\n+        quality_clusters.back()->m_quality = quality;\n+        quality_clusters.back()->m_setindex = setindex;\n+        quality_clusters[setindex] = std::move(quality_clusters.back());\n+    }\n+    // The last element of quality_clusters is now unused; drop it.\n+    quality_clusters.pop_back();\n+\n+    return ret;\n+}\n+\n+ClusterSetIndex TxGraphImpl::InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept\n+{\n+    // Cannot insert with quality level NONE (as that would mean not inserted).\n+    Assume(quality != QualityLevel::NONE);\n+    // The passed-in Cluster must not currently be in the TxGraphImpl.\n+    Assume(cluster->m_quality == QualityLevel::NONE);\n+\n+    // Append it at the end of the relevant TxGraphImpl::m_cluster.\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    ClusterSetIndex ret = quality_clusters.size();\n+    cluster->m_quality = quality;\n+    cluster->m_setindex = ret;\n+    quality_clusters.push_back(std::move(cluster));\n+    return ret;\n+}\n+\n+void TxGraphImpl::SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept\n+{\n+    Assume(new_quality != QualityLevel::NONE);\n+\n+    // Don't do anything if the quality did not change.\n+    if (old_quality == new_quality) return;\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(old_quality, old_index);\n+    // And re-insert it where it belongs.\n+    InsertCluster(std::move(cluster_ptr), new_quality);\n+}\n+\n+void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+{\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(cluster.m_quality, cluster.m_setindex);\n+    // And throw it away.\n+    cluster_ptr.reset();\n+}\n+\n+void TxGraphImpl::ApplyRemovals() noexcept\n+{\n+    auto& to_remove = m_to_remove;\n+    // Skip if there is nothing to remove.\n+    if (to_remove.empty()) return;\n+    // Wipe cached m_group_data, as it may be invalidated by removals.\n+    m_group_data = std::nullopt;\n+    m_group_clusters.clear();\n+    // Group the set of to-be-removed entries by Cluster*.\n+    std::sort(m_to_remove.begin(), m_to_remove.end(), [&](GraphIndex a, GraphIndex b) noexcept {\n+        return std::less{}(m_entries[a].m_locator.cluster, m_entries[b].m_locator.cluster);\n+    });\n+    // Process per Cluster.\n+    std::span to_remove_span{m_to_remove};\n+    while (!to_remove_span.empty()) {\n+        Cluster* cluster = m_entries[to_remove_span.front()].m_locator.cluster;\n+        if (cluster != nullptr) {\n+            // If the first to_remove_span entry's Cluster exists, hand to_remove_span to it, so it\n+            // can pop off whatever applies to it.\n+            cluster->ApplyRemovals(*this, to_remove_span);\n+        } else {\n+            // Otherwise, skip this already-removed entry.\n+            to_remove_span = to_remove_span.subspan(1);\n+        }\n+    }\n+    m_to_remove.clear();\n+}\n+\n+void TxGraphImpl::SwapIndexes(GraphIndex a, GraphIndex b) noexcept\n+{\n+    Assume(a < m_entries.size());\n+    Assume(b < m_entries.size());\n+    // Swap the Entry objects.\n+    std::swap(m_entries[a], m_entries[b]);\n+    // Iterate over both objects.\n+    for (int i = 0; i < 2; ++i) {\n+        GraphIndex idx = i ? b : a;\n+        Entry& entry = m_entries[idx];\n+        // Update linked Ref.\n+        if (entry.m_ref) GetRefIndex(*entry.m_ref) = idx;\n+        // Update the locator. The rest of the Entry information will not change, so no need to\n+        // invoke Cluster::Updated().\n+        Locator& locator = entry.m_locator;\n+        if (locator.IsPresent()) {\n+            locator.cluster->UpdateMapping(locator.index, idx);\n+        }\n+    }\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::Cleanup() noexcept\n+{\n+    ApplyDependencies();\n+    std::vector<Ref*> ret;\n+    // Sort the GraphIndex that need to be cleaned up. This groups them (so duplicates can be\n+    // processed just once). They are sorted in reverse, so the last ones get processed first.\n+    // This means earlier-processed GraphIndexes will not move of later-processed ones (which\n+    // might invalidate them).\n+    std::sort(m_wiped.begin(), m_wiped.end(), std::greater{});\n+    GraphIndex last(-1);\n+    for (GraphIndex idx : m_wiped) {\n+        // m_wiped should never contain the same GraphIndex twice (the code below would fail\n+        // if so, because GraphIndexes get invalidated by removing them).\n+        Assume(idx != last);\n+        last = idx;\n+        Entry& entry = m_entries[idx];\n+        // Gather Ref pointers that are being unlinked.\n+        if (entry.m_ref != nullptr) {\n+            ret.push_back(entry.m_ref);\n+            GetRefGraph(*entry.m_ref) = nullptr;\n+            m_entries[idx].m_ref = nullptr;\n+        }\n+        // Verify removed entries don't have anything that could hold a reference back.\n+        Assume(!entry.m_locator.IsPresent());\n+        if (idx != m_entries.size() - 1) SwapIndexes(idx, m_entries.size() - 1);\n+        m_entries.pop_back();\n+    }\n+    m_wiped.clear();\n+    return ret;\n+}\n+\n+void TxGraphImpl::Split(Cluster& cluster) noexcept\n+{\n+    // To split a Cluster, first make sure all removals are applied (as we might need to split\n+    // again afterwards otherwise).\n+    ApplyRemovals();\n+    bool del = cluster.Split(*this);\n+    if (del) {\n+        // Cluster::Split reports whether the Cluster is to be deleted.\n+        DeleteCluster(cluster);\n+    }\n+}\n+\n+void TxGraphImpl::SplitAll() noexcept\n+{\n+    // Before splitting all Cluster, first make sure all removals are applied.\n+    ApplyRemovals();\n+    auto& queue = m_clusters[int(QualityLevel::NEEDS_SPLIT)];\n+    while (!queue.empty()) {\n+        Split(*queue.back().get());\n+    }\n+}\n+\n+void TxGraphImpl::GroupClusters() noexcept\n+{\n+    // Before computing which Clusters need to be merged together, first apply all removals and\n+    // split the Clusters into connected components. If we would group first, we might end up\n+    // with inefficient Clusters which just end up being split again anyway.\n+    SplitAll();\n+\n+    // If the groupings have been computed already, nothing is left to be done.\n+    if (m_group_data.has_value()) return;\n+\n+    /** Annotated clusters: an entry for each Cluster, together with the representative for the\n+     *  partition it is in if known, or with nullptr if not yet known. */\n+    std::vector<std::pair<Cluster*, Cluster*>> an_clusters;\n+    /** Annotated dependencies: an entry for each m_deps_to_apply entry (excluding ones that apply\n+     *  to removed transactions), together with the representative root of the partition of\n+     *  Clusters it applies to. */\n+    std::vector<std::pair<std::pair<GraphIndex, GraphIndex>, Cluster*>> an_deps;\n+\n+    // Construct a an_clusters entry for every parent and child in the to-be-applied dependencies.\n+    for (const auto& [par, chl] : m_deps_to_add) {\n+        auto par_cluster = m_entries[par].m_locator.cluster;\n+        auto chl_cluster = m_entries[chl].m_locator.cluster;\n+        // Skip dependencies for which the parent or child transaction is removed.\n+        if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+        an_clusters.emplace_back(par_cluster, nullptr);\n+        // Do not include a duplicate when parent and child are identical, as it'll be removed\n+        // below anyway.\n+        if (chl_cluster != par_cluster) an_clusters.emplace_back(chl_cluster, nullptr);\n+    }\n+    // Sort and deduplicate an_clusters, so we end up with a sorted list of all involved Clusters\n+    // to which dependencies apply.\n+    std::sort(an_clusters.begin(), an_clusters.end());\n+    an_clusters.erase(std::unique(an_clusters.begin(), an_clusters.end()), an_clusters.end());\n+\n+    // Sort the dependencies by child Cluster.\n+    std::sort(m_deps_to_add.begin(), m_deps_to_add.end(), [&](auto& a, auto& b) noexcept {\n+        auto [_a_par, a_chl] = a;\n+        auto [_b_par, b_chl] = b;\n+        auto a_chl_cluster = m_entries[a_chl].m_locator.cluster;\n+        auto b_chl_cluster = m_entries[b_chl].m_locator.cluster;\n+        return std::less{}(a_chl_cluster, b_chl_cluster);\n+    });\n+\n+    // Run the union-find algorithm to to find partitions of the input Clusters which need to be\n+    // grouped together. See https://en.wikipedia.org/wiki/Disjoint-set_data_structure.\n+    {\n+        /** Each PartitionData entry contains information about a single input Cluster. */\n+        struct PartitionData\n+        {\n+            /** The cluster this holds information for. */\n+            Cluster* cluster;\n+            /** All PartitionData entries belonging to the same partition are organized in a tree.\n+             *  Each element points to its parent, or to itself if it is the root. The root is then\n+             *  a representative for the entire tree, and can be found by walking upwards from any\n+             *  element. */\n+            PartitionData* parent;\n+            /** (only if this is a root, so when parent == this) An upper bound on the height of\n+             *  tree for this partition. */\n+            unsigned rank;\n+        };\n+        /** Information about each input Cluster. Sorted by Cluster* pointer. */\n+        std::vector<PartitionData> partition_data;\n+\n+        /** Given a Cluster, find its corresponding PartitionData. */\n+        auto locate_uf = [&](Cluster* arg) noexcept -> PartitionData* {\n+            auto it = std::lower_bound(partition_data.begin(), partition_data.end(), arg,\n+                                       [](auto& a, Cluster* ptr) noexcept { return a.cluster < ptr; });\n+            Assume(it != partition_data.end());\n+            Assume(it->cluster == arg);\n+            return &*it;\n+        };\n+\n+        /** Given a PartitionData, find the root of the tree it is in (its representative). */\n+        static constexpr auto find_uf = [](PartitionData* data) noexcept -> PartitionData* {\n+            while (data->parent != data) {\n+                // Replace pointers to parents with pointers to grandparents.\n+                // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Finding_set_representatives.\n+                auto par = data->parent;\n+                data->parent = par->parent;\n+                data = par;\n+            }\n+            return data;\n+        };\n+\n+        /** Given two PartitionDatas, union the partitions they are in, and return their\n+         *  representative. */\n+        static constexpr auto union_uf = [](PartitionData* arg1, PartitionData* arg2) noexcept {\n+            // Find the roots of the trees, and bail out if they are already equal (which would\n+            // mean they are in the same partition already).\n+            auto rep1 = find_uf(arg1);\n+            auto rep2 = find_uf(arg2);\n+            if (rep1 == rep2) return rep1;\n+            // Pick the lower-rank root to become a child of the higher-rank one.\n+            // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Union_by_rank.\n+            if (rep1->rank < rep2->rank) std::swap(rep1, rep2);\n+            rep2->parent = rep1;\n+            rep1->rank += (rep1->rank == rep2->rank);\n+            return rep1;\n+        };\n+\n+        // Start by initializing every Cluster as its own singleton partition.\n+        partition_data.resize(an_clusters.size());\n+        for (size_t i = 0; i < an_clusters.size(); ++i) {\n+            partition_data[i].cluster = an_clusters[i].first;\n+            partition_data[i].parent = &partition_data[i];\n+            partition_data[i].rank = 0;\n+        }\n+\n+        // Run through all parent/child pairs in m_deps_to_add, and union the\n+        // the partitions their Clusters are in.\n+        Cluster* last_chl_cluster{nullptr};\n+        PartitionData* last_partition{nullptr};\n+        for (const auto& [par, chl] : m_deps_to_add) {\n+            auto par_cluster = m_entries[par].m_locator.cluster;\n+            auto chl_cluster = m_entries[chl].m_locator.cluster;\n+            // Nothing to do if parent and child are in the same Cluster.\n+            if (par_cluster == chl_cluster) continue;\n+            // Nothing to do if either parent or child transaction is removed already.\n+            if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+            Assume(par != chl);\n+            if (chl_cluster == last_chl_cluster) {\n+                // If the child Clusters is the same as the previous iteration, union with the\n+                // tree they were in, avoiding the need for another lookup. Note that m_deps_to_add\n+                // is sorted by child Cluster, so batches with the same child are expected.\n+                last_partition = union_uf(locate_uf(par_cluster), last_partition);\n+            } else {\n+                last_chl_cluster = chl_cluster;\n+                last_partition = union_uf(locate_uf(par_cluster), locate_uf(chl_cluster));\n+            }\n+        }\n+\n+        // Populate the an_clusters and an_deps data structures with the list of input Clusters,\n+        // and the input dependencies, annotated with the representative of the Cluster partition\n+        // it applies to.\n+        an_deps.reserve(m_deps_to_add.size());\n+        auto deps_it = m_deps_to_add.begin();\n+        for (size_t i = 0; i < partition_data.size(); ++i) {\n+            auto& data = partition_data[i];\n+            // Find the representative of the partition Cluster i is in, and store it with the\n+            // Cluster.\n+            auto rep = find_uf(&data)->cluster;\n+            an_clusters[i].second = rep;\n+            // Find all dependencies whose child Cluster is Cluster i, and annotate them with rep.\n+            while (deps_it != m_deps_to_add.end()) {\n+                auto [par, chl] = *deps_it;\n+                auto chl_cluster = m_entries[chl].m_locator.cluster;\n+                // Skip dependencies that apply to earlier Clusters (those necessary are for\n+                // deleted transactions, as otherwise we'd have processed them already).\n+                if (!std::less{}(chl_cluster, data.cluster)) {\n+                    if (chl_cluster != data.cluster) break;\n+                    auto par_cluster = m_entries[par].m_locator.cluster;\n+                    // Also filter out dependencies applying to a removed parent.\n+                    if (par_cluster != nullptr) an_deps.emplace_back(*deps_it, rep);\n+                }\n+                ++deps_it;\n+            }\n+        }\n+    }\n+\n+    // Sort both an_clusters and an_deps by representative of the partition they are in, grouping\n+    // all those applying to the same partition together.\n+    std::sort(an_deps.begin(), an_deps.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+    std::sort(an_clusters.begin(), an_clusters.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+\n+    // Translate the resulting cluster groups to the m_group_data structure.\n+    m_group_data = std::vector<GroupData>{};\n+    m_group_clusters.clear();\n+    m_group_clusters.reserve(an_clusters.size());\n+    m_deps_to_add.clear();\n+    m_deps_to_add.reserve(an_deps.size());\n+    auto an_deps_it = an_deps.begin();\n+    auto an_clusters_it = an_clusters.begin();\n+    while (an_deps_it != an_deps.end()) {\n+        auto rep = an_deps_it->second;\n+        // Create and initialize a new GroupData entry for the partition.\n+        auto& new_entry = m_group_data->emplace_back();\n+        new_entry.m_cluster_offset = m_group_clusters.size();\n+        new_entry.m_cluster_count = 0;\n+        new_entry.m_deps_offset = m_deps_to_add.size();\n+        new_entry.m_deps_count = 0;\n+        // Add all its clusters to it (copying those from an_clusters to m_group_clusters).\n+        while (an_clusters_it != an_clusters.end() && an_clusters_it->second == rep) {\n+            m_group_clusters.push_back(an_clusters_it->first);\n+            ++an_clusters_it;\n+            ++new_entry.m_cluster_count;\n+        }\n+        // Add all its dependencies to it (copying those back from an_deps to m_deps_to_add).\n+        while (an_deps_it != an_deps.end() && an_deps_it->second == rep) {\n+            m_deps_to_add.push_back(an_deps_it->first);\n+            ++an_deps_it;\n+            ++new_entry.m_deps_count;\n+        }\n+    }\n+    Assume(an_deps_it == an_deps.end());\n+    Assume(an_clusters_it == an_clusters.end());\n+}\n+\n+void TxGraphImpl::Merge(std::span<Cluster*> to_merge) noexcept\n+{\n+    Assume(!to_merge.empty());\n+    // Nothing to do if a group consists of just a single Cluster.\n+    if (to_merge.size() == 1) return;\n+\n+    // Move the largest Cluster to the front of to_merge. As all transactions in other to-be-merged\n+    // Clusters will be moved to that one, putting the largest one first minimizes the number of\n+    // moves.\n+    size_t max_size_pos{0};\n+    ClusterIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        ClusterIndex size = to_merge[i]->GetTxCount();\n+        if (size > max_size) {\n+            max_size_pos = i;\n+            max_size = size;\n+        }\n+    }\n+    if (max_size_pos != 0) std::swap(to_merge[0], to_merge[max_size_pos]);\n+\n+    // Merge all further Clusters in the group into the first one, and delete them.\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        to_merge[0]->Merge(*this, *to_merge[i]);\n+        DeleteCluster(*to_merge[i]);\n+    }\n+}\n+\n+void TxGraphImpl::ApplyDependencies() noexcept\n+{\n+    // Compute the groups of to-be-merged Clusters (which also applies all removals, and splits).\n+    GroupClusters();\n+    Assume(m_group_data.has_value());\n+    // Nothing to do if there are no dependencies to be added.\n+    if (m_deps_to_add.empty()) return;\n+\n+    // For each group of to-be-merged Clusters.\n+    Assume(m_group_data.has_value());\n+    for (const auto& group_data : *m_group_data) {\n+        // Invoke Merge() to merge them into a single Cluster.\n+        auto cluster_span = std::span{m_group_clusters}\n+                                .subspan(group_data.m_cluster_offset, group_data.m_cluster_count);\n+        Merge(cluster_span);\n+        // Actually apply all to-be-added dependencies (for each, parent and child belong to the\n+        // same Cluster because of the merging above).\n+        auto deps_span = std::span{m_deps_to_add}\n+                             .subspan(group_data.m_deps_offset, group_data.m_deps_count);\n+        Assume(!deps_span.empty());\n+        const auto& loc = m_entries[deps_span[0].second].m_locator;\n+        Assume(loc.IsPresent());\n+        loc.cluster->ApplyDependencies(*this, deps_span);\n+    }\n+\n+    // Wipe the list of to-be-added dependencies now that they are applied.\n+    m_deps_to_add.clear();\n+    // Also no further Cluster mergings are needed (note that we clear, but don't set to\n+    // std::nullopt, as that would imply the groupings are unknown).\n+    m_group_data->clear();\n+    m_group_clusters.clear();\n+}\n+\n+void Cluster::Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept\n+{\n+    // We can only relinearize Clusters that do not need splitting.\n+    Assume(m_quality == QualityLevel::OPTIMAL || m_quality == QualityLevel::ACCEPTABLE ||\n+           m_quality == QualityLevel::NEEDS_RELINEARIZE);\n+    // No work is required for Clusters which are already optimally linearized.\n+    if (m_quality == QualityLevel::OPTIMAL) return;\n+    // Invoke the actual linearization algorithm (passing in the existing one).\n+    uint64_t rng_seed = graph.m_rng.rand64();\n+    auto [linearization, optimal] = Linearize(m_depgraph, max_iters, rng_seed, m_linearization);\n+    // Postlinearize if the result isn't optimal already. This guarantees (among other things)\n+    // that the chunks of the resulting linearization are all connected.\n+    if (!optimal) PostLinearize(m_depgraph, linearization);\n+    // Update the linearization.\n+    m_linearization = std::move(linearization);\n+    // Update the Cluster's quality.\n+    auto new_quality = optimal ? QualityLevel::OPTIMAL : QualityLevel::ACCEPTABLE;\n+    graph.SetClusterQuality(m_quality, m_setindex, new_quality);\n+    // Update the Entry objects.\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::MakeAcceptable(Cluster& cluster) noexcept\n+{\n+    // Relinearize the Cluster if needed.\n+    if (cluster.m_quality == QualityLevel::NEEDS_RELINEARIZE) {\n+        cluster.Relinearize(*this, 10000);\n+    }\n+}\n+\n+Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept\n+{\n+    // Create a new transaction in the DepGraph, and remember its position in m_mapping.\n+    auto cluster_idx = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_index);\n+    m_linearization.push_back(cluster_idx);\n+}\n+\n+TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n+{\n+    // Construct a new Ref.\n+    Ref ret;\n+    // Construct a new Entry, and link it with the Ref.\n+    auto idx = m_entries.size();\n+    m_entries.emplace_back();\n+    auto& entry = m_entries.back();\n+    entry.m_ref = &ret;\n+    GetRefGraph(ret) = this;\n+    GetRefIndex(ret) = idx;\n+    // Construct a new singleton Cluster (which is necessarily optimally linearized).\n+    auto cluster = std::make_unique<Cluster>(*this, feerate, idx);\n+    auto cluster_ptr = cluster.get();\n+    InsertCluster(std::move(cluster), QualityLevel::OPTIMAL);\n+    cluster_ptr->Updated(*this);\n+    ++m_txcount;\n+    // Return the Ref.\n+    return ret;\n+}\n+\n+void TxGraphImpl::RemoveTransaction(Ref& arg) noexcept\n+{\n+    // Don't do anything if the Ref is empty (which may be indicative of the transaction already\n+    // having been removed).\n+    if (GetRefGraph(arg) == nullptr) return;\n+    Assume(GetRefGraph(arg) == this);\n+    // Find the Cluster the transaction is in, and stop if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return;\n+    // Remember that the transaction is to be removed.\n+    m_to_remove.push_back(GetRefIndex(arg));\n+}\n+\n+void TxGraphImpl::AddDependency(Ref& parent, Ref& child) noexcept\n+{\n+    // Don't do anything if either Ref is empty (which may be indicative of it having already been\n+    // removed).\n+    if (GetRefGraph(parent) == nullptr || GetRefGraph(child) == nullptr) return;\n+    Assume(GetRefGraph(parent) == this && GetRefGraph(child) == this);\n+    // Find the Cluster the parent and child transaction are in, and stop if either appears to be\n+    // already removed.\n+    auto par_cluster = m_entries[GetRefIndex(parent)].m_locator.cluster;\n+    if (par_cluster == nullptr) return;\n+    auto chl_cluster = m_entries[GetRefIndex(child)].m_locator.cluster;\n+    if (chl_cluster == nullptr) return;\n+    // Wipe m_group_data (as it will need to be recomputed).\n+    m_group_data.reset();\n+    m_group_clusters.clear();\n+    // Remember that this dependency is to be applied.\n+    m_deps_to_add.emplace_back(GetRefIndex(parent), GetRefIndex(child));\n+}\n+\n+bool TxGraphImpl::Exists(const Ref& arg) noexcept\n+{\n+    if (GetRefGraph(arg) == nullptr) return false;\n+    Assume(GetRefGraph(arg) == this);\n+    // Make sure the transaction isn't scheduled for removal.\n+    ApplyRemovals();\n+    return m_entries[GetRefIndex(arg)].m_locator.IsPresent();\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all ancestors (in arbitrary order) to Refs (if they have any), and return them.\n+    for (auto idx : m_depgraph.Ancestors(idx)) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all descendants (in arbitrary order) to Refs (if they have any), and return them.\n+    for (auto idx : m_depgraph.Descendants(idx)) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+std::vector<TxGraph::Ref*> Cluster::GetClusterRefs(const TxGraphImpl& graph) noexcept\n+{\n+    std::vector<TxGraph::Ref*> ret;\n+    // Translate all transactions in the Cluster (in linearization order) to Refs.\n+    for (auto idx : m_linearization) {\n+        const auto& entry = graph.m_entries[m_mapping[idx]];\n+        ret.push_back(entry.m_ref);\n+    }\n+    return ret;\n+}\n+\n+FeeFrac Cluster::GetIndividualFeerate(ClusterIndex idx) noexcept\n+{\n+    return m_depgraph.FeeRate(idx);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetAncestors(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetAncestorRefs(*this, m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetDescendants(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetDescendantRefs(*this, m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::GetCluster(const Ref& arg) noexcept\n+{\n+    // Return the empty vector if the Ref is empty (which may be indicative of the transaction\n+    // having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be incorrect otherwise.\n+    ApplyDependencies();\n+    // Find the Cluster the argument is in, and return the empty vector if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Make sure the Cluster has an acceptable quality level, and then dispatch to it.\n+    MakeAcceptable(*cluster);\n+    return cluster->GetClusterRefs(*this);\n+}\n+\n+TxGraph::GraphIndex TxGraphImpl::GetTransactionCount() noexcept\n+{\n+    ApplyRemovals();\n+    return m_txcount;\n+}\n+\n+FeeFrac TxGraphImpl::GetIndividualFeerate(const Ref& arg) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply removals, so that we can correctly report FeeFrac{} for non-existing transaction.\n+    ApplyRemovals();\n+    // Find the cluster the argument is in, and return the empty FeeFrac if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Dispatch to the Cluster.\n+    return cluster->GetIndividualFeerate(m_entries[GetRefIndex(arg)].m_locator.index);\n+}\n+\n+FeeFrac TxGraphImpl::GetChunkFeerate(const Ref& arg) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(arg) == nullptr) return {};\n+    Assume(GetRefGraph(arg) == this);\n+    // Apply all dependencies, as the result might be inaccurate otherwise.\n+    ApplyDependencies();\n+    // Find the cluster the argument is in, and return the empty FeeFrac if it isn't in any.\n+    auto cluster = m_entries[GetRefIndex(arg)].m_locator.cluster;\n+    if (cluster == nullptr) return {};\n+    // Make sure the Cluster has an acceptable quality level, and then return the transaction's\n+    // chunk feerate.\n+    MakeAcceptable(*cluster);\n+    const auto& entry = m_entries[GetRefIndex(arg)];\n+    return entry.m_chunk_feerate;\n+}\n+\n+void Cluster::SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept\n+{\n+    // Make sure the specified ClusterIndex exists in this Cluster.\n+    Assume(m_depgraph.Positions()[idx]);\n+    // Bail out if the fee isn't actually being changed.\n+    if (m_depgraph.FeeRate(idx).fee == fee) return;\n+    // Update the fee, remember that relinearization will be necessary, and update the Entries\n+    // in the same Cluster.\n+    m_depgraph.FeeRate(idx).fee = fee;\n+    if (m_quality != QualityLevel::NEEDS_SPLIT) {\n+        graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+    }\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::SetTransactionFee(Ref& ref, int64_t fee) noexcept\n+{\n+    // Return the empty FeeFrac if the passed Ref is empty (which may be indicative of the\n+    // transaction having been removed already.\n+    if (GetRefGraph(ref) == nullptr) return;\n+    Assume(GetRefGraph(ref) == this);\n+    // Find the entry, its locator, and inform its Cluster about the new feerate, if any.\n+    auto& entry = m_entries[GetRefIndex(ref)];\n+    auto& locator = entry.m_locator;\n+    if (locator.IsPresent()) {\n+        locator.cluster->SetFee(*this, locator.index, fee);\n+    }\n+}\n+\n+} // namespace\n+\n+TxGraph::Ref::~Ref()\n+{\n+    if (m_graph) {\n+        // Inform the TxGraph about the Ref being destroyed.\n+        m_graph->UnlinkRef(m_index);\n+        m_graph = nullptr;\n+    }\n+}\n+\n+TxGraph::Ref& TxGraph::Ref::operator=(Ref&& other) noexcept\n+{\n+    // Inform both TxGraphs about the Refs being swapped.",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 1172,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": 1909293407,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> > Why is this doing an effective swap?\r\n> \r\n> I think this is quite common, that move-construction is effectively performing a swap.\r\n> \r\n> > I would expect this to call `UnlinkRef` on the moved-from value and reset its `m_graph` and `m_index`\r\n> \r\n> That's possible too, and slightly more efficient I guess.\r\n> \r\n> > Otherwise it wouldn't be unlinked until the moved-from variable goes out of scope, no?\r\n> \r\n> Indeed. I don't think that's a problem.\r\n\r\nAfaik the move/swap idiom is only safe if the swapped-to value's dtor doesn't have any interesting ordering requirements or side-effects.\r\n\r\nAs a contrived example, a user may do something like:\r\n```c++\r\nstd::vector<TxGraph::Ref> vec;\r\n\r\nvec.push_back(txgraph->AddTransaction(fee));\r\nauto ref = txgraph->AddTransaction(fee2);\r\n...\r\nref = std::move(vec.back());\r\n```\r\nThe vector now holds the old ref and `UnlinkRef` will not be called until that element is removed. I realize it's allowed to be a \"valid but unspecified state\", but I wouldn't expect a ref to be hanging around.",
      "created_at": "2025-01-09T21:56:14Z",
      "updated_at": "2025-01-09T21:56:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909477090",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909477090"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909492867",
      "pull_request_review_id": 2541025670,
      "id": 1909492867,
      "node_id": "PRRC_kwDOABII585x0IyD",
      "diff_hunk": "@@ -0,0 +1,1193 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a ClusterIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached linearizations. */\n+enum class QualityLevel\n+{\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any m_clusters.\n+     *  This must be the last entry in QualityLevel as m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. Size equals m_mapping.TxCount().\n+     *  This is always kept topological. */\n+    std::vector<ClusterIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and TxGraphImpl). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(ClusterIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply any number of removals from the front of to_remove, popping them off. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster (or be removed),\n+        apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Get a vector of Refs for the ancestors of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetAncestorRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for the descendants of a given Cluster element. */\n+    std::vector<TxGraph::Ref*> GetDescendantRefs(const TxGraphImpl& graph, ClusterIndex idx) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. */\n+    std::vector<TxGraph::Ref*> GetClusterRefs(const TxGraphImpl& graph) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeeFrac GetIndividualFeerate(ClusterIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, ClusterIndex idx, int64_t fee) noexcept;\n+};\n+\n+/** The transaction graph.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Cleanup).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+    std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+    /** Which removals have yet to be applied. */\n+    std::vector<GraphIndex> m_to_remove;\n+    /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+     *  into this. */\n+    std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+    /** Which clusters are to be merged. GroupData::m_cluster_offset indexes into this. */\n+    std::vector<Cluster*> m_group_clusters;\n+    /** Information about the merges to be performed, if known. */\n+    std::optional<std::vector<GroupData>> m_group_data = std::vector<GroupData>{};\n+    /** Total number of transactions in this ClusterSet (explicit + implicit). */\n+    GraphIndex m_txcount{0};\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears. */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (only if cluster != nullptr). */\n+        ClusterIndex index{0};\n+\n+        /** Mark this Locator as missing. */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, ClusterIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object, if any. */\n+        Ref* m_ref;\n+        /** Which Cluster and position therein this Entry appears in. */\n+        Locator m_locator;\n+        /** The chunk feerate of this transaction (if not missing) */\n+        FeeFrac m_chunk_feerate;\n+\n+        /** Check whether this Entry is not present in any Cluster. */\n+        bool IsWiped() const noexcept\n+        {\n+            return !m_locator.IsPresent();\n+        }\n+    };\n+\n+    /** The set of all transactions. GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries that have no IsPresent locators left, and need to be cleaned up. */\n+    std::vector<GraphIndex> m_wiped;\n+\n+public:\n+    /** Construct a new TxGraphImpl. */\n+    explicit TxGraphImpl() noexcept {}\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** Extract a Cluster. */\n+    std::unique_ptr<Cluster> ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster. */\n+    ClusterSetIndex InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = nullptr;\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel). */\n+    void ApplyRemovals() noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting. */\n+    void SplitAll() noexcept;\n+    /** Populate m_group_data based on m_deps_to_add. */\n+    void GroupClusters() noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters. */\n+    void ApplyDependencies() noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeeFrac& feerate) noexcept final;\n+    void RemoveTransaction(Ref& arg) noexcept final;\n+    void AddDependency(Ref& parent, Ref& child) noexcept final;\n+    void SetTransactionFee(Ref&, int64_t fee) noexcept final;\n+    std::vector<Ref*> Cleanup() noexcept final;\n+\n+    bool Exists(const Ref& arg) noexcept final;\n+    FeeFrac GetChunkFeerate(const Ref& arg) noexcept final;\n+    FeeFrac GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg) noexcept final;\n+    GraphIndex GetTransactionCount() noexcept final;\n+};\n+\n+void Cluster::Updated(TxGraphImpl& graph) noexcept\n+{\n+    // Update all the Locators for this Cluster's Entrys.\n+    for (ClusterIndex idx : m_linearization) {\n+        auto& entry = graph.m_entries[m_mapping[idx]];\n+        entry.m_locator.SetPresent(this, idx);\n+    }\n+\n+    // Compute its chunking and store its information in the Entry's m_chunk_feerate.\n+    LinearizationChunking chunking(m_depgraph, m_linearization);\n+    LinearizationIndex lin_idx{0};\n+    // Iterate over the chunks.\n+    for (unsigned chunk_idx = 0; chunk_idx < chunking.NumChunksLeft(); ++chunk_idx) {\n+        auto chunk = chunking.GetChunk(chunk_idx);\n+        // Iterate over the transactions in the linearization, which must match those in chunk.\n+        while (true) {\n+            ClusterIndex idx = m_linearization[lin_idx++];\n+            GraphIndex graph_idx = m_mapping[idx];\n+            auto& entry = graph.m_entries[graph_idx];\n+            entry.m_chunk_feerate = chunk.feerate;\n+            chunk.transactions.Reset(idx);\n+            if (chunk.transactions.None()) break;\n+        }\n+    }\n+}\n+\n+void Cluster::ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept\n+{\n+    // Iterate over the prefix of to_remove that applies to this cluster.\n+    SetType todo;\n+    do {\n+        GraphIndex idx = to_remove.front();\n+        auto& entry = graph.m_entries[idx];\n+        auto& locator = entry.m_locator;\n+        // Stop once we hit an entry that applies to another Cluster.\n+        if (locator.cluster != this) break;\n+        // - Remember it in a set of to-remove ClusterIndexes.\n+        todo.Set(locator.index);\n+        // - Remove from m_mapping.\n+        m_mapping[locator.index] = GraphIndex(-1);\n+        // - Mark it as removed in the Entry's locator.\n+        locator.SetMissing();\n+        if (entry.IsWiped()) graph.m_wiped.push_back(idx);\n+        to_remove = to_remove.subspan(1);\n+        --graph.m_txcount;\n+    } while(!to_remove.empty());\n+\n+    Assume(todo.Any());\n+    // Wipe from the Cluster's DepGraph (this is O(n) regardless of the number of entries\n+    // removed, so we benefit from batching all the removals).\n+    m_depgraph.RemoveTransactions(todo);\n+    m_mapping.resize(m_depgraph.PositionRange());\n+\n+    // Filter removals out of m_linearization.\n+    m_linearization.erase(std::remove_if(\n+        m_linearization.begin(),\n+        m_linearization.end(),\n+        [&](auto pos) { return todo[pos]; }), m_linearization.end());\n+\n+    graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_SPLIT);\n+    Updated(graph);\n+}\n+\n+bool Cluster::Split(TxGraphImpl& graph) noexcept\n+{\n+    // This function can only be called when the Cluster needs splitting.\n+    Assume(m_quality == QualityLevel::NEEDS_SPLIT);\n+    /** Which positions are still left in this Cluster. */\n+    auto todo = m_depgraph.Positions();\n+    /** Mapping from transaction positions in this Cluster to the Cluster where it ends up, and\n+     *  its position therein. */\n+    std::vector<std::pair<Cluster*, ClusterIndex>> remap(m_depgraph.PositionRange());\n+    std::vector<Cluster*> new_clusters;\n+    bool first{true};\n+    // Iterate over the connected components of this Cluster's m_depgraph.\n+    while (todo.Any()) {\n+        auto component = m_depgraph.FindConnectedComponent(todo);\n+        if (first && component == todo) {\n+            // The existing Cluster is an entire component. Leave it be, but update its quality.\n+            graph.SetClusterQuality(m_quality, m_setindex, QualityLevel::NEEDS_RELINEARIZE);\n+            // We need to recompute and cache its chunking.\n+            Updated(graph);\n+            return false;\n+        }\n+        first = false;\n+        // Construct a new Cluster to hold the found component.\n+        auto new_cluster = std::make_unique<Cluster>();\n+        new_clusters.push_back(new_cluster.get());\n+        // Remember that all the component's transaction go to this new Cluster. The positions\n+        // will be determined below, so use -1 for now.\n+        for (auto i : component) {\n+            remap[i] = {new_cluster.get(), ClusterIndex(-1)};\n+        }\n+        graph.InsertCluster(std::move(new_cluster), QualityLevel::NEEDS_RELINEARIZE);\n+        todo -= component;\n+    }\n+    // Redistribute the transactions.\n+    for (auto i : m_linearization) {\n+        /** The cluster which transaction originally in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy the transaction to the new cluster's depgraph, and remember the position.\n+        remap[i].second = new_cluster->m_depgraph.AddTransaction(m_depgraph.FeeRate(i));\n+        // Create new mapping entry.\n+        new_cluster->m_mapping.push_back(m_mapping[i]);\n+        // Create a new linearization entry. As we're only appending transactions, they equal the\n+        // ClusterIndex.\n+        new_cluster->m_linearization.push_back(remap[i].second);\n+    }\n+    // Redistribute the dependencies.\n+    for (auto i : m_linearization) {\n+        /** The cluster transaction in position i is moved to. */\n+        Cluster* new_cluster = remap[i].first;\n+        // Copy its parents, translating positions.\n+        SetType new_parents;\n+        for (auto par : m_depgraph.GetReducedParents(i)) new_parents.Set(remap[par].second);\n+        new_cluster->m_depgraph.AddDependencies(new_parents, remap[i].second);\n+    }\n+    // Update all the Locators of moved transactions.\n+    for (Cluster* new_cluster : new_clusters) {\n+        new_cluster->Updated(graph);\n+    }\n+    // Wipe this Cluster, and return that it needs to be deleted.\n+    m_depgraph = DepGraph<SetType>{};\n+    m_mapping.clear();\n+    m_linearization.clear();\n+    return true;\n+}\n+\n+void Cluster::Merge(TxGraphImpl& graph, Cluster& other) noexcept\n+{\n+    /** Vector to store the positions in this Cluster for each position in other. */\n+    std::vector<ClusterIndex> remap(other.m_depgraph.PositionRange());\n+    // Iterate over all transactions in the other Cluster (the one being absorbed).\n+    for (auto pos : other.m_linearization) {\n+        auto idx = other.m_mapping[pos];\n+        // Copy the transaction into this Cluster, and remember its position.\n+        auto new_pos = m_depgraph.AddTransaction(other.m_depgraph.FeeRate(pos));\n+        remap[pos] = new_pos;\n+        if (new_pos == m_mapping.size()) {\n+            m_mapping.push_back(idx);\n+        } else {\n+            m_mapping[new_pos] = idx;\n+        }\n+        m_linearization.push_back(new_pos);\n+        // Copy the transaction's dependencies, translating them using remap.\n+        SetType parents;\n+        for (auto par : other.m_depgraph.GetReducedParents(pos)) {\n+            parents.Set(remap[par]);\n+        }\n+        m_depgraph.AddDependencies(parents, remap[pos]);\n+        // Update the transaction's Locator. There is no need to call Updated() to update chunk\n+        // feerates, as Updated() will be invoked by Cluster::ApplyDependencies on the resulting\n+        // merged Cluster later anyway).\n+        graph.m_entries[idx].m_locator.SetPresent(this, new_pos);\n+    }\n+    // Purge the other Cluster, now that everything has been moved.\n+    other.m_depgraph = DepGraph<SetType>{};\n+    other.m_linearization.clear();\n+    other.m_mapping.clear();\n+}\n+\n+void Cluster::ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept\n+{\n+    // This function is invoked by TxGraphImpl::ApplyDependencies after merging groups of Clusters\n+    // between which dependencies are added, which simply concatenates their linearizations. Invoke\n+    // PostLinearize, which has the effect that the linearization becomes a merge-sort of the\n+    // constituent linearizations. Do this here rather than in Cluster::Merge, because this\n+    // function is only invoked once per merged Cluster, rather than once per constituent one.\n+    // This concatenation + post-linearization could be replaced with an explicit merge-sort.\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Sort the list of dependencies to apply by child, so those can be applied in batch.\n+    std::sort(to_apply.begin(), to_apply.end(), [](auto& a, auto& b) { return a.second < b.second; });\n+    // Iterate over groups of to-be-added dependencies with the same child.\n+    auto it = to_apply.begin();\n+    while (it != to_apply.end()) {\n+        auto& first_child = graph.m_entries[it->second].m_locator;\n+        ClusterIndex child_idx = first_child.index;\n+        // Iterate over all to-be-added dependencies within that same child, gather the relevant\n+        // parents.\n+        SetType parents;\n+        while (it != to_apply.end()) {\n+            auto& child = graph.m_entries[it->second].m_locator;\n+            auto& parent = graph.m_entries[it->first].m_locator;\n+            Assume(child.cluster == this && parent.cluster == this);\n+            if (child.index != child_idx) break;\n+            parents.Set(parent.index);\n+            ++it;\n+        }\n+        // Push all dependencies to the underlying DepGraph. Note that this is O(N) in the size of\n+        // the cluster, regardless of the number of parents being added, so batching them together\n+        // has a performance benefit.\n+        m_depgraph.AddDependencies(parents, child_idx);\n+    }\n+\n+    // Finally fix the linearization, as the new dependencies may have invalidated the\n+    // linearization, and post-linearize it to fix up the worst problems with it.\n+    FixLinearization(m_depgraph, m_linearization);\n+    PostLinearize(m_depgraph, m_linearization);\n+\n+    // Finally push the changes to graph.m_entries.\n+    Updated(graph);\n+}\n+\n+std::unique_ptr<Cluster> TxGraphImpl::ExtractCluster(QualityLevel quality, ClusterSetIndex setindex) noexcept\n+{\n+    Assume(quality != QualityLevel::NONE);\n+\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    Assume(setindex < quality_clusters.size());\n+\n+    // Extract the Cluster-owning unique_ptr.\n+    std::unique_ptr<Cluster> ret = std::move(quality_clusters[setindex]);\n+    ret->m_quality = QualityLevel::NONE;\n+    ret->m_setindex = ClusterSetIndex(-1);\n+\n+    // Clean up space in quality_cluster.\n+    auto max_setindex = quality_clusters.size() - 1;\n+    if (setindex != max_setindex) {\n+        // If the cluster was not the last element of quality_clusters, move that to take its place.\n+        quality_clusters.back()->m_quality = quality;\n+        quality_clusters.back()->m_setindex = setindex;\n+        quality_clusters[setindex] = std::move(quality_clusters.back());\n+    }\n+    // The last element of quality_clusters is now unused; drop it.\n+    quality_clusters.pop_back();\n+\n+    return ret;\n+}\n+\n+ClusterSetIndex TxGraphImpl::InsertCluster(std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept\n+{\n+    // Cannot insert with quality level NONE (as that would mean not inserted).\n+    Assume(quality != QualityLevel::NONE);\n+    // The passed-in Cluster must not currently be in the TxGraphImpl.\n+    Assume(cluster->m_quality == QualityLevel::NONE);\n+\n+    // Append it at the end of the relevant TxGraphImpl::m_cluster.\n+    auto& quality_clusters = m_clusters[int(quality)];\n+    ClusterSetIndex ret = quality_clusters.size();\n+    cluster->m_quality = quality;\n+    cluster->m_setindex = ret;\n+    quality_clusters.push_back(std::move(cluster));\n+    return ret;\n+}\n+\n+void TxGraphImpl::SetClusterQuality(QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept\n+{\n+    Assume(new_quality != QualityLevel::NONE);\n+\n+    // Don't do anything if the quality did not change.\n+    if (old_quality == new_quality) return;\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(old_quality, old_index);\n+    // And re-insert it where it belongs.\n+    InsertCluster(std::move(cluster_ptr), new_quality);\n+}\n+\n+void TxGraphImpl::DeleteCluster(Cluster& cluster) noexcept\n+{\n+    // Extract the cluster from where it currently resides.\n+    auto cluster_ptr = ExtractCluster(cluster.m_quality, cluster.m_setindex);\n+    // And throw it away.\n+    cluster_ptr.reset();\n+}\n+\n+void TxGraphImpl::ApplyRemovals() noexcept\n+{\n+    auto& to_remove = m_to_remove;\n+    // Skip if there is nothing to remove.\n+    if (to_remove.empty()) return;\n+    // Wipe cached m_group_data, as it may be invalidated by removals.\n+    m_group_data = std::nullopt;\n+    m_group_clusters.clear();\n+    // Group the set of to-be-removed entries by Cluster*.\n+    std::sort(m_to_remove.begin(), m_to_remove.end(), [&](GraphIndex a, GraphIndex b) noexcept {\n+        return std::less{}(m_entries[a].m_locator.cluster, m_entries[b].m_locator.cluster);\n+    });\n+    // Process per Cluster.\n+    std::span to_remove_span{m_to_remove};\n+    while (!to_remove_span.empty()) {\n+        Cluster* cluster = m_entries[to_remove_span.front()].m_locator.cluster;\n+        if (cluster != nullptr) {\n+            // If the first to_remove_span entry's Cluster exists, hand to_remove_span to it, so it\n+            // can pop off whatever applies to it.\n+            cluster->ApplyRemovals(*this, to_remove_span);\n+        } else {\n+            // Otherwise, skip this already-removed entry.\n+            to_remove_span = to_remove_span.subspan(1);\n+        }\n+    }\n+    m_to_remove.clear();\n+}\n+\n+void TxGraphImpl::SwapIndexes(GraphIndex a, GraphIndex b) noexcept\n+{\n+    Assume(a < m_entries.size());\n+    Assume(b < m_entries.size());\n+    // Swap the Entry objects.\n+    std::swap(m_entries[a], m_entries[b]);\n+    // Iterate over both objects.\n+    for (int i = 0; i < 2; ++i) {\n+        GraphIndex idx = i ? b : a;\n+        Entry& entry = m_entries[idx];\n+        // Update linked Ref.\n+        if (entry.m_ref) GetRefIndex(*entry.m_ref) = idx;\n+        // Update the locator. The rest of the Entry information will not change, so no need to\n+        // invoke Cluster::Updated().\n+        Locator& locator = entry.m_locator;\n+        if (locator.IsPresent()) {\n+            locator.cluster->UpdateMapping(locator.index, idx);\n+        }\n+    }\n+}\n+\n+std::vector<TxGraph::Ref*> TxGraphImpl::Cleanup() noexcept\n+{\n+    ApplyDependencies();\n+    std::vector<Ref*> ret;\n+    // Sort the GraphIndex that need to be cleaned up. This groups them (so duplicates can be\n+    // processed just once). They are sorted in reverse, so the last ones get processed first.\n+    // This means earlier-processed GraphIndexes will not move of later-processed ones (which\n+    // might invalidate them).\n+    std::sort(m_wiped.begin(), m_wiped.end(), std::greater{});\n+    GraphIndex last(-1);\n+    for (GraphIndex idx : m_wiped) {\n+        // m_wiped should never contain the same GraphIndex twice (the code below would fail\n+        // if so, because GraphIndexes get invalidated by removing them).\n+        Assume(idx != last);\n+        last = idx;\n+        Entry& entry = m_entries[idx];\n+        // Gather Ref pointers that are being unlinked.\n+        if (entry.m_ref != nullptr) {\n+            ret.push_back(entry.m_ref);\n+            GetRefGraph(*entry.m_ref) = nullptr;\n+            m_entries[idx].m_ref = nullptr;\n+        }\n+        // Verify removed entries don't have anything that could hold a reference back.\n+        Assume(!entry.m_locator.IsPresent());\n+        if (idx != m_entries.size() - 1) SwapIndexes(idx, m_entries.size() - 1);\n+        m_entries.pop_back();\n+    }\n+    m_wiped.clear();\n+    return ret;\n+}\n+\n+void TxGraphImpl::Split(Cluster& cluster) noexcept\n+{\n+    // To split a Cluster, first make sure all removals are applied (as we might need to split\n+    // again afterwards otherwise).\n+    ApplyRemovals();\n+    bool del = cluster.Split(*this);\n+    if (del) {\n+        // Cluster::Split reports whether the Cluster is to be deleted.\n+        DeleteCluster(cluster);\n+    }\n+}\n+\n+void TxGraphImpl::SplitAll() noexcept\n+{\n+    // Before splitting all Cluster, first make sure all removals are applied.\n+    ApplyRemovals();\n+    auto& queue = m_clusters[int(QualityLevel::NEEDS_SPLIT)];\n+    while (!queue.empty()) {\n+        Split(*queue.back().get());\n+    }\n+}\n+\n+void TxGraphImpl::GroupClusters() noexcept\n+{\n+    // Before computing which Clusters need to be merged together, first apply all removals and\n+    // split the Clusters into connected components. If we would group first, we might end up\n+    // with inefficient Clusters which just end up being split again anyway.\n+    SplitAll();\n+\n+    // If the groupings have been computed already, nothing is left to be done.\n+    if (m_group_data.has_value()) return;\n+\n+    /** Annotated clusters: an entry for each Cluster, together with the representative for the\n+     *  partition it is in if known, or with nullptr if not yet known. */\n+    std::vector<std::pair<Cluster*, Cluster*>> an_clusters;\n+    /** Annotated dependencies: an entry for each m_deps_to_apply entry (excluding ones that apply\n+     *  to removed transactions), together with the representative root of the partition of\n+     *  Clusters it applies to. */\n+    std::vector<std::pair<std::pair<GraphIndex, GraphIndex>, Cluster*>> an_deps;\n+\n+    // Construct a an_clusters entry for every parent and child in the to-be-applied dependencies.\n+    for (const auto& [par, chl] : m_deps_to_add) {\n+        auto par_cluster = m_entries[par].m_locator.cluster;\n+        auto chl_cluster = m_entries[chl].m_locator.cluster;\n+        // Skip dependencies for which the parent or child transaction is removed.\n+        if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+        an_clusters.emplace_back(par_cluster, nullptr);\n+        // Do not include a duplicate when parent and child are identical, as it'll be removed\n+        // below anyway.\n+        if (chl_cluster != par_cluster) an_clusters.emplace_back(chl_cluster, nullptr);\n+    }\n+    // Sort and deduplicate an_clusters, so we end up with a sorted list of all involved Clusters\n+    // to which dependencies apply.\n+    std::sort(an_clusters.begin(), an_clusters.end());\n+    an_clusters.erase(std::unique(an_clusters.begin(), an_clusters.end()), an_clusters.end());\n+\n+    // Sort the dependencies by child Cluster.\n+    std::sort(m_deps_to_add.begin(), m_deps_to_add.end(), [&](auto& a, auto& b) noexcept {\n+        auto [_a_par, a_chl] = a;\n+        auto [_b_par, b_chl] = b;\n+        auto a_chl_cluster = m_entries[a_chl].m_locator.cluster;\n+        auto b_chl_cluster = m_entries[b_chl].m_locator.cluster;\n+        return std::less{}(a_chl_cluster, b_chl_cluster);\n+    });\n+\n+    // Run the union-find algorithm to to find partitions of the input Clusters which need to be\n+    // grouped together. See https://en.wikipedia.org/wiki/Disjoint-set_data_structure.\n+    {\n+        /** Each PartitionData entry contains information about a single input Cluster. */\n+        struct PartitionData\n+        {\n+            /** The cluster this holds information for. */\n+            Cluster* cluster;\n+            /** All PartitionData entries belonging to the same partition are organized in a tree.\n+             *  Each element points to its parent, or to itself if it is the root. The root is then\n+             *  a representative for the entire tree, and can be found by walking upwards from any\n+             *  element. */\n+            PartitionData* parent;\n+            /** (only if this is a root, so when parent == this) An upper bound on the height of\n+             *  tree for this partition. */\n+            unsigned rank;\n+        };\n+        /** Information about each input Cluster. Sorted by Cluster* pointer. */\n+        std::vector<PartitionData> partition_data;\n+\n+        /** Given a Cluster, find its corresponding PartitionData. */\n+        auto locate_uf = [&](Cluster* arg) noexcept -> PartitionData* {\n+            auto it = std::lower_bound(partition_data.begin(), partition_data.end(), arg,\n+                                       [](auto& a, Cluster* ptr) noexcept { return a.cluster < ptr; });\n+            Assume(it != partition_data.end());\n+            Assume(it->cluster == arg);\n+            return &*it;\n+        };\n+\n+        /** Given a PartitionData, find the root of the tree it is in (its representative). */\n+        static constexpr auto find_uf = [](PartitionData* data) noexcept -> PartitionData* {\n+            while (data->parent != data) {\n+                // Replace pointers to parents with pointers to grandparents.\n+                // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Finding_set_representatives.\n+                auto par = data->parent;\n+                data->parent = par->parent;\n+                data = par;\n+            }\n+            return data;\n+        };\n+\n+        /** Given two PartitionDatas, union the partitions they are in, and return their\n+         *  representative. */\n+        static constexpr auto union_uf = [](PartitionData* arg1, PartitionData* arg2) noexcept {\n+            // Find the roots of the trees, and bail out if they are already equal (which would\n+            // mean they are in the same partition already).\n+            auto rep1 = find_uf(arg1);\n+            auto rep2 = find_uf(arg2);\n+            if (rep1 == rep2) return rep1;\n+            // Pick the lower-rank root to become a child of the higher-rank one.\n+            // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Union_by_rank.\n+            if (rep1->rank < rep2->rank) std::swap(rep1, rep2);\n+            rep2->parent = rep1;\n+            rep1->rank += (rep1->rank == rep2->rank);\n+            return rep1;\n+        };\n+\n+        // Start by initializing every Cluster as its own singleton partition.\n+        partition_data.resize(an_clusters.size());\n+        for (size_t i = 0; i < an_clusters.size(); ++i) {\n+            partition_data[i].cluster = an_clusters[i].first;\n+            partition_data[i].parent = &partition_data[i];\n+            partition_data[i].rank = 0;\n+        }\n+\n+        // Run through all parent/child pairs in m_deps_to_add, and union the\n+        // the partitions their Clusters are in.\n+        Cluster* last_chl_cluster{nullptr};\n+        PartitionData* last_partition{nullptr};\n+        for (const auto& [par, chl] : m_deps_to_add) {\n+            auto par_cluster = m_entries[par].m_locator.cluster;\n+            auto chl_cluster = m_entries[chl].m_locator.cluster;\n+            // Nothing to do if parent and child are in the same Cluster.\n+            if (par_cluster == chl_cluster) continue;\n+            // Nothing to do if either parent or child transaction is removed already.\n+            if (par_cluster == nullptr || chl_cluster == nullptr) continue;\n+            Assume(par != chl);\n+            if (chl_cluster == last_chl_cluster) {\n+                // If the child Clusters is the same as the previous iteration, union with the\n+                // tree they were in, avoiding the need for another lookup. Note that m_deps_to_add\n+                // is sorted by child Cluster, so batches with the same child are expected.\n+                last_partition = union_uf(locate_uf(par_cluster), last_partition);\n+            } else {\n+                last_chl_cluster = chl_cluster;\n+                last_partition = union_uf(locate_uf(par_cluster), locate_uf(chl_cluster));\n+            }\n+        }\n+\n+        // Populate the an_clusters and an_deps data structures with the list of input Clusters,\n+        // and the input dependencies, annotated with the representative of the Cluster partition\n+        // it applies to.\n+        an_deps.reserve(m_deps_to_add.size());\n+        auto deps_it = m_deps_to_add.begin();\n+        for (size_t i = 0; i < partition_data.size(); ++i) {\n+            auto& data = partition_data[i];\n+            // Find the representative of the partition Cluster i is in, and store it with the\n+            // Cluster.\n+            auto rep = find_uf(&data)->cluster;\n+            an_clusters[i].second = rep;\n+            // Find all dependencies whose child Cluster is Cluster i, and annotate them with rep.\n+            while (deps_it != m_deps_to_add.end()) {\n+                auto [par, chl] = *deps_it;\n+                auto chl_cluster = m_entries[chl].m_locator.cluster;\n+                // Skip dependencies that apply to earlier Clusters (those necessary are for\n+                // deleted transactions, as otherwise we'd have processed them already).\n+                if (!std::less{}(chl_cluster, data.cluster)) {\n+                    if (chl_cluster != data.cluster) break;\n+                    auto par_cluster = m_entries[par].m_locator.cluster;\n+                    // Also filter out dependencies applying to a removed parent.\n+                    if (par_cluster != nullptr) an_deps.emplace_back(*deps_it, rep);\n+                }\n+                ++deps_it;\n+            }\n+        }\n+    }\n+\n+    // Sort both an_clusters and an_deps by representative of the partition they are in, grouping\n+    // all those applying to the same partition together.\n+    std::sort(an_deps.begin(), an_deps.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+    std::sort(an_clusters.begin(), an_clusters.end(), [](auto& a, auto& b) noexcept { return a.second < b.second; });\n+\n+    // Translate the resulting cluster groups to the m_group_data structure.\n+    m_group_data = std::vector<GroupData>{};\n+    m_group_clusters.clear();\n+    m_group_clusters.reserve(an_clusters.size());\n+    m_deps_to_add.clear();\n+    m_deps_to_add.reserve(an_deps.size());\n+    auto an_deps_it = an_deps.begin();\n+    auto an_clusters_it = an_clusters.begin();\n+    while (an_deps_it != an_deps.end()) {\n+        auto rep = an_deps_it->second;\n+        // Create and initialize a new GroupData entry for the partition.\n+        auto& new_entry = m_group_data->emplace_back();\n+        new_entry.m_cluster_offset = m_group_clusters.size();\n+        new_entry.m_cluster_count = 0;\n+        new_entry.m_deps_offset = m_deps_to_add.size();\n+        new_entry.m_deps_count = 0;\n+        // Add all its clusters to it (copying those from an_clusters to m_group_clusters).\n+        while (an_clusters_it != an_clusters.end() && an_clusters_it->second == rep) {\n+            m_group_clusters.push_back(an_clusters_it->first);\n+            ++an_clusters_it;\n+            ++new_entry.m_cluster_count;\n+        }\n+        // Add all its dependencies to it (copying those back from an_deps to m_deps_to_add).\n+        while (an_deps_it != an_deps.end() && an_deps_it->second == rep) {\n+            m_deps_to_add.push_back(an_deps_it->first);\n+            ++an_deps_it;\n+            ++new_entry.m_deps_count;\n+        }\n+    }\n+    Assume(an_deps_it == an_deps.end());\n+    Assume(an_clusters_it == an_clusters.end());\n+}\n+\n+void TxGraphImpl::Merge(std::span<Cluster*> to_merge) noexcept\n+{\n+    Assume(!to_merge.empty());\n+    // Nothing to do if a group consists of just a single Cluster.\n+    if (to_merge.size() == 1) return;\n+\n+    // Move the largest Cluster to the front of to_merge. As all transactions in other to-be-merged\n+    // Clusters will be moved to that one, putting the largest one first minimizes the number of\n+    // moves.\n+    size_t max_size_pos{0};\n+    ClusterIndex max_size = to_merge[max_size_pos]->GetTxCount();\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        ClusterIndex size = to_merge[i]->GetTxCount();\n+        if (size > max_size) {\n+            max_size_pos = i;\n+            max_size = size;\n+        }\n+    }\n+    if (max_size_pos != 0) std::swap(to_merge[0], to_merge[max_size_pos]);\n+\n+    // Merge all further Clusters in the group into the first one, and delete them.\n+    for (size_t i = 1; i < to_merge.size(); ++i) {\n+        to_merge[0]->Merge(*this, *to_merge[i]);\n+        DeleteCluster(*to_merge[i]);\n+    }\n+}\n+\n+void TxGraphImpl::ApplyDependencies() noexcept\n+{\n+    // Compute the groups of to-be-merged Clusters (which also applies all removals, and splits).\n+    GroupClusters();\n+    Assume(m_group_data.has_value());\n+    // Nothing to do if there are no dependencies to be added.\n+    if (m_deps_to_add.empty()) return;\n+\n+    // For each group of to-be-merged Clusters.\n+    Assume(m_group_data.has_value());\n+    for (const auto& group_data : *m_group_data) {\n+        // Invoke Merge() to merge them into a single Cluster.\n+        auto cluster_span = std::span{m_group_clusters}\n+                                .subspan(group_data.m_cluster_offset, group_data.m_cluster_count);\n+        Merge(cluster_span);\n+        // Actually apply all to-be-added dependencies (for each, parent and child belong to the\n+        // same Cluster because of the merging above).\n+        auto deps_span = std::span{m_deps_to_add}\n+                             .subspan(group_data.m_deps_offset, group_data.m_deps_count);\n+        Assume(!deps_span.empty());\n+        const auto& loc = m_entries[deps_span[0].second].m_locator;\n+        Assume(loc.IsPresent());\n+        loc.cluster->ApplyDependencies(*this, deps_span);\n+    }\n+\n+    // Wipe the list of to-be-added dependencies now that they are applied.\n+    m_deps_to_add.clear();\n+    // Also no further Cluster mergings are needed (note that we clear, but don't set to\n+    // std::nullopt, as that would imply the groupings are unknown).\n+    m_group_data->clear();\n+    m_group_clusters.clear();\n+}\n+\n+void Cluster::Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept\n+{\n+    // We can only relinearize Clusters that do not need splitting.\n+    Assume(m_quality == QualityLevel::OPTIMAL || m_quality == QualityLevel::ACCEPTABLE ||\n+           m_quality == QualityLevel::NEEDS_RELINEARIZE);\n+    // No work is required for Clusters which are already optimally linearized.\n+    if (m_quality == QualityLevel::OPTIMAL) return;\n+    // Invoke the actual linearization algorithm (passing in the existing one).\n+    uint64_t rng_seed = graph.m_rng.rand64();\n+    auto [linearization, optimal] = Linearize(m_depgraph, max_iters, rng_seed, m_linearization);\n+    // Postlinearize if the result isn't optimal already. This guarantees (among other things)\n+    // that the chunks of the resulting linearization are all connected.\n+    if (!optimal) PostLinearize(m_depgraph, linearization);\n+    // Update the linearization.\n+    m_linearization = std::move(linearization);\n+    // Update the Cluster's quality.\n+    auto new_quality = optimal ? QualityLevel::OPTIMAL : QualityLevel::ACCEPTABLE;\n+    graph.SetClusterQuality(m_quality, m_setindex, new_quality);\n+    // Update the Entry objects.\n+    Updated(graph);\n+}\n+\n+void TxGraphImpl::MakeAcceptable(Cluster& cluster) noexcept\n+{\n+    // Relinearize the Cluster if needed.\n+    if (cluster.m_quality == QualityLevel::NEEDS_RELINEARIZE) {\n+        cluster.Relinearize(*this, 10000);\n+    }\n+}\n+\n+Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_index) noexcept\n+{\n+    // Create a new transaction in the DepGraph, and remember its position in m_mapping.\n+    auto cluster_idx = m_depgraph.AddTransaction(feerate);\n+    m_mapping.push_back(graph_index);\n+    m_linearization.push_back(cluster_idx);\n+}\n+\n+TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n+{\n+    // Construct a new Ref.\n+    Ref ret;\n+    // Construct a new Entry, and link it with the Ref.\n+    auto idx = m_entries.size();\n+    m_entries.emplace_back();\n+    auto& entry = m_entries.back();\n+    entry.m_ref = &ret;",
      "path": "src/txgraph.cpp",
      "position": 624,
      "original_position": 953,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "0c8dc2323eb1ec34357a807f0860cf0a08a63a75",
      "in_reply_to_id": 1909286865,
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, right, I missed that the move ctor would handle the update. Thanks for explaining.",
      "created_at": "2025-01-09T22:15:14Z",
      "updated_at": "2025-01-09T22:15:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1909492867",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909492867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1715,
      "original_line": 1715,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928741430",
      "pull_request_review_id": 2572752495,
      "id": 1928741430,
      "node_id": "PRRC_kwDOABII585y9kI2",
      "diff_hunk": "@@ -1449,6 +1465,7 @@ Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_in\n TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n {\n     Assume(m_chunkindex_observers == 0 || m_clustersets.size() > 1);\n+    Assume(feerate.size > 0 && uint64_t(feerate.size) <= m_max_cluster_size);",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "6cb99b067cf9028777a2036a8a3240c2511a3caf",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "FYI -- in my rebase of #28676, I'm seeing `tx_pool` fuzz test failures due to this line. Not clear to me whether we should require the caller to enforce the policy requirement that a single tx be below the cluster size limit, or just let the caller discover a changeset is oversized and then reject?",
      "created_at": "2025-01-24T14:10:51Z",
      "updated_at": "2025-01-24T14:10:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1928741430",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928741430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1548,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928775309",
      "pull_request_review_id": 2572810863,
      "id": 1928775309,
      "node_id": "PRRC_kwDOABII585y9saN",
      "diff_hunk": "@@ -1449,6 +1465,7 @@ Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_in\n TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n {\n     Assume(m_chunkindex_observers == 0 || m_clustersets.size() > 1);\n+    Assume(feerate.size > 0 && uint64_t(feerate.size) <= m_max_cluster_size);",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "6cb99b067cf9028777a2036a8a3240c2511a3caf",
      "in_reply_to_id": 1928741430,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Right. That rule exists because the alternative requires existing clusters to be oversized as AddTransaction constructs a singleton cluster instantly. All other forms of oversizedness happen as a result of applying dependencies, which are done lazily.\r\n\r\nI'll think about relaxing this.",
      "created_at": "2025-01-24T14:34:05Z",
      "updated_at": "2025-01-24T14:34:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1928775309",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1928775309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1548,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1929869292",
      "pull_request_review_id": 2574392651,
      "id": 1929869292,
      "node_id": "PRRC_kwDOABII585zB3fs",
      "diff_hunk": "@@ -1449,6 +1465,7 @@ Cluster::Cluster(TxGraphImpl& graph, const FeeFrac& feerate, GraphIndex graph_in\n TxGraph::Ref TxGraphImpl::AddTransaction(const FeeFrac& feerate) noexcept\n {\n     Assume(m_chunkindex_observers == 0 || m_clustersets.size() > 1);\n+    Assume(feerate.size > 0 && uint64_t(feerate.size) <= m_max_cluster_size);",
      "path": "src/txgraph.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "6cb99b067cf9028777a2036a8a3240c2511a3caf",
      "in_reply_to_id": 1928741430,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done, it is now allowed to have individually oversized transactions.",
      "created_at": "2025-01-26T20:45:43Z",
      "updated_at": "2025-01-26T20:45:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1929869292",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1929869292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1548,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1968497012",
      "pull_request_review_id": 2638575710,
      "id": 1968497012,
      "node_id": "PRRC_kwDOABII5851VOF0",
      "diff_hunk": "@@ -1336,6 +1347,38 @@ std::vector<ClusterIndex> MergeLinearizations(const DepGraph<SetType>& depgraph,\n     return ret;\n }\n \n+/** Make linearization topological, retaining its ordering where possible. */\n+template<typename SetType>\n+void FixLinearization(const DepGraph<SetType>& depgraph, Span<DepGraphIndex> linearization) noexcept\n+{\n+    // This algorithm can be summarized as moving every element in the linearization backwards\n+    // until it is placed after all its ancestors.\n+    SetType done;\n+    const auto len = linearization.size();\n+    // Iterate over the elements of linearization from back to front (i is distance from back).\n+    for (DepGraphIndex i = 0; i < len; ++i) {\n+        /** The element at that position. */\n+        DepGraphIndex elem = linearization[len - 1 - i];\n+        /** j represents how far from the back of the linearization elem should be placed. */\n+        DepGraphIndex j = i;\n+        // Figure out which elements need to be moved before elem.\n+        SetType place_before = done & depgraph.Ancestors(elem);\n+        // Find which position to place elem in (updating j), continuously moving the elements\n+        // in between forward.\n+        while (place_before.Any()) {\n+            // j cannot be 0 here; if it was, then there was necessarily nothing earlier which",
      "path": "src/cluster_linearize.h",
      "position": null,
      "original_position": 469,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "e43f6ca3b80cff2e05f88223ee9de3e2fe014243",
      "in_reply_to_id": null,
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n            // j cannot be 0 or less; if it was, then there was necessarily nothing earlier which\r\n```",
      "created_at": "2025-02-24T22:20:13Z",
      "updated_at": "2025-02-24T22:20:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1968497012",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1968497012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1381,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1968500577",
      "pull_request_review_id": 2638581738,
      "id": 1968500577,
      "node_id": "PRRC_kwDOABII5851VO9h",
      "diff_hunk": "@@ -1336,6 +1347,38 @@ std::vector<ClusterIndex> MergeLinearizations(const DepGraph<SetType>& depgraph,\n     return ret;\n }\n \n+/** Make linearization topological, retaining its ordering where possible. */\n+template<typename SetType>\n+void FixLinearization(const DepGraph<SetType>& depgraph, Span<DepGraphIndex> linearization) noexcept\n+{\n+    // This algorithm can be summarized as moving every element in the linearization backwards\n+    // until it is placed after all its ancestors.\n+    SetType done;\n+    const auto len = linearization.size();\n+    // Iterate over the elements of linearization from back to front (i is distance from back).\n+    for (DepGraphIndex i = 0; i < len; ++i) {\n+        /** The element at that position. */\n+        DepGraphIndex elem = linearization[len - 1 - i];\n+        /** j represents how far from the back of the linearization elem should be placed. */\n+        DepGraphIndex j = i;\n+        // Figure out which elements need to be moved before elem.\n+        SetType place_before = done & depgraph.Ancestors(elem);\n+        // Find which position to place elem in (updating j), continuously moving the elements\n+        // in between forward.\n+        while (place_before.Any()) {\n+            // j cannot be 0 here; if it was, then there was necessarily nothing earlier which",
      "path": "src/cluster_linearize.h",
      "position": null,
      "original_position": 469,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "e43f6ca3b80cff2e05f88223ee9de3e2fe014243",
      "in_reply_to_id": 1968497012,
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```\r\nif it was, then there was necessarily nothing earlier which elem needs to be place before anymore, and place_before would be empty.\r\n```\r\nThis comment seems jumbled and hard to understand.  Is it possible to word this better?",
      "created_at": "2025-02-24T22:23:55Z",
      "updated_at": "2025-02-24T22:23:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1968500577",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1968500577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1381,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1968529011",
      "pull_request_review_id": 2638627438,
      "id": 1968529011,
      "node_id": "PRRC_kwDOABII5851VV5z",
      "diff_hunk": "@@ -0,0 +1,2801 @@\n+// Copyright (c) The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txgraph.h>\n+\n+#include <cluster_linearize.h>\n+#include <random.h>\n+#include <util/bitset.h>\n+#include <util/check.h>\n+#include <util/feefrac.h>\n+#include <util/vector.h>\n+\n+#include <compare>\n+#include <memory>\n+#include <set>\n+#include <span>\n+#include <utility>\n+\n+namespace {\n+\n+using namespace cluster_linearize;\n+\n+/** The maximum number of levels a TxGraph can have (0 = main, 1 = staging). */\n+static constexpr int MAX_LEVELS{2};\n+\n+// Forward declare the TxGraph implementation class.\n+class TxGraphImpl;\n+\n+/** Position of a DepGraphIndex within a Cluster::m_linearization. */\n+using LinearizationIndex = uint32_t;\n+/** Position of a Cluster within Graph::ClusterSet::m_clusters. */\n+using ClusterSetIndex = uint32_t;\n+\n+/** Quality levels for cached cluster linearizations. */\n+enum class QualityLevel\n+{\n+    /** This is a singleton cluster consisting of a transaction that individually exceeds the\n+     *  cluster size limit. It cannot be merged with anything. */\n+    OVERSIZED,\n+    /** This cluster may have multiple disconnected components, which are all NEEDS_RELINEARIZE. */\n+    NEEDS_SPLIT,\n+    /** This cluster may have multiple disconnected components, which are all ACCEPTABLE. */\n+    NEEDS_SPLIT_ACCEPTABLE,\n+    /** This cluster may have multiple disconnected components, which are all OPTIMAL. */\n+    NEEDS_SPLIT_OPTIMAL,\n+    /** This cluster has undergone changes that warrant re-linearization. */\n+    NEEDS_RELINEARIZE,\n+    /** The minimal level of linearization has been performed, but it is not known to be optimal. */\n+    ACCEPTABLE,\n+    /** The linearization is known to be optimal. */\n+    OPTIMAL,\n+    /** This cluster is not registered in any ClusterSet::m_clusters.\n+     *  This must be the last entry in QualityLevel as ClusterSet::m_clusters is sized using it. */\n+    NONE,\n+};\n+\n+/** Information about a transaction inside TxGraphImpl::Trim. */\n+struct TrimTxData\n+{\n+    /** Chunk feerate for this transaction. */\n+    FeePerWeight m_chunk_feerate;\n+    /** GraphIndex of the transaction. */\n+    TxGraph::GraphIndex m_index;\n+    /** Number of unmet dependencies this transaction has. -1 if the transaction is included. */\n+    uint32_t m_deps_left;\n+    /** Number of dependencies that apply to this transaction as child. */\n+    uint32_t m_parent_count;\n+    /** Where in deps_by_child those dependencies begin. */\n+    uint32_t m_parent_offset;\n+    /** Number of dependencies that apply to this transaction as parent. */\n+    uint32_t m_children_count;\n+    /** Where in deps_by_parent those dependencies begin. */\n+    uint32_t m_children_offset;\n+    /** Size of the transaction. */\n+    uint32_t m_tx_size;\n+\n+    // As transactions get processed, they get organized into trees which form partitions\n+    // representing the would-be clusters up to that point. The root of each tree is a\n+    // representative for that partition.\n+    // See https://en.wikipedia.org/wiki/Disjoint-set_data_structure.\n+\n+    /** Pointer to another TrimTxData, towards the root of the tree. If this is a root, m_uf_parent\n+     *  is equal to this itself. */\n+    TrimTxData* m_uf_parent;\n+    /** If this is a root, the total number of transactions in the parition. */\n+    uint32_t m_uf_count;\n+    /** If this is a root, the total size of transactions in the partition. */\n+    uint64_t m_uf_size;\n+};\n+\n+/** A grouping of connected transactions inside a TxGraphImpl::ClusterSet. */\n+class Cluster\n+{\n+    friend class TxGraphImpl;\n+    using GraphIndex = TxGraph::GraphIndex;\n+    using SetType = BitSet<MAX_CLUSTER_COUNT_LIMIT>;\n+    /** The DepGraph for this cluster, holding all feerates, and ancestors/descendants. */\n+    DepGraph<SetType> m_depgraph;\n+    /** m_mapping[i] gives the GraphIndex for the position i transaction in m_depgraph. Values for\n+     *  positions i that do not exist in m_depgraph shouldn't ever be accessed and thus don't\n+     *  matter. m_mapping.size() equals m_depgraph.PositionRange(). */\n+    std::vector<GraphIndex> m_mapping;\n+    /** The current linearization of the cluster. m_linearization.size() equals\n+     *  m_depgraph.TxCount(). This is always kept topological. */\n+    std::vector<DepGraphIndex> m_linearization;\n+    /** The quality level of m_linearization. */\n+    QualityLevel m_quality{QualityLevel::NONE};\n+    /** Which position this Cluster has in Graph::ClusterSet::m_clusters[m_quality]. */\n+    ClusterSetIndex m_setindex{ClusterSetIndex(-1)};\n+    /** Which level this Cluster is at in the graph (-1=not inserted, 0=main, 1=staging). */\n+    int m_level{-1};\n+\n+public:\n+    /** Construct an empty Cluster. */\n+    Cluster() noexcept = default;\n+    /** Construct a singleton Cluster. */\n+    explicit Cluster(TxGraphImpl& graph, const FeePerWeight& feerate, GraphIndex graph_index) noexcept;\n+\n+    // Cannot move or copy (would invalidate Cluster* in Locator and ClusterSet). */\n+    Cluster(const Cluster&) = delete;\n+    Cluster& operator=(const Cluster&) = delete;\n+    Cluster(Cluster&&) = delete;\n+    Cluster& operator=(Cluster&&) = delete;\n+\n+    // Generic helper functions.\n+\n+    /** Whether the linearization of this Cluster can be exposed. */\n+    bool IsAcceptable(bool after_split = false) const noexcept\n+    {\n+        return m_quality == QualityLevel::ACCEPTABLE || m_quality == QualityLevel::OPTIMAL ||\n+               (after_split && (m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE ||\n+                                m_quality == QualityLevel::NEEDS_SPLIT_OPTIMAL));\n+    }\n+    /** Whether the linearization of this Cluster is optimal. */\n+    bool IsOptimal(bool after_split = false) const noexcept\n+    {\n+        return m_quality == QualityLevel::OPTIMAL ||\n+               (after_split && m_quality == QualityLevel::NEEDS_SPLIT_OPTIMAL);\n+    }\n+    /** Whether this cluster is oversized (just due to the size of its transaction(s), not due to\n+     *  dependencies that are yet to be added. */\n+    bool IsOversized() const noexcept { return m_quality == QualityLevel::OVERSIZED; }\n+    /** Whether this cluster requires splitting. */\n+    bool NeedsSplitting() const noexcept\n+    {\n+        return m_quality == QualityLevel::NEEDS_SPLIT ||\n+               m_quality == QualityLevel::NEEDS_SPLIT_OPTIMAL ||\n+               m_quality == QualityLevel::NEEDS_SPLIT_ACCEPTABLE;\n+    }\n+    /** Get the number of transactions in this Cluster. */\n+    LinearizationIndex GetTxCount() const noexcept { return m_linearization.size(); }\n+    /** Get the total size of the transactions in this Cluster. */\n+    uint64_t GetTxSize() const noexcept;\n+    /** Given a DepGraphIndex into this Cluster, find the corresponding GraphIndex. */\n+    GraphIndex GetClusterEntry(DepGraphIndex index) const noexcept { return m_mapping[index]; }\n+    /** Only called by Graph::SwapIndexes. */\n+    void UpdateMapping(DepGraphIndex cluster_idx, GraphIndex graph_idx) noexcept { m_mapping[cluster_idx] = graph_idx; }\n+    /** Push changes to Cluster and its linearization to the TxGraphImpl Entry objects. */\n+    void Updated(TxGraphImpl& graph) noexcept;\n+    /** Create a copy of this Cluster, returning a pointer to it (used by PullIn). */\n+    Cluster* CopyTo(TxGraphImpl& graph, int to_level) const noexcept;\n+    /** Get the list of Clusters that conflict with this one (at the level below this Cluster). */\n+    void GetConflicts(const TxGraphImpl& graph, std::vector<Cluster*>& out) const noexcept;\n+    /** Mark all the Entry objects belonging to this Cluster as missing. The Cluster must be\n+     *  deleted immediately after. */\n+    void MakeTransactionsMissing(TxGraphImpl& graph) noexcept;\n+    /** Remove all transactions from a Cluster. */\n+    void Clear(TxGraphImpl& graph) noexcept;\n+    /** Change a Cluster's level from level to level-1. */\n+    void LevelDown(TxGraphImpl& graph) noexcept;\n+\n+    // Functions that implement the Cluster-specific side of internal TxGraphImpl mutations.\n+\n+    /** Apply all removals from the front of to_remove that apply to this Cluster, popping them\n+     *  off. These must be at least one such entry. */\n+    void ApplyRemovals(TxGraphImpl& graph, std::span<GraphIndex>& to_remove) noexcept;\n+    /** Split this cluster (must have a NEEDS_SPLIT* quality). Returns whether to delete this\n+     *  Cluster afterwards. */\n+    [[nodiscard]] bool Split(TxGraphImpl& graph) noexcept;\n+    /** Move all transactions from cluster to *this (as separate components). */\n+    void Merge(TxGraphImpl& graph, Cluster& cluster) noexcept;\n+    /** Given a span of (parent, child) pairs that all belong to this Cluster, apply them. */\n+    void ApplyDependencies(TxGraphImpl& graph, std::span<std::pair<GraphIndex, GraphIndex>> to_apply) noexcept;\n+    /** Improve the linearization of this Cluster. */\n+    void Relinearize(TxGraphImpl& graph, uint64_t max_iters) noexcept;\n+    /** For every chunk in the cluster, append its FeeFrac to ret. */\n+    void AppendChunkFeerates(std::vector<FeeFrac>& ret) const noexcept;\n+    /** Add a TrimTxData entry for every transaction in the Cluster to ret. Implicit dependencies\n+     *  between consecutive transactions in the linearization are added to deps. Return the\n+     *  Cluster's combined transaction size. */\n+    uint64_t AppendTrimData(std::vector<TrimTxData>& ret, std::vector<std::pair<GraphIndex, GraphIndex>>& deps) const noexcept;\n+\n+    // Functions that implement the Cluster-specific side of public TxGraph functions.\n+\n+    /** Process elements from the front of args that apply to this cluster, and append Refs for the\n+     *  union of their ancestors to output. */\n+    void GetAncestorRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    /** Process elements from the front of args that apply to this cluster, and append Refs for the\n+     *  union of their descendants to output. */\n+    void GetDescendantRefs(const TxGraphImpl& graph, std::span<std::pair<Cluster*, DepGraphIndex>>& args, std::vector<TxGraph::Ref*>& output) noexcept;\n+    /** Get a vector of Refs for all elements of this Cluster, in linearization order. Returns\n+     *  the range ends at the end of the cluster. */\n+    bool GetClusterRefs(TxGraphImpl& graph, std::span<TxGraph::Ref*> range, LinearizationIndex start_pos) noexcept;\n+    /** Get the individual transaction feerate of a Cluster element. */\n+    FeePerWeight GetIndividualFeerate(DepGraphIndex idx) noexcept;\n+    /** Modify the fee of a Cluster element. */\n+    void SetFee(TxGraphImpl& graph, DepGraphIndex idx, int64_t fee) noexcept;\n+\n+    // Debugging functions.\n+\n+    void SanityCheck(const TxGraphImpl& graph, int level) const;\n+};\n+\n+/** The transaction graph, including staged changes.\n+ *\n+ * The overall design of the data structure consists of 3 interlinked representations:\n+ * - The transactions (held as a vector of TxGraphImpl::Entry inside TxGraphImpl).\n+ * - The clusters (Cluster objects in per-quality vectors inside TxGraphImpl::ClusterSet).\n+ * - The Refs (TxGraph::Ref objects, held externally by users of the TxGraph class)\n+ *\n+ * The Clusters are kept in one or two ClusterSet objects, one for the \"main\" graph, and one for\n+ * the proposed changes (\"staging\"). If a transaction occurs in both, they share the same Entry,\n+ * but there will be a separate Cluster per graph.\n+ *\n+ * Clusters and Refs contain the index of the Entry objects they refer to, and the Entry objects\n+ * refer back to the Clusters and Refs the corresponding transaction is contained in.\n+ *\n+ * While redundant, this permits moving all of them independently, without invalidating things\n+ * or costly iteration to fix up everything:\n+ * - Entry objects can be moved to fill holes left by removed transactions in the Entry vector\n+ *   (see TxGraphImpl::Compact).\n+ * - Clusters can be rewritten continuously (removals can cause them to split, new dependencies\n+ *   can cause them to be merged).\n+ * - Ref objects can be held outside the class, while permitting them to be moved around, and\n+ *   inherited from.\n+ */\n+class TxGraphImpl final : public TxGraph\n+{\n+    friend class Cluster;\n+    friend class BlockBuilderImpl;\n+private:\n+    /** Internal RNG. */\n+    FastRandomContext m_rng;\n+    /** This TxGraphImpl's maximum cluster count limit. */\n+    const DepGraphIndex m_max_cluster_count;\n+    /** This TxGraphImpl's maximum cluster size limit. */\n+    const uint64_t m_max_cluster_size;\n+\n+    /** Information about one group of Clusters to be merged. */\n+    struct GroupEntry\n+    {\n+        /** Where the clusters to be merged start in m_group_clusters. */\n+        uint32_t m_cluster_offset;\n+        /** How many clusters to merge. */\n+        uint32_t m_cluster_count;\n+        /** Where the dependencies for this cluster group in m_deps_to_add start. */\n+        uint32_t m_deps_offset;\n+        /** How many dependencies to add. */\n+        uint32_t m_deps_count;\n+    };\n+\n+    /** Information about all groups of Clusters to be merged. */\n+    struct GroupData\n+    {\n+        /** The groups of Clusters to be merged. */\n+        std::vector<GroupEntry> m_groups;\n+        /** Which clusters are to be merged. GroupEntry::m_cluster_offset indexes into this. */\n+        std::vector<Cluster*> m_group_clusters;\n+        /** Whether at least one of the groups cannot be applied because it would result in a\n+         *  Cluster that violates the cluster count limit. */\n+        bool m_group_oversized;\n+    };\n+\n+    /** The collection of all Clusters in main or staged. */\n+    struct ClusterSet\n+    {\n+        /** The vectors of clusters, one vector per quality level. ClusterSetIndex indexes into each. */\n+        std::vector<std::unique_ptr<Cluster>> m_clusters[int(QualityLevel::NONE)];\n+        /** Which removals have yet to be applied. */\n+        std::vector<GraphIndex> m_to_remove;\n+        /** Which dependencies are to be added ((parent,child) pairs). GroupData::m_deps_offset indexes\n+         *  into this. */\n+        std::vector<std::pair<GraphIndex, GraphIndex>> m_deps_to_add;\n+        /** Information about the merges to be performed, if known. */\n+        std::optional<GroupData> m_group_data = GroupData{};\n+        /** Which entries were removed in this ClusterSet (so they can be wiped on abort). */\n+        std::vector<GraphIndex> m_removed;\n+        /** Total number of transactions in this graph (sum of all transaction counts in all\n+         *  Clusters, and for staging also those inherited from the main ClusterSet). */\n+        GraphIndex m_txcount{0};\n+        /** Total number of individually oversized transactions in the graph. */\n+        GraphIndex m_txcount_oversized{0};\n+        /** Whether this graph is oversized (if known). This roughly matches\n+         *  m_group_data->m_group_oversized || (m_txcount_oversized > 0), but may be known even if\n+         *  m_group_data is not. */\n+        std::optional<bool> m_oversized{false};\n+    };\n+\n+    /** The ClusterSets in this TxGraphImpl. Has exactly 1 (main) or exactly 2 elements (main and staged). */\n+    std::vector<ClusterSet> m_clustersets;\n+\n+    /** Information about a chunk in the main graph. */\n+    struct ChunkData\n+    {\n+        /** The Entry which is the last transaction of the chunk. */\n+        mutable GraphIndex m_graph_index;\n+        /** How many transactions the chunk contains (-1 = singleton tail of cluster). */\n+        LinearizationIndex m_chunk_count;\n+\n+        ChunkData(GraphIndex graph_index, LinearizationIndex chunk_count) noexcept :\n+            m_graph_index{graph_index}, m_chunk_count{chunk_count} {}\n+    };\n+\n+    /** Comparator for ChunkData objects in mining order. */\n+    class ChunkOrder\n+    {\n+        const TxGraphImpl* const m_graph;\n+    public:\n+        explicit ChunkOrder(const TxGraphImpl* graph) : m_graph(graph) {}\n+\n+        bool operator()(const ChunkData& a, const ChunkData& b) const noexcept\n+        {\n+            const auto& a_entry = m_graph->m_entries[a.m_graph_index];\n+            const auto& b_entry = m_graph->m_entries[b.m_graph_index];\n+            // First sort from high feerate to low feerate.\n+            auto cmp_feerate = FeeRateCompare(a_entry.m_main_chunk_feerate, b_entry.m_main_chunk_feerate);\n+            if (cmp_feerate != 0) return cmp_feerate > 0;\n+            // Then sort by increasing Cluster pointer.\n+            Assume(a_entry.m_locator[0].IsPresent());\n+            Assume(b_entry.m_locator[0].IsPresent());\n+            if (a_entry.m_locator[0].cluster != b_entry.m_locator[0].cluster) {\n+                return std::less{}(a_entry.m_locator[0].cluster, b_entry.m_locator[0].cluster);\n+            }\n+            // Finally sort by position within the Cluster.\n+            return a_entry.m_main_lin_index < b_entry.m_main_lin_index;\n+        }\n+    };\n+\n+    /** Definition for the mining index type. */\n+    using ChunkIndex = std::set<ChunkData, ChunkOrder>;\n+\n+    /** Index of ChunkData objects. */\n+    ChunkIndex m_chunkindex;\n+    /** Number of index-observing objects in existence (BlockBuilderImpl). */\n+    size_t m_chunkindex_observers{0};\n+    /** Cache of discarded ChunkIndex node handles. */\n+    std::vector<ChunkIndex::node_type> m_chunkindex_discarded;\n+\n+    /** A Locator that describes whether, where, and in which Cluster an Entry appears.\n+     *  Every Entry has MAX_LEVELS locators, as it may appear in one Cluster per level.\n+     *\n+     *  Each level of a Locator is in one of three states:\n+     *\n+     *  - (P)resent: actually occurs in a Cluster at that level.\n+     *\n+     *  - (M)issing:\n+     *    - In the main graph:    the transaction does not exist in main.\n+     *    - In the staging graph: the transaction's existence is the same as in main. If it doesn't\n+     *                            exist in main, (M) in staging means it does not exist there\n+     *                            either. If it does exist in main, (M) in staging means the\n+     *                            cluster it is in has not been modified in staging, and thus the\n+     *                            transaction implicitly exists in staging too (without explicit\n+     *                            Cluster object; see PullIn() to create it in staging too).\n+     *\n+     *  - (R)emoved: only possible in staging; it means the transaction exists in main, but is\n+     *               removed in staging.\n+     *\n+     * The following combinations are possible:\n+     * - (M,M): the transaction doesn't exist in either graph.\n+     * - (P,M): the transaction exists in both, but only exists explicitly in a Cluster object in\n+     *          main. Its existence in staging is inherited from main.\n+     * - (P,P): the transaction exists in both, and is materialized in both. Thus, the clusters\n+     *          and/or their linearizations may be different in main and staging.\n+     * - (M,P): the transaction is added in staging, and does not exist in main.\n+     * - (P,R): the transaction exists in main, but is removed in staging.\n+     *\n+     * When staging does not exist, only (M,M) and (P,M) are possible.\n+     */\n+    struct Locator\n+    {\n+        /** Which Cluster the Entry appears in (nullptr = missing). */\n+        Cluster* cluster{nullptr};\n+        /** Where in the Cluster it appears (if cluster == nullptr: 0 = missing, -1 = removed). */\n+        DepGraphIndex index{0};\n+\n+        /** Mark this Locator as missing (= same as lower level, or non-existing if level 0). */\n+        void SetMissing() noexcept { cluster = nullptr; index = 0; }\n+        /** Mark this Locator as removed (not allowed in level 0). */\n+        void SetRemoved() noexcept { cluster = nullptr; index = DepGraphIndex(-1); }\n+        /** Mark this Locator as present, in the specified Cluster. */\n+        void SetPresent(Cluster* c, DepGraphIndex i) noexcept { cluster = c; index = i; }\n+        /** Check if this Locator is missing. */\n+        bool IsMissing() const noexcept { return cluster == nullptr && index == 0; }\n+        /** Check if this Locator is removed. */\n+        bool IsRemoved() const noexcept { return cluster == nullptr && index == DepGraphIndex(-1); }\n+        /** Check if this Locator is present (in some Cluster). */\n+        bool IsPresent() const noexcept { return cluster != nullptr; }\n+    };\n+\n+    /** A class of objects held internally in TxGraphImpl, with information about a single\n+     *  transaction. */\n+    struct Entry\n+    {\n+        /** Pointer to the corresponding Ref object if any, or nullptr if unlinked. */\n+        Ref* m_ref{nullptr};\n+        /** Iterator to the corresponding ChunkData, if any. */\n+        ChunkIndex::iterator m_chunkindex_iterator;\n+        /** Which Cluster and position therein this Entry appears in. ([0] = main, [1] = staged). */\n+        Locator m_locator[MAX_LEVELS];\n+        /** The chunk feerate of this transaction in main (if present in m_locator[0]). */\n+        FeePerWeight m_main_chunk_feerate;\n+        /** The position this transaction has in the main linearization (if present). */\n+        LinearizationIndex m_main_lin_index;\n+    };\n+\n+    /** The set of all transactions (in all levels combined). GraphIndex values index into this. */\n+    std::vector<Entry> m_entries;\n+\n+    /** Set of Entries which have no linked Ref anymore. */\n+    std::vector<GraphIndex> m_unlinked;\n+\n+public:\n+    /** Construct a new TxGraphImpl with the specified limits. */\n+    explicit TxGraphImpl(DepGraphIndex max_cluster_count, uint64_t max_cluster_size) noexcept :\n+        m_max_cluster_count(max_cluster_count),\n+        m_max_cluster_size(max_cluster_size),\n+        m_chunkindex(ChunkOrder(this))\n+    {\n+        Assume(max_cluster_count >= 1);\n+        Assume(max_cluster_count <= MAX_CLUSTER_COUNT_LIMIT);\n+        m_clustersets.reserve(MAX_LEVELS);\n+        m_clustersets.emplace_back();\n+    }\n+\n+    // Cannot move or copy (would invalidate TxGraphImpl* in Ref, MiningOrder, EvictionOrder).\n+    TxGraphImpl(const TxGraphImpl&) = delete;\n+    TxGraphImpl& operator=(const TxGraphImpl&) = delete;\n+    TxGraphImpl(TxGraphImpl&&) = delete;\n+    TxGraphImpl& operator=(TxGraphImpl&&) = delete;\n+\n+    // Simple helper functions.\n+\n+    /** Swap the Entrys referred to by a and b. */\n+    void SwapIndexes(GraphIndex a, GraphIndex b) noexcept;\n+    /** If idx exists in the specified level ClusterSet (explicitly, or in the level below and not\n+    *   removed), return the Cluster it is in. Otherwise, return nullptr. */\n+    Cluster* FindCluster(GraphIndex idx, int level) const noexcept;\n+    /** Extract a Cluster from its ClusterSet. */\n+    std::unique_ptr<Cluster> ExtractCluster(int level, QualityLevel quality, ClusterSetIndex setindex) noexcept;\n+    /** Delete a Cluster. */\n+    void DeleteCluster(Cluster& cluster) noexcept;\n+    /** Insert a Cluster into its ClusterSet. */\n+    ClusterSetIndex InsertCluster(int level, std::unique_ptr<Cluster>&& cluster, QualityLevel quality) noexcept;\n+    /** Change the QualityLevel of a Cluster (identified by old_quality and old_index). */\n+    void SetClusterQuality(int level, QualityLevel old_quality, ClusterSetIndex old_index, QualityLevel new_quality) noexcept;\n+    /** Make a transaction not exist at a specified level. It must currently exist there. */\n+    void ClearLocator(int level, GraphIndex index, bool oversized_tx) noexcept;\n+    /** Find which Clusters conflict with the top level. */\n+    std::vector<Cluster*> GetConflicts() const noexcept;\n+    /** Clear an Entry's ChunkData. */\n+    void ClearChunkData(Entry& entry) noexcept;\n+    /** Give an Entry a ChunkData object. */\n+    void CreateChunkData(GraphIndex idx, LinearizationIndex chunk_count) noexcept;\n+\n+    // Functions for handling Refs.\n+\n+    /** Only called by Ref's move constructor/assignment to update Ref locations. */\n+    void UpdateRef(GraphIndex idx, Ref& new_location) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        entry.m_ref = &new_location;\n+    }\n+\n+    /** Only called by Ref::~Ref to unlink Refs, and Ref's move assignment. */\n+    void UnlinkRef(GraphIndex idx) noexcept final\n+    {\n+        auto& entry = m_entries[idx];\n+        Assume(entry.m_ref != nullptr);\n+        Assume(m_chunkindex_observers == 0 || !entry.m_locator[0].IsPresent());\n+        entry.m_ref = nullptr;\n+        // Mark the transaction as to be removed in all levels where it explicitly or implicitly\n+        // exists.\n+        bool exists_anywhere{false};\n+        bool exists{false};\n+        for (size_t level = 0; level < m_clustersets.size(); ++level) {\n+            if (entry.m_locator[level].IsPresent()) {\n+                exists_anywhere = true;\n+                exists = true;\n+            } else if (entry.m_locator[level].IsRemoved()) {\n+                exists = false;\n+            }\n+            if (exists) {\n+                m_clustersets[level].m_to_remove.push_back(idx);\n+                // Force recomputation of grouping data.\n+                m_clustersets[level].m_group_data = std::nullopt;\n+                // Do not wipe the oversized state of a lower level graph (main) if a higher level\n+                // one (staging) exists. The reason for this is that the alternative would mean that\n+                // cluster merges may need to be applied to a formerly-oversized main graph while\n+                // staging exists (to satisfy chunk feerate queries into main, for example), and such\n+                // merges could conflict with pulls of some of their constituents into staging.\n+                if (level == m_clustersets.size() - 1 && m_clustersets[level].m_oversized == true) {\n+                    m_clustersets[level].m_oversized = std::nullopt;\n+                }\n+            }\n+        }\n+        m_unlinked.push_back(idx);\n+        if (!exists_anywhere) Compact();\n+    }\n+\n+    // Functions related to various normalization/application steps.\n+    /** Get rid of unlinked Entry objects in m_entries, if possible (this changes the GraphIndex\n+     *  values for remaining Entrys, so this only does something when no to-be-applied operations\n+     *  or staged removals referring to GraphIndexes remain). */\n+    void Compact() noexcept;\n+    /** If cluster is not in to_level, copy it there, and return a pointer to it. This has no\n+    *   effect if to_level is 0 (main), but for to_level=1 (staging) this modifies the locators of\n+    *   its transactions from inherited (P,M) to explicit (P,P). */\n+    Cluster* PullIn(Cluster* cluster, int to_level) noexcept;\n+    /** Apply all removals queued up in m_to_remove to the relevant Clusters (which get a\n+     *  NEEDS_SPLIT* QualityLevel) up to the specified level. */\n+    void ApplyRemovals(int up_to_level) noexcept;\n+    /** Split an individual cluster. */\n+    void Split(Cluster& cluster) noexcept;\n+    /** Split all clusters that need splitting up to the specified level. */\n+    void SplitAll(int up_to_level) noexcept;\n+    /** Populate m_group_data based on m_deps_to_add in the specified level. */\n+    void GroupClusters(int level) noexcept;\n+    /** Merge the specified clusters. */\n+    void Merge(std::span<Cluster*> to_merge) noexcept;\n+    /** Apply all m_deps_to_add to the relevant Clusters in the specified level. */\n+    void ApplyDependencies(int level) noexcept;\n+    /** Make a specified Cluster have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAcceptable(Cluster& cluster) noexcept;\n+    /** Make all Clusters at the specified level have quality ACCEPTABLE or OPTIMAL. */\n+    void MakeAllAcceptable(int level) noexcept;\n+\n+    // Implementations for the public TxGraph interface.\n+\n+    Ref AddTransaction(const FeePerWeight& feerate) noexcept final;\n+    void RemoveTransaction(const Ref& arg) noexcept final;\n+    void AddDependency(const Ref& parent, const Ref& child) noexcept final;\n+    void SetTransactionFee(const Ref&, int64_t fee) noexcept final;\n+\n+    void DoWork() noexcept final;\n+\n+    void StartStaging() noexcept final;\n+    void CommitStaging() noexcept final;\n+    void AbortStaging() noexcept final;\n+    bool HaveStaging() const noexcept final { return m_clustersets.size() > 1; }\n+\n+    bool Exists(const Ref& arg, bool main_only = false) noexcept final;\n+    FeePerWeight GetMainChunkFeerate(const Ref& arg) noexcept final;\n+    FeePerWeight GetIndividualFeerate(const Ref& arg) noexcept final;\n+    std::vector<Ref*> GetCluster(const Ref& arg, bool main_only = false) noexcept final;\n+    std::vector<Ref*> GetAncestors(const Ref& arg, bool main_only = false) noexcept final;\n+    std::vector<Ref*> GetDescendants(const Ref& arg, bool main_only = false) noexcept final;\n+    std::vector<Ref*> GetAncestorsUnion(std::span<const Ref* const> args, bool main_only = false) noexcept final;\n+    std::vector<Ref*> GetDescendantsUnion(std::span<const Ref* const> args, bool main_only = false) noexcept final;\n+    GraphIndex GetTransactionCount(bool main_only = false) noexcept final;\n+    bool IsOversized(bool main_only = false) noexcept final;\n+    std::strong_ordering CompareMainOrder(const Ref& a, const Ref& b) noexcept final;\n+    GraphIndex CountDistinctClusters(std::span<const Ref* const> refs, bool main_only = false) noexcept final;\n+    std::pair<std::vector<FeeFrac>, std::vector<FeeFrac>> GetMainStagingDiagrams() noexcept final;\n+    std::vector<Ref*> Trim() noexcept final;\n+\n+    std::unique_ptr<BlockBuilder> GetBlockBuilder() noexcept final;\n+    std::pair<std::vector<Ref*>, FeePerWeight> GetWorstMainChunk() noexcept final;\n+\n+    void SanityCheck() const final;\n+};\n+\n+/** Implementation of the TxGraph::BlockBuilder interface. */\n+class BlockBuilderImpl final : public TxGraph::BlockBuilder\n+{\n+    /** Which TxGraphImpl this object is doing block building for. It will have its\n+     *  m_chunkindex_observers incremented as long as this BlockBuilderImpl exists. */\n+    TxGraphImpl* const m_graph;\n+    /** Vector for actual storage pointed to by TxGraph::BlockBuilder::m_current_chunk. */\n+    std::vector<TxGraph::Ref*> m_chunkdata;\n+    /** Which cluster the current chunk belongs to, so we can exclude further transaction from it\n+     *  when that chunk is skipped, or std::nullopt if we're at the end of the current cluster. */\n+    std::optional<Cluster*> m_remaining_cluster{nullptr};\n+    /** Clusters which we're not including further transactions from. */\n+    std::set<Cluster*> m_excluded_clusters;\n+    /** Iterator to the next chunk (after the current one) in the chunk index. end() if nothing\n+     *  further remains. */\n+    TxGraphImpl::ChunkIndex::const_iterator m_next_iter;\n+\n+    /** Fill in information about the current chunk in m_current_chunk, m_chunkdata,\n+     *  m_remaining_cluster, and update m_next_iter. */\n+    void Next() noexcept;\n+\n+public:\n+    /** Construct a new BlockBuilderImpl to build blocks for the provided graph. */\n+    BlockBuilderImpl(TxGraphImpl& graph) noexcept;\n+\n+    // Implement the public interface.\n+    ~BlockBuilderImpl() final;\n+    void Include() noexcept final;\n+    void Skip() noexcept final;\n+};\n+\n+void TxGraphImpl::ClearChunkData(Entry& entry) noexcept\n+{\n+    if (entry.m_chunkindex_iterator != m_chunkindex.end()) {\n+        Assume(m_chunkindex_observers == 0);\n+        // If the Entry has a non-empty m_chunkindex_iterator, extract it, and move the handle\n+        // to the cache of discarded chunkindex entries.\n+        m_chunkindex_discarded.emplace_back(m_chunkindex.extract(entry.m_chunkindex_iterator));\n+        entry.m_chunkindex_iterator = m_chunkindex.end();\n+    }\n+}\n+\n+void TxGraphImpl::CreateChunkData(GraphIndex idx, LinearizationIndex chunk_count) noexcept\n+{\n+    auto& entry = m_entries[idx];\n+    if (!m_chunkindex_discarded.empty()) {\n+        // Reuse an discarded node handle.",
      "path": "src/txgraph.cpp",
      "position": 331,
      "original_position": 620,
      "commit_id": "0ee96747f27ba32199cc048cbb553035efa1d174",
      "original_commit_id": "e43f6ca3b80cff2e05f88223ee9de3e2fe014243",
      "in_reply_to_id": null,
      "user": {
        "login": "yancyribbens",
        "id": 817736,
        "node_id": "MDQ6VXNlcjgxNzczNg==",
        "avatar_url": "https://avatars.githubusercontent.com/u/817736?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yancyribbens",
        "html_url": "https://github.com/yancyribbens",
        "followers_url": "https://api.github.com/users/yancyribbens/followers",
        "following_url": "https://api.github.com/users/yancyribbens/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yancyribbens/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yancyribbens/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yancyribbens/subscriptions",
        "organizations_url": "https://api.github.com/users/yancyribbens/orgs",
        "repos_url": "https://api.github.com/users/yancyribbens/repos",
        "events_url": "https://api.github.com/users/yancyribbens/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yancyribbens/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        // Reuse a discarded node handle.\r\n```",
      "created_at": "2025-02-24T22:48:56Z",
      "updated_at": "2025-02-24T22:48:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31553#discussion_r1968529011",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1968529011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31553"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 675,
      "original_line": 675,
      "side": "RIGHT"
    }
  ]
}