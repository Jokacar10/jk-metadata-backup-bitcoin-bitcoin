{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080",
    "id": 2396781348,
    "node_id": "PR_kwDOABII586O2_sk",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32080",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32080.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32080.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/0a1d149112af2835166e3d6e62a925df2e416e4e",
    "number": 32080,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "OP_CHECKCONTRACTVERIFY",
    "user": {
      "login": "bigspider",
      "id": 6681844,
      "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bigspider",
      "html_url": "https://github.com/bigspider",
      "followers_url": "https://api.github.com/users/bigspider/followers",
      "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
      "organizations_url": "https://api.github.com/users/bigspider/orgs",
      "repos_url": "https://api.github.com/users/bigspider/repos",
      "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/bigspider/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This is a first draft implementation of the `OP_CHECKCONTRACTVERIFY` (`CCV`) opcode.\r\n\r\n`CCV` enables to build Script-based state machines that span across multiple transactions, by providing an ergonomic tool to commit to - and introspect - the Script and possibly some _data_ that is committed inside inputs or outputs.\r\n\r\nRelated to this PR:\r\n- [Draft BIP specifications](https://github.com/bitcoin/bips/pull/1793).\r\n- [Post on delving bitcoin](https://delvingbitcoin.org/t/op-checkcontractverify-and-its-amount-semantic/1527) focusing on the amount logic of the opcode.\r\n\r\n`CCV` is a general purpose opcode to build state machines based on UTXO; therefore it is not strictly tied to any specific application.\r\n\r\nHowever, as vaults are probably the simplest application of such state machines, the PR also includes a functional test for a very simple (but practical) vault construction, only using `CCV`. More feature-complete vaults are achievable in combinations with other opcodes.\r\n\r\nThis PR does not contain activation logic, and can't be merged as-is, since it would make the opcode immediately active.\r\n\r\nI'd like encourage limiting discussions to the implementation, while specs can be discussed in the BIP draft PR and external places like Delving Bitcoin.\r\n\r\n## Challenges with the cross-input amount logic\r\n\r\nA challenge in implementing `CCV` is the cross-input amount semantic: the opcode adds restrictions on the output amounts that are inherently transaction-wide.\r\n\r\nThis difficulty seems to be common to other possible changes in the working of the Script interpreter (including without new soft forks):\r\n- adding batch validation for Schnorr signatures seems to require a similar shared state, like the `BatchSchnorrVerifier` class using a mutex in this [experimental PR](https://github.com/bitcoin/bitcoin/pull/29491). Cross-Input Signature Aggregation would also have the same nature.\r\n- [OP_TXHASH](https://github.com/bitcoin-inquisition/bitcoin/pull/51) used a transaction-wide `TxHashCache`, guarded by a mutex.\r\n- [OP_VAULT](https://github.com/bitcoin/bitcoin/pull/26857) also has some _deferred checks_ based on information that accumulated during the inputs' Script evaluation.\r\n\r\nIn this implementation, I added a general purpose `TransactionExecutionData` struct to contain persisting data that is accessible during Script evaluation. This allows the interpreter to cause a failure if either:\r\n- an output's amount is insufficient as per the `CCV` checks across inputs;\r\n- an output is used as a target of two `CCV` checks with incompatible amount semantic.\r\n\r\nBy the monotonic nature of these checks, it is impossible that a transaction validity is affected by the order of evaluation of the input Scripts. This is an important property for any usage of the struct in the Script interpreter.\r\n\r\nAs the operations done while the mutex is locked in `CCV` are trivial, it should have a negligible impact on validation. This should, however, be validated with the appropriate benchmarks.\r\n\r\nAlternative approaches to the implementation could be:\r\n- a _deferred checks framework_ like in the OP_VAULT implementation. This is functionally equivalent, but I found the approach slightly harder to implement, and requiring more boilerplate code overall.\r\n- making the Script validation sequential for the inputs of the same transaction (that is, distributing transactions to different worker threads instead of individual inputs). This would make any present and future tx-wide semantic easier and avoid mutexes. However, this refactoring might require bigger changes to the interpreter, and should carefully be benchmarked as well.\r\n\r\nFinally, there is a possibility that changing the semantic of `CCV` somehow might make it possible to implement semantically (or practically) equivalent checks, without requiring explicit sinchronization during input execution. Here's a [gist from darosior](https://gist.github.com/darosior/ae2108ac0bedd3b68ae047af171b2d44) with some early ideas about using the taproot annex for this purpose. At this time, I'm not convinced that this direction is possible without significant tradeoffs - but I have no proof of this, and look forward to your ideas.\r\n\r\n# Related links\r\n\r\n- https://merkle.fun - entry point for the resources under the umbrella of MATT (Merkleize All The Things).\r\n- https://github.com/Merkleize/pymatt - Python framework to explore constructions using `OP_CHECKCONTRACTVERIFY` (with or without other opcodes).\r\n",
    "labels": [
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2025-03-17T06:00:37Z",
    "updated_at": "2025-03-24T17:45:16Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merged": false,
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "Merkleize:ccv-core",
      "ref": "ccv-core",
      "sha": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "user": {
        "login": "Merkleize",
        "id": 116372855,
        "node_id": "O_kgDOBu-1dw",
        "avatar_url": "https://avatars.githubusercontent.com/u/116372855?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Merkleize",
        "html_url": "https://github.com/Merkleize",
        "followers_url": "https://api.github.com/users/Merkleize/followers",
        "following_url": "https://api.github.com/users/Merkleize/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Merkleize/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Merkleize/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Merkleize/subscriptions",
        "organizations_url": "https://api.github.com/users/Merkleize/orgs",
        "repos_url": "https://api.github.com/users/Merkleize/repos",
        "events_url": "https://api.github.com/users/Merkleize/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Merkleize/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 672659606,
        "node_id": "R_kgDOKBf4lg",
        "name": "bitcoin",
        "full_name": "Merkleize/bitcoin",
        "owner": {
          "login": "Merkleize",
          "id": 116372855,
          "node_id": "O_kgDOBu-1dw",
          "avatar_url": "https://avatars.githubusercontent.com/u/116372855?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Merkleize",
          "html_url": "https://github.com/Merkleize",
          "followers_url": "https://api.github.com/users/Merkleize/followers",
          "following_url": "https://api.github.com/users/Merkleize/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Merkleize/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Merkleize/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Merkleize/subscriptions",
          "organizations_url": "https://api.github.com/users/Merkleize/orgs",
          "repos_url": "https://api.github.com/users/Merkleize/repos",
          "events_url": "https://api.github.com/users/Merkleize/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Merkleize/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Merkleize/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Merkleize/bitcoin",
        "archive_url": "https://api.github.com/repos/Merkleize/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Merkleize/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Merkleize/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Merkleize/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Merkleize/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Merkleize/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Merkleize/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Merkleize/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Merkleize/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Merkleize/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Merkleize/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Merkleize/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Merkleize/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Merkleize/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Merkleize/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Merkleize/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Merkleize/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Merkleize/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Merkleize/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Merkleize/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Merkleize/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Merkleize/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Merkleize/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Merkleize/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Merkleize/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Merkleize/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Merkleize/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Merkleize/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Merkleize/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Merkleize/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Merkleize/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Merkleize/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Merkleize/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Merkleize/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Merkleize/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Merkleize/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Merkleize/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Merkleize/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Merkleize/bitcoin/hooks",
        "svn_url": "https://github.com/Merkleize/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 240980,
        "default_branch": "matt",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-17T09:56:23Z",
        "created_at": "2023-07-30T20:35:46Z",
        "updated_at": "2024-04-20T16:01:24Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "db2c57ae9eebdb75c58cd165ac929919969c19a9",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36953,
        "stargazers_count": 82606,
        "watchers_count": 82606,
        "size": 278753,
        "default_branch": "master",
        "open_issues_count": 695,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-24T17:40:37Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-03-24T17:40:56Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
      }
    },
    "author_association": "NONE",
    "draft": true,
    "additions": 1606,
    "deletions": 43,
    "changed_files": 17,
    "commits": 4,
    "review_comments": 7,
    "comments": 4
  },
  "events": [
    {
      "event": "commented",
      "id": 2728256948,
      "node_id": "IC_kwDOABII586ineW0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2728256948",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-17T06:00:42Z",
      "updated_at": "2025-03-20T03:36:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32080.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31989](https://github.com/bitcoin/bitcoin/pull/31989) (BIP-119 (OP_CHECKTEMPLATEVERIFY) (regtest only) by jamesob)\n* [#31868](https://github.com/bitcoin/bitcoin/pull/31868) ([IBD] specialize block serialization by l0rinc)\n* [#31519](https://github.com/bitcoin/bitcoin/pull/31519) (refactor: Use std::span over Span by maflcko)\n* [#31460](https://github.com/bitcoin/bitcoin/pull/31460) (fuzz: Expand script verification flag testing to segwit v0 and tapscript by dergoegge)\n* [#29491](https://github.com/bitcoin/bitcoin/pull/29491) ([EXPERIMENTAL] Schnorr batch verification for blocks by fjahr)\n* [#29247](https://github.com/bitcoin/bitcoin/pull/29247) (CAT in Tapscript (BIP-347) by 0xBEEFCAF3)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-2728256948",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "labeled",
      "id": 16795184201,
      "node_id": "LE_lADOABII586uRkpVzwAAAAPpEixJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16795184201",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-17T06:13:30Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2728280248,
      "node_id": "IC_kwDOABII586inkC4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2728280248",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-17T06:13:31Z",
      "updated_at": "2025-03-17T06:13:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/38866989648</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-2728280248",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "commented",
      "id": 2728360432,
      "node_id": "IC_kwDOABII586in3nw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2728360432",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-17T06:40:32Z",
      "updated_at": "2025-03-17T10:24:23Z",
      "author_association": "NONE",
      "body": "I will look into the CI asap.\r\nUPDATE: fixed the obvious ones; `script_tests` fails as only functional tests have currently been updated, so that remains to be done.",
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-2728360432",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16796125002,
      "node_id": "HRFPE_lADOABII586uRkpVzwAAAAPpIIdK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16796125002",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3c269f93aedcc58f4d4176a820d5a486ab057af1",
      "commit_url": "https://api.github.com/repos/Merkleize/bitcoin/commits/3c269f93aedcc58f4d4176a820d5a486ab057af1",
      "created_at": "2025-03-17T07:33:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16797498320,
      "node_id": "HRFPE_lADOABII586uRkpVzwAAAAPpNXvQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16797498320",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6efdd41c1d6001e19dadaeebc45b604dadf4a934",
      "commit_url": "https://api.github.com/repos/Merkleize/bitcoin/commits/6efdd41c1d6001e19dadaeebc45b604dadf4a934",
      "created_at": "2025-03-17T09:03:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16798060855,
      "node_id": "HRFPE_lADOABII586uRkpVzwAAAAPpPhE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16798060855",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d7cc49050011ac7cc7118f85ef215411cc79bc4d",
      "commit_url": "https://api.github.com/repos/Merkleize/bitcoin/commits/d7cc49050011ac7cc7118f85ef215411cc79bc4d",
      "created_at": "2025-03-17T09:30:31Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAwYjQxN2Q1MzM2NGUwZTdiMzYwNjU5YzYyOGU1YTljNDQwNjRhMDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00b417d53364e0e7b360659c628e5a9c44064a01",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/00b417d53364e0e7b360659c628e5a9c44064a01",
      "tree": {
        "sha": "1473c2101535455cd42c671f0f5093ea8990ad5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1473c2101535455cd42c671f0f5093ea8990ad5d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1473c2101535455cd42c671f0f5093ea8990ad5d\nparent 698f86964c68041d938aaf54fdd39466266c371c\nauthor Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1740952220 +0100\ncommitter Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1742205376 +0100\n\nconsensus: Cross-input script validation framework\n\nAdds a framework for validation checks that persist an individual\ninput's script validation, allowing to persist state across the\nevaluations of multiple inputs of a transaction.\n\nThis as will beused for the amount logic of OP_CHECKCONTRACTVERIFY,\nthat performs amount checks that are aggregate across multiple inputs.\n\nThis could also be used for other applications, like batch validation\nand cross-input Schnorr signature aggregation.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEn0ARRHpjklTOSGV2dAYP+Bsz5PgFAmfX8cAACgkQdAYP+Bsz\n5PhtfwwArduKMFzOcYWNt8kVjRZRdwBopxQgB+qIwcWpMvd5d2EecdelvmTaOf0w\n6EUJMjL7zDBcs9Xm4lUaO8uBkloXVQgiGGmsl59ICVQTwSIPfLD8nXOcC+UOMMWO\nKPFgS1GNpDYsxruGkMIFuhlYnt1JVCJYFvXn3IkaSOrGBTWFiEadIevoYc8XCtrN\nXtZOYjlrk5Wto1CHrQogPREj5VUFtHnzYDjblTotWA9FClvKkV+aS9gJLv4t0sWK\nbnbylXp5cyI2vJqVPBuoK4UznUkAAYJ56y99UxIKTK2+yykpWzGczsuQYu2AkeXq\n5i4f8curHYwaJmhQhH0Hox4MfwgVrOV/BJKJztyRWkc+6weypME3szUqcgTuGKHg\nUHcVxdQPtTjYKhSwwyK3TP2FWJZWoqqQ60Rxm1IKrNpzTqHl6Do/APISzkl6Lx7e\nuwek9gjzIr+rjOkXiNOjegsesSVpiHAMY1rnjJQgLTiCZe1wLCY2r1T6IJxu2Yel\nW/dbcFQA\n=e+8Q\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/698f86964c68041d938aaf54fdd39466266c371c",
          "sha": "698f86964c68041d938aaf54fdd39466266c371c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/698f86964c68041d938aaf54fdd39466266c371c"
        }
      ],
      "message": "consensus: Cross-input script validation framework\n\nAdds a framework for validation checks that persist an individual\ninput's script validation, allowing to persist state across the\nevaluations of multiple inputs of a transaction.\n\nThis as will beused for the amount logic of OP_CHECKCONTRACTVERIFY,\nthat performs amount checks that are aggregate across multiple inputs.\n\nThis could also be used for other applications, like batch validation\nand cross-input Schnorr signature aggregation.",
      "committer": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-17T09:56:16Z"
      },
      "author": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-02T21:50:20Z"
      },
      "sha": "00b417d53364e0e7b360659c628e5a9c44064a01"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU4N2E5MGJjNDE0MTJkNDU0Y2QyZDgyYzU0OWQxYmNlOTBjZTFkYTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e87a90bc41412d454cd2d82c549d1bce90ce1da5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e87a90bc41412d454cd2d82c549d1bce90ce1da5",
      "tree": {
        "sha": "34967a6f4d382c1362dbaf246b9c5df3cdd40e60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34967a6f4d382c1362dbaf246b9c5df3cdd40e60"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 34967a6f4d382c1362dbaf246b9c5df3cdd40e60\nparent 00b417d53364e0e7b360659c628e5a9c44064a01\nauthor Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1740962789 +0100\ncommitter Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1742205376 +0100\n\nconsensus: Add OP_CHECKCONTRACTVERIFY\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEn0ARRHpjklTOSGV2dAYP+Bsz5PgFAmfX8cAACgkQdAYP+Bsz\n5Ph0cQv/Xgr8HF5mEaBZB7yHMQQYp4jQWn7uLv5/wvdRx4WjIoKJ36fbKwmDNbIj\n24Y2yIS04wAnPujdrqrWz6tyNIcd9xys8hflepnJTx/wk7bt5gCCWJoBkxgeNilR\nLu9O0jZy1qzWlgwwY9OYHGAYWrFe8iygjQDg6chMJRW9qL233fs2NgekvqkkYnyY\nca31JQlEpqM3c8bIyanoFMU9OE88Lapr1dfESkjHySM9jxYEltHOGkcyU9x/Q6em\nRbJNfUlUxeMp+/WKcH3LuDtMokhOl3ETYa670W8VyS3Dvxi1xlkpi/jlJHeTDOhE\nVChixU5rl0PWFfogxHz5/xjbslwVqnCYJXr2279DNQgDa7QecojQLRa5VXv+39OK\ntPKZ9E4Ao7evBbCI7zcX6NMvKjJYJV4cmavjGpdkKdAYSgBH5Za3mWUm6xPi41uL\nJ+uE9LtEJSiFZRb4Nt1CR7CfvntGHWR/tWaAKgyw2Pvbesglj7QEL7CCA8oLDAEP\nsL+l3Cxk\n=7/WH\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00b417d53364e0e7b360659c628e5a9c44064a01",
          "sha": "00b417d53364e0e7b360659c628e5a9c44064a01",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/00b417d53364e0e7b360659c628e5a9c44064a01"
        }
      ],
      "message": "consensus: Add OP_CHECKCONTRACTVERIFY",
      "committer": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-17T09:56:16Z"
      },
      "author": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-03T00:46:29Z"
      },
      "sha": "e87a90bc41412d454cd2d82c549d1bce90ce1da5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDc2MDkwMmQ2OWY3MzI4Mzc2OTE4OGIyNjY0MGM5NWFiOWIxNzBkYzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/760902d69f73283769188b26640c95ab9b170dc1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/760902d69f73283769188b26640c95ab9b170dc1",
      "tree": {
        "sha": "41f170502f0a666dbd0c050bf37b6a53bd86455e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41f170502f0a666dbd0c050bf37b6a53bd86455e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 41f170502f0a666dbd0c050bf37b6a53bd86455e\nparent e87a90bc41412d454cd2d82c549d1bce90ce1da5\nauthor Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1688934919 +0200\ncommitter Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1742205376 +0100\n\ntest: Add functional tests for OP_CHECKCONTRACTVERIFY\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEn0ARRHpjklTOSGV2dAYP+Bsz5PgFAmfX8cAACgkQdAYP+Bsz\n5Pi0egwAmmpB36EQebRzNBPAxz2ghVjytJFStWMbsm922UuVfO6x1P6yrbyzSy0t\nY9Z+NFWm/7JarJUBs+rKIGQjDe4/H1nL9X4bulR9Jl4tK0MDJVEGfgfTIDUvhEAt\ndgxCSqlTUAuJ9MUAjL7zdT6EoqfzberBcNx+hC/GUsTd2fHbuC34kjm6o3ZGJNI+\nIO64IEOTL+xceAXGQ+gj1eEUpUxo4oI85x2XH/hDxup64rr+Oa/WpKlytvqcsFZ/\nQjv79KebL3xhRqGWeG7VuFiXrYGsMCb45GIEfPZvDUOzMUIuLgVXIY7ozqPA3pTQ\nSB0VqMpmjKuZvZFB5JVSxogKD86/aA61netDOm5LberGJqkKHX/j5MFhgyZ4ZgfZ\n16cjmbEMZBReMSyP3GUc7HAF0teeVRoJ+NFU+sbXbNeW90a2QYn0Px5MORg63fRK\nkxyu/5YmVCRgUwRKg20aNH9Y+OADHoNBLHa81YDvOorphSfLEGfA3hDRq2oLKcpP\nfsc5+ngI\n=kslK\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e87a90bc41412d454cd2d82c549d1bce90ce1da5",
          "sha": "e87a90bc41412d454cd2d82c549d1bce90ce1da5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e87a90bc41412d454cd2d82c549d1bce90ce1da5"
        }
      ],
      "message": "test: Add functional tests for OP_CHECKCONTRACTVERIFY",
      "committer": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-17T09:56:16Z"
      },
      "author": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2023-07-09T20:35:19Z"
      },
      "sha": "760902d69f73283769188b26640c95ab9b170dc1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBhMWQxNDkxMTJhZjI4MzUxNjZlM2Q2ZTYyYTkyNWRmMmU0MTZlNGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a1d149112af2835166e3d6e62a925df2e416e4e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0a1d149112af2835166e3d6e62a925df2e416e4e",
      "tree": {
        "sha": "24bcd1f6ec8ff801d2ff5ad2da4105691596d0a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24bcd1f6ec8ff801d2ff5ad2da4105691596d0a9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 24bcd1f6ec8ff801d2ff5ad2da4105691596d0a9\nparent 760902d69f73283769188b26640c95ab9b170dc1\nauthor Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1738797836 +0100\ncommitter Salvatore Ingala <6681844+bigspider@users.noreply.github.com> 1742205376 +0100\n\ntest: Add functional tests for a vault construction based on CHECKCONTRACTVERIFY\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEn0ARRHpjklTOSGV2dAYP+Bsz5PgFAmfX8cAACgkQdAYP+Bsz\n5Ph9rAwAgaGi4mwxSyUqIHXmU8SQ58eZ1MPpYdFE9uK/rlQDlBQaV16zAViMTo/v\n0HJzAvvLGoPTKOGEaQ+uHKnEtmg3RnoMOV+37jUAodTQd3+MavfhVXA5xF8Z7sJP\nfXkReLKJhBmeeUAbdGEanwmsoLO4uaNrwlRNseLQvrceWxrHrmLbhZkNxMj50fYV\nefN/5iOP1VHCvAjjpS+13dIepLHu5/wd28Wn9oEoJkOC3B6sL2YYPH3NDUWoB+IZ\n7RetSQUNeohJ+mQ5uJeo2Z2a1CvcE/ga3WYKbLbRDA2eT622IUaZ0JwH6d+e5TqI\ndkXN0gvSou3uZ3jb0RD/Kg/48wyIbL4HEa6Z1krDN2djjutOZg5T/vlTRR9I5DUp\nN5ui5YjDgdC2isAlP1GCupPn80uYTGkapFsBvup3K/pg+/Z2uIZ9S3AVZc94EMML\nqfTz8sbHWfV4LJapgYU7TR+zRvAe7Prkq1hjX/iw17Kt5WOPBRbenBMUDtNl5/B1\nrnrrWYV/\n=YPie\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/760902d69f73283769188b26640c95ab9b170dc1",
          "sha": "760902d69f73283769188b26640c95ab9b170dc1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/760902d69f73283769188b26640c95ab9b170dc1"
        }
      ],
      "message": "test: Add functional tests for a vault construction based on CHECKCONTRACTVERIFY",
      "committer": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-03-17T09:56:16Z"
      },
      "author": {
        "name": "Salvatore Ingala",
        "email": "6681844+bigspider@users.noreply.github.com",
        "date": "2025-02-05T23:23:56Z"
      },
      "sha": "0a1d149112af2835166e3d6e62a925df2e416e4e"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16798766301,
      "node_id": "HRFPE_lADOABII586uRkpVzwAAAAPpSNTd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16798766301",
      "actor": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "commit_url": "https://api.github.com/repos/Merkleize/bitcoin/commits/0a1d149112af2835166e3d6e62a925df2e416e4e",
      "created_at": "2025-03-17T09:56:24Z"
    },
    {
      "event": "reviewed",
      "id": 2695670538,
      "node_id": "PRR_kwDOABII586grKsK",
      "url": null,
      "actor": null,
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#pullrequestreview-2695670538",
      "submitted_at": "2025-03-18T17:55:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
    },
    {
      "event": "labeled",
      "id": 16899579220,
      "node_id": "LE_lADOABII586uRkpVzwAAAAPvSx1U",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16899579220",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T10:09:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2739829134,
      "node_id": "IC_kwDOABII586jTnmO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2739829134",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-20T10:09:07Z",
      "updated_at": "2025-03-20T10:09:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#issuecomment-2739829134",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32080"
    },
    {
      "event": "reviewed",
      "id": 2710092012,
      "node_id": "PRR_kwDOABII586hiLjs",
      "url": null,
      "actor": null,
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#pullrequestreview-2710092012",
      "submitted_at": "2025-03-24T12:07:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2001653317",
      "pull_request_review_id": 2695670538,
      "id": 2001653317,
      "node_id": "PRRC_kwDOABII5853Ts5F",
      "diff_hunk": "@@ -1781,11 +1833,121 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckContract(int flags, int index, const std::vector<unsigned char>& pubkey, const std::vector<unsigned char>& data, const std::vector<unsigned char>& taptree, ScriptExecutionData& ScriptExecutionData, ScriptError* serror, TransactionExecutionData* tx_exec_data) const\n+{\n+    assert(ScriptExecutionData.m_internal_key.has_value());\n+    assert(ScriptExecutionData.m_taproot_merkle_root.has_value());\n+    assert(tx_exec_data != nullptr);\n+\n+    if (!(txdata->m_bip341_taproot_ready && txdata->m_spent_outputs_ready)) {\n+        return HandleMissingData(m_mdb);\n+    }\n+\n+    bool use_current_taptree = taptree.size() == 1 && taptree.data()[0] == 0x81;\n+    bool use_current_pubkey = pubkey.size() == 1 && pubkey.data()[0] == 0x81;\n+\n+    uint256 merkle_tree;\n+    const uint256 *merkle_tree_ptr = nullptr;\n+    if (taptree.empty()) {\n+        // no taptweak, leave nullptr\n+    } else if (use_current_taptree) {\n+        merkle_tree_ptr = &ScriptExecutionData.m_taproot_merkle_root.value();\n+    } else if (taptree.size() == 32) {\n+        merkle_tree = uint256(taptree);\n+        merkle_tree_ptr = &merkle_tree;\n+    } else {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_WRONG_ARGS);\n+    }\n+\n+    XOnlyPubKey initialXOnlyKey;\n+    if (use_current_pubkey) {\n+        initialXOnlyKey = ScriptExecutionData.m_internal_key.value();\n+    } else if (pubkey.empty()) {\n+        initialXOnlyKey = XOnlyPubKey::NUMS_H;\n+    } else {\n+        initialXOnlyKey = XOnlyPubKey{Span<const unsigned char>{pubkey.data(), pubkey.data() + 32}};\n+    }\n+\n+    if (index == -1) {\n+        index = nIn;\n+    }\n+\n+    auto indexLimit = (flags == CCV_FLAG_CHECK_INPUT ? txTo->vin.size() : txTo->vout.size());\n+    if (index < 0 || index >= static_cast<int>(indexLimit)) {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_OUT_OF_BOUNDS);\n+    }\n+\n+    CScript scriptPubKey = (flags == CCV_FLAG_CHECK_INPUT) ? txdata->m_spent_outputs[index].scriptPubKey : txTo->vout.at(index).scriptPubKey;\n+\n+    if (scriptPubKey.size() != 1 + 1 + 32 || scriptPubKey[0] != OP_1 || scriptPubKey[1] != 32) {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_WRONG_ARGS);",
      "path": "src/script/interpreter.cpp",
      "position": 140,
      "original_position": 140,
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How much resources can a (mempool) transaction waste by violating this rule in the last input / output after making the interpreter do a bunch of hashing work?\r\n\r\nAnd is that worse than existing taproot script allows? And would it be better with a restriction on the number of combinations, e.g. if inputs can't refer to other inputs? Or should these bounds checks be done earlier for the whole transaction? (that seems impossible because the index comes from the stack, which you can't predict through static analysis of the script and witness)",
      "created_at": "2025-03-18T17:55:33Z",
      "updated_at": "2025-03-18T17:56:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2001653317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2001653317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1884,
      "original_line": 1884,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2005048885",
      "pull_request_review_id": 2701678649,
      "id": 2005048885,
      "node_id": "PRRC_kwDOABII5853gp41",
      "diff_hunk": "@@ -1781,11 +1833,121 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckContract(int flags, int index, const std::vector<unsigned char>& pubkey, const std::vector<unsigned char>& data, const std::vector<unsigned char>& taptree, ScriptExecutionData& ScriptExecutionData, ScriptError* serror, TransactionExecutionData* tx_exec_data) const\n+{\n+    assert(ScriptExecutionData.m_internal_key.has_value());\n+    assert(ScriptExecutionData.m_taproot_merkle_root.has_value());\n+    assert(tx_exec_data != nullptr);\n+\n+    if (!(txdata->m_bip341_taproot_ready && txdata->m_spent_outputs_ready)) {\n+        return HandleMissingData(m_mdb);\n+    }\n+\n+    bool use_current_taptree = taptree.size() == 1 && taptree.data()[0] == 0x81;\n+    bool use_current_pubkey = pubkey.size() == 1 && pubkey.data()[0] == 0x81;\n+\n+    uint256 merkle_tree;\n+    const uint256 *merkle_tree_ptr = nullptr;\n+    if (taptree.empty()) {\n+        // no taptweak, leave nullptr\n+    } else if (use_current_taptree) {\n+        merkle_tree_ptr = &ScriptExecutionData.m_taproot_merkle_root.value();\n+    } else if (taptree.size() == 32) {\n+        merkle_tree = uint256(taptree);\n+        merkle_tree_ptr = &merkle_tree;\n+    } else {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_WRONG_ARGS);\n+    }\n+\n+    XOnlyPubKey initialXOnlyKey;\n+    if (use_current_pubkey) {\n+        initialXOnlyKey = ScriptExecutionData.m_internal_key.value();\n+    } else if (pubkey.empty()) {\n+        initialXOnlyKey = XOnlyPubKey::NUMS_H;\n+    } else {\n+        initialXOnlyKey = XOnlyPubKey{Span<const unsigned char>{pubkey.data(), pubkey.data() + 32}};\n+    }\n+\n+    if (index == -1) {\n+        index = nIn;\n+    }\n+\n+    auto indexLimit = (flags == CCV_FLAG_CHECK_INPUT ? txTo->vin.size() : txTo->vout.size());\n+    if (index < 0 || index >= static_cast<int>(indexLimit)) {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_OUT_OF_BOUNDS);\n+    }\n+\n+    CScript scriptPubKey = (flags == CCV_FLAG_CHECK_INPUT) ? txdata->m_spent_outputs[index].scriptPubKey : txTo->vout.at(index).scriptPubKey;\n+\n+    if (scriptPubKey.size() != 1 + 1 + 32 || scriptPubKey[0] != OP_1 || scriptPubKey[1] != 32) {\n+        return set_error(serror, SCRIPT_ERR_CHECKCONTRACTVERIFY_WRONG_ARGS);",
      "path": "src/script/interpreter.cpp",
      "position": 140,
      "original_position": 140,
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2001653317,
      "user": {
        "login": "bigspider",
        "id": 6681844,
        "node_id": "MDQ6VXNlcjY2ODE4NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6681844?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bigspider",
        "html_url": "https://github.com/bigspider",
        "followers_url": "https://api.github.com/users/bigspider/followers",
        "following_url": "https://api.github.com/users/bigspider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bigspider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bigspider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bigspider/subscriptions",
        "organizations_url": "https://api.github.com/users/bigspider/orgs",
        "repos_url": "https://api.github.com/users/bigspider/repos",
        "events_url": "https://api.github.com/users/bigspider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bigspider/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In terms of hashing, it is no different than opcodes like `OP_SHA256`, as it hashes a stack element (prefixed with an x-only key, so up to 552 bytes in total).\r\nSo restricting the opcode to just the current input shouldn't make any difference.\r\n\r\nThat should be significantly smaller than the the cost of the double tweak, which should instead be comparable (and priced appropriately in sigops) to signatures – hopefully a bit less than that, but this needs a proper benchmark.\r\n\r\nNote that no non-witness parts of the transaction is involved in the hashing (except the current input's internal key/taptree when the corresponding parameter is -1), so caching issues like the ones one might have for opcodes like `OP_CHECKSIG` or `OP_CHECKTEMPLATEVERIFY/TXHASH` shouldn't be a concern.",
      "created_at": "2025-03-20T08:29:32Z",
      "updated_at": "2025-03-20T08:36:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2005048885",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2005048885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1884,
      "original_line": 1884,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010016851",
      "pull_request_review_id": 2710092012,
      "id": 2010016851,
      "node_id": "PRRC_kwDOABII5853zmxT",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 0a1d149112af2835166e3d6e62a925df2e416e4e \"test: Add functional tests for a vault construction based on CHECKCONTRACTVERIFY\"\r\n\r\nCan `alternate_pk` and `recover_pk` just be the same? That way there's only two key sets needed for a vault: one hot, one cold. And you're avoiding the use of a NUMS point.\r\n\r\nBIP 345 (`OP_VAULT`) says:\r\n\r\n> the recovery key can include a number of spending conditions, e.g. a time-delayed fallback to an \"easier\" recovery method, in case the highly secure key winds up being too highly secure.\r\n\r\nIn your scheme you can have those recovery options in the main taptree. That allows for recovery without an initial trigger transaction / unvaulting, i.e. even if you lost the hot key (I think BIP 345 allows that too?).",
      "created_at": "2025-03-24T11:45:42Z",
      "updated_at": "2025-03-24T12:07:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2010016851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010016851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010152687",
      "pull_request_review_id": 2710333325,
      "id": 2010152687,
      "node_id": "PRRC_kwDOABII58530H7v",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "<details>\r\n<summary>patch</summary>\r\n\r\n```diff\r\ndiff --git a/test/functional/feature_checkcontractverify_vaults.py b/test/functional/feature_checkcontractverify_vaults.py\r\nindex 37e0bbd39f..60871850c1 100755\r\n--- a/test/functional/feature_checkcontractverify_vaults.py\r\n+++ b/test/functional/feature_checkcontractverify_vaults.py\r\n@@ -47,19 +47,16 @@ class Vault(P2TR):\r\n     - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\r\n     - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\r\n       to an Unvaulting output, after providing a 'withdrawal_pk'\r\n-    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)\r\n     \"\"\"\r\n\r\n-    def __init__(self, alternate_pk: Optional[bytes], spend_delay: int, recover_pk: bytes, unvault_pk: bytes, *, has_partial_revault=True, has_early_recover=True):\r\n-        assert (alternate_pk is None or len(alternate_pk) == 32) and len(\r\n-            recover_pk) == 32 and len(unvault_pk) == 32\r\n+    def __init__(self, spend_delay: int, recover_pk: bytes, unvault_pk: bytes, *, has_partial_revault=True, has_early_recover=True):\r\n+        assert len(recover_pk) == 32 and len(unvault_pk) == 32\r\n\r\n-        self.alternate_pk = alternate_pk\r\n         self.spend_delay = spend_delay\r\n         self.recover_pk = recover_pk\r\n         self.unvault_pk = unvault_pk\r\n\r\n-        unvaulting = Unvaulting(alternate_pk, spend_delay, recover_pk)\r\n+        unvaulting = Unvaulting(spend_delay, recover_pk)\r\n\r\n         self.has_partial_revault = has_partial_revault\r\n         self.has_early_recover = has_early_recover\r\n@@ -68,7 +65,7 @@ class Vault(P2TR):\r\n         trigger = (\"trigger\",\r\n                    CScript([\r\n                        # data and index already on the stack\r\n-                       0 if alternate_pk is None else alternate_pk,  # pk\r\n+                       recover_pk,  # pk\r\n                        unvaulting.get_taptree(),  # taptree\r\n                        0,  # standard flags\r\n                        OP_CHECKCONTRACTVERIFY,\r\n@@ -89,7 +86,7 @@ class Vault(P2TR):\r\n                 OP_CHECKCONTRACTVERIFY,\r\n\r\n                 # data and index already on the stack\r\n-                0 if alternate_pk is None else alternate_pk,  # pk\r\n+                recover_pk,  # pk\r\n                 unvaulting.get_taptree(),  # taptree\r\n                 0,  # standard flags\r\n                 OP_CHECKCONTRACTVERIFY,\r\n@@ -113,7 +110,7 @@ class Vault(P2TR):\r\n             ])\r\n         )\r\n\r\n-        super().__init__(NUMS_KEY if alternate_pk is None else alternate_pk, [\r\n+        super().__init__(recover_pk, [\r\n             trigger, [trigger_and_revault, recover]])\r\n\r\n\r\n@@ -123,18 +120,15 @@ class Unvaulting(AugmentedP2TR):\r\n     - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\r\n     - with the \"withdraw\" clause, after a relative timelock of spend_delay blocks, sending the entire amount to a P2TR output that has\r\n       the taproot key 'withdrawal_pk'\r\n-    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)\r\n     \"\"\"\r\n\r\n-    def __init__(self, alternate_pk: Optional[bytes], spend_delay: int, recover_pk: bytes):\r\n-        assert (alternate_pk is None or len(alternate_pk)\r\n-                == 32) and len(recover_pk) == 32\r\n+    def __init__(self, spend_delay: int, recover_pk: bytes):\r\n+        assert len(recover_pk) == 32\r\n\r\n-        self.alternate_pk = alternate_pk\r\n         self.spend_delay = spend_delay\r\n         self.recover_pk = recover_pk\r\n\r\n-        super().__init__(NUMS_KEY if alternate_pk is None else alternate_pk)\r\n+        super().__init__(recover_pk)\r\n\r\n     def get_scripts(self) -> TapTree:\r\n         # witness: <withdrawal_pk>\r\n@@ -144,7 +138,7 @@ class Unvaulting(AugmentedP2TR):\r\n                 OP_DUP,\r\n\r\n                 -1,\r\n-                0 if self.alternate_pk is None else self.alternate_pk,\r\n+                self.recover_pk,\r\n                 -1,\r\n                 CCV_FLAG_CHECK_INPUT,\r\n                 OP_CHECKCONTRACTVERIFY,\r\n@@ -183,13 +177,11 @@ class Unvaulting(AugmentedP2TR):\r\n\r\n # We reuse these specs for all the tests\r\n vault_contract = Vault(\r\n-    alternate_pk=None,\r\n     spend_delay=10,\r\n     recover_pk=recover_pubkey_xonly,\r\n     unvault_pk=unvault_pubkey_xonly\r\n )\r\n unvault_contract = Unvaulting(\r\n-    alternate_pk=None,\r\n     spend_delay=10,\r\n     recover_pk=recover_pubkey_xonly\r\n )\r\n```\r\n\r\n</details>",
      "created_at": "2025-03-24T13:10:17Z",
      "updated_at": "2025-03-24T16:16:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2010152687",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010152687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010404646",
      "pull_request_review_id": 2710783049,
      "id": 2010404646,
      "node_id": "PRRC_kwDOABII58531Fcm",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Here's a branch with the above patch https://github.com/bitcoin/bitcoin/commit/f87381ae825b7c0263f0b30d2f93e2687c8fca6f, but also renaming:\r\n- `unvault_{privkey, pubkey_xonly}` to `hot_{privkey,pk,pubkey_xonly}`\r\n- `recover_{privkey, pubkey_xonly}` to `cold_{privkey,pk,pubkey_xonly}`\r\n\r\nWith that terminology I find it easier to follow: using their hot key the user unvaults into some arbitrary withdrawal address, which can be recovered _to_ their cold key (with no signature, just knowledge of the recover leaf).\r\n\r\n--- \r\n\r\nI missed a spot where the alternate key was used:\r\nhttps://github.com/bitcoin/bitcoin/compare/master...Sjors:bitcoin:2025/03/op_cvv_vault_test\r\n\r\nSo now the withdraw leaf is shorter.\r\n\r\nThough maybe I'm misunderstanding what the alternate_pk was good for. Maybe to provide an example of having two `OP_CHECKCONTRACTVERIFY` codes in a single leaf?  The `trigger_and_revault` leaf already does that.\r\n\r\nIt could still make sense to have an example of a more advanced vault, but it should be seperate. The simplest possible vault is a good way to learn how this opcode works.",
      "created_at": "2025-03-24T15:24:15Z",
      "updated_at": "2025-03-24T16:17:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2010404646",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010404646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010554425",
      "pull_request_review_id": 2711041374,
      "id": 2010554425,
      "node_id": "PRRC_kwDOABII58531qA5",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tried to be smart and also use `-1` instead of `cold_pk` in `recover_leaf`, but that doesn't work. Not sure why.\r\n\r\nIIUC there's two recovery methods. If so it would be good to demonstrate both:\r\n1. Using the cold keys directly, using the key path of the trigger output\r\n2. Using the recovery condition\r\n\r\n(2) can be done without using the cold keys, which is nice if you're not sure yet how your hot key was compromised. ",
      "created_at": "2025-03-24T16:40:29Z",
      "updated_at": "2025-03-24T16:43:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2010554425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010554425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010662585",
      "pull_request_review_id": 2711242138,
      "id": 2010662585,
      "node_id": "PRRC_kwDOABII58532Ea5",
      "diff_hunk": "@@ -0,0 +1,480 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Tests a vault construction based on OP_CHECKCONTRACTVERIFY.\n+\n+The vaults are functionally very similar to the ones defined in BIP-345, except that\n+the withdrawal transaction must send the entire amount to a single P2TR output.\n+\"\"\"\n+\n+from typing import Optional\n+\n+from test_framework import key, script\n+from test_framework.test_framework import BitcoinTestFramework, TestNode\n+from test_framework.p2p import P2PInterface\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from test_framework.script import (\n+    CScript,\n+    OP_1, OP_CHECKCONTRACTVERIFY, OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_DROP,\n+    OP_DUP, OP_PICK, OP_SWAP, OP_TRUE\n+)\n+from test_framework.messages import CTransaction, CTxOut\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+from feature_checkcontractverify import (\n+    P2TR, AugmentedP2TR, CCV_FLAG_CHECK_INPUT, CCV_FLAG_DEDUCT_OUTPUT_AMOUNT,\n+    CcvInput, PrivkeyPlaceholder, TapTree, create_tx, NUMS_KEY\n+)\n+\n+\n+unvault_privkey = key.ECKey()\n+unvault_privkey.set(\n+    b'y\\x88\\xe19\\x11_\\xf6\\x19L#\\xb7t\\x9c\\xce\\x1c\\x08\\xf6\\xdf\\x1a\\x01W\\xc8\\xc1\\x07\\x8d\\xb9\\x14\\xf1\\x91\\x89c\\x8b', True)\n+unvault_pubkey_xonly = unvault_privkey.get_pubkey().get_bytes()[1:]\n+\n+recover_privkey = key.ECKey()\n+recover_privkey.set(\n+    b'\\xdcg\\xd3\\x9f\\xc5\\x0c/\\x82\\x06\\x01\\\\T\\x8f\\xd2\\xb6\\x90\\xddJ\\xe5:\\xbc\\xddJ\\rV\\x1c\\xe2\\x07\\xb0\\xdd7\\x89', True)\n+recover_pubkey_xonly = recover_privkey.get_pubkey().get_bytes()[1:]\n+\n+\n+class Vault(P2TR):\n+    \"\"\"\n+    A UTXO that can be spent either:\n+    - with the \"recover\" clause, sending it to a PT2R output that has recover_pk as the taproot key\n+    - with the \"trigger\" clause, sending the entire amount to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the \"trigger_and_revault\" clause, sending part of the amount to an output with the same script as this Vault, and the rest\n+      to an Unvaulting output, after providing a 'withdrawal_pk'\n+    - with the alternate_pk using the keypath spend (if provided; the key is NUMS_KEY otherwise)",
      "path": "test/functional/feature_checkcontractverify_vaults.py",
      "position": 50,
      "original_position": 50,
      "commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "original_commit_id": "0a1d149112af2835166e3d6e62a925df2e416e4e",
      "in_reply_to_id": 2010016851,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Mmm, I think I'm still missing something. Pushed a commit 43e2d9792bae4894563625f8ae86c3e504d44004 that robs the vault by simply changing the destination address and witness at withdrawal time.",
      "created_at": "2025-03-24T17:45:15Z",
      "updated_at": "2025-03-24T17:45:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32080#discussion_r2010662585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2010662585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32080"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    }
  ]
}