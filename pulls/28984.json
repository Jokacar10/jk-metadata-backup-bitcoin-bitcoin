{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984",
    "id": 1626384660,
    "node_id": "PR_kwDOABII585g8KkU",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/28984",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/28984.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/28984.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
    "number": 28984,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Cluster size 2 package rbf",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Allows any 2 transaction package with no in-mempool ancestors to do package RBF when directly conflicting with other mempool clusters of size two or less.\r\n\r\n\r\nProposed validation steps:\r\n1) If the transaction package is of size 1, legacy rbf rules apply.\r\n2) Otherwise the transaction package consists of a (parent, child) pair with no other in-mempool ancestors (or descendants, obviously), so it is also going to create a cluster of size 2. If larger, fail.\r\n3) The package rbf may not evict more than 100 transactions from the mempool(bip125 rule 5)\r\n4) The package is a single chunk\r\n5) Every directly conflicted mempool transaction is connected to at most 1 other in-mempool transaction (ie the cluster size of the conflict is at most 2).\r\n6) Diagram check: We ensure that the replacement is strictly superior, improving the mempool\r\n7) The total fee of the package, minus the total fee of what is being evicted, is at least the minrelayfee * size of the package (equivalent to bip125 rule 3 and 4)\r\n\r\nPost-cluster mempool this will likely be expanded to general package rbf, but this is what we can safely support today.\r\n",
    "labels": [
      {
        "id": 82428251,
        "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
        "name": "TX fees and policy",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2023-12-01T22:12:06Z",
    "updated_at": "2025-07-14T11:39:33Z",
    "closed_at": "2024-06-17T21:22:55Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2024-06-17T21:22:55Z",
    "merged_by": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "41544b8f96dbc9c6b8998acd6522200d67cdc16d",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "instagibbs:2023-12-cluster-size2-package-rbf",
      "ref": "2023-12-cluster-size2-package-rbf",
      "sha": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 13910191,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMzkxMDE5MQ==",
        "name": "bitcoin",
        "full_name": "instagibbs/bitcoin",
        "owner": {
          "login": "instagibbs",
          "id": 5767891,
          "node_id": "MDQ6VXNlcjU3Njc4OTE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/instagibbs",
          "html_url": "https://github.com/instagibbs",
          "followers_url": "https://api.github.com/users/instagibbs/followers",
          "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
          "organizations_url": "https://api.github.com/users/instagibbs/orgs",
          "repos_url": "https://api.github.com/users/instagibbs/repos",
          "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/instagibbs/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/instagibbs/bitcoin",
        "description": "Bitcoin integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/instagibbs/bitcoin",
        "archive_url": "https://api.github.com/repos/instagibbs/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/instagibbs/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/instagibbs/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/instagibbs/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/instagibbs/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/instagibbs/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/instagibbs/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/instagibbs/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/instagibbs/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/instagibbs/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/instagibbs/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/instagibbs/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/instagibbs/bitcoin/events",
        "forks_url": "https://api.github.com/repos/instagibbs/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/instagibbs/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/instagibbs/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/instagibbs/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/instagibbs/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/instagibbs/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/instagibbs/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/instagibbs/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/instagibbs/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/instagibbs/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/instagibbs/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/instagibbs/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/instagibbs/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/instagibbs/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/instagibbs/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/instagibbs/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:instagibbs/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/instagibbs/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/instagibbs/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/instagibbs/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/instagibbs/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/instagibbs/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/instagibbs/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/instagibbs/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/instagibbs/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/instagibbs/bitcoin/hooks",
        "svn_url": "https://github.com/instagibbs/bitcoin",
        "homepage": "http://www.bitcoin.org",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 5,
        "watchers_count": 5,
        "size": 267730,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-10T21:22:39Z",
        "created_at": "2013-10-27T20:56:53Z",
        "updated_at": "2025-07-09T17:06:49Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "080a47cb8a8db27328bbdf57aa80cc4b4127a370",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37514,
        "stargazers_count": 84551,
        "watchers_count": 84551,
        "size": 289117,
        "default_branch": "master",
        "open_issues_count": 750,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-14T10:47:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-07-14T11:40:47Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 916,
    "deletions": 34,
    "changed_files": 9,
    "commits": 8,
    "review_comments": 205,
    "comments": 36
  },
  "events": [
    {
      "event": "commented",
      "id": 1836848803,
      "node_id": "IC_kwDOABII585tfBaj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1836848803",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-01T22:12:09Z",
      "updated_at": "2024-06-17T21:09:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/28984).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [glozow](https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2118444350), [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2118667559), [theStack](https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2118754168), [murchandamus](https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2123251625), [achow101](https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2174428338) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#30272](https://github.com/bitcoin/bitcoin/pull/30272) (doc: use TRUC instead of v3 and add release note by glozow)\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo/LogDebug over LogPrintf/LogPrint by maflcko)\n* [#28676](https://github.com/bitcoin/bitcoin/pull/28676) ([WIP] Cluster mempool implementation by sdaftuar)\n* [#27432](https://github.com/bitcoin/bitcoin/pull/27432) (contrib: add tool to convert compact-serialized UTXO set to SQLite database by theStack)\n* [#26593](https://github.com/bitcoin/bitcoin/pull/26593) (tracing: Only prepare tracepoint arguments when actually tracing by 0xB10C)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1836848803",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11126941201,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKXN6YR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11126941201",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5b216dbc5b04ae88254f91120796797f123f15f9",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/5b216dbc5b04ae88254f91120796797f123f15f9",
      "created_at": "2023-12-01T22:13:00Z"
    },
    {
      "event": "labeled",
      "id": 11127477337,
      "node_id": "LE_lADOABII5854gAEwzwAAAAKXP9RZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11127477337",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-02T00:04:42Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 11134053399,
      "node_id": "LE_lADOABII5854gAEwzwAAAAKXpCwX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11134053399",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-04T04:52:33Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 1837840851,
      "node_id": "IC_kwDOABII585tiznT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1837840851",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-04T04:54:20Z",
      "updated_at": "2023-12-04T04:54:20Z",
      "author_association": "MEMBER",
      "body": "Added this to the tracking issue",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1837840851",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11140442925,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKYBast",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11140442925",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9abefa717087e40fc9e45c0850ee5b94c9eb984a",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/9abefa717087e40fc9e45c0850ee5b94c9eb984a",
      "created_at": "2023-12-04T15:04:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11141861123,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKYG08D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11141861123",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "57e5fc7c6fe1379a2c533749a4277c177cedff23",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/57e5fc7c6fe1379a2c533749a4277c177cedff23",
      "created_at": "2023-12-04T16:53:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11143144365,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKYLuOt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11143144365",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "56848f90e3e05f47789fd5f9a1c3c16278a48a55",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/56848f90e3e05f47789fd5f9a1c3c16278a48a55",
      "created_at": "2023-12-04T18:54:58Z"
    },
    {
      "event": "ready_for_review",
      "id": 11143149513,
      "node_id": "RFRE_lADOABII5854gAEwzwAAAAKYLvfJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11143149513",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-04T18:55:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11143326631,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKYMaun",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11143326631",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "be9d1634a9024e0b652cb77b89b856f25472fe68",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/be9d1634a9024e0b652cb77b89b856f25472fe68",
      "created_at": "2023-12-04T19:14:29Z"
    },
    {
      "event": "reviewed",
      "id": 1763228824,
      "node_id": "PRR_kwDOABII585pGLyY",
      "url": null,
      "actor": null,
      "commit_id": "a6730af0678255d229eebf2cc31fcba9b35e1fd5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-1763228824",
      "submitted_at": "2023-12-04T19:26:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "unlabeled",
      "id": 11144371506,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAKYQZ0y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11144371506",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-04T20:59:21Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1765400607,
      "node_id": "PRR_kwDOABII585pOeAf",
      "url": null,
      "actor": null,
      "commit_id": "1996defeef0bb82cb51f6efe0ed0cb7092273f89",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-1765400607",
      "submitted_at": "2023-12-05T15:28:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11194438638,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKbPZPu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11194438638",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7aee7286ef49aa57249d0992ac0c86c4adde7ef9",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/7aee7286ef49aa57249d0992ac0c86c4adde7ef9",
      "created_at": "2023-12-08T14:56:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11194779645,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKbQsf9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11194779645",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1d859b08b6f606b532ba5c3e9a2ef8b8ec2f9454",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/1d859b08b6f606b532ba5c3e9a2ef8b8ec2f9454",
      "created_at": "2023-12-08T15:27:24Z"
    },
    {
      "event": "commented",
      "id": 1847460679,
      "node_id": "IC_kwDOABII585uHgNH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847460679",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-08T16:12:07Z",
      "updated_at": "2023-12-08T16:12:07Z",
      "author_association": "MEMBER",
      "body": "So thinking conceptually about this, I'm most concerned by the new `CheckMinerScores()` criterion, where we only check the replacement package's feerate against the ancestor feerates of the indirect conflicts.\r\n\r\nI think there are two issues with this approach:\r\n1) If you look at `GetModFeesWithAncestors()/GetSizeWithAncestors()`, that can be greater than the transaction's individual feerate (ie if the parent of a transaction has a higher feerate than the child you're conflicting with). So this can cause the test to be too conservative and introduce some kind of weird pinning.  Granted, this is a new replacement functionality so maybe not the end of the world if it is sometimes too conservative, but it seems like a bug.\r\n\r\n2) Also if you look at the ancestor feerate of a transaction, that can underestimate its mining score, such as if some low feerate ancestor is being paid for by another transaction.  So that can allow for replacements that are not incentive compatible (similar to how this is possible today with our current single-transaction RBF rules).\r\n\r\nEven though the current RBF logic is broken already, I'd prefer to avoid adding on to that while rolling out the package RBF implementation, just so that users don't get used to some kinds of replacements working that really shouldn't be.\r\n\r\nSo I was wondering, can we deal with this by just restricting the topology of what we allow a package RBF to conflict with?  Let's say we allow a replacement if the conflict set consists of either (1) a single transaction with no ancestors (and of course no descendants, since any descendants would be in the conflict set as well), or (2) two transactions that are in a parent-child topology, and that have no other in-mempool ancestors (or descendants, of course).\r\n\r\nIn those situations, the maximum miner score you would have to consider is either the individual feerate of the parent tx or the ancestor feerate of the child, so the new logic should work perfectly.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1847460679",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "commented",
      "id": 1847884788,
      "node_id": "IC_kwDOABII585uJHv0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1847884788",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-08T21:48:57Z",
      "updated_at": "2023-12-08T21:48:57Z",
      "author_association": "MEMBER",
      "body": "After offline discussion with @sdaftuar , I've worked on a set of prospective changes and pushed them to this branch as follow-on commits.\r\n\r\nKey change is that we will now only allow package RBF when the conflicted transactions are all in \"clusters\" of up to size 2. This allows us to calculate mining scores for each conflicted transaction, which means that post-cluster mempool, if we did this right, IIUC, the behavior should match with more general package RBF.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1847884788",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "mentioned",
      "id": 11197979399,
      "node_id": "MEE_lADOABII5854gAEwzwAAAAKbc5sH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11197979399",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-08T21:48:57Z"
    },
    {
      "event": "subscribed",
      "id": 11197979414,
      "node_id": "SE_lADOABII5854gAEwzwAAAAKbc5sW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11197979414",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-08T21:48:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11213943206,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKcZzGm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11213943206",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2a642b9ffe3948486f04235a462b0c3ef91e725f",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/2a642b9ffe3948486f04235a462b0c3ef91e725f",
      "created_at": "2023-12-11T18:01:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11214140187,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKcajMb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11214140187",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f9ce967ddaf46d1b11d4abfa8ae424da818af8bd",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/f9ce967ddaf46d1b11d4abfa8ae424da818af8bd",
      "created_at": "2023-12-11T18:20:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11215280973,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKce5tN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11215280973",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "385b6ca21e290577167b9ec107f7aef502b55d34",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/385b6ca21e290577167b9ec107f7aef502b55d34",
      "created_at": "2023-12-11T20:04:44Z"
    },
    {
      "event": "commented",
      "id": 1850801317,
      "node_id": "IC_kwDOABII585uUPyl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1850801317",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T20:06:09Z",
      "updated_at": "2023-12-11T20:06:09Z",
      "author_association": "MEMBER",
      "body": "@sdaftuar should be ready for another look",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1850801317",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "mentioned",
      "id": 11215294216,
      "node_id": "MEE_lADOABII5854gAEwzwAAAAKce88I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11215294216",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T20:06:09Z"
    },
    {
      "event": "subscribed",
      "id": 11215294237,
      "node_id": "SE_lADOABII5854gAEwzwAAAAKce88d",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11215294237",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-11T20:06:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11215325501,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKcfEk9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11215325501",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "876a05dc9dbef9ec4f5f1e56e0c413556bde9f06",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/876a05dc9dbef9ec4f5f1e56e0c413556bde9f06",
      "created_at": "2023-12-11T20:09:40Z"
    },
    {
      "event": "reviewed",
      "id": 1776101239,
      "node_id": "PRR_kwDOABII585p3Sd3",
      "url": null,
      "actor": null,
      "commit_id": "876a05dc9dbef9ec4f5f1e56e0c413556bde9f06",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-1776101239",
      "submitted_at": "2023-12-11T20:24:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11215605070,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKcgI1O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11215605070",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "89beb714bb44e74ff785d3f0ae32684d737557de",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/89beb714bb44e74ff785d3f0ae32684d737557de",
      "created_at": "2023-12-11T20:38:14Z"
    },
    {
      "event": "commented",
      "id": 1852009874,
      "node_id": "IC_kwDOABII585uY22S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852009874",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T13:12:08Z",
      "updated_at": "2023-12-12T13:12:34Z",
      "author_association": "MEMBER",
      "body": "> size-2 package rbf can have 6 types of conflicts:\r\n> \r\n> 1. parent conflicts with solo\r\n> 2. parent conflicts with child\r\n> 3. parent conflicts with parent\r\n> 4. child conflicts with parent\r\n> 5. child conflicts with solo\r\n> 6. child conflicts with child\r\n\r\nI think if you state it this way, then there are more cases to write out (but they all simplify down to the same thing) -- the parent transaction in the incoming package can directly conflict with {solo tx, child tx, parent tx, both child tx and parent tx}, and so can the child transaction in the package (ie it can also conflict with a solo tx, child tx, parent tx, and both), and you can have both of those going on at the same time, AND we permit the incoming package to conflict with up to 100 such in-mempool transactions that satisfy this \"cluster-size-2\" restriction.\r\n\r\nSo the way I'd try to describe this PR is that an incoming package with in-mempool conflicts must satisfy these RBF policy rules:\r\n1) Every direct conflict is connected to at most 1 other in-mempool transaction (ie the cluster size of the conflict is at most 2).\r\n2) The package consists of a (parent, child) pair with no other in-mempool ancestors (or descendants, obviously) (so it is also going to create a cluster of size 2)\r\n3) The package's child tx has greater feerate than the parent tx\r\n4) The total fee of the package, minus the total fee of what is being evicted, is at least the minrelayfee * size of the package\r\n5) The package feerate (total package fee / total package vsize) must exceed the min(individual feerate, ancestor feerate) of every transaction that would be evicted (direct and indirect conflicts).  For transactions in a cluster of size <= 2, min(feerate, ancestor feerate) exactly captures the mining score of a transaction.\r\n\r\nDid I miss anything?",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1852009874",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "commented",
      "id": 1852127685,
      "node_id": "IC_kwDOABII585uZTnF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1852127685",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T14:19:12Z",
      "updated_at": "2023-12-12T14:19:12Z",
      "author_association": "MEMBER",
      "body": "@sdaftuar I took your suggestions, reordered and slightly reworded. Matches my implementation.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1852127685",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "mentioned",
      "id": 11224211919,
      "node_id": "MEE_lADOABII5854gAEwzwAAAAKdA-HP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11224211919",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T14:19:13Z"
    },
    {
      "event": "subscribed",
      "id": 11224211948,
      "node_id": "SE_lADOABII5854gAEwzwAAAAKdA-Hs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11224211948",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T14:19:13Z"
    },
    {
      "event": "reviewed",
      "id": 1777611474,
      "node_id": "PRR_kwDOABII585p9DLS",
      "url": null,
      "actor": null,
      "commit_id": "89beb714bb44e74ff785d3f0ae32684d737557de",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I read the code more carefully (other than the tests, which I just skimmed) -- so far this looks good, just had a few comments.  Planning to do some more thorough testing next.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-1777611474",
      "submitted_at": "2023-12-12T19:34:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "labeled",
      "id": 11229407899,
      "node_id": "LE_lADOABII5854gAEwzwAAAAKdUyqb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11229407899",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-12T22:52:58Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1853897416,
      "node_id": "IC_kwDOABII585ugDrI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1853897416",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-13T13:14:24Z",
      "updated_at": "2023-12-13T13:14:24Z",
      "author_association": "MEMBER",
      "body": "I thought of a couple issues with the current version of the PR that I wanted to summarize (longer form [here](https://delvingbitcoin.org/t/cluster-mempool-rbf-thoughts/156/23?u=sdaftuar)):\r\n\r\n1. The mempool might not be made \"strictly better\", in the sense that there are more fees available for every size of transactions selected, using the RBF criteria in this PR.  (I'm trying to figure out if there are any simple heuristics we can apply to resolve this issue.)\r\n\r\n2. It occurred to me that users might run into a problem if they submit a package (A, B), where B has in-mempool conflicts and A does not, if A would relay fine on its own.  Consider this scenario:\r\n   -  node receives package (A, B), either via submitpackage or a future package-relay protocol\r\n   - node applies the package RBF rules here and accepts the package \r\n   - node announces transactions A and B to peers \r\n   - a peer downloads the transactions separately\r\n   - the peer validates tx A, and it makes it into the mempool on its own (perhaps it itself had no conflicts and satisfied min fee requirements)\r\n   - the peer validates tx B and rejects it, because under single-tx-rbf rules, B is an invalid replacement (it has a new unconfirmed input compared with what it conflicts with, namely tx A)\r\n\r\nIt seems to me that the only solution for issue 2 would be to somehow ensure that tx A would not be eligible for relay on its own.  Are there any better ideas?",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1853897416",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "commented",
      "id": 1855935981,
      "node_id": "IC_kwDOABII585un1Xt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1855935981",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T14:18:14Z",
      "updated_at": "2023-12-20T20:20:13Z",
      "author_association": "MEMBER",
      "body": "I responded here: https://delvingbitcoin.org/t/cluster-mempool-rbf-thoughts/156/24?u=instagibbs \r\n\r\nissue 1: awaiting further details on potential diagram check integration vs suggested heuristic I gave (currently reviewing this work)\r\nissue 2: known issue, wallet authors shouldn't do that until cluster mempool fixes that (don't cross-sponsor)",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1855935981",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "reviewed",
      "id": 1784767020,
      "node_id": "PRR_kwDOABII585qYWIs",
      "url": null,
      "actor": null,
      "commit_id": "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-1784767020",
      "submitted_at": "2023-12-15T19:07:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "reviewed",
      "id": 1784767711,
      "node_id": "PRR_kwDOABII585qYWTf",
      "url": null,
      "actor": null,
      "commit_id": "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-1784767711",
      "submitted_at": "2023-12-15T19:08:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "unlabeled",
      "id": 11265641973,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAKffA31",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11265641973",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-16T12:04:01Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1777863994,
      "node_id": "PRR_kwDOABII585p-A06",
      "url": null,
      "actor": null,
      "commit_id": "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, did a quick skim review, will review more thoroughly",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-1777863994",
      "submitted_at": "2023-12-28T21:50:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "reviewed",
      "id": 1779525637,
      "node_id": "PRR_kwDOABII585qEWgF",
      "url": null,
      "actor": null,
      "commit_id": "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-1779525637",
      "submitted_at": "2023-12-30T13:30:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "commented",
      "id": 1879129804,
      "node_id": "IC_kwDOABII585wAT7M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1879129804",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-05T18:59:29Z",
      "updated_at": "2024-01-05T18:59:29Z",
      "author_association": "MEMBER",
      "body": "Considering an alternative branch with fee diagram checks instead of heuristic here: https://github.com/instagibbs/bitcoin/commits/feefrac_package_rbf\r\n\r\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1879129804",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "reviewed",
      "id": 1808799983,
      "node_id": "PRR_kwDOABII585r0Bjv",
      "url": null,
      "actor": null,
      "commit_id": "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Combed through the code a bit more. Generally approach ACK for \"cluster 2 replace cluster 2\" idea.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-1808799983",
      "submitted_at": "2024-01-08T12:35:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11432777821,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKpclhd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11432777821",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8d1d06ab1a6fb2451b6a7fdcc4b0ef7c0159315a",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/8d1d06ab1a6fb2451b6a7fdcc4b0ef7c0159315a",
      "created_at": "2024-01-09T16:29:39Z"
    },
    {
      "event": "commented",
      "id": 1883380383,
      "node_id": "IC_kwDOABII585wQhqf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883380383",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T16:30:39Z",
      "updated_at": "2024-01-09T16:30:39Z",
      "author_association": "MEMBER",
      "body": "pushed update with fee diagram checks instead of heuristics. @sipa please see https://github.com/bitcoin/bitcoin/pull/28984/commits/9dda95d58442e4884a57216472c991c62f87ef1f and similar\r\n\r\nAddressing other comments next.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1883380383",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "mentioned",
      "id": 11432791944,
      "node_id": "MEE_lADOABII5854gAEwzwAAAAKpco-I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11432791944",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T16:30:39Z"
    },
    {
      "event": "subscribed",
      "id": 11432791964,
      "node_id": "SE_lADOABII5854gAEwzwAAAAKpco-c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11432791964",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T16:30:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11433852724,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKpgr80",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11433852724",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/b28baa77b0e6485fa9e7e9af87b6bf5cd4b272c9",
      "created_at": "2024-01-09T18:04:45Z"
    },
    {
      "event": "labeled",
      "id": 11433856018,
      "node_id": "LE_lADOABII5854gAEwzwAAAAKpgswS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11433856018",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T18:05:06Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1883540090,
      "node_id": "IC_kwDOABII585wRIp6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883540090",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T18:05:07Z",
      "updated_at": "2024-01-09T18:05:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/20309843311</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1883540090",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11435086539,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKplZLL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11435086539",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9472f1e12a8c670b80a912ad12b19770f1aec41c",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/9472f1e12a8c670b80a912ad12b19770f1aec41c",
      "created_at": "2024-01-09T20:18:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11435424225,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKpmrnh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11435424225",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f31417a61d932e4cd691316dbde531d7ce192adb",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/f31417a61d932e4cd691316dbde531d7ce192adb",
      "created_at": "2024-01-09T20:47:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11435492854,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKpm8X2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11435492854",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6bf242caae8e762f91b188b9711c53a22dc1d04a",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/6bf242caae8e762f91b188b9711c53a22dc1d04a",
      "created_at": "2024-01-09T20:52:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11435770025,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKpoACp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11435770025",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bc15f9203280e2669b4b8d5a2a2e4644dac9d5d2",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/bc15f9203280e2669b4b8d5a2a2e4644dac9d5d2",
      "created_at": "2024-01-09T21:21:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11436032910,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKppAOO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11436032910",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ac38f2bd471616ee380e717ff03534f9754202d8",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/ac38f2bd471616ee380e717ff03534f9754202d8",
      "created_at": "2024-01-09T21:48:00Z"
    },
    {
      "event": "commented",
      "id": 1883870883,
      "node_id": "IC_kwDOABII585wSZaj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1883870883",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T22:02:19Z",
      "updated_at": "2024-01-09T22:02:19Z",
      "author_association": "MEMBER",
      "body": "@instagibbs See https://github.com/sipa/bitcoin/commits/pr28984 for a commit that works exactly for all `FeeFrac` objects. It uses C++20 three-way comparisons to also reduce the line count by 25%.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1883870883",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "mentioned",
      "id": 11436173647,
      "node_id": "MEE_lADOABII5854gAEwzwAAAAKppilP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11436173647",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T22:02:19Z"
    },
    {
      "event": "subscribed",
      "id": 11436173657,
      "node_id": "SE_lADOABII5854gAEwzwAAAAKppilZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11436173657",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-09T22:02:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11445342612,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKqMhGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11445342612",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "058182c0093a3ee380427cd8eb00a8acefb3574e",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/058182c0093a3ee380427cd8eb00a8acefb3574e",
      "created_at": "2024-01-10T16:14:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11445399234,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKqMu7C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11445399234",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "67aeb7d3650da27ef2350de2f557b995b2f9009c",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/67aeb7d3650da27ef2350de2f557b995b2f9009c",
      "created_at": "2024-01-10T16:19:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11446494090,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKqQ6OK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11446494090",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "66f00e2074e6dfb665abb5d0f4a61d582942f264",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/66f00e2074e6dfb665abb5d0f4a61d582942f264",
      "created_at": "2024-01-10T17:58:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11446526276,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKqRCFE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11446526276",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2f190310959c5118c9f54a5df3c088948dd4f9fe",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/2f190310959c5118c9f54a5df3c088948dd4f9fe",
      "created_at": "2024-01-10T18:02:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11447451878,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKqUkDm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11447451878",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ca5661533a0d765b38101780efd61b7a1f4afd85",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/ca5661533a0d765b38101780efd61b7a1f4afd85",
      "created_at": "2024-01-10T19:31:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11447481037,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKqUrLN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11447481037",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4e8b21d6dff551b3b9e828b5d1940ded34463a37",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/4e8b21d6dff551b3b9e828b5d1940ded34463a37",
      "created_at": "2024-01-10T19:34:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11448133927,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAKqXKkn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11448133927",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "457c9fa5c6da973ae4778547af5efc67d1548f61",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/457c9fa5c6da973ae4778547af5efc67d1548f61",
      "created_at": "2024-01-10T20:32:37Z"
    },
    {
      "event": "unlabeled",
      "id": 11449061743,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAKqatFv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11449061743",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-10T22:13:48Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1889742216,
      "node_id": "IC_kwDOABII585woy2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889742216",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T18:08:49Z",
      "updated_at": "2024-01-12T18:08:49Z",
      "author_association": "MEMBER",
      "body": "broke off all the incentive compatibility check stuff into its own PR: https://github.com/bitcoin/bitcoin/pull/29242\r\n\r\nPutting this in draft for now to divert attention there",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-1889742216",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "convert_to_draft",
      "id": 11472325614,
      "node_id": "CTDE_lADOABII5854gAEwzwAAAAKrzcvu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11472325614",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-12T18:08:55Z"
    },
    {
      "event": "labeled",
      "id": 11495155744,
      "node_id": "LE_lADOABII5854gAEwzwAAAAKtKigg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11495155744",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-01-16T07:40:05Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 11763923245,
      "node_id": "REFE_lADOABII5854gAEwzwAAAAK9Lzkt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11763923245",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7143d4388407ab3d12005e55a02d5e8f334e4dc9",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7143d4388407ab3d12005e55a02d5e8f334e4dc9",
      "created_at": "2024-02-10T04:38:10Z"
    },
    {
      "event": "labeled",
      "id": 11763934903,
      "node_id": "LE_lADOABII5854gAEwzwAAAAK9L2a3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11763934903",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-10T04:46:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11777625423,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAK-AE1P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11777625423",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b8385879d0c5fc0260b001e4c8f3434679365cae",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/b8385879d0c5fc0260b001e4c8f3434679365cae",
      "created_at": "2024-02-12T17:24:28Z"
    },
    {
      "event": "unlabeled",
      "id": 11778710058,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAK-ENoq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11778710058",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-12T19:06:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 11779154511,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAK-F6JP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/11779154511",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-02-12T19:51:00Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 12062075349,
      "node_id": "LE_lADOABII5854gAEwzwAAAALO9KnV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12062075349",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-09T02:13:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 12246232584,
      "node_id": "REFE_lADOABII5854gAEwzwAAAALZ7q4I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12246232584",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c2dbbc35b99e3746407a0abba08032e5b0183ce0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2dbbc35b99e3746407a0abba08032e5b0183ce0",
      "created_at": "2024-03-26T08:49:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12251864941,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALaRJ9t",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12251864941",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0d4213d659582e696f50e13d1491603d602d6d73",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/0d4213d659582e696f50e13d1491603d602d6d73",
      "created_at": "2024-03-26T15:04:03Z"
    },
    {
      "event": "ready_for_review",
      "id": 12251887913,
      "node_id": "RFRE_lADOABII5854gAEwzwAAAALaRPkp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12251887913",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-26T15:05:16Z"
    },
    {
      "event": "commented",
      "id": 2020685463,
      "node_id": "IC_kwDOABII5854cTaX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2020685463",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-26T15:06:04Z",
      "updated_at": "2024-03-26T15:40:45Z",
      "author_association": "MEMBER",
      "body": "Rebased on master, and ready for review \r\n\r\nnote that I will likely rebase this on top of https://github.com/bitcoin/bitcoin/pull/29735 when merged, to pull in `fill_mempool`",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2020685463",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12252450755,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALaTY_D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12252450755",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9ceaa727c3487ae1d3f34c94a2b55ec049057f60",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/9ceaa727c3487ae1d3f34c94a2b55ec049057f60",
      "created_at": "2024-03-26T15:40:22Z"
    },
    {
      "event": "unlabeled",
      "id": 12252832605,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAALaU2Nd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12252832605",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-26T16:05:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12255539277,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALafLBN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12255539277",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5d5340c8a84d3b170550767f86883dee02b172a0",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/5d5340c8a84d3b170550767f86883dee02b172a0",
      "created_at": "2024-03-26T19:29:10Z"
    },
    {
      "event": "labeled",
      "id": 12255540180,
      "node_id": "LE_lADOABII5854gAEwzwAAAALafLPU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12255540180",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-26T19:29:14Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 12258459644,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAALaqT_8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12258459644",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-27T01:25:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 12436066493,
      "node_id": "REFE_lADOABII5854gAEwzwAAAALlP1C9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12436066493",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bdb33ec51986570ea17406c83bad2c955ae23186",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdb33ec51986570ea17406c83bad2c955ae23186",
      "created_at": "2024-04-11T12:47:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12436142493,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALlQHmd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12436142493",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b0ab6875bb05f34d3f4783dfe7b60d1d3dda2cfc",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/b0ab6875bb05f34d3f4783dfe7b60d1d3dda2cfc",
      "created_at": "2024-04-11T12:53:54Z"
    },
    {
      "event": "commented",
      "id": 2056882691,
      "node_id": "IC_kwDOABII5856mYoD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2056882691",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-15T13:38:33Z",
      "updated_at": "2024-04-15T13:38:33Z",
      "author_association": "MEMBER",
      "body": "ready for review",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2056882691",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "reviewed",
      "id": 2006530259,
      "node_id": "PRR_kwDOABII5853mTjT",
      "url": null,
      "actor": null,
      "commit_id": "b0ab6875bb05f34d3f4783dfe7b60d1d3dda2cfc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I think we had some docs written for doc/policy/packages.md and doc/policy/mempool_replacements.md?",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2006530259",
      "submitted_at": "2024-04-17T17:13:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "reviewed",
      "id": 2006797308,
      "node_id": "PRR_kwDOABII5853nUv8",
      "url": null,
      "actor": null,
      "commit_id": "f0c6e68d5d289d34934d57fb8d352ac81d81ab04",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2006797308",
      "submitted_at": "2024-04-17T18:12:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12527837145,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALqt5_Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12527837145",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cc00da13ae7dde448ab011ac03df9ecc6188c7dc",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/cc00da13ae7dde448ab011ac03df9ecc6188c7dc",
      "created_at": "2024-04-18T19:07:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12528245909,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALqvdyV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12528245909",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2eb09886f37f40568547eda3464188df88e88eed",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/2eb09886f37f40568547eda3464188df88e88eed",
      "created_at": "2024-04-18T19:49:53Z"
    },
    {
      "event": "labeled",
      "id": 12528246695,
      "node_id": "LE_lADOABII5854gAEwzwAAAALqvd-n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12528246695",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-18T19:49:58Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2065132026,
      "node_id": "IC_kwDOABII5857F2n6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2065132026",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-18T19:49:59Z",
      "updated_at": "2024-04-18T19:49:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/23993793129</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2065132026",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "unlabeled",
      "id": 12530148331,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAALq2uPr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12530148331",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-18T22:56:44Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2014725944,
      "node_id": "PRR_kwDOABII5854Fkc4",
      "url": null,
      "actor": null,
      "commit_id": "2eb09886f37f40568547eda3464188df88e88eed",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Continued Reviewing.\r\n\r\n- [x] 826ec4c47c0d18a2d9b437b33ea4ceba67e870c1\r\n- [x] 033736bcd9fc16e244e52e72fe7c7ff030690ece\r\n- [x] fa3f94a858\r\n- [x] 8df3b9f7a9\r\n- [x] a6e2372488\r\n- [x] a81d265fb0\r\n- [x] 59e2271167\r\n- [x] ce04c35217\r\n- [x] 2da61cab7e\r\n- [x] ae2fd7b1d6\r\n- [x] d7d697ba40\r\n- [x] 2eb09886f3 ",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2014725944",
      "submitted_at": "2024-04-22T13:29:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "reviewed",
      "id": 2014775362,
      "node_id": "PRR_kwDOABII5854FwhC",
      "url": null,
      "actor": null,
      "commit_id": "2eb09886f37f40568547eda3464188df88e88eed",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2014775362",
      "submitted_at": "2024-04-22T13:32:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "reviewed",
      "id": 2022566276,
      "node_id": "PRR_kwDOABII5854jemE",
      "url": null,
      "actor": null,
      "commit_id": "2eb09886f37f40568547eda3464188df88e88eed",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2022566276",
      "submitted_at": "2024-04-26T15:03:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12626134745,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALwk4bZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12626134745",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2c2971f5ba729cfaff2413c2773d27f0fdd34092",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/2c2971f5ba729cfaff2413c2773d27f0fdd34092",
      "created_at": "2024-04-26T16:36:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12626175139,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALwlCSj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12626175139",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/803e1bf8dc4171ca7a23d6ef7e4ad4ccbb611299",
      "created_at": "2024-04-26T16:41:28Z"
    },
    {
      "event": "commented",
      "id": 2079732585,
      "node_id": "IC_kwDOABII58579jNp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079732585",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T16:41:33Z",
      "updated_at": "2024-04-26T16:41:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24308043248</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2079732585",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "labeled",
      "id": 12626175853,
      "node_id": "LE_lADOABII5854gAEwzwAAAALwlCdt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12626175853",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T16:41:33Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2079739934,
      "node_id": "IC_kwDOABII58579lAe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2079739934",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T16:46:53Z",
      "updated_at": "2024-04-26T16:46:53Z",
      "author_association": "MEMBER",
      "body": "all feedback should be addressed now",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2079739934",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12627347737,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALwpgkZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12627347737",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f9b0b322a658bacf13dd735fbbfb01bbd2de2271",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/f9b0b322a658bacf13dd735fbbfb01bbd2de2271",
      "created_at": "2024-04-26T18:51:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12627401894,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALwptym",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12627401894",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7cede4caa0a6b3dd57397d96ee98239fb890ca32",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/7cede4caa0a6b3dd57397d96ee98239fb890ca32",
      "created_at": "2024-04-26T18:57:02Z"
    },
    {
      "event": "unlabeled",
      "id": 12629286863,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAALww5_P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12629286863",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-26T23:53:07Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2028579002,
      "node_id": "PRR_kwDOABII58546ai6",
      "url": null,
      "actor": null,
      "commit_id": "7cede4caa0a6b3dd57397d96ee98239fb890ca32",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code Review ACK 7cede4caa0a6b3dd57397d96ee98239fb890ca32\r\n\r\nMy comments were addressed and I have reviewed all the commits and test this locally on regtest.\r\n\r\nI've fuzz this PR for a while locally and no any crash.",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2028579002",
      "submitted_at": "2024-04-29T13:48:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "review_requested",
      "id": 12643539049,
      "node_id": "RRE_lADOABII5854gAEwzwAAAALxnRhp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12643539049",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T13:48:30Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 12643539274,
      "node_id": "RRE_lADOABII5854gAEwzwAAAALxnRlK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12643539274",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-29T13:48:31Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12661828269,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALytCqt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12661828269",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "69deec6fd074e8524dd11103834739b02f50e814",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/69deec6fd074e8524dd11103834739b02f50e814",
      "created_at": "2024-04-30T17:44:30Z"
    },
    {
      "event": "commented",
      "id": 2086222091,
      "node_id": "IC_kwDOABII5858WTkL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2086222091",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-30T17:45:01Z",
      "updated_at": "2024-04-30T17:45:01Z",
      "author_association": "MEMBER",
      "body": "rebased on master due to conflict from https://github.com/bitcoin/bitcoin/pull/29906",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2086222091",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "reviewed",
      "id": 2033245669,
      "node_id": "PRR_kwDOABII5855MN3l",
      "url": null,
      "actor": null,
      "commit_id": "69deec6fd074e8524dd11103834739b02f50e814",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK 69deec6fd074e8524dd11103834739b02f50e814",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2033245669",
      "submitted_at": "2024-05-01T08:48:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12669349045,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALzJuy1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12669349045",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cac1e10a621a015e2c87d4b6fd724c6dd71016a6",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/cac1e10a621a015e2c87d4b6fd724c6dd71016a6",
      "created_at": "2024-05-01T11:07:41Z"
    },
    {
      "event": "reviewed",
      "id": 2033547087,
      "node_id": "PRR_kwDOABII5855NXdP",
      "url": null,
      "actor": null,
      "commit_id": "ec85c4b7123ddebc43faa69a14a0e2d939d5ceb4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2033547087",
      "submitted_at": "2024-05-01T12:43:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12670027741,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAALzMUfd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12670027741",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e4d2c121dfacddad9303fceceedde583a460d448",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/e4d2c121dfacddad9303fceceedde583a460d448",
      "created_at": "2024-05-01T12:45:11Z"
    },
    {
      "event": "commented",
      "id": 2088415179,
      "node_id": "IC_kwDOABII5858eq_L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2088415179",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T12:45:49Z",
      "updated_at": "2024-05-01T12:45:49Z",
      "author_association": "MEMBER",
      "body": "rebased to pick up 1P1C relay",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2088415179",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12685349819,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL0GxO7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12685349819",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "62e85764ed2bc962222792fb90fb7a45569d871b",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/62e85764ed2bc962222792fb90fb7a45569d871b",
      "created_at": "2024-05-02T15:43:43Z"
    },
    {
      "event": "reviewed",
      "id": 2036089555,
      "node_id": "PRR_kwDOABII5855XELT",
      "url": null,
      "actor": null,
      "commit_id": "607452a4832120d219ef42b10824c8e904f6e341",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2036089555",
      "submitted_at": "2024-05-02T16:09:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12685893641,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL0I2AJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12685893641",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b3a83ab114a147921dfaef5dc2de97bdc06242e0",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/b3a83ab114a147921dfaef5dc2de97bdc06242e0",
      "created_at": "2024-05-02T16:20:54Z"
    },
    {
      "event": "labeled",
      "id": 12693173541,
      "node_id": "LE_lADOABII5854gAEwzwAAAAL0knUl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12693173541",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T07:58:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12696997623,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL0zM73",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12696997623",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d13e9a44011ea1d3e38c578259a4b8ad1a677c1f",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/d13e9a44011ea1d3e38c578259a4b8ad1a677c1f",
      "created_at": "2024-05-03T14:10:51Z"
    },
    {
      "event": "commented",
      "id": 2093106374,
      "node_id": "IC_kwDOABII5858wkTG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2093106374",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T14:11:38Z",
      "updated_at": "2024-05-03T14:11:38Z",
      "author_association": "MEMBER",
      "body": "rebased due to conflict on master",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2093106374",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "unlabeled",
      "id": 12697215200,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAL00CDg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12697215200",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T14:29:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12697271333,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL00Pwl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12697271333",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cb397f2b7427c99e5bb3319090489137519706ea",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/cb397f2b7427c99e5bb3319090489137519706ea",
      "created_at": "2024-05-03T14:34:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12697756877,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL02GTN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12697756877",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "88733def124da76a45aa01f51612732f9e282a09",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/88733def124da76a45aa01f51612732f9e282a09",
      "created_at": "2024-05-03T15:10:39Z"
    },
    {
      "event": "labeled",
      "id": 12697759440,
      "node_id": "LE_lADOABII5854gAEwzwAAAAL02G7Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12697759440",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T15:10:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2093215430,
      "node_id": "IC_kwDOABII5858w-7G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2093215430",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T15:10:44Z",
      "updated_at": "2024-05-03T15:10:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24559142372</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2093215430",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "unlabeled",
      "id": 12698502202,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAL048Q6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12698502202",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T16:19:09Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12734185876,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL3BEGU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12734185876",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "79e0b71c0692fffed9d622811ba1c675957f6ede",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/79e0b71c0692fffed9d622811ba1c675957f6ede",
      "created_at": "2024-05-07T19:11:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12745578985,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL3shnp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12745578985",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2b16eee7b107d93f33901e9ad15b83caa73d8291",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/2b16eee7b107d93f33901e9ad15b83caa73d8291",
      "created_at": "2024-05-08T15:13:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12746678363,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL3wuBb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12746678363",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ed4e70f4ff6ec0991f7e479049105d941ef52a08",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/ed4e70f4ff6ec0991f7e479049105d941ef52a08",
      "created_at": "2024-05-08T16:47:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12748515009,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL33ubB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12748515009",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "705fcd98114669ca6d24b70c7fa78868afe00903",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/705fcd98114669ca6d24b70c7fa78868afe00903",
      "created_at": "2024-05-08T19:39:31Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12757605330,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL4aZvS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12757605330",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "created_at": "2024-05-09T13:55:29Z"
    },
    {
      "event": "reviewed",
      "id": 2045905107,
      "node_id": "PRR_kwDOABII58558gjT",
      "url": null,
      "actor": null,
      "commit_id": "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2045905107",
      "submitted_at": "2024-05-09T14:01:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12760887826,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL4m7IS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12760887826",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "created_at": "2024-05-09T18:48:19Z"
    },
    {
      "event": "commented",
      "id": 2103229267,
      "node_id": "IC_kwDOABII5859XLtT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2103229267",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-09T18:49:19Z",
      "updated_at": "2024-05-09T18:49:19Z",
      "author_association": "MEMBER",
      "body": "@glozow thanks for the review, all comments addressed",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2103229267",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "mentioned",
      "id": 12760897253,
      "node_id": "MEE_lADOABII5854gAEwzwAAAAL4m9bl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12760897253",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-09T18:49:20Z"
    },
    {
      "event": "subscribed",
      "id": 12760897273,
      "node_id": "SE_lADOABII5854gAEwzwAAAAL4m9b5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12760897273",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-09T18:49:20Z"
    },
    {
      "event": "labeled",
      "id": 12778497519,
      "node_id": "LE_lADOABII5854gAEwzwAAAAL5qGXv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12778497519",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-12T12:10:29Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2106225643,
      "node_id": "IC_kwDOABII5859inPr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2106225643",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-12T12:10:30Z",
      "updated_at": "2024-05-12T12:10:30Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n\n🚧 At least one of the CI tasks failed. Make sure to run all tests locally, according to the\ndocumentation.\n\nPossibly this is due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/24790654138</sub>",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2106225643",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "commented",
      "id": 2106231136,
      "node_id": "IC_kwDOABII5859iolg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2106231136",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-12T12:30:30Z",
      "updated_at": "2024-05-12T12:30:30Z",
      "author_association": "MEMBER",
      "body": "silent merge conflict with https://github.com/bitcoin/bitcoin/pull/29939",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2106231136",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "reviewed",
      "id": 2050218566,
      "node_id": "PRR_kwDOABII5856M9pG",
      "url": null,
      "actor": null,
      "commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "some test review",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2050218566",
      "submitted_at": "2024-05-13T10:32:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12789695772,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL6U0Uc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12789695772",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "722d1a5822707e0e6fbd7aaec4d68ae106833408",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/722d1a5822707e0e6fbd7aaec4d68ae106833408",
      "created_at": "2024-05-13T15:58:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12789912931,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL6VpVj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12789912931",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/7fd321dffb1b262aabeaac066eadc490ebd63e8c",
      "created_at": "2024-05-13T16:14:56Z"
    },
    {
      "event": "unlabeled",
      "id": 12797298016,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAL6x0Vg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12797298016",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-14T07:24:56Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 12809900412,
      "node_id": "LE_lADOABII5854gAEwzwAAAAL7h5F8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12809900412",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T01:36:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12816567359,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL77Uw_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12816567359",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ce3a662bdfc6eaa82cbfa8eef561c5a1ec312dbd",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/ce3a662bdfc6eaa82cbfa8eef561c5a1ec312dbd",
      "created_at": "2024-05-15T12:13:11Z"
    },
    {
      "event": "commented",
      "id": 2112366413,
      "node_id": "IC_kwDOABII58596CdN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2112366413",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T12:13:27Z",
      "updated_at": "2024-05-15T12:13:27Z",
      "author_association": "MEMBER",
      "body": "rebased due to conflict",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2112366413",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "unlabeled",
      "id": 12816744936,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAL78AHo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12816744936",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T12:26:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2112590380,
      "node_id": "IC_kwDOABII585965Is",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2112590380",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-15T13:47:13Z",
      "updated_at": "2024-05-15T13:47:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "While I wouldn't trust myself to correctly code-review this PR, I'd be happy to work on e2e tests that would leverage this for lightning channels fee-bumping (based on [eclair](https://github.com/acinq/eclair)) if it can help validate the logic and get this PR merged.\r\n\r\nI'd like to highlight again how important this feature is for lightning (and probably for many other L2 protocols on top of bitcoin today). This is the critical step that allows us to mitigate pinning of a commitment transaction, and guarantee that we're able to set the fees of our commitment package to a value that should ensure timely confirmation.",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2112590380",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "commented",
      "id": 2115522891,
      "node_id": "IC_kwDOABII585-GFFL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2115522891",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-16T15:14:20Z",
      "updated_at": "2024-05-16T15:14:20Z",
      "author_association": "MEMBER",
      "body": "sorry forgot to link https://github.com/bitcoin/bitcoin/pull/30072 here, added to OP",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2115522891",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12867183262,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAL-8aKe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12867183262",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d412681939dc62b7860ad235f83c565401d307bb",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/d412681939dc62b7860ad235f83c565401d307bb",
      "created_at": "2024-05-20T14:35:51Z"
    },
    {
      "event": "commented",
      "id": 2120592803,
      "node_id": "IC_kwDOABII585-Za2j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2120592803",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-20T14:36:32Z",
      "updated_at": "2024-05-20T14:36:32Z",
      "author_association": "MEMBER",
      "body": "rebased on latest #30072",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2120592803",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "labeled",
      "id": 12912641448,
      "node_id": "LE_lADOABII5854gAEwzwAAAAMBp0Wo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12912641448",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-23T16:50:02Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 12922202957,
      "node_id": "REFE_lADOABII5854gAEwzwAAAAMCOStN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12922202957",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4c387cb64ff4c74f911b1559fb0ef143ee6c268b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c387cb64ff4c74f911b1559fb0ef143ee6c268b",
      "created_at": "2024-05-24T09:25:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12925248675,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAMCZ6Sj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12925248675",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d05e3501bef19d310fb5781615f6549f631e0a3c",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/d05e3501bef19d310fb5781615f6549f631e0a3c",
      "created_at": "2024-05-24T13:37:58Z"
    },
    {
      "event": "unlabeled",
      "id": 12925486741,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAMCa0aV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12925486741",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-24T13:56:30Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2129605456,
      "node_id": "IC_kwDOABII585-7zNQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2129605456",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-24T13:57:05Z",
      "updated_at": "2024-05-24T13:57:05Z",
      "author_association": "MEMBER",
      "body": "rebased on master :rocket: ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2129605456",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "reviewed",
      "id": 2077487987,
      "node_id": "PRR_kwDOABII58570_Nz",
      "url": null,
      "actor": null,
      "commit_id": "d05e3501bef19d310fb5781615f6549f631e0a3c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2077487987",
      "submitted_at": "2024-05-24T17:42:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12928459920,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAMCmKSQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12928459920",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cddd60e47b4f9fccc27338c2526b47bbd6c34725",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/cddd60e47b4f9fccc27338c2526b47bbd6c34725",
      "created_at": "2024-05-24T18:38:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12928488751,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAMCmRUv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12928488751",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7b74cbf6ed7cafdbd458471ae89fa88c52256278",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/7b74cbf6ed7cafdbd458471ae89fa88c52256278",
      "created_at": "2024-05-24T18:41:50Z"
    },
    {
      "event": "labeled",
      "id": 12930440954,
      "node_id": "LE_lADOABII5854gAEwzwAAAAMCtt76",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12930440954",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-24T23:58:56Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 12937017928,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAMDGzpI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12937017928",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-26T14:42:33Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2085975596,
      "node_id": "PRR_kwDOABII5858VXYs",
      "url": null,
      "actor": null,
      "commit_id": "848c4e55da85ec9776ce1c16ca51ea370502125b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2085975596",
      "submitted_at": "2024-05-29T17:07:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "reviewed",
      "id": 2107324391,
      "node_id": "PRR_kwDOABII5859mzfn",
      "url": null,
      "actor": null,
      "commit_id": "7b74cbf6ed7cafdbd458471ae89fa88c52256278",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "looks pretty good 7b74cbf6ed7cafdbd458471ae89fa88c52256278",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2107324391",
      "submitted_at": "2024-06-10T10:58:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDVkYTM5Njc4MTU4OTE3N2Q0Y2ViM2I0YjU5YzlmMzA5YTVlNGQwMjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5da396781589177d4ceb3b4b59c9f309a5e4d029",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5da396781589177d4ceb3b4b59c9f309a5e4d029",
      "tree": {
        "sha": "f58777bdcf46233bada8e270456ca0dde37def46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f58777bdcf46233bada8e270456ca0dde37def46"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1ba1b178f501daa1afdd91f9efec34e5ec1e294",
          "sha": "b1ba1b178f501daa1afdd91f9efec34e5ec1e294",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b1ba1b178f501daa1afdd91f9efec34e5ec1e294"
        }
      ],
      "message": "PackageV3Checks: Relax assumptions\n\nRelax assumptions about in-mempool children of in-mempool\nparents. With package RBF, we will allow a package of size\n2 with conflicts on its parent and reconsider the parent\nif its fee is insufficient on its own.\n\nConsider:\n\nTxA (in mempool) <- TxB (in mempool)\n\nTxA (in mempool) <- TxB' (in package, conflicts with TxB) <-\nTxC (in package)\n\nIf TxB' fails to RBF TxB due to insufficient feerate, the\npackage TxB' + TxC will be considered. PackageV3Checks\ncalled on TxB' will see an in-mempool parent TxA, and\nsee the in-mempool child TxB. We cannot assume there is\nno in-mempool sibling, rather detect it and fail normally.\n\nPrior to package RBF, this would have failed on the first\nconflict in package.",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-06-10T17:17:04Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-03-26T19:28:37Z"
      },
      "sha": "5da396781589177d4ceb3b4b59c9f309a5e4d029"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13106296648,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAMNMjdI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13106296648",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2d99a9e0382fcedea1ff885a82342b5a4a87a816",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/2d99a9e0382fcedea1ff885a82342b5a4a87a816",
      "created_at": "2024-06-10T19:09:10Z"
    },
    {
      "event": "reviewed",
      "id": 2110414831,
      "node_id": "PRR_kwDOABII5859yl_v",
      "url": null,
      "actor": null,
      "commit_id": "2d99a9e0382fcedea1ff885a82342b5a4a87a816",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2110414831",
      "submitted_at": "2024-06-11T13:14:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "reviewed",
      "id": 2110459573,
      "node_id": "PRR_kwDOABII5859yw61",
      "url": null,
      "actor": null,
      "commit_id": "49b0f706fd26257505e2dd070b7d8909a01b6fcc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2110459573",
      "submitted_at": "2024-06-11T13:24:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13117559187,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAMN3hGT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13117559187",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "db21a37020bc35f334bd36d22b0b1c8ead89d48f",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/db21a37020bc35f334bd36d22b0b1c8ead89d48f",
      "created_at": "2024-06-11T13:46:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13119370599,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAMN-bVn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13119370599",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "dd364f9a813221956ec0b19f45db231b148491c2",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/dd364f9a813221956ec0b19f45db231b148491c2",
      "created_at": "2024-06-11T15:45:20Z"
    },
    {
      "event": "reviewed",
      "id": 2110845000,
      "node_id": "PRR_kwDOABII58590PBI",
      "url": null,
      "actor": null,
      "commit_id": "dd364f9a813221956ec0b19f45db231b148491c2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK dd364f9a813221956ec0b19f45db231b148491c2. non-blocking nits that can go in a followup. Also needs a release note.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2110845000",
      "submitted_at": "2024-06-12T10:45:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "review_requested",
      "id": 13129870703,
      "node_id": "RRE_lADOABII5854gAEwzwAAAAMOme1v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13129870703",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-12T10:45:59Z",
      "requested_reviewer": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13132261070,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAMOvmbO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13132261070",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8f2f64cb99b316198a1090a78878b85214780277",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/8f2f64cb99b316198a1090a78878b85214780277",
      "created_at": "2024-06-12T13:48:14Z"
    },
    {
      "event": "commented",
      "id": 2163071996,
      "node_id": "IC_kwDOABII586A7dv8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2163071996",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-12T13:53:38Z",
      "updated_at": "2024-06-12T13:53:38Z",
      "author_association": "MEMBER",
      "body": "Added a release note",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2163071996",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "reviewed",
      "id": 2115139302,
      "node_id": "PRR_kwDOABII585-Enbm",
      "url": null,
      "actor": null,
      "commit_id": "400ad7295e0324e7e177137bc78fe010232e3738",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Spent most time reviewing the core commit 612847ae1a55e92bb7732905a026be96a436372a so far, which looks correct to me (though I'm not super-familiar with the details of the feerate diagram checks that are used in this PR for the first time in production code). Still planning on looking deeper at the tests and do another full review round. Left some non-blocking nits on the way.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2115139302",
      "submitted_at": "2024-06-13T09:59:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRjMjFmNjFjNzJlNWE5N2Q5NzRjYTJjNWNiNzBiODMyOGY0ZmFiMmE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc21f61c72e5a97d974ca2c5cb70b8328f4fab2a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dc21f61c72e5a97d974ca2c5cb70b8328f4fab2a",
      "tree": {
        "sha": "da5b7c4ab1883800d375bdee9590c80ec8ce98b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da5b7c4ab1883800d375bdee9590c80ec8ce98b0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5da396781589177d4ceb3b4b59c9f309a5e4d029",
          "sha": "5da396781589177d4ceb3b4b59c9f309a5e4d029",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5da396781589177d4ceb3b4b59c9f309a5e4d029"
        }
      ],
      "message": "[policy] package rbf\n\nSupport package RBF where the conflicting package would result\nin a mempool cluster of size two, and each of its direct\nconflicts are also part of an up-to-size-2 mempool cluster.\n\nThis restricted topology allows for exact calculation\nof miner scores for each side of the equation, reducing\nthe surface area for new pins, or incentive-incompatible\nreplacements.\n\nThis allows wallets to create simple CPFP packages\nthat can fee bump other simple CPFP packages. This,\nleveraged with other restrictions such as V3 transactions,\ncan create pin-resistant applications.\n\nFuture package RBF relaxations can be considered when appropriate.\n\nCo-authored-by: glozow <gloriajzhao@gmail.com>\nCo-authored-by: Greg Sanders <gsanders87@gmail.com>",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-06-13T13:52:59Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2023-12-14T15:27:28Z"
      },
      "sha": "dc21f61c72e5a97d974ca2c5cb70b8328f4fab2a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRkMTViY2Y0NDhlYjNjNDQ1MWI2M2U4Zjc4Y2M2MWYzZjlmOWI2Mzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d15bcf448eb3c4451b63e8f78cc61f3f9f9b639",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4d15bcf448eb3c4451b63e8f78cc61f3f9f9b639",
      "tree": {
        "sha": "5a621c2ee3569305de02fed14a28bb1f600119a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a621c2ee3569305de02fed14a28bb1f600119a9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc21f61c72e5a97d974ca2c5cb70b8328f4fab2a",
          "sha": "dc21f61c72e5a97d974ca2c5cb70b8328f4fab2a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dc21f61c72e5a97d974ca2c5cb70b8328f4fab2a"
        }
      ],
      "message": "[test] package rbf",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-06-13T13:52:59Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-12-14T15:45:30Z"
      },
      "sha": "4d15bcf448eb3c4451b63e8f78cc61f3f9f9b639"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDMxNmQ3YjYzYzk3MTQ0YmEzZTIxMjAxMzE1Yzc4NDg1MjIxMGY4ZmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/316d7b63c97144ba3e21201315c784852210f8ff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/316d7b63c97144ba3e21201315c784852210f8ff",
      "tree": {
        "sha": "9206b1fe83e5535b60c121f62a95c307ba83f15c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9206b1fe83e5535b60c121f62a95c307ba83f15c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d15bcf448eb3c4451b63e8f78cc61f3f9f9b639",
          "sha": "4d15bcf448eb3c4451b63e8f78cc61f3f9f9b639",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4d15bcf448eb3c4451b63e8f78cc61f3f9f9b639"
        }
      ],
      "message": "Fuzz: pass mempool to CheckPackageMempoolAcceptResult",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-06-13T13:52:59Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-04-18T19:03:54Z"
      },
      "sha": "316d7b63c97144ba3e21201315c784852210f8ff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQzNDY2ZTRjYzUwNTFjMzE0ODczZGQxNGVjOGY3YTg4NDk0YzA3ODA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3466e4cc5051c314873dd14ec8f7a88494c0780",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d3466e4cc5051c314873dd14ec8f7a88494c0780",
      "tree": {
        "sha": "bf221e0c313c0708dbdb5a2c39e0f8f5f49d4751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf221e0c313c0708dbdb5a2c39e0f8f5f49d4751"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/316d7b63c97144ba3e21201315c784852210f8ff",
          "sha": "316d7b63c97144ba3e21201315c784852210f8ff",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/316d7b63c97144ba3e21201315c784852210f8ff"
        }
      ],
      "message": "CheckPackageMempoolAcceptResult: Check package rbf invariants",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-06-13T13:52:59Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2023-12-07T21:48:06Z"
      },
      "sha": "d3466e4cc5051c314873dd14ec8f7a88494c0780"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZlM2M0Mzk0Y2ZhZGYzMmMwNmM4YzQ3MzJkMTM2Y2ExMGMzMTY3MjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e3c4394cfadf32c06c8c4732d136ca10c316721",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6e3c4394cfadf32c06c8c4732d136ca10c316721",
      "tree": {
        "sha": "369b2966efddcbcfde8faba7859e69c7f2150356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/369b2966efddcbcfde8faba7859e69c7f2150356"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3466e4cc5051c314873dd14ec8f7a88494c0780",
          "sha": "d3466e4cc5051c314873dd14ec8f7a88494c0780",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d3466e4cc5051c314873dd14ec8f7a88494c0780"
        }
      ],
      "message": "mempool: Improve logging of replaced transactions",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-06-13T13:52:59Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-01-09T20:04:19Z"
      },
      "sha": "6e3c4394cfadf32c06c8c4732d136ca10c316721"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFmZDUyZDhlNjNlZDMyM2ExNTllYTQ5ZmQxZjEwNTQyYWJlYWNiOTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afd52d8e63ed323a159ea49fd1f10542abeacb97",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/afd52d8e63ed323a159ea49fd1f10542abeacb97",
      "tree": {
        "sha": "21c4ee17d3ddc6afa5c1a43764391775c48e64ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21c4ee17d3ddc6afa5c1a43764391775c48e64ea"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e3c4394cfadf32c06c8c4732d136ca10c316721",
          "sha": "6e3c4394cfadf32c06c8c4732d136ca10c316721",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6e3c4394cfadf32c06c8c4732d136ca10c316721"
        }
      ],
      "message": "doc: update package RBF comment",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-06-13T13:52:59Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-04-26T16:22:21Z"
      },
      "sha": "afd52d8e63ed323a159ea49fd1f10542abeacb97"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDk0ZWQ0ZmJmOGUxYTM5NmM2NTBiNTEzNGQzOTZkNmMwYmUzNWNlMTA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "tree": {
        "sha": "c26b3f7add61e23c23855bc96334628316009cb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c26b3f7add61e23c23855bc96334628316009cb2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afd52d8e63ed323a159ea49fd1f10542abeacb97",
          "sha": "afd52d8e63ed323a159ea49fd1f10542abeacb97",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/afd52d8e63ed323a159ea49fd1f10542abeacb97"
        }
      ],
      "message": "Add release note for size 2 package rbf",
      "committer": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-06-13T13:52:59Z"
      },
      "author": {
        "name": "Greg Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2024-06-12T13:53:19Z"
      },
      "sha": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13147295119,
      "node_id": "HRFPE_lADOABII5854gAEwzwAAAAMPo82P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13147295119",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "commit_url": "https://api.github.com/repos/instagibbs/bitcoin/commits/94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "created_at": "2024-06-13T13:53:30Z"
    },
    {
      "event": "commented",
      "id": 2165748009,
      "node_id": "IC_kwDOABII586BFrEp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2165748009",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-13T13:54:44Z",
      "updated_at": "2024-06-13T13:54:44Z",
      "author_association": "MEMBER",
      "body": "@theStack part of splitting out the diagram stuff to a prep PR is that you can just assume it means \"economically rational to replace\" :+1: ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2165748009",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "mentioned",
      "id": 13147314939,
      "node_id": "MEE_lADOABII5854gAEwzwAAAAMPpBr7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13147314939",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-13T13:54:46Z"
    },
    {
      "event": "subscribed",
      "id": 13147314967,
      "node_id": "SE_lADOABII5854gAEwzwAAAAMPpBsX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13147314967",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-13T13:54:46Z"
    },
    {
      "event": "reviewed",
      "id": 2118444350,
      "node_id": "PRR_kwDOABII585-ROU-",
      "url": null,
      "actor": null,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reACK 94ed4fbf8e via range-diff",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2118444350",
      "submitted_at": "2024-06-14T13:48:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "reviewed",
      "id": 2118667559,
      "node_id": "PRR_kwDOABII585-SE0n",
      "url": null,
      "actor": null,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK 94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2118667559",
      "submitted_at": "2024-06-14T15:31:30Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "reviewed",
      "id": 2118754168,
      "node_id": "PRR_kwDOABII585-SZ94",
      "url": null,
      "actor": null,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code-review ACK 94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2118754168",
      "submitted_at": "2024-06-14T16:19:18Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "review_requested",
      "id": 13163424501,
      "node_id": "RRE_lADOABII5854gAEwzwAAAAMQmer1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13163424501",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-14T16:44:31Z",
      "requested_reviewer": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2123251625,
      "node_id": "PRR_kwDOABII585-jj-p",
      "url": null,
      "actor": null,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "utACK 94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#pullrequestreview-2123251625",
      "submitted_at": "2024-06-17T17:15:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
    },
    {
      "event": "commented",
      "id": 2174159709,
      "node_id": "IC_kwDOABII586Blwtd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2174159709",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-17T18:37:06Z",
      "updated_at": "2024-06-17T18:37:06Z",
      "author_association": "MEMBER",
      "body": "opened followup at https://github.com/bitcoin/bitcoin/pull/30295",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2174159709",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "commented",
      "id": 2174428338,
      "node_id": "IC_kwDOABII586BmySy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2174428338",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-17T21:09:11Z",
      "updated_at": "2024-06-17T21:09:11Z",
      "author_association": "MEMBER",
      "body": "ACK 94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2174428338",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "merged",
      "id": 13191826227,
      "node_id": "ME_lADOABII5854gAEwzwAAAAMSS0sz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13191826227",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "41544b8f96dbc9c6b8998acd6522200d67cdc16d",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41544b8f96dbc9c6b8998acd6522200d67cdc16d",
      "created_at": "2024-06-17T21:22:55Z"
    },
    {
      "event": "closed",
      "id": 13191826249,
      "node_id": "CE_lADOABII5854gAEwzwAAAAMSS0tJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13191826249",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-17T21:22:55Z"
    },
    {
      "event": "labeled",
      "id": 13342739567,
      "node_id": "LE_lADOABII5854gAEwzwAAAAMbSgxv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13342739567",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-30T18:24:20Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "referenced",
      "id": 13489488684,
      "node_id": "REFE_lADOABII5854gAEwzwAAAAMkCUMs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13489488684",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c4d45b695ef27e21d35e886b08887e2ecf272ce7",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4d45b695ef27e21d35e886b08887e2ecf272ce7",
      "created_at": "2024-07-12T16:15:32Z"
    },
    {
      "event": "commented",
      "id": 2227216176,
      "node_id": "IC_kwDOABII586EwJ8w",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2227216176",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-14T06:46:50Z",
      "updated_at": "2024-07-14T06:46:50Z",
      "author_association": "MEMBER",
      "body": "Ported to the CMake-based build system in https://github.com/hebasto/bitcoin/pull/264.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#issuecomment-2227216176",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/28984"
    },
    {
      "event": "unlabeled",
      "id": 13497140060,
      "node_id": "UNLE_lADOABII5854gAEwzwAAAAMkfgNc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13497140060",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-14T06:46:58Z",
      "label": {
        "name": "Needs CMake port",
        "color": "0e8a16"
      }
    },
    {
      "event": "locked",
      "id": 18616263122,
      "node_id": "LOE_lADOABII5854gAEwzwAAAARVnaHS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18616263122",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-14T11:39:33Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414385368",
      "pull_request_review_id": 1763228824,
      "id": 1414385368,
      "node_id": "PRRC_kwDOABII585UTc7Y",
      "diff_hunk": "@@ -181,3 +181,36 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& direct_conflicts,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        // Note that this assumes no in-mempool ancestors\n+        const CFeeRate replacement_miner_score(replacement_fees, replacement_vsize);\n+\n+        for (const auto& entry : direct_conflicts) {\n+            const bool conflict_is_v3{entry->GetSharedTx()->nVersion == 3};",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a6730af0678255d229eebf2cc31fcba9b35e1fd5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this can't be hit yet; post-v3 it can. I can remove this, or leave a note, or both. It makes some package rbfs more useful\r\n\r\n(edit: it's used in https://github.com/bitcoin/bitcoin/pull/29001 functional tests )",
      "created_at": "2023-12-04T19:26:16Z",
      "updated_at": "2023-12-08T15:28:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1414385368",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1414385368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415812593",
      "pull_request_review_id": 1765400607,
      "id": 1415812593,
      "node_id": "PRRC_kwDOABII585UY5Xx",
      "diff_hunk": "@@ -228,6 +229,36 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n \n+    // Tests for CheckMinerScores\n+\n+    // These tests use modified fees (including prioritisation), not base fees.\n+    BOOST_CHECK(CheckMinerScores(entry5_low->GetFee() + entry6_low_prioritised->GetFee() + 1,",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "1996defeef0bb82cb51f6efe0ed0cb7092273f89",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "commit message is old; will fix",
      "created_at": "2023-12-05T15:28:27Z",
      "updated_at": "2023-12-05T15:28:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1415812593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1415812593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 249,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423084047",
      "pull_request_review_id": 1776101239,
      "id": 1423084047,
      "node_id": "PRRC_kwDOABII585U0ooP",
      "diff_hunk": "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 1) {",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "557da6c9027d676871fc03e55efcfbc0a7a42adb",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should this be \"> 2\"?  ",
      "created_at": "2023-12-11T20:23:38Z",
      "updated_at": "2023-12-11T20:24:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1423084047",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423084047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423098019",
      "pull_request_review_id": 1776123407,
      "id": 1423098019,
      "node_id": "PRRC_kwDOABII585U0sCj",
      "diff_hunk": "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 1) {",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "557da6c9027d676871fc03e55efcfbc0a7a42adb",
      "in_reply_to_id": 1423084047,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have a failing unit test for this :facepalm: \r\n\r\npushed fix",
      "created_at": "2023-12-11T20:36:54Z",
      "updated_at": "2023-12-11T20:38:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1423098019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1423098019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424077858",
      "pull_request_review_id": 1777611474,
      "id": 1424077858,
      "node_id": "PRRC_kwDOABII585U4bQi",
      "diff_hunk": "@@ -1332,11 +1347,8 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(m_total_modified_fees, m_total_vsize), all_package_wtxids)}});\n     }\n \n-    // Apply package mempool ancestor/descendant limits. Skip if there is only one transaction,\n-    // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n-    // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n-    std::string err_string;\n-    if (txns.size() > 1 && !PackageMempoolChecks(txns, m_total_vsize, package_state)) {\n+    // Apply package mempool ancestor/descendant limits.\n+    if (!PackageMempoolChecks(txns, m_total_vsize, package_state)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there a reason to drop the `txns.size() > 1` test in this `if` clause?",
      "created_at": "2023-12-12T14:31:23Z",
      "updated_at": "2023-12-12T19:34:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424077858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424077858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1351,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424084885",
      "pull_request_review_id": 1777611474,
      "id": 1424084885,
      "node_id": "PRRC_kwDOABII585U4c-V",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...not if it's submitted with other transactions",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 4,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I found the \"not\" in this comment confusing.",
      "created_at": "2023-12-12T14:36:16Z",
      "updated_at": "2023-12-12T19:34:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424084885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424084885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424218735",
      "pull_request_review_id": 1777863994,
      "id": 1424218735,
      "node_id": "PRRC_kwDOABII585U49pv",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...not if it's submitted with other transactions\n+        replacable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replacable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replacable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replacable_tx[\"hex\"])",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 14,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: Did you mean _replacEable_?",
      "created_at": "2023-12-12T15:54:55Z",
      "updated_at": "2023-12-28T21:50:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424218735",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424218735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 59,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424358331",
      "pull_request_review_id": 1777611474,
      "id": 1424358331,
      "node_id": "PRRC_kwDOABII585U5fu7",
      "diff_hunk": "@@ -972,7 +994,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n-    m_rbf = !ws.m_conflicts.empty();\n+    m_rbf |= !ws.m_conflicts.empty();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps a comment here would be helpful to explain why this change is needed.",
      "created_at": "2023-12-12T17:38:57Z",
      "updated_at": "2023-12-12T19:34:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424358331",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424358331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1063,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424392025",
      "pull_request_review_id": 1777611474,
      "id": 1424392025,
      "node_id": "PRRC_kwDOABII585U5n9Z",
      "diff_hunk": "@@ -1337,11 +1423,10 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n         }\n         // Make the coins created by this transaction available for subsequent transactions in the\n-        // package to spend. Since we already checked conflicts in the package and we don't allow\n-        // replacements, we don't need to track the coins spent. Note that this logic will need to be\n-        // updated if package replace-by-fee is allowed in the future.\n-        assert(!args.m_allow_replacement);\n-        assert(!m_rbf);\n+        // package to spend. Since we already checked conflicts, no transaction can spend a coin\n+        // needed by another transaction in the package. We also need to make sure that no package\n+        // tx replaces (or replaces the ancestor of) the parent of another package tx. As long as we\n+        // check these two things, we don't need to track the coins spent.",
      "path": "src/validation.cpp",
      "position": 247,
      "original_position": 189,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was trying to figure out exactly why this code is safe in a package RBF context. I think for a generalized package RBF, this would not be safe, because we do not verify that a child transaction in an incoming package (say) isn't spending a coin in the mempool that would be conflicted by some other transaction in the package.\r\n\r\nHowever, in this particular case, we are enforcing in `PackageMempoolChecks()` (further down) that the incoming package has **no** other in-mempool ancestors (ie the new package is a cluster of size 2), and so I think that condition is what precludes the scenario I'm concerned about above.  (Specifically: if, say, we allowed the incoming package to have 1 in-mempool ancestor A, then it's possible that a package could consist of transactions (P, C) such that P spent one of A's outputs, while transaction C conflicted with A, which I don't think would be caught anywhere right now.)\r\n\r\nIf my understanding here is correct, I think it'd be worth updating the comment to explain this a bit more (and perhaps we could add a test that covers the scenario I described).",
      "created_at": "2023-12-12T18:01:10Z",
      "updated_at": "2023-12-12T19:34:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424392025",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424392025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1538,
      "original_line": 1538,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424495073",
      "pull_request_review_id": 1778311406,
      "id": 1424495073,
      "node_id": "PRRC_kwDOABII585U6BHh",
      "diff_hunk": "@@ -1332,11 +1347,8 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             MempoolAcceptResult::FeeFailure(placeholder_state, CFeeRate(m_total_modified_fees, m_total_vsize), all_package_wtxids)}});\n     }\n \n-    // Apply package mempool ancestor/descendant limits. Skip if there is only one transaction,\n-    // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n-    // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n-    std::string err_string;\n-    if (txns.size() > 1 && !PackageMempoolChecks(txns, m_total_vsize, package_state)) {\n+    // Apply package mempool ancestor/descendant limits.\n+    if (!PackageMempoolChecks(txns, m_total_vsize, package_state)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "in_reply_to_id": 1424077858,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's essentially an existing no-op. IIRC `AcceptMultipleTransactions` is only called in *unit tests* with size 1, otherwise it's always > 1. (maybe I should just kill those tests and `Assume()`?",
      "created_at": "2023-12-12T19:40:46Z",
      "updated_at": "2023-12-12T19:41:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424495073",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424495073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1351,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424551588",
      "pull_request_review_id": 1778401060,
      "id": 1424551588,
      "node_id": "PRRC_kwDOABII585U6O6k",
      "diff_hunk": "@@ -1337,11 +1423,10 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n         }\n         // Make the coins created by this transaction available for subsequent transactions in the\n-        // package to spend. Since we already checked conflicts in the package and we don't allow\n-        // replacements, we don't need to track the coins spent. Note that this logic will need to be\n-        // updated if package replace-by-fee is allowed in the future.\n-        assert(!args.m_allow_replacement);\n-        assert(!m_rbf);\n+        // package to spend. Since we already checked conflicts, no transaction can spend a coin\n+        // needed by another transaction in the package. We also need to make sure that no package\n+        // tx replaces (or replaces the ancestor of) the parent of another package tx. As long as we\n+        // check these two things, we don't need to track the coins spent.",
      "path": "src/validation.cpp",
      "position": 247,
      "original_position": 189,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": 1424392025,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Pushed a functional test covering this case specifically which is rejected due to existence of mempool ancestors.\r\n\r\nI'll try and rephrase soon.",
      "created_at": "2023-12-12T20:41:09Z",
      "updated_at": "2023-12-12T20:41:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1424551588",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1424551588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1538,
      "original_line": 1538,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425282679",
      "pull_request_review_id": 1779525637,
      "id": 1425282679,
      "node_id": "PRRC_kwDOABII585U9BZ3",
      "diff_hunk": "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 1,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 671de055c8b3ff48b16b93d8389b80fead6342ac\r\nCommit title indicate \" [doc] cpfp carveout is excluded in packages \"\r\n\r\nBut the diff is not a only a doc change.",
      "created_at": "2023-12-13T12:24:42Z",
      "updated_at": "2023-12-30T13:30:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1425282679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425282679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425551039",
      "pull_request_review_id": 1779525637,
      "id": 1425551039,
      "node_id": "PRRC_kwDOABII585U-C6_",
      "diff_hunk": "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In 228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f\r\n```cpp\r\n#include <algorithm>\r\n```\r\n",
      "created_at": "2023-12-13T15:50:08Z",
      "updated_at": "2023-12-30T13:30:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1425551039",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425551039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425583249",
      "pull_request_review_id": 1779525637,
      "id": 1425583249,
      "node_id": "PRRC_kwDOABII585U-KyR",
      "diff_hunk": "@@ -507,7 +507,7 @@ class MemPoolAccept\n                             /* m_bypass_limits */ false,",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Would be nice if this commit to be split into two,  RBF utility functions and test in one commit and package rbf validation in another?",
      "created_at": "2023-12-13T16:13:46Z",
      "updated_at": "2023-12-30T13:30:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1425583249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1425583249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428378451",
      "pull_request_review_id": 1784767020,
      "id": 1428378451,
      "node_id": "PRRC_kwDOABII585VI1NT",
      "diff_hunk": "@@ -0,0 +1,590 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.000000001\"))",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 183,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "too many zeroes on this, it's a 1/10 of a sat",
      "created_at": "2023-12-15T19:07:51Z",
      "updated_at": "2023-12-15T19:07:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1428378451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428378451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428379004",
      "pull_request_review_id": 1784767711,
      "id": 1428379004,
      "node_id": "PRRC_kwDOABII585VI1V8",
      "diff_hunk": "@@ -0,0 +1,590 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.000000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient anti-DoS fees')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.000000001\"))",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 198,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "39c09efadeb5e23a8eee754b86ce4fbea2b0e30c",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "too many zeroes on this, it's a 1/10 of a sat",
      "created_at": "2023-12-15T19:08:27Z",
      "updated_at": "2023-12-15T19:08:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1428379004",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1428379004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1437884761",
      "pull_request_review_id": 1777863994,
      "id": 1437884761,
      "node_id": "PRRC_kwDOABII585VtGFZ",
      "diff_hunk": "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 2) {\n+                    return strprintf(\"Parent in package rbf should not have multiple descendants\");\n+                }\n+            }\n+        } else if (desc_count == 1) {\n+            // It should be the parent in a parent-child cluster\n+            const auto& parent = direct_conflict;\n+            if (parent->GetCountWithAncestors() > 1) {\n+                return strprintf(\"Parent in package rbf should not have any ancestors\");\n+            }\n+            const auto& child = parent->GetMemPoolChildrenConst().begin();\n+            if (child->get().GetCountWithAncestors() != 2) {\n+                return strprintf(\"Child in package RBF has too many ancestors\");\n+            }\n+        } else {\n+            return strprintf(\"Too many descendants of direct conflict: %zu\", desc_count);\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        // Note that this assumes no in-mempool ancestors\n+        const CFeeRate replacement_miner_score(replacement_fees, replacement_vsize);\n+\n+        for (const auto& entry : original_transactions) {\n+            CFeeRate original_miner_score(entry->GetModFeesWithAncestors(), entry->GetSizeWithAncestors());\n+            original_miner_score = std::min(original_miner_score, CFeeRate(entry->GetModifiedFee(), entry->GetTxSize()));\n+            if (replacement_miner_score < original_miner_score) {",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Shouldn’t this be greater or equal to _exceed_ the original?\r\n\r\n> 6. The package feerate (total package fee / total package vsize) must exceed the min(individual feerate, ancestor feerate) of every transaction that would be evicted (direct and indirect conflicts).",
      "created_at": "2023-12-28T21:17:33Z",
      "updated_at": "2023-12-28T21:50:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1437884761",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1437884761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443276867",
      "pull_request_review_id": 1806682742,
      "id": 1443276867,
      "node_id": "PRRC_kwDOABII585WBqhD",
      "diff_hunk": "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 2) {\n+                    return strprintf(\"Parent in package rbf should not have multiple descendants\");\n+                }\n+            }\n+        } else if (desc_count == 1) {\n+            // It should be the parent in a parent-child cluster\n+            const auto& parent = direct_conflict;\n+            if (parent->GetCountWithAncestors() > 1) {\n+                return strprintf(\"Parent in package rbf should not have any ancestors\");\n+            }\n+            const auto& child = parent->GetMemPoolChildrenConst().begin();\n+            if (child->get().GetCountWithAncestors() != 2) {\n+                return strprintf(\"Child in package RBF has too many ancestors\");\n+            }\n+        } else {\n+            return strprintf(\"Too many descendants of direct conflict: %zu\", desc_count);\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        // Note that this assumes no in-mempool ancestors\n+        const CFeeRate replacement_miner_score(replacement_fees, replacement_vsize);\n+\n+        for (const auto& entry : original_transactions) {\n+            CFeeRate original_miner_score(entry->GetModFeesWithAncestors(), entry->GetSizeWithAncestors());\n+            original_miner_score = std::min(original_miner_score, CFeeRate(entry->GetModifiedFee(), entry->GetTxSize()));\n+            if (replacement_miner_score < original_miner_score) {",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": 1437884761,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Probably yeah, tests should catch this case regardless. Will add one after deciding what way to go with heuristic vs diagram check",
      "created_at": "2024-01-05T19:03:19Z",
      "updated_at": "2024-01-05T19:03:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1443276867",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1443276867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444457214",
      "pull_request_review_id": 1808799983,
      "id": 1444457214,
      "node_id": "PRRC_kwDOABII585WGKr-",
      "diff_hunk": "@@ -106,4 +106,18 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/** Ensure we are only attempting RBF against connected components we can easily\n+ * compute mining scores from.",
      "path": "src/policy/rbf.h",
      "position": null,
      "original_position": 5,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe add \"Each entry must be part of a cluster with size <=2.\"",
      "created_at": "2024-01-08T11:04:46Z",
      "updated_at": "2024-01-08T12:35:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444457214",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444457214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444482970",
      "pull_request_review_id": 1808799983,
      "id": 1444482970,
      "node_id": "PRRC_kwDOABII585WGQ-a",
      "diff_hunk": "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 2) {\n+                    return strprintf(\"Parent in package rbf should not have multiple descendants\");\n+                }\n+            }\n+        } else if (desc_count == 1) {\n+            // It should be the parent in a parent-child cluster\n+            const auto& parent = direct_conflict;\n+            if (parent->GetCountWithAncestors() > 1) {\n+                return strprintf(\"Parent in package rbf should not have any ancestors\");\n+            }\n+            const auto& child = parent->GetMemPoolChildrenConst().begin();\n+            if (child->get().GetCountWithAncestors() != 2) {\n+                return strprintf(\"Child in package RBF has too many ancestors\");\n+            }\n+        } else {\n+            return strprintf(\"Too many descendants of direct conflict: %zu\", desc_count);\n+        }",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looks correct. If you're willing to entertain a suggestion to make it more readable, I think the following logic is easier to follow and the strings less ambiguous. Since \"desc count' and \"anc count\" usually mean inclusive of tx, it's confusing if it's different in this function.\r\n\r\n```suggestion\r\n        // Ancestor and descendant counts are inclusive of the tx itself.\r\n        const auto ancestor_count{direct_conflict->GetCountWithAncestors()};\r\n        const auto descendant_count{direct_conflict->GetCountWithDescendants()};\r\n        const bool has_ancestor{ancestor_count > 1};\r\n        const bool has_descendant{descendant_count > 1};\r\n\r\n        const auto& txid_string{direct_conflict->GetSharedTx()->GetHash().ToString()};\r\n\r\n        // The only allowed configurations are:\r\n        // 1 ancestor and 0 descendant\r\n        // 0 ancestor and 1 descendant\r\n        // 0 ancestor and 0 descendant\r\n        if (ancestor_count > 2) {\r\n            return strprintf(\"%s has %u ancestors, max 1 allowed\", ancestor_count, txid_string\", txid_string);\r\n        } else if (descendant_count > 2) {\r\n            return strprintf(\"%s has %u descendants, max 1 allowed\", ancestor_count, txid_string\", txid_string);\r\n        } else if (has_ancestor && has_descendant) {\r\n            return strprintf(\"%s has both ancestor and descendant\", txid_string);\r\n        }\r\n\r\n        // Additionally enforce that:\r\n        // If we have a parent, we are its only child.\r\n        // If we have a child,  we are its only parent.\r\n        if (has_descendant) {\r\n            const auto& our_child = direct_conflict->GetMemPoolChildrenConst().begin();\r\n            if (our_child->get().GetCountWithAncestors() > 2) {\r\n                return strprintf(\"%s is not the only parent of child %s\",\r\n                                 txid_string, our_child->get().GetSharedTx()->GetHash().ToString());\r\n            }\r\n        } else if (has_ancestor) {\r\n            const auto& our_parent = direct_conflict->GetMemPoolParentsConst().begin();\r\n            if (our_parent->get().GetCountWithDescendants() > 2) {\r\n                return strprintf(\"%s is not the only child of parent %s\",\r\n                                 txid_string, our_parent->get().GetSharedTx()->GetHash().ToString());\r\n            }\r\n        }\r\n```",
      "created_at": "2024-01-08T11:32:16Z",
      "updated_at": "2024-01-08T12:35:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444482970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444482970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 188,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444492292",
      "pull_request_review_id": 1808799983,
      "id": 1444492292,
      "node_id": "PRRC_kwDOABII585WGTQE",
      "diff_hunk": "@@ -1067,7 +1072,81 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate child_feerate(child_ws.m_modified_fees, child_ws.m_vsize);\n+    if (parent_feerate >= child_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if direct conflicts are all members of a up to size 2 cluster\n+    if (const auto err_string{CheckConflictTopology(direct_conflict_iters)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: unable to compute mining score\", *err_string);\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_string{CheckMinerScores(m_total_modified_fees, m_total_vsize,\n+                                               m_all_conflicts)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient feerate\", *err_string);\n+    }\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(m_conflicting_fees, m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: good place to use annotations to double-check we're passing in the right fees:\r\n```suggestion\r\n    if (const auto err_string{PaysForRBF(/*original_fees=*/m_conflicting_fees, /*replacement_fees=*/m_total_modified_fees, m_total_vsize,\r\n                                         m_pool.m_incremental_relay_feerate, child_hash)}) {\r\n```",
      "created_at": "2024-01-08T11:42:16Z",
      "updated_at": "2024-01-08T12:35:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444492292",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444492292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1143,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444495751",
      "pull_request_review_id": 1808799983,
      "id": 1444495751,
      "node_id": "PRRC_kwDOABII585WGUGH",
      "diff_hunk": "@@ -228,6 +242,62 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n \n+    // Tests for CheckMinerScores\n+\n+    // Check non-modified package fee vs modified in-mempool which is used internally\n+    BOOST_CHECK(entry6_low_prioritised->GetFee() < entry6_low_prioritised->GetModifiedFee());\n+    BOOST_CHECK(CheckMinerScores(entry5_low->GetFee() + entry6_low_prioritised->GetFee() + 1,\n+                                 entry5_low->GetTxSize() + entry6_low_prioritised->GetTxSize(),\n+                                 set_56_low).has_value());\n+\n+    // Now modified vs modified\n+    BOOST_CHECK(CheckMinerScores(entry5_low->GetModifiedFee() + entry6_low_prioritised->GetModifiedFee() + 1,\n+                                 entry5_low->GetTxSize() + entry6_low_prioritised->GetTxSize(),\n+                                 set_56_low) == std::nullopt);\n+\n+\n+    // Replacement must be higher than the the feerate and ancestor feerates of replaced (same value here)\n+    BOOST_CHECK(CheckMinerScores(entry1_normal->GetFee() - 1,\n+                                 entry1_normal->GetTxSize(),\n+                                 set_12_normal).has_value());\n+\n+    // Note entry4_high's individual feerate is higher than its ancestor feerate (since it's a CPFP tx)\n+    BOOST_CHECK(CheckMinerScores(entry4_high->GetFee() - 1,\n+                                 entry4_high->GetTxSize(),\n+                                 {entry4_high}) == std::nullopt);\n+\n+    // It's also higher than the scores of both transactions\n+    BOOST_CHECK(CheckMinerScores(entry4_high->GetFee() - 1,\n+                                 entry4_high->GetTxSize(),\n+                                 set_34_cpfp) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe add a test case for `CheckConflictTopology` where our 1 parent has 2 children, or our 1 child has 2 parents",
      "created_at": "2024-01-08T11:45:54Z",
      "updated_at": "2024-01-08T12:35:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444495751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444495751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444505904",
      "pull_request_review_id": 1808799983,
      "id": 1444505904,
      "node_id": "PRRC_kwDOABII585WGWkw",
      "diff_hunk": "@@ -1366,7 +1390,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             const auto effective_feerate_wtxids = args.m_package_feerates ? all_package_wtxids :\n                 std::vector<Wtxid>{ws.m_ptx->GetWitnessHash()};\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                            MempoolAcceptResult::Success(std::move(m_replaced_transactions),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "56e2fb281a0e62cb70e610370c2dce9e79bc05f0\r\n\r\nWe copy this list into every transaction's `MempoolAcceptResult` (which does makes sense since both the parent and the child participated in the replacement of these txns - that's probably helpful for showing package RBFs in the RPC results). But the duplicates are a problem when we add to `vExtraTxnForCompact` in p2p:\r\nhttps://github.com/bitcoin/bitcoin/blob/04b9df0f9fd95e907b2e8bf823d63e9dfb37b4ad/src/net_processing.cpp#L4254-L4256\r\n\r\nPossible solutions:\r\n- Only add `m_replaced_transactions` to the last result in the `SubmitPackage` loop (along the lines of \"the child is the true 'replacer' of all these txns\"). I think this is fine since this var is per-subpackage.\r\n- Add logic to net_processing to deal with duplicates. Probably the most robust solution, and allows us to keep the lists per tx in the RPC results.\r\n- Add a new field to `PackageMempoolAcceptResult` and don't populate the `MempoolAcceptResult`s when there is a pcakage RBF (ehhh kind of ugly).",
      "created_at": "2024-01-08T11:56:51Z",
      "updated_at": "2024-01-08T12:35:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444505904",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444505904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1593,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444555154",
      "pull_request_review_id": 1808799983,
      "id": 1444555154,
      "node_id": "PRRC_kwDOABII585WGimS",
      "diff_hunk": "@@ -1116,19 +1139,18 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     const uint256& hash = ws.m_hash;\n     TxValidationState& state = ws.m_state;\n     const bool bypass_limits = args.m_bypass_limits;\n-\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n \n     // Remove conflicting transactions from the mempool\n-    for (CTxMemPool::txiter it : ws.m_all_conflicting)\n+    for (CTxMemPool::txiter it : m_all_conflicts)\n     {\n         LogPrint(BCLog::MEMPOOL, \"replacing tx %s (wtxid=%s) with %s (wtxid=%s) for %s additional fees, %d delta bytes\\n\",\n                 it->GetTx().GetHash().ToString(),\n                 it->GetTx().GetWitnessHash().ToString(),\n                 hash.ToString(),\n                 tx.GetWitnessHash().ToString(),\n-                FormatMoney(ws.m_modified_fees - ws.m_conflicting_fees),\n-                (int)entry->GetTxSize() - (int)ws.m_conflicting_size);\n+                FormatMoney(ws.m_modified_fees - m_conflicting_fees),\n+                (int)entry->GetTxSize() - (int)m_conflicting_size);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 130,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just realized this log is pretty nonsensical for package RBF, and also whenever there are multiple transactions being replaced in by a single one.\r\n\r\nMaybe this log should be:\r\n```\r\n        LogPrint(BCLog::MEMPOOL, \"replacing mempool tx %s (wtxid=%s, fees=%s, vsize=%s). New tx %s (wtxid=%s, fees=%s, vsize=%s)\\n\",\r\n                it->GetTx().GetHash().ToString(),\r\n                it->GetTx().GetWitnessHash().ToString(),\r\n                it->GetFee(),\r\n                it->GetTxSize(),\r\n                hash.ToString(),\r\n                tx.GetWitnessHash().ToString(),\r\n                entry->GetFee(),\r\n                entry->GetTxSize());\r\n```\r\n\r\nAnd we should add a replacement summary log at the end of `SubmitPackage` and `AcceptSingleTransaction`:\r\n```\r\n    if (!m_replaced_transactions.empty()) {\r\n        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with %u new one(s) for %s additional fees, %d delta bytes\\n\",\r\n                 workspaces.size(), m_replaced_transactions.size(),\r\n                 m_total_modified_fees - m_conflicting_fees,\r\n                 m_total_vsize - m_conflicting_size);\r\n    }\r\n```\r\n\r\n```\r\n    if (!m_replaced_transactions.empty()) {\r\n        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new one for %s additional fees, %d delta bytes\\n\",\r\n                 m_replaced_transactions.size(),\r\n                 m_total_modified_fees - m_conflicting_fees,\r\n                 m_total_vsize - m_conflicting_size);\r\n    }\r\n```",
      "created_at": "2024-01-08T12:33:59Z",
      "updated_at": "2024-01-08T12:35:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444555154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444555154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1152,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444669440",
      "pull_request_review_id": 1809143290,
      "id": 1444669440,
      "node_id": "PRRC_kwDOABII585WG-gA",
      "diff_hunk": "@@ -1366,7 +1390,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             const auto effective_feerate_wtxids = args.m_package_feerates ? all_package_wtxids :\n                 std::vector<Wtxid>{ws.m_ptx->GetWitnessHash()};\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                            MempoolAcceptResult::Success(std::move(m_replaced_transactions),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "in_reply_to_id": 1444505904,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "dealing with duplicates seems strictly superior, will take a look, thanks!",
      "created_at": "2024-01-08T13:47:43Z",
      "updated_at": "2024-01-08T13:47:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444669440",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444669440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1593,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444673561",
      "pull_request_review_id": 1809148837,
      "id": 1444673561,
      "node_id": "PRRC_kwDOABII585WG_gZ",
      "diff_hunk": "@@ -1366,7 +1390,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             const auto effective_feerate_wtxids = args.m_package_feerates ? all_package_wtxids :\n                 std::vector<Wtxid>{ws.m_ptx->GetWitnessHash()};\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                            MempoolAcceptResult::Success(std::move(m_replaced_transactions),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "in_reply_to_id": 1444505904,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "the more work solutions would be to refactor everything to have a \"subpackage eval\" state, but juice is probably not worth the squeeze until cluster mempool, where \"chunk eval\" is likely the natural boundary",
      "created_at": "2024-01-08T13:50:28Z",
      "updated_at": "2024-01-08T13:50:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1444673561",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1444673561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1593,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446006765",
      "pull_request_review_id": 1811014239,
      "id": 1446006765,
      "node_id": "PRRC_kwDOABII585WME_t",
      "diff_hunk": "@@ -1366,7 +1390,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             const auto effective_feerate_wtxids = args.m_package_feerates ? all_package_wtxids :\n                 std::vector<Wtxid>{ws.m_ptx->GetWitnessHash()};\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                            MempoolAcceptResult::Success(std::move(m_replaced_transactions),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "in_reply_to_id": 1444505904,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yeah I think a temporary `set<Wtxid>` within net processing is probably the easiest",
      "created_at": "2024-01-09T12:02:10Z",
      "updated_at": "2024-01-09T12:02:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446006765",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446006765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1593,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434642",
      "pull_request_review_id": 1811719724,
      "id": 1446434642,
      "node_id": "PRRC_kwDOABII585WNtdS",
      "diff_hunk": "@@ -228,6 +242,62 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1_normal, entry3_low}) == std::nullopt);\n \n+    // Tests for CheckMinerScores\n+\n+    // Check non-modified package fee vs modified in-mempool which is used internally\n+    BOOST_CHECK(entry6_low_prioritised->GetFee() < entry6_low_prioritised->GetModifiedFee());\n+    BOOST_CHECK(CheckMinerScores(entry5_low->GetFee() + entry6_low_prioritised->GetFee() + 1,\n+                                 entry5_low->GetTxSize() + entry6_low_prioritised->GetTxSize(),\n+                                 set_56_low).has_value());\n+\n+    // Now modified vs modified\n+    BOOST_CHECK(CheckMinerScores(entry5_low->GetModifiedFee() + entry6_low_prioritised->GetModifiedFee() + 1,\n+                                 entry5_low->GetTxSize() + entry6_low_prioritised->GetTxSize(),\n+                                 set_56_low) == std::nullopt);\n+\n+\n+    // Replacement must be higher than the the feerate and ancestor feerates of replaced (same value here)\n+    BOOST_CHECK(CheckMinerScores(entry1_normal->GetFee() - 1,\n+                                 entry1_normal->GetTxSize(),\n+                                 set_12_normal).has_value());\n+\n+    // Note entry4_high's individual feerate is higher than its ancestor feerate (since it's a CPFP tx)\n+    BOOST_CHECK(CheckMinerScores(entry4_high->GetFee() - 1,\n+                                 entry4_high->GetTxSize(),\n+                                 {entry4_high}) == std::nullopt);\n+\n+    // It's also higher than the scores of both transactions\n+    BOOST_CHECK(CheckMinerScores(entry4_high->GetFee() - 1,\n+                                 entry4_high->GetTxSize(),\n+                                 set_34_cpfp) == std::nullopt);\n+\n+    // Tests for CheckConflictTopology\n+\n+    // Tx4 has 23 descendants\n+    BOOST_CHECK(CheckConflictTopology(set_34_cpfp).has_value());\n+\n+    // No descendants yet\n+    BOOST_CHECK(CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+\n+    // Add 1 descendant, still ok\n+    add_descendants(tx9, 1, pool);\n+    BOOST_CHECK(CheckConflictTopology({entry9_unchained}) == std::nullopt);\n+",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": 1444495751,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Pretty sure following section covers it, adding two descendants one by one to `tx10` and checking the resulting failure",
      "created_at": "2024-01-09T18:04:51Z",
      "updated_at": "2024-01-09T18:04:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434642",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 322,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434675",
      "pull_request_review_id": 1811719805,
      "id": 1446434675,
      "node_id": "PRRC_kwDOABII585WNtdz",
      "diff_hunk": "@@ -1067,7 +1072,81 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate child_feerate(child_ws.m_modified_fees, child_ws.m_vsize);\n+    if (parent_feerate >= child_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if direct conflicts are all members of a up to size 2 cluster\n+    if (const auto err_string{CheckConflictTopology(direct_conflict_iters)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: unable to compute mining score\", *err_string);\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_string{CheckMinerScores(m_total_modified_fees, m_total_vsize,\n+                                               m_all_conflicts)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient feerate\", *err_string);\n+    }\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(m_conflicting_fees, m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": 1444492292,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-01-09T18:04:54Z",
      "updated_at": "2024-01-09T18:04:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434675",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434675"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1143,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434720",
      "pull_request_review_id": 1811719880,
      "id": 1446434720,
      "node_id": "PRRC_kwDOABII585WNteg",
      "diff_hunk": "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 2) {\n+                    return strprintf(\"Parent in package rbf should not have multiple descendants\");\n+                }\n+            }\n+        } else if (desc_count == 1) {\n+            // It should be the parent in a parent-child cluster\n+            const auto& parent = direct_conflict;\n+            if (parent->GetCountWithAncestors() > 1) {\n+                return strprintf(\"Parent in package rbf should not have any ancestors\");\n+            }\n+            const auto& child = parent->GetMemPoolChildrenConst().begin();\n+            if (child->get().GetCountWithAncestors() != 2) {\n+                return strprintf(\"Child in package RBF has too many ancestors\");\n+            }\n+        } else {\n+            return strprintf(\"Too many descendants of direct conflict: %zu\", desc_count);\n+        }",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": 1444482970,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "cleaner, thanks. will take(minus typos :) )",
      "created_at": "2024-01-09T18:04:57Z",
      "updated_at": "2024-01-09T18:04:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434720",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 188,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434808",
      "pull_request_review_id": 1811720024,
      "id": 1446434808,
      "node_id": "PRRC_kwDOABII585WNtf4",
      "diff_hunk": "@@ -106,4 +106,18 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n                                       CFeeRate relay_fee,\n                                       const uint256& txid);\n \n+/** Ensure we are only attempting RBF against connected components we can easily\n+ * compute mining scores from.",
      "path": "src/policy/rbf.h",
      "position": null,
      "original_position": 5,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": 1444457214,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this all got moved internal to mempool",
      "created_at": "2024-01-09T18:05:02Z",
      "updated_at": "2024-01-09T18:05:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434903",
      "pull_request_review_id": 1811720197,
      "id": 1446434903,
      "node_id": "PRRC_kwDOABII585WNthX",
      "diff_hunk": "@@ -507,7 +507,7 @@ class MemPoolAccept\n                             /* m_bypass_limits */ false,",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": 1425583249,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "replaced entirely(I think?)",
      "created_at": "2024-01-09T18:05:09Z",
      "updated_at": "2024-01-09T18:05:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434933",
      "pull_request_review_id": 1811720243,
      "id": 1446434933,
      "node_id": "PRRC_kwDOABII585WNth1",
      "diff_hunk": "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": 1425551039,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "replaced section of code entirely",
      "created_at": "2024-01-09T18:05:11Z",
      "updated_at": "2024-01-09T18:05:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434963",
      "pull_request_review_id": 1811720313,
      "id": 1446434963,
      "node_id": "PRRC_kwDOABII585WNtiT",
      "diff_hunk": "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 1,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "in_reply_to_id": 1425282679,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "changed wording of commit",
      "created_at": "2024-01-09T18:05:13Z",
      "updated_at": "2024-01-09T18:05:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446434963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446434963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435012",
      "pull_request_review_id": 1811720385,
      "id": 1446435012,
      "node_id": "PRRC_kwDOABII585WNtjE",
      "diff_hunk": "@@ -181,3 +181,54 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckConflictTopology(const CTxMemPool::setEntries& direct_conflicts)\n+{\n+    for (const auto& direct_conflict : direct_conflicts) {\n+        const auto desc_count = direct_conflict->GetCountWithDescendants() - 1;\n+        if (desc_count == 0) {\n+            // It should be by itself, or be a child in a parent-child cluster\n+            if (direct_conflict->GetCountWithAncestors() > 2) {\n+                return strprintf(\"Child transaction has too many ancestors\");\n+            }\n+            if (direct_conflict->GetCountWithAncestors() == 2) {\n+                const auto& parent = direct_conflict->GetMemPoolParentsConst().begin();\n+                if (parent->get().GetCountWithDescendants() > 2) {\n+                    return strprintf(\"Parent in package rbf should not have multiple descendants\");\n+                }\n+            }\n+        } else if (desc_count == 1) {\n+            // It should be the parent in a parent-child cluster\n+            const auto& parent = direct_conflict;\n+            if (parent->GetCountWithAncestors() > 1) {\n+                return strprintf(\"Parent in package rbf should not have any ancestors\");\n+            }\n+            const auto& child = parent->GetMemPoolChildrenConst().begin();\n+            if (child->get().GetCountWithAncestors() != 2) {\n+                return strprintf(\"Child in package RBF has too many ancestors\");\n+            }\n+        } else {\n+            return strprintf(\"Too many descendants of direct conflict: %zu\", desc_count);\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        // Note that this assumes no in-mempool ancestors\n+        const CFeeRate replacement_miner_score(replacement_fees, replacement_vsize);\n+\n+        for (const auto& entry : original_transactions) {\n+            CFeeRate original_miner_score(entry->GetModFeesWithAncestors(), entry->GetSizeWithAncestors());\n+            original_miner_score = std::min(original_miner_score, CFeeRate(entry->GetModifiedFee(), entry->GetTxSize()));\n+            if (replacement_miner_score < original_miner_score) {",
      "path": "src/policy/rbf.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": 1437884761,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "replaced with diagram check; should be fine now since it must be strictly superior.",
      "created_at": "2024-01-09T18:05:16Z",
      "updated_at": "2024-01-09T18:05:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435012",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435046",
      "pull_request_review_id": 1811720475,
      "id": 1446435046,
      "node_id": "PRRC_kwDOABII585WNtjm",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...not if it's submitted with other transactions\n+        replacable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replacable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replacable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replacable_tx[\"hex\"])",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 14,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "in_reply_to_id": 1424218735,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2024-01-09T18:05:19Z",
      "updated_at": "2024-01-09T18:05:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435046",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 59,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435113",
      "pull_request_review_id": 1811720589,
      "id": 1446435113,
      "node_id": "PRRC_kwDOABII585WNtkp",
      "diff_hunk": "@@ -1337,11 +1423,10 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n         }\n         // Make the coins created by this transaction available for subsequent transactions in the\n-        // package to spend. Since we already checked conflicts in the package and we don't allow\n-        // replacements, we don't need to track the coins spent. Note that this logic will need to be\n-        // updated if package replace-by-fee is allowed in the future.\n-        assert(!args.m_allow_replacement);\n-        assert(!m_rbf);\n+        // package to spend. Since we already checked conflicts, no transaction can spend a coin\n+        // needed by another transaction in the package. We also need to make sure that no package\n+        // tx replaces (or replaces the ancestor of) the parent of another package tx. As long as we\n+        // check these two things, we don't need to track the coins spent.",
      "path": "src/validation.cpp",
      "position": 247,
      "original_position": 189,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "228a5ed16586ef93e7ec5c5da3ef4df0d5fc322f",
      "in_reply_to_id": 1424392025,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "rephrased into the two cases",
      "created_at": "2024-01-09T18:05:24Z",
      "updated_at": "2024-01-09T18:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1538,
      "original_line": 1538,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435138",
      "pull_request_review_id": 1811720638,
      "id": 1446435138,
      "node_id": "PRRC_kwDOABII585WNtlC",
      "diff_hunk": "@@ -972,7 +994,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n-    m_rbf = !ws.m_conflicts.empty();\n+    m_rbf |= !ws.m_conflicts.empty();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "in_reply_to_id": 1424358331,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added",
      "created_at": "2024-01-09T18:05:26Z",
      "updated_at": "2024-01-09T18:05:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435138",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1063,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435204",
      "pull_request_review_id": 1811720738,
      "id": 1446435204,
      "node_id": "PRRC_kwDOABII585WNtmE",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...not if it's submitted with other transactions",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 4,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "671de055c8b3ff48b16b93d8389b80fead6342ac",
      "in_reply_to_id": 1424084885,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "reworded ",
      "created_at": "2024-01-09T18:05:29Z",
      "updated_at": "2024-01-09T18:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446435204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446435204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446545360",
      "pull_request_review_id": 1811900894,
      "id": 1446545360,
      "node_id": "PRRC_kwDOABII585WOIfQ",
      "diff_hunk": "@@ -1116,19 +1139,18 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     const uint256& hash = ws.m_hash;\n     TxValidationState& state = ws.m_state;\n     const bool bypass_limits = args.m_bypass_limits;\n-\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n \n     // Remove conflicting transactions from the mempool\n-    for (CTxMemPool::txiter it : ws.m_all_conflicting)\n+    for (CTxMemPool::txiter it : m_all_conflicts)\n     {\n         LogPrint(BCLog::MEMPOOL, \"replacing tx %s (wtxid=%s) with %s (wtxid=%s) for %s additional fees, %d delta bytes\\n\",\n                 it->GetTx().GetHash().ToString(),\n                 it->GetTx().GetWitnessHash().ToString(),\n                 hash.ToString(),\n                 tx.GetWitnessHash().ToString(),\n-                FormatMoney(ws.m_modified_fees - ws.m_conflicting_fees),\n-                (int)entry->GetTxSize() - (int)ws.m_conflicting_size);\n+                FormatMoney(ws.m_modified_fees - m_conflicting_fees),\n+                (int)entry->GetTxSize() - (int)m_conflicting_size);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 130,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "in_reply_to_id": 1444555154,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-01-09T20:05:24Z",
      "updated_at": "2024-01-09T20:05:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446545360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446545360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1152,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446545395",
      "pull_request_review_id": 1811900954,
      "id": 1446545395,
      "node_id": "PRRC_kwDOABII585WOIfz",
      "diff_hunk": "@@ -1366,7 +1390,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             const auto effective_feerate_wtxids = args.m_package_feerates ? all_package_wtxids :\n                 std::vector<Wtxid>{ws.m_ptx->GetWitnessHash()};\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                            MempoolAcceptResult::Success(std::move(m_replaced_transactions),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 199,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "56e2fb281a0e62cb70e610370c2dce9e79bc05f0",
      "in_reply_to_id": 1444505904,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "left a comment for future work",
      "created_at": "2024-01-09T20:05:27Z",
      "updated_at": "2024-01-09T20:05:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1446545395",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1446545395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1593,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569130553",
      "pull_request_review_id": 2006530259,
      "id": 1569130553,
      "node_id": "PRRC_kwDOABII585dhwg5",
      "diff_hunk": "@@ -1798,6 +1798,8 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n+    // Note: If package evaluation is exposed, we need to make sure the same\n+    // tx isn't added multiple times in one invocation.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b0ab6875bb05f34d3f4783dfe7b60d1d3dda2cfc",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems like a merge conflict with #28970, maybe add the fix here instead?",
      "created_at": "2024-04-17T16:26:56Z",
      "updated_at": "2024-04-17T17:13:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569130553",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569130553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1801,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569134261",
      "pull_request_review_id": 2006530259,
      "id": 1569134261,
      "node_id": "PRRC_kwDOABII585dhxa1",
      "diff_hunk": "@@ -1098,16 +1102,15 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     }\n     if (const auto err_string{PaysForRBF(m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n                                          m_pool.m_incremental_relay_feerate, hash)}) {\n-        // Even though this is a fee-related failure, this result is TX_MEMPOOL_POLICY, not\n-        // TX_RECONSIDERABLE, because it cannot be bypassed using package validation.\n-        // This must be changed if package RBF is enabled.\n-        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+        // Result may change in another package",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "34c513554c7be97d91446126bb3ef0de2884fc19",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "34c513554c7be97d91446126bb3ef0de2884fc19\r\n\r\nThis seems slightly inaccurate, as it wouldn't currently be in a package if `ReplacementChecks` is happening?",
      "created_at": "2024-04-17T16:29:59Z",
      "updated_at": "2024-04-17T17:13:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569134261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569134261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569241334",
      "pull_request_review_id": 2006733782,
      "id": 1569241334,
      "node_id": "PRRC_kwDOABII585diLj2",
      "diff_hunk": "@@ -1098,16 +1102,15 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     }\n     if (const auto err_string{PaysForRBF(m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n                                          m_pool.m_incremental_relay_feerate, hash)}) {\n-        // Even though this is a fee-related failure, this result is TX_MEMPOOL_POLICY, not\n-        // TX_RECONSIDERABLE, because it cannot be bypassed using package validation.\n-        // This must be changed if package RBF is enabled.\n-        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+        // Result may change in another package",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "34c513554c7be97d91446126bb3ef0de2884fc19",
      "in_reply_to_id": 1569134261,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"in a package\"?",
      "created_at": "2024-04-17T17:52:12Z",
      "updated_at": "2024-04-17T17:52:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569241334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569241334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569270142",
      "pull_request_review_id": 2006797308,
      "id": 1569270142,
      "node_id": "PRRC_kwDOABII585diSl-",
      "diff_hunk": "@@ -68,10 +69,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n             return strprintf(\"tx %s unexpectedly failed: %s\", wtxid.ToString(), atmp_result.m_state.ToString());\n         }\n \n-        //m_replaced_transactions should exist iff the result was VALID\n-        if (atmp_result.m_replaced_transactions.has_value() != valid) {\n-            return strprintf(\"tx %s result should %shave m_replaced_transactions\",\n+        if (atmp_result.m_replaced_transactions.has_value()) {\n+            // m_replaced_transactions should exist iff the result was VALID\n+            if (!valid) {\n+                return strprintf(\"tx %s result should %shave m_replaced_transactions\",\n                                     wtxid.ToString(), valid ? \"\" : \"not \");\n+            }\n+            // Each subpackage is allowed MAX_REPLACEMENT_CANDIDATES replacements (only checking individually here)\n+            if (atmp_result.m_replaced_transactions.value().size() > MAX_REPLACEMENT_CANDIDATES) {\n+                return strprintf(\"tx %s result replaced too many transactions\",\n+                                    wtxid.ToString());\n+            }\n+\n+            // Replacements can't happen for subpackages larger than 2\n+            if (!atmp_result.m_replaced_transactions.value().empty() &&\n+                atmp_result.m_wtxids_fee_calculations.has_value() && atmp_result.m_wtxids_fee_calculations.value().size() > 2) {\n+                 return strprintf(\"tx %s was part of a too-large package RBF subpackage\",",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "f0c6e68d5d289d34934d57fb8d352ac81d81ab04",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe you can also check the topology/cluster size of this tx in mempool?",
      "created_at": "2024-04-17T18:12:44Z",
      "updated_at": "2024-04-17T18:12:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1569270142",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1569270142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571093831",
      "pull_request_review_id": 2009428569,
      "id": 1571093831,
      "node_id": "PRRC_kwDOABII585dpP1H",
      "diff_hunk": "@@ -1798,6 +1798,8 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n+    // Note: If package evaluation is exposed, we need to make sure the same\n+    // tx isn't added multiple times in one invocation.",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b0ab6875bb05f34d3f4783dfe7b60d1d3dda2cfc",
      "in_reply_to_id": 1569130553,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think #28970 is handling this properly, as it's the only place where we expose package evaluation over p2p. Can just remove this commit?",
      "created_at": "2024-04-18T16:56:18Z",
      "updated_at": "2024-04-18T16:56:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1571093831",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1571093831"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1801,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1802,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572363409",
      "pull_request_review_id": 2011414824,
      "id": 1572363409,
      "node_id": "PRRC_kwDOABII585duFyR",
      "diff_hunk": "@@ -1098,16 +1102,15 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     }\n     if (const auto err_string{PaysForRBF(m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n                                          m_pool.m_incremental_relay_feerate, hash)}) {\n-        // Even though this is a fee-related failure, this result is TX_MEMPOOL_POLICY, not\n-        // TX_RECONSIDERABLE, because it cannot be bypassed using package validation.\n-        // This must be changed if package RBF is enabled.\n-        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+        // Result may change in another package",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "34c513554c7be97d91446126bb3ef0de2884fc19",
      "in_reply_to_id": 1569134261,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "pushed updated text",
      "created_at": "2024-04-19T13:20:31Z",
      "updated_at": "2024-04-19T13:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1572363409",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572363409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572364608",
      "pull_request_review_id": 2011417179,
      "id": 1572364608,
      "node_id": "PRRC_kwDOABII585duGFA",
      "diff_hunk": "@@ -68,10 +69,24 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n             return strprintf(\"tx %s unexpectedly failed: %s\", wtxid.ToString(), atmp_result.m_state.ToString());\n         }\n \n-        //m_replaced_transactions should exist iff the result was VALID\n-        if (atmp_result.m_replaced_transactions.has_value() != valid) {\n-            return strprintf(\"tx %s result should %shave m_replaced_transactions\",\n+        if (atmp_result.m_replaced_transactions.has_value()) {\n+            // m_replaced_transactions should exist iff the result was VALID\n+            if (!valid) {\n+                return strprintf(\"tx %s result should %shave m_replaced_transactions\",\n                                     wtxid.ToString(), valid ? \"\" : \"not \");\n+            }\n+            // Each subpackage is allowed MAX_REPLACEMENT_CANDIDATES replacements (only checking individually here)\n+            if (atmp_result.m_replaced_transactions.value().size() > MAX_REPLACEMENT_CANDIDATES) {\n+                return strprintf(\"tx %s result replaced too many transactions\",\n+                                    wtxid.ToString());\n+            }\n+\n+            // Replacements can't happen for subpackages larger than 2\n+            if (!atmp_result.m_replaced_transactions.value().empty() &&\n+                atmp_result.m_wtxids_fee_calculations.has_value() && atmp_result.m_wtxids_fee_calculations.value().size() > 2) {\n+                 return strprintf(\"tx %s was part of a too-large package RBF subpackage\",",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "f0c6e68d5d289d34934d57fb8d352ac81d81ab04",
      "in_reply_to_id": 1569270142,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added a small check here using `GetEntry` that takes `Wtxid`s.",
      "created_at": "2024-04-19T13:21:31Z",
      "updated_at": "2024-04-19T13:21:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1572364608",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1572364608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574737173",
      "pull_request_review_id": 2014725944,
      "id": 1574737173,
      "node_id": "PRRC_kwDOABII585d3JUV",
      "diff_hunk": "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 6,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "At first when I see  CPFP carveout disabled I thought we are not longer supporting single transaction CPFP carveout because the linked document is describing rules for a single transaction CPFP carveout.\r\n\r\nBut from the commit message and reading the code I understand thats not the case, I think we should be explicit that it's package CPFP carvout that is disabled. \r\n\r\n```suggestion\r\n* [Package CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\r\n```",
      "created_at": "2024-04-22T13:12:37Z",
      "updated_at": "2024-04-22T13:29:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574737173",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574737173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574739231",
      "pull_request_review_id": 2014725944,
      "id": 1574739231,
      "node_id": "PRRC_kwDOABII585d3J0f",
      "diff_hunk": "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\n+\n+   - *Rationale*: This carve out cannot be accurately applied when there are multiple transactions'\n+     ancestors and descendants being considered at the same time.\n+",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 10,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This also implies that [single conflict package RBF carvout](https://github.com/bitcoin/bitcoin/pull/23711#discussion_r765766768) is not supported, is this worth mentioning?\r\n",
      "created_at": "2024-04-22T13:14:07Z",
      "updated_at": "2024-04-22T13:29:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574739231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574739231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574741503",
      "pull_request_review_id": 2014725944,
      "id": 1574741503,
      "node_id": "PRRC_kwDOABII585d3KX_",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 18,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        # Ensure an individual transaction with single direct conflict can RBF the chain which used our carve-out rule\r\n\r\n```",
      "created_at": "2024-04-22T13:15:20Z",
      "updated_at": "2024-04-22T13:29:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574741503",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574741503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574744045",
      "pull_request_review_id": 2014725944,
      "id": 1574744045,
      "node_id": "PRRC_kwDOABII585d3K_t",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 24,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe test that Package RBF carveout is not supported?\r\n```suggestion\r\n\r\n        # But We can not package RBF the chain which used our carveout rule\r\n        replaceable_tx_conflict = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\r\n        txns_conflict = [replaceable_tx_conflict[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx_conflict[\"new_utxos\"])[\"tx\"]]\r\n        txns_conflict_hex = [tx.serialize().hex() for tx in txns_conflict]\r\n        assert_equal(self.nodes[0].testmempoolaccept(txns_conflict_hex)[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\r\n        pkg_result = self.nodes[0].submitpackage(txns_conflict_hex)\r\n        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns_conflict[0].getwtxid()][\"error\"]\r\n        assert_equal(pkg_result[\"tx-results\"][txns_conflict[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\r\n```",
      "created_at": "2024-04-22T13:17:12Z",
      "updated_at": "2024-04-22T13:29:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574744045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574744045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574766371",
      "pull_request_review_id": 2014775362,
      "id": 1574766371,
      "node_id": "PRRC_kwDOABII585d3Qcj",
      "diff_hunk": "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\n+\n+   - *Rationale*: This carve out cannot be accurately applied when there are multiple transactions'\n+     ancestors and descendants being considered at the same time.\n+\n+The following rules are only enforced for packages to be submitted to the mempool (not\n+enforced for test accepts):\n ",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 13,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "2eb09886f37f40568547eda3464188df88e88eed",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In `packages.md` there is note stating \"Replace By Fee is currently disabled for packages.\" This is no longer the case, some variants of package can now be RBF'd I think we should indicate that we now support cluster size 2 package replacement into node's mempool stating the new acceptance rules.",
      "created_at": "2024-04-22T13:32:15Z",
      "updated_at": "2024-04-22T13:32:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574766371",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574766371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574879185",
      "pull_request_review_id": 2014970576,
      "id": 1574879185,
      "node_id": "PRRC_kwDOABII585d3r_R",
      "diff_hunk": "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\n+\n+   - *Rationale*: This carve out cannot be accurately applied when there are multiple transactions'\n+     ancestors and descendants being considered at the same time.\n+",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 10,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": 1574739231,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The carve-out, by definition, doesn't have support in (sub)package contexts. Specific suggestions to clarify are welcome of course.",
      "created_at": "2024-04-22T14:41:31Z",
      "updated_at": "2024-04-22T14:41:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1574879185",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1574879185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579508562",
      "pull_request_review_id": 2022566276,
      "id": 1579508562,
      "node_id": "PRRC_kwDOABII585eJWNS",
      "diff_hunk": "@@ -1123,7 +1126,74 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a6e2372488140d66fc874243bee9092c6cbf99c1",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Question: here you mean the package RBF rules in OP not BIP125 right?",
      "created_at": "2024-04-25T13:49:25Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1579508562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579508562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579748212",
      "pull_request_review_id": 2022566276,
      "id": 1579748212,
      "node_id": "PRRC_kwDOABII585eKQt0",
      "diff_hunk": "@@ -842,4 +843,138 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(",
      "path": "src/test/txpackage_tests.cpp",
      "position": 90,
      "original_position": 89,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `tx_parent_3` is the same transaction `tx_parent_1` maybe just use `tx_parent_1` as parent of `tx_child_3`",
      "created_at": "2024-04-25T15:55:48Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1579748212",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579748212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1020,
      "original_line": 1020,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579749486",
      "pull_request_review_id": 2022566276,
      "id": 1579749486,
      "node_id": "PRRC_kwDOABII585eKRBu",
      "diff_hunk": "@@ -842,4 +843,138 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_3, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 200 - 1300, /*submit=*/false));\n+\n+        // 1 parent paying 200sat, 1 child paying 200sat. Both v2.\n+        Package package1{tx_parent_1, tx_child_1};\n+        // 1 parent paying 800sat, 1 child paying 200sat. Both v2.\n+        Package package2{tx_parent_2, tx_child_2};\n+        // 1 parent paying 200sat, 1 child paying 1300. Both v2.\n+        Package package3{tx_parent_3, tx_child_3};\n+        // In all packages, the parents conflict with each other",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`package1` and `package3` has the same parent",
      "created_at": "2024-04-25T15:56:39Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1579749486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1579749486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 936,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580798337",
      "pull_request_review_id": 2022566276,
      "id": 1580798337,
      "node_id": "PRRC_kwDOABII585eORGB",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 37,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You  moved  `fill_mempool` to util in #29735 ",
      "created_at": "2024-04-26T10:04:48Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580798337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580798337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580896456",
      "pull_request_review_id": 2022566276,
      "id": 1580896456,
      "node_id": "PRRC_kwDOABII585eOpDI",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 237,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this might be a better name\r\n```suggestion\r\n    def test_package_rbf_with_conflicting_packages(self):\r\n```",
      "created_at": "2024-04-26T11:29:31Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580896456",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580896456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580918022",
      "pull_request_review_id": 2022566276,
      "id": 1580918022,
      "node_id": "PRRC_kwDOABII585eOuUG",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 261,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The parent transaction will be detected as `inmempool` as such the child just get added to the mempool if it passes normal transaction consensus and policy rules, the package does not have any conflict and hence package RBF rules are not checked.\r\n\r\nThis test also passes when I removed package RBF commits\r\n```suggestion\r\n    def test_submitpackage_with_a_mempool_parent(self):\r\n        self.log.info(\"Test that submitpackage works when parent transactions was already submitted\")\r\n```",
      "created_at": "2024-04-26T11:52:37Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580918022",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580918022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 260,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580946063",
      "pull_request_review_id": 2022566276,
      "id": 1580946063,
      "node_id": "PRRC_kwDOABII585eO1KP",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):",
      "path": "test/functional/mempool_package_rbf.py",
      "position": 244,
      "original_position": 275,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: \r\n```suggestion\r\n    def test_package_rbf_with_numerous_ancestors(self):\r\n```",
      "created_at": "2024-04-26T12:17:16Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580946063",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580946063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 244,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580970962",
      "pull_request_review_id": 2022566276,
      "id": 1580970962,
      "node_id": "PRRC_kwDOABII585eO7PS",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 485,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n    def test_package_rbf_with_wrong_pkg_size(self):\r\n```",
      "created_at": "2024-04-26T12:39:31Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580970962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580970962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 485,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580973594",
      "pull_request_review_id": 2022566276,
      "id": 1580973594,
      "node_id": "PRRC_kwDOABII585eO74a",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2, unexpected=[])\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns3_fail = [parent_result1[\"tx\"], parent_result2[\"tx\"], child_result[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster not size two')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns3_fail)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the rate of directly conflicted parent, even though",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 548,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        # Package 2 feerate is below the feerate of directly conflicted parent, even though\r\n```",
      "created_at": "2024-04-26T12:41:32Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580973594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580973594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 548,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580978287",
      "pull_request_review_id": 2022566276,
      "id": 1580978287,
      "node_id": "PRRC_kwDOABII585eO9Bv",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2, unexpected=[])\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns3_fail = [parent_result1[\"tx\"], parent_result2[\"tx\"], child_result[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster not size two')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns3_fail)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the rate of directly conflicted parent, even though\n+        # total fees are higher than the original package\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE + fee_delta)\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        self.generate(node, 1)\n+\n+    def test_child_conflicts_parent_mempool_ancestor(self):\n+        self.fill_mempool()\n+        # Reset coins since we filled the mempool with current coins\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False, confirmed_only=True)\n+\n+        self.log.info(\"Test that package RBF doesn't have issues with mempool<->package conflicts via inconsistency\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # Put simple tx in mempool to chain off of",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 565,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Incomplete sentence?",
      "created_at": "2024-04-26T12:45:09Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1580978287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1580978287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581088045",
      "pull_request_review_id": 2022566276,
      "id": 1581088045,
      "node_id": "PRRC_kwDOABII585ePX0t",
      "diff_hunk": "@@ -1271,13 +1271,15 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // Remove conflicting transactions from the mempool\n     for (CTxMemPool::txiter it : m_all_conflicts)\n     {\n-        LogPrint(BCLog::MEMPOOL, \"replacing tx %s (wtxid=%s) with %s (wtxid=%s) for %s additional fees, %d delta bytes\\n\",\n+        LogPrint(BCLog::MEMPOOL, \"replacing mempool tx %s (wtxid=%s, fees=%s, vsize=%s). New tx %s (wtxid=%s, fees=%s, vsize=%s)\\n\",",
      "path": "src/validation.cpp",
      "position": 178,
      "original_position": 5,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "ce04c3521783aaf82bbf6e295f814e8a227f8d78",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nice this will be helpful for collecting data, previously we only know that a transaction is replaced now it indicates which tx replaced it!\r\n\r\nE.g two transaction package evicting another two\r\n```terminal\r\n2024-04-26T14:36:53.889903Z [httpworker.3] [validation.cpp:1282] [Finalize] [mempool] replacing mempool tx 1ae8118ceb71249b2af793f671a1293a4c999e89f5091f52c42a3cf1e08c6840 (wtxid=97fc8654dcbd025b4165c56179d124ee4adf2d65acf8a66f8f5464dab7d07089, fees=10000, vsize=104). New tx a95629c7f4690199fce1ffba70b8fa9ce854d74da76e9e88fd0d4676211f10d5 (wtxid=009f7beb2df5b699bea4233a5b9b6fab2a80d42639b19291d4909a63f8739c47, fees=10000, vsize=104)\r\n2024-04-26T14:36:53.889910Z [httpworker.3] [validation.cpp:1282] [Finalize] [mempool] replacing mempool tx 9bd6895590404d3b04a208bbebf48a0397cb43b4df7ad349427be5e7dc1a2bbb (wtxid=e26f5339fcf7d3232c9bd58a99e6e2cb9c2369d70e7f8fed7296221ee8667119, fees=10000, vsize=104). New tx a95629c7f4690199fce1ffba70b8fa9ce854d74da76e9e88fd0d4676211f10d5 (wtxid=009f7beb2df5b699bea4233a5b9b6fab2a80d42639b19291d4909a63f8739c47, fees=10000, vsize=104)\r\n2024-04-26T14:36:53.889920Z [httpworker.3] [validationinterface.cpp:203] [TransactionRemovedFromMempool] [validation] Enqueuing TransactionRemovedFromMempool: txid=1ae8118ceb71249b2af793f671a1293a4c999e89f5091f52c42a3cf1e08c6840 wtxid=97fc8654dcbd025b4165c56179d124ee4adf2d65acf8a66f8f5464dab7d07089 reason=replaced\r\n2024-04-26T14:36:53.889929Z [scheduler] [validationinterface.cpp:203] [operator()] [validation] TransactionRemovedFromMempool: txid=1ae8118ceb71249b2af793f671a1293a4c999e89f5091f52c42a3cf1e08c6840 wtxid=97fc8654dcbd025b4165c56179d124ee4adf2d65acf8a66f8f5464dab7d07089 reason=replaced\r\n2024-04-26T14:36:53.889938Z [httpworker.3] [validationinterface.cpp:203] [TransactionRemovedFromMempool] [validation] Enqueuing TransactionRemovedFromMempool: txid=9bd6895590404d3b04a208bbebf48a0397cb43b4df7ad349427be5e7dc1a2bbb wtxid=e26f5339fcf7d3232c9bd58a99e6e2cb9c2369d70e7f8fed7296221ee8667119 reason=replaced\r\n2024-04-26T14:36:53.889946Z [scheduler] [validationinterface.cpp:203] [operator()] [validation] TransactionRemovedFromMempool: txid=9bd6895590404d3b04a208bbebf48a0397cb43b4df7ad349427be5e7dc1a2bbb wtxid=e26f5339fcf7d3232c9bd58a99e6e2cb9c2369d70e7f8fed7296221ee8667119 reason=replaced\r\n2024-04-26T14:36:53.889974Z [httpworker.3] [validation.cpp:1378] [SubmitPackage] [mempool] replaced 2 mempool transactions with 2 new one(s) for 40000 additional fees, 0 delta bytes\r\n2024-04-26T14:36:53.889981Z [httpworker.3] [validationinterface.cpp:193] [TransactionAddedToMempool] [validation] Enqueuing TransactionAddedToMempool: txid=a95629c7f4690199fce1ffba70b8fa9ce854d74da76e9e88fd0d4676211f10d5 wtxid=009f7beb2df5b699bea4233a5b9b6fab2a80d42639b19291d4909a63f8739c47\r\n2024-04-26T14:36:53.889988Z [httpworker.3] [validationinterface.cpp:193] [TransactionAddedToMempool] [validation] Enqueuing TransactionAddedToMempool: txid=69e3f27c8097c2f76b32c3f6fb31cc11d89b674bed800cf61236e921c8c9d5c3 wtxid=ed7b933757b73937bf454af80e60cbd9b4fb24d7ce95d297519f5327a0470333\r\n2024-04-26T14:36:53.889995Z [scheduler] [validationinterface.cpp:193] [operator()] [validation] TransactionAddedToMempool: txid=a95629c7f4690199fce1ffba70b8fa9ce854d74da76e9e88fd0d4676211f10d5 wtxid=009f7beb2df5b699bea4233a5b9b6fab2a80d42639b19291d4909a63f8739c47\r\n2024-04-26T14:36:53.890001Z [scheduler] [validationinterface.cpp:193] [operator()] [validation] TransactionAddedToMempool: txid=69e3f27c8097c2f76b32c3f6fb31cc11d89b674bed800cf61236e921c8c9d5c3 wtxid=ed7b933757b73937bf454af80e60cbd9b4fb24d7ce95d297519f5327a0470333\r\n```\r\n",
      "created_at": "2024-04-26T14:05:39Z",
      "updated_at": "2024-04-26T16:46:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581088045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581088045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1297,
      "original_line": 1297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581146454",
      "pull_request_review_id": 2022566276,
      "id": 1581146454,
      "node_id": "PRRC_kwDOABII585ePmFW",
      "diff_hunk": "@@ -1450,6 +1459,13 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n         m_pool.m_signals->TransactionAddedToMempool(tx_info, m_pool.GetAndIncrementSequence());\n     }\n \n+    if (!m_replaced_transactions.empty()) {\n+        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new one for %s additional fees, %d delta bytes\\n\",",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "ce04c3521783aaf82bbf6e295f814e8a227f8d78",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new transaction for %s additional fees, %d delta bytes\\n\",\r\n```",
      "created_at": "2024-04-26T14:49:48Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581146454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581146454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1463,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581147216",
      "pull_request_review_id": 2022566276,
      "id": 1581147216,
      "node_id": "PRRC_kwDOABII585ePmRQ",
      "diff_hunk": "@@ -1450,6 +1459,13 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n         m_pool.m_signals->TransactionAddedToMempool(tx_info, m_pool.GetAndIncrementSequence());\n     }\n \n+    if (!m_replaced_transactions.empty()) {\n+        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new one for %s additional fees, %d delta bytes\\n\",\n+                 m_replaced_transactions.size(),\n+                 ws.m_modified_fees - (int)m_conflicting_fees,\n+                 ws.m_vsize - (int)m_conflicting_size);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "ce04c3521783aaf82bbf6e295f814e8a227f8d78",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\nuse static cast?",
      "created_at": "2024-04-26T14:50:27Z",
      "updated_at": "2024-04-26T15:03:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581147216",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581147216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1465,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275198",
      "pull_request_review_id": 2025448599,
      "id": 1581275198,
      "node_id": "PRRC_kwDOABII585eQFg-",
      "diff_hunk": "@@ -1450,6 +1459,13 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n         m_pool.m_signals->TransactionAddedToMempool(tx_info, m_pool.GetAndIncrementSequence());\n     }\n \n+    if (!m_replaced_transactions.empty()) {\n+        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new one for %s additional fees, %d delta bytes\\n\",\n+                 m_replaced_transactions.size(),\n+                 ws.m_modified_fees - (int)m_conflicting_fees,\n+                 ws.m_vsize - (int)m_conflicting_size);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "ce04c3521783aaf82bbf6e295f814e8a227f8d78",
      "in_reply_to_id": 1581147216,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-04-26T16:36:53Z",
      "updated_at": "2024-04-26T16:36:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275198",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275198"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1465,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275245",
      "pull_request_review_id": 2025448671,
      "id": 1581275245,
      "node_id": "PRRC_kwDOABII585eQFht",
      "diff_hunk": "@@ -1450,6 +1459,13 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n         m_pool.m_signals->TransactionAddedToMempool(tx_info, m_pool.GetAndIncrementSequence());\n     }\n \n+    if (!m_replaced_transactions.empty()) {\n+        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with 1 new one for %s additional fees, %d delta bytes\\n\",",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "ce04c3521783aaf82bbf6e295f814e8a227f8d78",
      "in_reply_to_id": 1581146454,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-04-26T16:36:56Z",
      "updated_at": "2024-04-26T16:36:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1463,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275555",
      "pull_request_review_id": 2025449100,
      "id": 1581275555,
      "node_id": "PRRC_kwDOABII585eQFmj",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2, unexpected=[])\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns3_fail = [parent_result1[\"tx\"], parent_result2[\"tx\"], child_result[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster not size two')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns3_fail)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the rate of directly conflicted parent, even though\n+        # total fees are higher than the original package\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE + fee_delta)\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        self.generate(node, 1)\n+\n+    def test_child_conflicts_parent_mempool_ancestor(self):\n+        self.fill_mempool()\n+        # Reset coins since we filled the mempool with current coins\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False, confirmed_only=True)\n+\n+        self.log.info(\"Test that package RBF doesn't have issues with mempool<->package conflicts via inconsistency\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # Put simple tx in mempool to chain off of",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 565,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": 1580978287,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "complete sentence, but not grammatically correct or useful, removed",
      "created_at": "2024-04-26T16:37:13Z",
      "updated_at": "2024-04-26T16:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275555",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 565,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275611",
      "pull_request_review_id": 2025449196,
      "id": 1581275611,
      "node_id": "PRRC_kwDOABII585eQFnb",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2, unexpected=[])\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns3_fail = [parent_result1[\"tx\"], parent_result2[\"tx\"], child_result[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster not size two')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns3_fail)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the rate of directly conflicted parent, even though",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 548,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": 1580973594,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-04-26T16:37:16Z",
      "updated_at": "2024-04-26T16:37:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275611",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 548,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275679",
      "pull_request_review_id": 2025449377,
      "id": 1581275679,
      "node_id": "PRRC_kwDOABII585eQFof",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_fail = [parent_result1[\"tx\"], child_result[\"tx\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: replacing cluster with ancestors not size two')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed, unexpected=package_txns2_fail)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(grandchild_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(parent2_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        node.sendrawtransaction(parent_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child1_result[\"tx\"].serialize().hex())\n+        node.sendrawtransaction(child2_result[\"tx\"].serialize().hex())\n+        assert_equal(len(node.getrawmempool()), 3)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE + Decimal(\"0.00000001\"))\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=[], unexpected=package_txns1 + package_txns2 + package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_pkg(self):",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 485,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": 1580970962,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-04-26T16:37:19Z",
      "updated_at": "2024-04-26T16:37:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 485,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275786",
      "pull_request_review_id": 2025449538,
      "id": 1581275786,
      "node_id": "PRRC_kwDOABII585eQFqK",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, DEFAULT_FEE * 3, DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Submit parent on its own. It should have no trouble replacing the previous\n+        # transaction(s) because the fee is tripled.\n+        node.sendrawtransaction(package_hex2[0])\n+        node.submitpackage(package_hex2)\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):",
      "path": "test/functional/mempool_package_rbf.py",
      "position": 244,
      "original_position": 275,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": 1580946063,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "it's a package rbf test, I think name is fine",
      "created_at": "2024-04-26T16:37:24Z",
      "updated_at": "2024-04-26T16:37:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275786",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 244,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275855",
      "pull_request_review_id": 2025449671,
      "id": 1581275855,
      "node_id": "PRRC_kwDOABII585eQFrP",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns2)\n+\n+    def test_package_rbf_partial(self):\n+        self.log.info(\"Test that package RBF works when a transaction was already submitted\")",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 261,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": 1580918022,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, yeah I don't think this test is meaningful. Removed.",
      "created_at": "2024-04-26T16:37:30Z",
      "updated_at": "2024-04-26T16:37:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275855",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 260,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275921",
      "pull_request_review_id": 2025449794,
      "id": 1581275921,
      "node_id": "PRRC_kwDOABII585eQFsR",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):\n+        \"\"\"Fill mempool until eviction.\"\"\"\n+        self.log.info(\"Fill the mempool until eviction is triggered and the mempoolminfee rises\")\n+        txouts = gen_return_txouts()\n+        node = self.nodes[0]\n+        miniwallet = self.wallet\n+        relayfee = node.getnetworkinfo()['relayfee']\n+\n+        tx_batch_size = 1\n+        num_of_batches = 75\n+        # Generate UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 75 transactions each with a fee rate higher than the previous one\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        # And 2 more for the package cpfp test\n+        self.generate(miniwallet, 1 + (num_of_batches * tx_batch_size))\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        self.generate(node, COINBASE_MATURITY - 1)\n+\n+        self.log.debug(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n+\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n+\n+        self.log.debug(\"Fill up the mempool with txs with higher fee rate\")\n+        with node.assert_debug_log([\"rolling minimum fee bumped\"]):\n+            for batch_of_txid in range(num_of_batches):\n+                fee = (batch_of_txid + 1) * base_fee\n+                create_lots_of_big_transactions(miniwallet, node, fee, tx_batch_size, txouts)\n+\n+        self.log.debug(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(tx_batch_size * num_of_batches, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.debug(\"Check that mempoolminfee is larger than minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+        self.test_too_numerous_ancestors()\n+        self.test_too_numerous_pkg()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee (which diagram check covers)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=[])\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+\n+        self.assert_mempool_contents(expected=package_txns4, unexpected=package_txns5)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=[])\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert_equal(pkg_results6[\"package_msg\"], 'package RBF failed: parent paying for child anti-DoS')\n+\n+        self.assert_mempool_contents(expected=package_txns5, unexpected=package_txns6)\n+        self.generate(node, 1)\n+\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (125 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 237,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": 1580896456,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-04-26T16:37:35Z",
      "updated_at": "2024-04-26T16:37:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275921",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275972",
      "pull_request_review_id": 2025449886,
      "id": 1581275972,
      "node_id": "PRRC_kwDOABII585eQFtE",
      "diff_hunk": "@@ -0,0 +1,604 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    assert_greater_than,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]]\n+\n+    def fill_mempool(self):",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 37,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": 1580798337,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "forgot to remove, done",
      "created_at": "2024-04-26T16:37:38Z",
      "updated_at": "2024-04-26T16:37:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581275972",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581275972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276032",
      "pull_request_review_id": 2025449996,
      "id": 1581276032,
      "node_id": "PRRC_kwDOABII585eQFuA",
      "diff_hunk": "@@ -842,4 +843,138 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_3, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 200 - 1300, /*submit=*/false));\n+\n+        // 1 parent paying 200sat, 1 child paying 200sat. Both v2.\n+        Package package1{tx_parent_1, tx_child_1};\n+        // 1 parent paying 800sat, 1 child paying 200sat. Both v2.\n+        Package package2{tx_parent_2, tx_child_2};\n+        // 1 parent paying 200sat, 1 child paying 1300. Both v2.\n+        Package package3{tx_parent_3, tx_child_3};\n+        // In all packages, the parents conflict with each other",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": 1579749486,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2024-04-26T16:37:43Z",
      "updated_at": "2024-04-26T16:37:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 936,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276105",
      "pull_request_review_id": 2025450121,
      "id": 1581276105,
      "node_id": "PRRC_kwDOABII585eQFvJ",
      "diff_hunk": "@@ -842,4 +843,138 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(",
      "path": "src/test/txpackage_tests.cpp",
      "position": 90,
      "original_position": 89,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a81d265fb0b157fc705e35a694a137bdb531a9c8",
      "in_reply_to_id": 1579748212,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "conceptually the test is cleaner if each parent is different, so I updated the parent to be slightly different, and asserted the parents are all have different txids",
      "created_at": "2024-04-26T16:37:48Z",
      "updated_at": "2024-04-26T16:37:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276105",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1020,
      "original_line": 1020,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276165",
      "pull_request_review_id": 2025450190,
      "id": 1581276165,
      "node_id": "PRRC_kwDOABII585eQFwF",
      "diff_hunk": "@@ -1123,7 +1126,74 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "a6e2372488140d66fc874243bee9092c6cbf99c1",
      "in_reply_to_id": 1579508562,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Deleting this comment as I don't think it's helpful",
      "created_at": "2024-04-26T16:37:51Z",
      "updated_at": "2024-04-26T16:37:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276237",
      "pull_request_review_id": 2025450313,
      "id": 1581276237,
      "node_id": "PRRC_kwDOABII585eQFxN",
      "diff_hunk": "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\n+\n+   - *Rationale*: This carve out cannot be accurately applied when there are multiple transactions'\n+     ancestors and descendants being considered at the same time.\n+\n+The following rules are only enforced for packages to be submitted to the mempool (not\n+enforced for test accepts):\n ",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 13,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "2eb09886f37f40568547eda3464188df88e88eed",
      "in_reply_to_id": 1574766371,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added updated comment",
      "created_at": "2024-04-26T16:37:56Z",
      "updated_at": "2024-04-26T16:37:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276289",
      "pull_request_review_id": 2025450404,
      "id": 1581276289,
      "node_id": "PRRC_kwDOABII585eQFyB",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 24,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": 1574744045,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "would need to do a bit more work to make sure it actually would be attempting a package rbf. I think we can rely on our conflict topology check tests to ensure this, at least for default mempool chains? \r\n\r\n",
      "created_at": "2024-04-26T16:38:01Z",
      "updated_at": "2024-04-26T16:38:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276334",
      "pull_request_review_id": 2025450486,
      "id": 1581276334,
      "node_id": "PRRC_kwDOABII585eQFyu",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 18,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": 1574741503,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-04-26T16:38:04Z",
      "updated_at": "2024-04-26T16:38:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276412",
      "pull_request_review_id": 2025450601,
      "id": 1581276412,
      "node_id": "PRRC_kwDOABII585eQFz8",
      "diff_hunk": "@@ -48,8 +48,13 @@ The following rules are enforced for all packages:\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 6,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": 1574737173,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added an extra phrase, hope that helps?",
      "created_at": "2024-04-26T16:38:09Z",
      "updated_at": "2024-04-26T16:38:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1581276412",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1581276412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1582768678",
      "pull_request_review_id": 2027958558,
      "id": 1582768678,
      "node_id": "PRRC_kwDOABII585eVyIm",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 24,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": 1574744045,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I learned that we can RBF a transaction that gets into the mempool using carveout. I wanted to test that you wouldn't  RBF  that transaction using  a package.\r\n\r\nEven if the arrangement attempts to RBF or not, I think the error in the suggestion is how it would fail. We would set `m_allow_carveout` to false while evaluating the first parent transaction and fail its evaluation due to a `TX_MEMPOOL_POLICY` violation of `too-long-mempool-chain`. hence, all the descendants would fail due to missing input.\r\n\r\nI just think this is a \"nice-to-have\" test, but not necessarily required for this PR.",
      "created_at": "2024-04-29T09:27:17Z",
      "updated_at": "2024-04-29T09:27:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1582768678",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1582768678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583065711",
      "pull_request_review_id": 2028473495,
      "id": 1583065711,
      "node_id": "PRRC_kwDOABII585eW6pv",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 24,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": 1574744045,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "looked a bit closer, how is this different from the \"# ...even if it's submitted with other transactions\" case above in the test? To check package rbf the only difference is making sure it's evaluated as a single subpackage(by having the child feerate be larger)",
      "created_at": "2024-04-29T13:11:08Z",
      "updated_at": "2024-04-29T13:11:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583065711",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583065711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583082284",
      "pull_request_review_id": 2028502129,
      "id": 1583082284,
      "node_id": "PRRC_kwDOABII585eW-ss",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 24,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": 1574744045,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ahh I see, it's the same code path.",
      "created_at": "2024-04-29T13:22:11Z",
      "updated_at": "2024-04-29T13:22:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583082284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583082284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583085742",
      "pull_request_review_id": 2028508966,
      "id": 1583085742,
      "node_id": "PRRC_kwDOABII585eW_iu",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 24,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": 1574744045,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "oh right, neither of these cases will do a package rbf, as the package has in-mempool ancestors.\r\n\r\nIt would have to be a scenario where the ancestor limits are set to 1, then a package RBF of size 2 replaces that single tx, which would fail prechecks?",
      "created_at": "2024-04-29T13:24:40Z",
      "updated_at": "2024-04-29T13:42:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583085742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583085742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583113813",
      "pull_request_review_id": 2028556489,
      "id": 1583113813,
      "node_id": "PRRC_kwDOABII585eXGZV",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 24,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": 1574744045,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, I think it will always be the same code path that will be hit because the parent transaction (in the cluster size 2 replacement package) will be detected as conflict with the transaction that was carved out (because it has to go through `PreChecks`), and we don't allow package RBF carveout, so the subpackage evaluation with the parent and child will not be executed?",
      "created_at": "2024-04-29T13:39:54Z",
      "updated_at": "2024-04-29T13:41:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583113813",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583113813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583414798",
      "pull_request_review_id": 2029058246,
      "id": 1583414798,
      "node_id": "PRRC_kwDOABII585eYP4O",
      "diff_hunk": "@@ -55,14 +55,23 @@ def run_test(self):\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0], second_chain])\n         # ...especially if its > 40k weight\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_tx, [chain[0]], num_outputs=350)\n+        # ...even if it's submitted with other transactions\n+        replaceable_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[chain[0]])\n+        txns = [replaceable_tx[\"tx\"], self.wallet.create_self_transfer_multi(utxos_to_spend=replaceable_tx[\"new_utxos\"])[\"tx\"]]\n+        txns_hex = [tx.serialize().hex() for tx in txns]\n+        assert_equal(self.nodes[0].testmempoolaccept(txns_hex)[0][\"reject-reason\"], \"too-long-mempool-chain\")\n+        pkg_result = self.nodes[0].submitpackage(txns_hex)\n+        assert \"too-long-mempool-chain\" in pkg_result[\"tx-results\"][txns[0].getwtxid()][\"error\"]\n+        assert_equal(pkg_result[\"tx-results\"][txns[1].getwtxid()][\"error\"], \"bad-txns-inputs-missingorspent\")\n         # But not if it chains directly off the first transaction\n-        replacable_tx = self.wallet.send_self_transfer_multi(from_node=self.nodes[0], utxos_to_spend=[chain[0]])['tx']\n+        self.nodes[0].sendrawtransaction(replaceable_tx[\"hex\"])\n         # and the second chain should work just fine\n         self.chain_tx([second_chain])\n \n         # Make sure we can RBF the chain which used our carve-out rule\n-        replacable_tx.vout[0].nValue -= 1000000\n-        self.nodes[0].sendrawtransaction(replacable_tx.serialize().hex())\n+        replacement_tx = replaceable_tx[\"tx\"]\n+        replacement_tx.vout[0].nValue -= 1000000\n+        self.nodes[0].sendrawtransaction(replacement_tx.serialize().hex())\n ",
      "path": "test/functional/mempool_package_onemore.py",
      "position": null,
      "original_position": 24,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "033736bcd9fc16e244e52e72fe7c7ff030690ece",
      "in_reply_to_id": 1574744045,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "*even if* the test would manage to hit the case where it would have considered a package rbf(this case won't), it should be caught in both PreChecks and package mempool checks separately as chain limits are being busted.",
      "created_at": "2024-04-29T16:55:52Z",
      "updated_at": "2024-04-29T16:56:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1583414798",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1583414798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586256603",
      "pull_request_review_id": 2033547087,
      "id": 1586256603,
      "node_id": "PRRC_kwDOABII585ejFrb",
      "diff_hunk": "@@ -1126,7 +1129,72 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "ec85c4b7123ddebc43faa69a14a0e2d939d5ceb4",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should all these failures be `PCKG_POLICY`? We have individual errors which are reported as well, and now with 1P1C relay, we probably want to act on failures at p2p layer?",
      "created_at": "2024-05-01T12:43:10Z",
      "updated_at": "2024-05-01T12:43:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1586256603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1586256603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587844135",
      "pull_request_review_id": 2036089555,
      "id": 1587844135,
      "node_id": "PRRC_kwDOABII585epJQn",
      "diff_hunk": "@@ -1146,6 +1146,12 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         }\n     }\n \n+    // Should be parent->child topology\n+    const auto parent_result{FindInPackageParents(txns, txns.back())};",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "d08e7a9ab6b353f415ca30f7714b12f39f84fe48",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in d08e7a9ab6b353f415ca30f7714b12f39f84fe48, instead of `FindInPackageParents`, maybe just call `IsChildWithParents()`? Or even better, `Assume(IsChildWithParents())`?",
      "created_at": "2024-05-02T15:31:54Z",
      "updated_at": "2024-05-02T16:09:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1587844135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587844135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587905175",
      "pull_request_review_id": 2036216739,
      "id": 1587905175,
      "node_id": "PRRC_kwDOABII585epYKX",
      "diff_hunk": "@@ -1146,6 +1146,12 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         }\n     }\n \n+    // Should be parent->child topology\n+    const auto parent_result{FindInPackageParents(txns, txns.back())};",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "d08e7a9ab6b353f415ca30f7714b12f39f84fe48",
      "in_reply_to_id": 1587844135,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh even easier than what I replaced it with, duh",
      "created_at": "2024-05-02T16:13:38Z",
      "updated_at": "2024-05-02T16:13:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1587905175",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587905175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587919121",
      "pull_request_review_id": 2036233376,
      "id": 1587919121,
      "node_id": "PRRC_kwDOABII585epbkR",
      "diff_hunk": "@@ -1146,6 +1146,12 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         }\n     }\n \n+    // Should be parent->child topology\n+    const auto parent_result{FindInPackageParents(txns, txns.back())};",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "d08e7a9ab6b353f415ca30f7714b12f39f84fe48",
      "in_reply_to_id": 1587844135,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "pushed with the `Assume()` check inline with the \"making sure package is cluster size two\" check",
      "created_at": "2024-05-02T16:21:15Z",
      "updated_at": "2024-05-02T16:21:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1587919121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1587919121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594188338",
      "pull_request_review_id": 2045924939,
      "id": 1594188338,
      "node_id": "PRRC_kwDOABII585fBWIy",
      "diff_hunk": "@@ -1126,7 +1129,72 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "ec85c4b7123ddebc43faa69a14a0e2d939d5ceb4",
      "in_reply_to_id": 1586256603,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "update: in master we're now processing these `PCKG_POLICY` cases, so should be ok? @glozow ",
      "created_at": "2024-05-08T14:58:34Z",
      "updated_at": "2024-05-08T14:58:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1594188338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1594188338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595176618",
      "pull_request_review_id": 2045905107,
      "id": 1595176618,
      "node_id": "PRRC_kwDOABII585fFHaq",
      "diff_hunk": "@@ -1126,7 +1129,72 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "ec85c4b7123ddebc43faa69a14a0e2d939d5ceb4",
      "in_reply_to_id": 1586256603,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yeah, I think `PCKG_POLICY` is fine given https://github.com/bitcoin/bitcoin/pull/30012/commits/6119f76ef72c1adc55c1a384c20f8ba9e1a01206. Just need to make sure the `MempoolAcceptResult`s are correct so that we are attributing the failures correctly",
      "created_at": "2024-05-09T09:00:37Z",
      "updated_at": "2024-05-09T14:01:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595176618",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595176618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595472969",
      "pull_request_review_id": 2045905107,
      "id": 1595472969,
      "node_id": "PRRC_kwDOABII585fGPxJ",
      "diff_hunk": "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec\r\n\r\nThe comments + error string are a bit contradictory (\"child only paying anti-DoS\" and \"parent paying for child anti-DoS\") unless maybe I'm misunderstanding?\r\n\r\nAlso maybe error str \"package RBF failed: parent paying for child replacement\" and debug str \"package feerate is X while parent feerate is Y\" ?",
      "created_at": "2024-05-09T13:43:53Z",
      "updated_at": "2024-05-09T14:01:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595472969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595472969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1164,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595480359",
      "pull_request_review_id": 2045905107,
      "id": 1595480359,
      "node_id": "PRRC_kwDOABII585fGRkn",
      "diff_hunk": "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_tup{ImprovesFeerateDiagram(m_pool, direct_conflict_iters, m_all_conflicts, m_total_modified_fees, m_total_vsize)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: \" + err_tup.value().second, \"\");\n+    }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec\r\n\r\nI wonder if `PaysForRBF` and `ImprovesFeerateDiagram` should be swapped in the order of checks?\r\n\r\n`ImprovesFeerateDiagram` is a more expensive, is a superset of the rules, and a less intuitive error (I'd have an easier time guessing what went wrong with \"pays less fees\" vs \"does not improve feerate diagram\". Especially looking at the functional tests which switched out the error strings due to this check being earlier.",
      "created_at": "2024-05-09T13:49:33Z",
      "updated_at": "2024-05-09T14:01:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595480359",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595480359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1172,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595484318",
      "pull_request_review_id": 2045905107,
      "id": 1595484318,
      "node_id": "PRRC_kwDOABII585fGSie",
      "diff_hunk": "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\r\n```",
      "created_at": "2024-05-09T13:52:51Z",
      "updated_at": "2024-05-09T14:01:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595484318",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595484318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595487038",
      "pull_request_review_id": 2045905107,
      "id": 1595487038,
      "node_id": "PRRC_kwDOABII585fGTM-",
      "diff_hunk": "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.",
      "path": "src/validation.cpp",
      "position": 153,
      "original_position": 108,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe you can mention that this replaces `PaysMoreForConflicts` function from `ReplacementChecks`?",
      "created_at": "2024-05-09T13:54:56Z",
      "updated_at": "2024-05-09T14:01:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595487038",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595487038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1207,
      "original_line": 1207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595490481",
      "pull_request_review_id": 2045905107,
      "id": 1595490481,
      "node_id": "PRRC_kwDOABII585fGUCx",
      "diff_hunk": "@@ -1087,7 +1125,76 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 274,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think it's very clear which cluster isn't size two in this str\r\n```suggestion\r\n        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\r\n```",
      "created_at": "2024-05-09T13:57:39Z",
      "updated_at": "2024-05-09T14:01:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595490481",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595490481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595494866",
      "pull_request_review_id": 2045905107,
      "id": 1595494866,
      "node_id": "PRRC_kwDOABII585fGVHS",
      "diff_hunk": "@@ -36,10 +36,9 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - More general package RBF may be enabled in the future.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 9,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could add more detailed docs for what the rules are in package RBF?\r\n\r\n- all to-be-replaced signal (bip125 or v3)\r\n- package is 1p1c, only in clusters up to size 2\r\n- to-be-replaced all in clusters up to size 2\r\n- no more than 100 total to-be-replaced\r\n- total fees of package > all fees being replaced, at incremental relay feerate\r\n- must improve feerate diagram\r\n- parent feerate must be < package feerate",
      "created_at": "2024-05-09T14:01:06Z",
      "updated_at": "2024-05-09T14:01:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595494866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595494866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 42,
      "start_side": "LEFT",
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595504866",
      "pull_request_review_id": 2048052673,
      "id": 1595504866,
      "node_id": "PRRC_kwDOABII585fGXji",
      "diff_hunk": "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_tup{ImprovesFeerateDiagram(m_pool, direct_conflict_iters, m_all_conflicts, m_total_modified_fees, m_total_vsize)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: \" + err_tup.value().second, \"\");\n+    }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "in_reply_to_id": 1595480359,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> is a superset of the rules\r\n\r\nPaysForRBF has incremental rate on top, so `ImprovesFeerateDiagram` is not a strict superset fwiw.\r\n\r\nThat said, I don't think swapping the order is a problem and would indeed be cheaper.",
      "created_at": "2024-05-09T14:09:16Z",
      "updated_at": "2024-05-09T14:09:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595504866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595504866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1172,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595508385",
      "pull_request_review_id": 2048058328,
      "id": 1595508385,
      "node_id": "PRRC_kwDOABII585fGYah",
      "diff_hunk": "@@ -1126,7 +1129,72 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "ec85c4b7123ddebc43faa69a14a0e2d939d5ceb4",
      "in_reply_to_id": 1586256603,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "IIUC It will leave the \"individual failures\" in place which should be:\r\nparent: TX_RECONSIDERABLE\r\nchild: TX_MISSING_INPUTS",
      "created_at": "2024-05-09T14:11:51Z",
      "updated_at": "2024-05-09T14:11:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595508385",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595508385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595654005",
      "pull_request_review_id": 2048297250,
      "id": 1595654005,
      "node_id": "PRRC_kwDOABII585fG791",
      "diff_hunk": "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_tup{ImprovesFeerateDiagram(m_pool, direct_conflict_iters, m_all_conflicts, m_total_modified_fees, m_total_vsize)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: \" + err_tup.value().second, \"\");\n+    }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "in_reply_to_id": 1595480359,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "True, it's only a superset of Rule 3 👍 ",
      "created_at": "2024-05-09T15:59:35Z",
      "updated_at": "2024-05-09T15:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595654005",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595654005"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1172,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845274",
      "pull_request_review_id": 2048603478,
      "id": 1595845274,
      "node_id": "PRRC_kwDOABII585fHqqa",
      "diff_hunk": "@@ -36,10 +36,9 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - More general package RBF may be enabled in the future.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 9,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "in_reply_to_id": 1595494866,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@glozow pushed some more detailed docs, thanks!",
      "created_at": "2024-05-09T18:48:27Z",
      "updated_at": "2024-05-09T18:48:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845274",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 42,
      "start_side": "LEFT",
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845313",
      "pull_request_review_id": 2048603552,
      "id": 1595845313,
      "node_id": "PRRC_kwDOABII585fHqrB",
      "diff_hunk": "@@ -1087,7 +1125,76 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 274,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "53ed8fdb67062d9e2f3262c4947213de8b8a2261",
      "in_reply_to_id": 1595490481,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-09T18:48:30Z",
      "updated_at": "2024-05-09T18:48:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845340",
      "pull_request_review_id": 2048603603,
      "id": 1595845340,
      "node_id": "PRRC_kwDOABII585fHqrc",
      "diff_hunk": "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.",
      "path": "src/validation.cpp",
      "position": 153,
      "original_position": 108,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "in_reply_to_id": 1595487038,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-09T18:48:31Z",
      "updated_at": "2024-05-09T18:48:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1207,
      "original_line": 1207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845388",
      "pull_request_review_id": 2048603654,
      "id": 1595845388,
      "node_id": "PRRC_kwDOABII585fHqsM",
      "diff_hunk": "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 77,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "in_reply_to_id": 1595484318,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-09T18:48:33Z",
      "updated_at": "2024-05-09T18:48:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845388",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845419",
      "pull_request_review_id": 2048603709,
      "id": 1595845419,
      "node_id": "PRRC_kwDOABII585fHqsr",
      "diff_hunk": "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    if (const auto err_tup{ImprovesFeerateDiagram(m_pool, direct_conflict_iters, m_all_conflicts, m_total_modified_fees, m_total_vsize)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: \" + err_tup.value().second, \"\");\n+    }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "in_reply_to_id": 1595480359,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "swapped them and updated tests accordingly",
      "created_at": "2024-05-09T18:48:35Z",
      "updated_at": "2024-05-09T18:48:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1172,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845454",
      "pull_request_review_id": 2048603780,
      "id": 1595845454,
      "node_id": "PRRC_kwDOABII585fHqtO",
      "diff_hunk": "@@ -1126,7 +1125,71 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster not size two\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: replacing cluster with ancestors not size two\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    if (CFeeRate(parent_ws.m_modified_fees, parent_ws.m_vsize) >=\n+            CFeeRate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize)) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child anti-DoS\", \"\");\n+    }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "b86487ccf2e3d43da3d3ce8c3d2e2510677eb9ec",
      "in_reply_to_id": 1595472969,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-09T18:48:38Z",
      "updated_at": "2024-05-09T18:48:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1595845454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1595845454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1164,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596837120",
      "pull_request_review_id": 2050218566,
      "id": 1596837120,
      "node_id": "PRRC_kwDOABII585fLc0A",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 241,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: you change the fee in the last successful one, which is a little bit sus since fee shouldn't matter in this test\r\n\r\nMaybe create 2 constants for the parent `fee_per_output` and child fee/feerate, and use them for each round?",
      "created_at": "2024-05-10T14:32:51Z",
      "updated_at": "2024-05-13T10:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596837120",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596837120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 216,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 238,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596843725",
      "pull_request_review_id": 2050218566,
      "id": 1596843725,
      "node_id": "PRRC_kwDOABII585fLebN",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 257,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't really understand what's being tested here - this doesn't have anything to do with package RBF? This isn't a topologically valid package since the transactions aren't related to each other in addition to being double spends. #30066 seems closer to what this is going for?",
      "created_at": "2024-05-10T14:38:31Z",
      "updated_at": "2024-05-13T10:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596843725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596843725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596847344",
      "pull_request_review_id": 2050218566,
      "id": 1596847344,
      "node_id": "PRRC_kwDOABII585fLfTw",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 284,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "These 2 things are contradictory. AFAICT `fee_rate` is ignored, delete?",
      "created_at": "2024-05-10T14:41:34Z",
      "updated_at": "2024-05-13T10:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596847344",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596847344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 283,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596861606",
      "pull_request_review_id": 2050218566,
      "id": 1596861606,
      "node_id": "PRRC_kwDOABII585fLiym",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: new transaction cannot have mempool ancestors')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent_result[\"tx\"], child_result[\"tx\"], grandchild_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 3)\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent1_result[\"tx\"], parent2_result[\"tx\"], child_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Submit them to mempool\n+        expected_txns = [parent_result[\"tx\"], child1_result[\"tx\"], child2_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 4)",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 465,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: more varied fees for the packages for the `wrong_conflict_cluster_size_*` tests, could also use constant",
      "created_at": "2024-05-10T14:54:06Z",
      "updated_at": "2024-05-13T10:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1596861606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1596861606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598137245",
      "pull_request_review_id": 2050218566,
      "id": 1598137245,
      "node_id": "PRRC_kwDOABII585fQaOd",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 17,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "497aed95d36e577a958c5353a4a633f25034e326",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is now in `mempool_util` (= linter complaint)",
      "created_at": "2024-05-13T09:12:29Z",
      "updated_at": "2024-05-13T10:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598137245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598137245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598149576",
      "pull_request_review_id": 2050218566,
      "id": 1598149576,
      "node_id": "PRRC_kwDOABII585fQdPI",
      "diff_hunk": "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_conflicting_fees, /*replacement_fees=*/m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 322,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: this would be easier to read and more extensible in the future\r\n```suggestion\r\n    const CFeeRate package_feerate(m_total_modified_fees, m_total_vsize);\r\n```",
      "created_at": "2024-05-13T09:21:44Z",
      "updated_at": "2024-05-13T10:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598149576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598149576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598153870",
      "pull_request_review_id": 2050218566,
      "id": 1598153870,
      "node_id": "PRRC_kwDOABII585fQeSO",
      "diff_hunk": "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 312,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit; make reference not copy\r\n```suggestion\r\n    const Txid& child_hash = child_ws.m_ptx->GetHash();\r\n```",
      "created_at": "2024-05-13T09:24:52Z",
      "updated_at": "2024-05-13T10:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598153870",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598153870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598170246",
      "pull_request_review_id": 2050218566,
      "id": 1598170246,
      "node_id": "PRRC_kwDOABII585fQiSG",
      "diff_hunk": "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_conflicting_fees, /*replacement_fees=*/m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize);\n+    if (parent_feerate >= package_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child replacement\",\n+                                     strprintf(\"package feerate is %s while parent feerate is %s\", package_feerate.ToString(), parent_feerate.ToString()));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 326,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry to nit my own previous suggestion, but I think \"parent paying for child replacement\" might still be too specific, since it could be that the child has nothing to replace but is lower feerate (like `package_txns6` in the functional test).\r\n\r\nMaybe\r\n```suggestion\r\n                                     \"package RBF failed: package feerate is less than parent feerate\",\r\n                                     strprintf(\"package feerate %s <= parent feerate %s\", package_feerate.ToString(), parent_feerate.ToString()));\r\n```",
      "created_at": "2024-05-13T09:35:32Z",
      "updated_at": "2024-05-13T10:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598170246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598170246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1185,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598211388",
      "pull_request_review_id": 2050218566,
      "id": 1598211388,
      "node_id": "PRRC_kwDOABII585fQsU8",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 192,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "497aed95d36e577a958c5353a4a633f25034e326",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given that `fee_delta` is a multiple of `DEFAULT_FEE` and you're using `fee_delta / 2` here... I think the general readability of this test would be improved if you created a constant base unit `FEE` which was equal to, say, `DEFAULT_FEE / 10` (or `104 * 10` which would give most of the transactions whole number feerates), and then used `FEE`, `2*FEE`, `8*FEE`, etc. in all the tests.",
      "created_at": "2024-05-13T10:01:00Z",
      "updated_at": "2024-05-13T10:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598211388",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598211388"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598246153",
      "pull_request_review_id": 2050218566,
      "id": 1598246153,
      "node_id": "PRRC_kwDOABII585fQ00J",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: new transaction cannot have mempool ancestors')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent_result[\"tx\"], child_result[\"tx\"], grandchild_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 3)\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent1_result[\"tx\"], parent2_result[\"tx\"], child_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Submit them to mempool\n+        expected_txns = [parent_result[\"tx\"], child1_result[\"tx\"], child2_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_wrong_pkg_size(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2)\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: package must be 1-parent-1-child')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the feerate of directly conflicted parent, even though\n+        # total fees are higher than the original package\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE + fee_delta)\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_child_conflicts_parent_mempool_ancestor(self):\n+        fill_mempool(self, self.nodes[0], self.wallet)",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 552,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "with rebase\r\n```suggestion\r\n        fill_mempool(self, self.nodes[0])\r\n```",
      "created_at": "2024-05-13T10:29:49Z",
      "updated_at": "2024-05-13T10:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598246153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598246153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 552,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598248191",
      "pull_request_review_id": 2050218566,
      "id": 1598248191,
      "node_id": "PRRC_kwDOABII585fQ1T_",
      "diff_hunk": "@@ -36,10 +36,27 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Total fee plus incremental relay fee must be paid (ala bip125 rules 3 and 4).\n+\n+   - Parent feerate must be lower than package feerate.\n+\n+   - Must improve feerate diagram. (#29242)\n+\n+   - *Rationale*: Basic support for package RBF can be used by wallets\n+     by making chains of no longer than two, then directly conflicting\n+     those chains when needed. Combined with V3 transactions this can",
      "path": "doc/policy/packages.md",
      "position": 27,
      "original_position": 25,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe there should be some v3 test coverage (including nice 0fee parent package RBF)?\r\n```\r\ndiff --git a/test/functional/mempool_accept_v3.py b/test/functional/mempool_accept_v3.py\r\nindex 8285b82c19..990d36359e 100755\r\n--- a/test/functional/mempool_accept_v3.py\r\n+++ b/test/functional/mempool_accept_v3.py\r\n@@ -579,6 +579,32 @@ class MempoolAcceptV3(BitcoinTestFramework):\r\n         )\r\n         self.check_mempool([tx_with_multi_children[\"txid\"], tx_with_sibling3_rbf[\"txid\"], tx_with_sibling2[\"txid\"]])\r\n \r\n+    @cleanup(extra_args=[\"-acceptnonstdtxn=1\"])\r\n+    def test_package_rbf(self):\r\n+        self.log.info(\"Test package RBF: v3 0-fee parent + high-fee child replaces parent's conflicts\")\r\n+        node = self.nodes[0]\r\n+        # Reuse the same coins so that the transactions conflict with one another.\r\n+        parent_coin = self.wallet.get_utxo(confirmed_only=True)\r\n+\r\n+        # package1 pays default fee on both transactions\r\n+        parent1 = self.wallet.create_self_transfer(utxo_to_spend=parent_coin, version=3)\r\n+        child1 = self.wallet.create_self_transfer(utxo_to_spend=parent1[\"new_utxo\"], version=3)\r\n+        package_hex1 = [parent1[\"hex\"], child1[\"hex\"]]\r\n+        fees_package1 = parent1[\"fee\"] + child1[\"fee\"]\r\n+        submitres1 = node.submitpackage(package_hex1)\r\n+        assert_equal(submitres1[\"package_msg\"], \"success\")\r\n+        self.check_mempool([parent1[\"txid\"], child1[\"txid\"]])\r\n+\r\n+        # package2 has a 0-fee parent (conflicting with package1) and very high fee child\r\n+        parent2 = self.wallet.create_self_transfer(utxo_to_spend=parent_coin, fee=0, fee_rate=0, version=3)\r\n+        child2 = self.wallet.create_self_transfer(utxo_to_spend=parent2[\"new_utxo\"], fee=fees_package1*10, version=3)\r\n+        package_hex2 = [parent2[\"hex\"], child2[\"hex\"]]\r\n+\r\n+        submitres2 = node.submitpackage(package_hex2)\r\n+        assert_equal(submitres2[\"package_msg\"], \"success\")\r\n+        assert_equal(set(submitres2[\"replaced-transactions\"]), set([parent1[\"txid\"], child1[\"txid\"]]))\r\n+        self.check_mempool([parent2[\"txid\"], child2[\"txid\"]])\r\n+\r\n \r\n     def run_test(self):\r\n         self.log.info(\"Generate blocks to create UTXOs\")\r\n@@ -598,6 +624,7 @@ class MempoolAcceptV3(BitcoinTestFramework):\r\n         self.test_reorg_2child_rbf()\r\n         self.test_v3_sibling_eviction()\r\n         self.test_reorg_sibling_eviction_1p2c()\r\n+        self.test_package_rbf()\r\n \r\n \r\n if __name__ == \"__main__\":\r\n```",
      "created_at": "2024-05-13T10:31:47Z",
      "updated_at": "2024-05-13T10:32:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598248191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598248191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598710812",
      "pull_request_review_id": 2053104115,
      "id": 1598710812,
      "node_id": "PRRC_kwDOABII585fSmQc",
      "diff_hunk": "@@ -36,10 +36,27 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Total fee plus incremental relay fee must be paid (ala bip125 rules 3 and 4).\n+\n+   - Parent feerate must be lower than package feerate.\n+\n+   - Must improve feerate diagram. (#29242)\n+\n+   - *Rationale*: Basic support for package RBF can be used by wallets\n+     by making chains of no longer than two, then directly conflicting\n+     those chains when needed. Combined with V3 transactions this can",
      "path": "doc/policy/packages.md",
      "position": 27,
      "original_position": 25,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1598248191,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "was wondering about this case, added with some modifications for test simplicity",
      "created_at": "2024-05-13T15:58:43Z",
      "updated_at": "2024-05-13T15:58:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598710812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598710812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598710933",
      "pull_request_review_id": 2053104248,
      "id": 1598710933,
      "node_id": "PRRC_kwDOABII585fSmSV",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: new transaction cannot have mempool ancestors')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent_result[\"tx\"], child_result[\"tx\"], grandchild_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 3)\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent1_result[\"tx\"], parent2_result[\"tx\"], child_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Submit them to mempool\n+        expected_txns = [parent_result[\"tx\"], child1_result[\"tx\"], child2_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child1_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 4)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child2_result['tx'].rehash()} is not the only child of parent {parent_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_wrong_pkg_size(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to pkg size\")\n+        node = self.nodes[0]\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+\n+        # Two packages to require multiple direct conflicts, easier to set up illicit pkg size\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE)\n+\n+        node.submitpackage(package_hex1)\n+        node.submitpackage(package_hex2)\n+\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2)\n+        assert_equal(len(node.getrawmempool()), 4)\n+\n+        # Double-spends the first package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Double-spends the second package\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to pkg size\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex3 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+\n+        pkg_result = node.submitpackage(package_hex3)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: package must be 1-parent-1-child')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+    def test_insufficient_feerate(self):\n+        self.log.info(\"Check Package RBF must beat feerate of direct conflict\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - fee_delta)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 feerate is below the feerate of directly conflicted parent, even though\n+        # total fees are higher than the original package\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE + fee_delta)\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(pkg_results2[\"package_msg\"], 'package RBF failed: insufficient feerate: does not improve feerate diagram')\n+        self.assert_mempool_contents(expected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_child_conflicts_parent_mempool_ancestor(self):\n+        fill_mempool(self, self.nodes[0], self.wallet)",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 552,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1598246153,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-13T15:58:47Z",
      "updated_at": "2024-05-13T15:58:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598710933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598710933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 552,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711002",
      "pull_request_review_id": 2053104339,
      "id": 1598711002,
      "node_id": "PRRC_kwDOABII585fSmTa",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 192,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "497aed95d36e577a958c5353a4a633f25034e326",
      "in_reply_to_id": 1598211388,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I created `DEFAULT_CHILD_FEE` and used that pretty much everywhere it made sense",
      "created_at": "2024-05-13T15:58:50Z",
      "updated_at": "2024-05-13T15:58:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711061",
      "pull_request_review_id": 2053104440,
      "id": 1598711061,
      "node_id": "PRRC_kwDOABII585fSmUV",
      "diff_hunk": "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_conflicting_fees, /*replacement_fees=*/m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize);\n+    if (parent_feerate >= package_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: parent paying for child replacement\",\n+                                     strprintf(\"package feerate is %s while parent feerate is %s\", package_feerate.ToString(), parent_feerate.ToString()));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 326,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1598170246,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-05-13T15:58:53Z",
      "updated_at": "2024-05-13T15:58:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1185,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711106",
      "pull_request_review_id": 2053104521,
      "id": 1598711106,
      "node_id": "PRRC_kwDOABII585fSmVC",
      "diff_hunk": "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 312,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1598153870,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-13T15:58:55Z",
      "updated_at": "2024-05-13T15:58:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711106",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711206",
      "pull_request_review_id": 2053104699,
      "id": 1598711206,
      "node_id": "PRRC_kwDOABII585fSmWm",
      "diff_hunk": "@@ -1087,7 +1125,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    m_conflicting_fees = 0;\n+    m_conflicting_size = 0;\n+    for (CTxMemPool::txiter it : m_all_conflicts) {\n+        m_conflicting_fees += it->GetModifiedFee();\n+        m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_conflicting_fees, /*replacement_fees=*/m_total_modified_fees, m_total_vsize,\n+                                         m_pool.m_incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(parent_ws.m_modified_fees + child_ws.m_modified_fees, parent_ws.m_vsize + child_ws.m_vsize);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 322,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1598149576,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-05-13T15:58:59Z",
      "updated_at": "2024-05-13T15:59:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711206",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711279",
      "pull_request_review_id": 2053104788,
      "id": 1598711279,
      "node_id": "PRRC_kwDOABII585fSmXv",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 17,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "497aed95d36e577a958c5353a4a633f25034e326",
      "in_reply_to_id": 1598137245,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-05-13T15:59:02Z",
      "updated_at": "2024-05-13T15:59:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711279",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711331",
      "pull_request_review_id": 2053104886,
      "id": 1598711331,
      "node_id": "PRRC_kwDOABII585fSmYj",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        coin2 = self.coins.pop()\n+\n+        # Added to make package too large for package RBF;\n+        # it will enter mempool individually\n+        self.ctr += 1\n+        parent_result2 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin2,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Child that spends both, violating cluster size rule due\n+        # to in-mempool ancestry\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * 5 * COIN),\n+            utxos_to_spend=[parent_result1[\"new_utxo\"], parent_result2[\"new_utxo\"]],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        package_hex2 = [parent_result1[\"hex\"], parent_result2[\"hex\"], child_result[\"hex\"]]\n+        package_txns2_succeed = [parent_result2[\"tx\"]]\n+\n+        pkg_result = node.submitpackage(package_hex2)\n+        assert_equal(pkg_result[\"package_msg\"], 'package RBF failed: new transaction cannot have mempool ancestors')\n+        self.assert_mempool_contents(expected=package_txns1 + package_txns2_succeed)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_linear(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: linear chain\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        # Three transactions chained; package RBF against any of these\n+        # should be rejected\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxo\"], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        grandchild_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[child_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent_result[\"tx\"], child_result[\"tx\"], grandchild_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 3)\n+\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent_result['tx'].rehash()} has 2 descendants, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has both ancestor and descendant, exceeding cluster limit of 2\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 3)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {grandchild_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parents_child(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: two parents one child\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent1_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin1,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        parent2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent1_result[\"new_utxo\"], parent2_result[\"new_utxos\"][0], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        expected_txns = [parent1_result[\"tx\"], parent2_result[\"tx\"], child_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex1)\n+        assert_equal(f\"package RBF failed: {parent1_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex2, package_txns2 = self.create_simple_package(coin2, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: {parent2_result['tx'].rehash()} is not the only parent of child {child_result['tx'].rehash()}\", package_result[\"package_msg\"])\n+\n+        package_hex3, package_txns3 = self.create_simple_package(coin3, DEFAULT_FEE, DEFAULT_FEE * 2)\n+        package_result = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: {child_result['tx'].rehash()} has 2 ancestors, max 1 allowed\", package_result[\"package_msg\"])\n+\n+        # Check that replacements were actually rejected\n+        self.assert_mempool_contents(expected=expected_txns)\n+        self.generate(node, 1)\n+\n+    def test_wrong_conflict_cluster_size_parent_children(self):\n+        self.log.info(\"Test that conflicting with a cluster not sized two is rejected: one parent two children\")\n+        node = self.nodes[0]\n+\n+        # Coins we will conflict with\n+        coin1 = self.coins.pop()\n+        coin2 = self.coins.pop()\n+        coin3 = self.coins.pop()\n+\n+        self.ctr += 1\n+        parent_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            num_outputs=2,\n+            utxos_to_spend=[coin1],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child1_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][0], coin2],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        self.ctr += 1\n+        child2_result = self.wallet.create_self_transfer_multi(\n+            fee_per_output=int(DEFAULT_FEE * COIN),\n+            utxos_to_spend=[parent_result[\"new_utxos\"][1], coin3],\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        # Submit them to mempool\n+        expected_txns = [parent_result[\"tx\"], child1_result[\"tx\"], child2_result[\"tx\"]]\n+        for tx in expected_txns:\n+            node.sendrawtransaction(tx.serialize().hex())\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Now make conflicting packages for each coin\n+        package_hex1, package_txns1 = self.create_simple_package(coin1, DEFAULT_FEE, DEFAULT_FEE * 4)",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 465,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1596861606,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "picked a constant and used it",
      "created_at": "2024-05-13T15:59:05Z",
      "updated_at": "2024-05-13T15:59:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711331",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711331"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711398",
      "pull_request_review_id": 2053104998,
      "id": 1598711398,
      "node_id": "PRRC_kwDOABII585fSmZm",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"package topology disallowed\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        assert_equal(sorted(submitres2[\"replaced-transactions\"]),sorted( [tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+        submitres3 = node.submitpackage(package_hex3)\n+        assert_equal(sorted(submitres3[\"replaced-transactions\"]), sorted([tx.rehash() for tx in package_txns2]))\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+    def test_too_numerous_ancestors(self):\n+        self.log.info(\"Test that package RBF doesn't work with packages larger than 2 due to ancestors\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Double-spends the original package\n+        self.ctr += 1\n+        parent_result1 = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=DEFAULT_FEE,",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 284,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1596847344,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "removed a series of these ignored args",
      "created_at": "2024-05-13T15:59:08Z",
      "updated_at": "2024-05-13T15:59:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711398",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 283,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711480",
      "pull_request_review_id": 2053105147,
      "id": 1598711480,
      "node_id": "PRRC_kwDOABII585fSma4",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)\n+        assert_equal(pkg_results[\"package_msg\"], \"success\")\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"], size_two_clusters[-1][0][\"tx\"], size_two_clusters[-1][1][\"tx\"], package_parent[\"tx\"], package_child[\"tx\"]] )\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_with_conflicting_packages(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 257,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1596843725,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed, it's perhaps an older badly done version of #30066, removed",
      "created_at": "2024-05-13T15:59:11Z",
      "updated_at": "2024-05-13T15:59:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711567",
      "pull_request_review_id": 2053105311,
      "id": 1598711567,
      "node_id": "PRRC_kwDOABII585fSmcP",
      "diff_hunk": "@@ -0,0 +1,595 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    assert_equal,\n+    fill_mempool,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_with_conflicting_packages()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        # avoid parent pays for child anti-DoS checks\n+        fee_delta = DEFAULT_FEE / 2\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert \"package RBF failed: insufficient anti-DoS fees, rejecting replacement\" in pkg_results2[\"package_msg\"]\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE - fee_delta, child_fee=DEFAULT_FEE + fee_delta + Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns5[1].rehash()}, not enough additional fees to relay; 0.00000001 < 0.00000{sum([tx.get_vsize() for tx in package_txns5])}\", pkg_results5[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        node.submitpackage(package_hex5)\n+        self.assert_mempool_contents(expected=package_txns5)\n+        package_hex6, package_txns6 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE + fee_delta, child_fee=DEFAULT_FEE - (fee_delta / 2))\n+        pkg_results6 = node.submitpackage(package_hex6)\n+        assert 'package RBF failed: parent paying for child replacement' in pkg_results6[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns5)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than MAX_REPLACEMENT_CANDIDATES transactions\")\n+        num_coins = 51\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+\n+        # Original transactions: 51 transactions with 1 descendants each -> 102 total transactions\n+        size_two_clusters = []\n+        for coin in parent_coins:\n+            size_two_clusters.append(self.wallet.send_self_transfer_chain(from_node=node, chain_length=2, utxo_to_spend=coin))\n+        expected_txns = [txn[\"tx\"] for parent_child_txns in size_two_clusters for txn in parent_child_txns]\n+        assert_equal(len(expected_txns), num_coins * 2)\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Conflict against all transactions by double-spending each parent, causing 102 evictions\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (102 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        expected_txns.append(singleton_tx[\"tx\"])\n+\n+        # Double-spend same set minus last, and double-spend singleton. This hits 101 evictions; should still fail.\n+        # N.B. we can't RBF just a child tx in the clusters, as that would make resulting cluster of size 3.\n+        double_spending_coins = parent_coins[:-1] + [singleton_coin]\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=double_spending_coins, fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=1000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]])\n+        assert_equal(f\"package RBF failed: too many potential replacements, rejecting replacement {package_parent['tx'].rehash()}; too many potential replacements (101 > 100)\\n\", pkg_results[\"package_msg\"])\n+        self.assert_mempool_contents(expected=expected_txns)\n+\n+        # Finally, evict MAX_REPLACEMENT_CANDIDATES\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins[:-1], fee_per_output=10000)\n+        package_child = self.wallet.create_self_transfer(fee_rate=10000*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0])\n+        pkg_results = node.submitpackage([package_parent[\"hex\"], package_child[\"hex\"]], maxfeerate=0)",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 241,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1596837120,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I turned off maxfeerate, jacked up the child feerates, and made constants for both",
      "created_at": "2024-05-13T15:59:14Z",
      "updated_at": "2024-05-13T15:59:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1598711567",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1598711567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 216,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 238,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613803860",
      "pull_request_review_id": 2077487987,
      "id": 1613803860,
      "node_id": "PRRC_kwDOABII585gMLFU",
      "diff_hunk": "@@ -91,7 +91,6 @@ std::optional<std::string> PackageV3Checks(const CTransactionRef& ptx, int64_t v\n             const auto parent_info = [&] {\n                 if (mempool_ancestors.size() > 0) {\n                     auto& mempool_parent = *mempool_ancestors.begin();\n-                    Assume(mempool_parent->GetCountWithDescendants() == 1);",
      "path": "src/policy/v3_policy.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "3f46eccbbd9869bf1ee01ea3f686f56cfc3bd831",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My comment is just about the commit message for this commit, not this line of code (sorry):\r\n\r\n> Relax assumptions aabout in-mempool children of in-mempool\r\n\r\n\"aabout\" --> \"about\"\r\n\r\n> TxA (in mempool) <- TxB' (in package, conflicts with TxB) <-\r\n> TxD (in package)\r\n\r\ns/TxD/TxC/ ?\r\n",
      "created_at": "2024-05-24T17:25:30Z",
      "updated_at": "2024-05-24T17:42:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1613803860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613803860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 94,
      "original_line": 94,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613810585",
      "pull_request_review_id": 2077487987,
      "id": 1613810585,
      "node_id": "PRRC_kwDOABII585gMMuZ",
      "diff_hunk": "@@ -1141,7 +1140,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "5a5a96833b434dc748b72ccb4622cbb93a52aae2",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems weird to loop through all the workspaces, when `GetEntriesForConflicts` is doing all the work that needs to be done on the first invocation?  Maybe just invoke once with the child's txid, as is done further down?",
      "created_at": "2024-05-24T17:32:35Z",
      "updated_at": "2024-05-24T17:42:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1613810585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613810585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613817141",
      "pull_request_review_id": 2077487987,
      "id": 1613817141,
      "node_id": "PRRC_kwDOABII585gMOU1",
      "diff_hunk": "@@ -1141,7 +1140,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "5a5a96833b434dc748b72ccb4622cbb93a52aae2",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you just add a comment here that references the comment on line 1520, as a reminder that we can't relax this without revisiting how we track available inputs when processing a package?",
      "created_at": "2024-05-24T17:39:14Z",
      "updated_at": "2024-05-24T17:42:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1613817141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613817141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613820116",
      "pull_request_review_id": 2077487987,
      "id": 1613820116,
      "node_id": "PRRC_kwDOABII585gMPDU",
      "diff_hunk": "@@ -36,10 +36,27 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Total fee plus incremental relay fee must be paid (ala bip125 rules 3 and 4).\n+\n+   - Parent feerate must be lower than package feerate.\n+\n+   - Must improve feerate diagram. (#29242)\n+\n+   - *Rationale*: Basic support for package RBF can be used by wallets\n+     by making chains of no longer than two, then directly conflicting\n+     those chains when needed. Combined with V3 transactions this can",
      "path": "doc/policy/packages.md",
      "position": 27,
      "original_position": 25,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1598248191,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "s/V3 transactions/TRUC transactions/, perhaps?",
      "created_at": "2024-05-24T17:42:33Z",
      "updated_at": "2024-05-24T17:42:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1613820116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613820116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613878905",
      "pull_request_review_id": 2077617789,
      "id": 1613878905,
      "node_id": "PRRC_kwDOABII585gMdZ5",
      "diff_hunk": "@@ -36,10 +36,27 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Total fee plus incremental relay fee must be paid (ala bip125 rules 3 and 4).\n+\n+   - Parent feerate must be lower than package feerate.\n+\n+   - Must improve feerate diagram. (#29242)\n+\n+   - *Rationale*: Basic support for package RBF can be used by wallets\n+     by making chains of no longer than two, then directly conflicting\n+     those chains when needed. Combined with V3 transactions this can",
      "path": "doc/policy/packages.md",
      "position": 27,
      "original_position": 25,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1598248191,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "removed references to v3, and added a note that non-standard relay args should be removed once they're made standard",
      "created_at": "2024-05-24T18:42:20Z",
      "updated_at": "2024-05-24T18:42:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1613878905",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613878905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613878961",
      "pull_request_review_id": 2077617899,
      "id": 1613878961,
      "node_id": "PRRC_kwDOABII585gMdax",
      "diff_hunk": "@@ -1141,7 +1140,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 74,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "5a5a96833b434dc748b72ccb4622cbb93a52aae2",
      "in_reply_to_id": 1613817141,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "made an attempt at a grepp-able cautionary note",
      "created_at": "2024-05-24T18:42:26Z",
      "updated_at": "2024-05-24T18:42:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1613878961",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613878961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613879170",
      "pull_request_review_id": 2077618205,
      "id": 1613879170,
      "node_id": "PRRC_kwDOABII585gMdeC",
      "diff_hunk": "@@ -1141,7 +1140,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    for (const auto& ws : workspaces) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 88,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "5a5a96833b434dc748b72ccb4622cbb93a52aae2",
      "in_reply_to_id": 1613810585,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "right this is just a logging arg; probably should clean that up to just take `Wtxid` in future work. re-arranged and passed in child workspace now",
      "created_at": "2024-05-24T18:42:40Z",
      "updated_at": "2024-05-24T18:42:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1613879170",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613879170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613879250",
      "pull_request_review_id": 2077618339,
      "id": 1613879250,
      "node_id": "PRRC_kwDOABII585gMdfS",
      "diff_hunk": "@@ -91,7 +91,6 @@ std::optional<std::string> PackageV3Checks(const CTransactionRef& ptx, int64_t v\n             const auto parent_info = [&] {\n                 if (mempool_ancestors.size() > 0) {\n                     auto& mempool_parent = *mempool_ancestors.begin();\n-                    Assume(mempool_parent->GetCountWithDescendants() == 1);",
      "path": "src/policy/v3_policy.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "3f46eccbbd9869bf1ee01ea3f686f56cfc3bd831",
      "in_reply_to_id": 1613803860,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fixed",
      "created_at": "2024-05-24T18:42:46Z",
      "updated_at": "2024-05-24T18:42:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1613879250",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1613879250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 94,
      "original_line": 94,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1619222418",
      "pull_request_review_id": 2085975596,
      "id": 1619222418,
      "node_id": "PRRC_kwDOABII585gg1-S",
      "diff_hunk": "@@ -135,10 +134,7 @@ std::optional<std::string> PackageV3Checks(const CTransactionRef& ptx, int64_t v\n                 }\n             }\n \n-            // It shouldn't be possible to have any mempool siblings at this point. SingleV3Checks\n-            // catches mempool siblings and sibling eviction is not extended to packages. Also, if the package consists of connected transactions,\n-            // any tx having a mempool ancestor would mean the package exceeds ancestor limits.\n-            if (!Assume(!parent_info.m_has_mempool_descendant)) {\n+            if (parent_info.m_has_mempool_descendant) {",
      "path": "src/policy/v3_policy.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "848c4e55da85ec9776ce1c16ca51ea370502125b",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Basic question: is this commit (848c4e55da85ec9776ce1c16ca51ea370502125b, \"PackageV3Checks: Relax assumptions\") strictly needed for this PR or already preparation for future work? The tests pass even if the `Assume`s are kept, and I haven't been able to create a scenario where this condition is true, as the scenario described in the commit message:\r\n\r\n```\r\nConsider:\r\n\r\nTxA (in mempool) <- TxB (in mempool)\r\n\r\nTxA (in mempool) <- TxB' (in package, conflicts with TxB) <- TxC (in package)\r\n```\r\nisn't possible due to V3 ancestor limits.",
      "created_at": "2024-05-29T17:07:15Z",
      "updated_at": "2024-05-29T17:07:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1619222418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1619222418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 138,
      "original_start_line": 138,
      "start_side": "LEFT",
      "line": 137,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1619345525",
      "pull_request_review_id": 2086176492,
      "id": 1619345525,
      "node_id": "PRRC_kwDOABII585ghUB1",
      "diff_hunk": "@@ -135,10 +134,7 @@ std::optional<std::string> PackageV3Checks(const CTransactionRef& ptx, int64_t v\n                 }\n             }\n \n-            // It shouldn't be possible to have any mempool siblings at this point. SingleV3Checks\n-            // catches mempool siblings and sibling eviction is not extended to packages. Also, if the package consists of connected transactions,\n-            // any tx having a mempool ancestor would mean the package exceeds ancestor limits.\n-            if (!Assume(!parent_info.m_has_mempool_descendant)) {\n+            if (parent_info.m_has_mempool_descendant) {",
      "path": "src/policy/v3_policy.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "848c4e55da85ec9776ce1c16ca51ea370502125b",
      "in_reply_to_id": 1619222418,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> is this commit (848c4e5, \"PackageV3Checks: Relax assumptions\") strictly needed for this PR or already preparation for future work?\r\n\r\nIf it's not removed the next commit will cause failures.\r\n\r\nIt hits in the fuzzing `package_eval` fuzzing target. I could add a unit test for it, but it doesn't really test much, except that we don't crash right before removing the soon to be erroneous assertion. Here's an input you can run to verify: \r\n```\r\nEQQAAAgAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAA6AAAACAAADQAAAAAAAAAAAAAAAAAAaQFVKGEAawAAAAAABQAAAAAAAAAAAAAAAAA6AAAACAAADQAAAAAAAAAAAAAAAAAAaQFVKGF0YWNhcnJpZXJzaXplVVUAAAEAAAAAAFURVQEuaQEA/wAAAigBbwAAOzsBswBiaQFpAWR0YWNhcnJpZXJzaXplVVUAAAAAAAAAAFURVQFkaQEA/wAAAigBbwAAOzsBswBiaQFVZCgFaWkBAQA=\r\n```\r\n\r\n> isn't possible due to V3 ancestor limits.\r\n\r\nIt's only impossible due to `PackageV3Checks`, since `TxC` has no in-mempool ancestors at `PreChecks/SingleV3Checks` time.",
      "created_at": "2024-05-29T18:56:34Z",
      "updated_at": "2024-05-29T18:58:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1619345525",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1619345525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 138,
      "original_start_line": 138,
      "start_side": "LEFT",
      "line": 137,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1619684993",
      "pull_request_review_id": 2086930256,
      "id": 1619684993,
      "node_id": "PRRC_kwDOABII585gim6B",
      "diff_hunk": "@@ -135,10 +134,7 @@ std::optional<std::string> PackageV3Checks(const CTransactionRef& ptx, int64_t v\n                 }\n             }\n \n-            // It shouldn't be possible to have any mempool siblings at this point. SingleV3Checks\n-            // catches mempool siblings and sibling eviction is not extended to packages. Also, if the package consists of connected transactions,\n-            // any tx having a mempool ancestor would mean the package exceeds ancestor limits.\n-            if (!Assume(!parent_info.m_has_mempool_descendant)) {\n+            if (parent_info.m_has_mempool_descendant) {",
      "path": "src/policy/v3_policy.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "848c4e55da85ec9776ce1c16ca51ea370502125b",
      "in_reply_to_id": 1619222418,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, that was helpful, I could reproduce the assertion crash with this input. Ended up putting some debug outputs into the fuzz test to see what txs are created to trigger it, and it matches the scenario described in the commit message via two submitted packages [TxA <- TxB] and [TxB' <- TxC].\r\n\r\n>> isn't possible due to V3 ancestor limits.\r\n>\r\n> It's only impossible due to PackageV3Checks, since TxC has no in-mempool ancestors at PreChecks/SingleV3Checks time.\r\n\r\nOh right, that's the part I was missing, forgotting to submit TxB first in my try to reproduce the crash in the functional test.\r\n\r\nI think the specific condition `if (parent_info.m_has_mempool_descendant)` still can't be hit though with current limits at this position, as scenarios causing this are already failing a few lines above (\"This tx can't have both a parent and an in-package child.\"), throwing an \"would have too many ancestors\" error. (I guess it's just fine to keep it, as both error reasons are legit, and it's just a question of which one to throw first?)",
      "created_at": "2024-05-30T01:27:01Z",
      "updated_at": "2024-05-30T01:27:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1619684993",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1619684993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 138,
      "original_start_line": 138,
      "start_side": "LEFT",
      "line": 137,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632970572",
      "pull_request_review_id": 2107324391,
      "id": 1632970572,
      "node_id": "PRRC_kwDOABII585hVSdM",
      "diff_hunk": "@@ -1141,7 +1140,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2.\n+    // N.B. To relax this constraint we will need to revisit how CCoinsViewMemPool::PackageAddTransaction\n+    // is being used inside AcceptMultipleTransactions to track available inputs while processing a package.\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // The aggregated set of conflicts cannot exceed 100.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 93,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "0044c1dad9ffc3d58afd06d7533f16beb0d0a829",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit 0044c1dad9ffc3d58afd06d7533f16beb0d0a829:\r\n\r\nWould prefer to not have magic number comments\r\n\r\n```suggestion\r\n // Don't consider replacements that would cause us to remove a large number of mempool entries.\r\n // This limit is not increased in a package RBF. Use the aggregate number of transactions.\r\n```",
      "created_at": "2024-06-10T09:50:58Z",
      "updated_at": "2024-06-10T10:58:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1632970572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632970572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632980812",
      "pull_request_review_id": 2107324391,
      "id": 1632980812,
      "node_id": "PRRC_kwDOABII585hVU9M",
      "diff_hunk": "@@ -938,4 +939,140 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "7d895935aef63b4aa728310b580f418ce35fc234",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: 7d895935aef63b4aa728310b580f418ce35fc234\r\n\r\nwe started using `low_fee_amt` instead of 200 in this test",
      "created_at": "2024-06-10T09:55:52Z",
      "updated_at": "2024-06-10T10:58:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1632980812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632980812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 966,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632990659",
      "pull_request_review_id": 2107324391,
      "id": 1632990659,
      "node_id": "PRRC_kwDOABII585hVXXD",
      "diff_hunk": "@@ -938,4 +939,140 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "7d895935aef63b4aa728310b580f418ce35fc234",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should use `CheckPackageMempoolAcceptResult` to check that results are populated as expected, which also means you can remove a few of these checks:\r\n\r\n```suggestion\r\n        if (auto err_1{CheckPackageMempoolAcceptResult(package1, submit1, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n            BOOST_ERROR(err_1.value());\r\n        }\r\n        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\r\n        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\r\n\r\n        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n        expected_pool_size += 2;\r\n        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n```",
      "created_at": "2024-06-10T10:03:23Z",
      "updated_at": "2024-06-10T10:58:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1632990659",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1632990659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 978,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 988,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633026172",
      "pull_request_review_id": 2107324391,
      "id": 1633026172,
      "node_id": "PRRC_kwDOABII585hVgB8",
      "diff_hunk": "@@ -938,4 +939,140 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 199, /*submit=*/false));\n+        CTransactionRef tx_child_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_3, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 199 - 1300, /*submit=*/false));\n+\n+        // In all packages, the parents conflict with each other\n+        BOOST_CHECK(tx_parent_1->GetHash() != tx_parent_2->GetHash() && tx_parent_2->GetHash() != tx_parent_3->GetHash());\n+\n+        // 1 parent paying 200sat, 1 child paying 200sat.\n+        Package package1{tx_parent_1, tx_child_1};\n+        // 1 parent paying 800sat, 1 child paying 200sat.\n+        Package package2{tx_parent_2, tx_child_2};\n+        // 1 parent paying 199sat, 1 child paying 1300.\n+        Package package3{tx_parent_3, tx_child_3};\n+\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent_1->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent_1->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        // This replacement is actually not package rbf; the parent carries enough fees\n+        // to replace the entire package on its own.\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent_2->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent_2->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+\n+        // Package RBF, in which the replacement transaction's child sponsors the fees to meet RBF feerate rules\n+        const auto submit3 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package3, false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit3.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit3.m_state.GetRejectReason());\n+        auto it_parent_3 = submit3.m_tx_results.find(tx_parent_3->GetWitnessHash());\n+        auto it_child_3 = submit3.m_tx_results.find(tx_child_3->GetWitnessHash());\n+        BOOST_CHECK(it_parent_3 != submit3.m_tx_results.end());\n+        BOOST_CHECK(it_child_3 != submit3.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_3->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_3->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent_3->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_3->GetHash())));",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "7d895935aef63b4aa728310b580f418ce35fc234",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can check `m_wtxids_fee_calculations` and `m_effective_feerate`.\r\n\r\nWrote up the changes for this + using `CheckPackageMempoolAcceptResult`:\r\n```diff --git a/src/test/txpackage_tests.cpp b/src/test/txpackage_tests.cpp\r\nindex cd69fce2f5..b68686cfcb 100644\r\n--- a/src/test/txpackage_tests.cpp\r\n+++ b/src/test/txpackage_tests.cpp\r\n@@ -975,28 +975,22 @@ BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\r\n \r\n         LOCK(m_node.mempool->cs);\r\n         const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\r\n-        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\r\n-        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\r\n-        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\r\n-        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\r\n-        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\r\n-        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n-        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n+        if (auto err_1{CheckPackageMempoolAcceptResult(package1, submit1, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n+            BOOST_ERROR(err_1.value());\r\n+        }\r\n         expected_pool_size += 2;\r\n-        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n-        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\r\n-        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\r\n \r\n         const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\r\n+        if (auto err_2{CheckPackageMempoolAcceptResult(package2, submit2, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n+            BOOST_ERROR(err_2.value());\r\n+        }\r\n         auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\r\n         auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\r\n-        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\r\n-        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\r\n-        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\r\n         BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\r\n         BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n-        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\r\n+\r\n+        // child1 has been replaced\r\n         BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\r\n     }\r\n \r\n@@ -1034,44 +1028,60 @@ BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\r\n         Package package3{tx_parent_3, tx_child_3};\r\n \r\n         const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, false, std::nullopt);\r\n-        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit1.m_state.GetRejectReason());\r\n+        if (auto err_1{CheckPackageMempoolAcceptResult(package1, submit1, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n+            BOOST_ERROR(err_1.value());\r\n+        }\r\n         auto it_parent_1 = submit1.m_tx_results.find(tx_parent_1->GetWitnessHash());\r\n         auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\r\n-        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\r\n-        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\r\n         BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n         BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_effective_feerate.value().GetFee(GetVirtualTransactionSize(*tx_parent_1)), 200);\r\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_effective_feerate.value().GetFee(GetVirtualTransactionSize(*tx_child_1)), 200);\r\n+        BOOST_CHECK(it_parent_1->second.m_replaced_transactions.empty());\r\n+        BOOST_CHECK(it_child_1->second.m_replaced_transactions.empty());\r\n         expected_pool_size += 2;\r\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n-        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent_1->GetHash())));\r\n-        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\r\n \r\n         // This replacement is actually not package rbf; the parent carries enough fees\r\n         // to replace the entire package on its own.\r\n         const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, false, std::nullopt);\r\n-        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\r\n+        if (auto err_2{CheckPackageMempoolAcceptResult(package2, submit2, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n+            BOOST_ERROR(err_2.value());\r\n+        }\r\n         auto it_parent_2 = submit2.m_tx_results.find(tx_parent_2->GetWitnessHash());\r\n         auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\r\n-        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\r\n-        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\r\n         BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n         BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_effective_feerate.value().GetFee(GetVirtualTransactionSize(*tx_parent_2)), 800);\r\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_effective_feerate.value().GetFee(GetVirtualTransactionSize(*tx_child_2)), 200);\r\n+\r\n+        // parent2 replaced both transactions\r\n+        BOOST_CHECK(it_parent_2->second.m_replaced_transactions.size() == 2);\r\n+        BOOST_CHECK(it_child_2->second.m_replaced_transactions.empty());\r\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n-        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent_2->GetHash())));\r\n-        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\r\n \r\n         // Package RBF, in which the replacement transaction's child sponsors the fees to meet RBF feerate rules\r\n         const auto submit3 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package3, false, std::nullopt);\r\n-        BOOST_CHECK_MESSAGE(submit3.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit3.m_state.GetRejectReason());\r\n+        if (auto err_3{CheckPackageMempoolAcceptResult(package3, submit3, /*expect_valid=*/true, m_node.mempool.get())}) {\r\n+            BOOST_ERROR(err_3.value());\r\n+        }\r\n         auto it_parent_3 = submit3.m_tx_results.find(tx_parent_3->GetWitnessHash());\r\n         auto it_child_3 = submit3.m_tx_results.find(tx_child_3->GetWitnessHash());\r\n-        BOOST_CHECK(it_parent_3 != submit3.m_tx_results.end());\r\n-        BOOST_CHECK(it_child_3 != submit3.m_tx_results.end());\r\n         BOOST_CHECK_EQUAL(it_parent_3->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n         BOOST_CHECK_EQUAL(it_child_3->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\r\n+\r\n+        // package3 was considered as a package to replace both package2 transactions\r\n+        BOOST_CHECK(it_parent_3->second.m_replaced_transactions.size() == 2);\r\n+        BOOST_CHECK(it_child_3->second.m_replaced_transactions.empty());\r\n+\r\n+        std::vector<Wtxid> expected_package3_wtxids({tx_parent_3->GetWitnessHash(), tx_child_3->GetWitnessHash()});\r\n+        const auto package3_total_vsize{GetVirtualTransactionSize(*tx_parent_3) + GetVirtualTransactionSize(*tx_child_3)};\r\n+        BOOST_CHECK(it_parent_3->second.m_wtxids_fee_calculations.value() == expected_package3_wtxids);\r\n+        BOOST_CHECK(it_child_3->second.m_wtxids_fee_calculations.value() == expected_package3_wtxids);\r\n+        BOOST_CHECK_EQUAL(it_parent_3->second.m_effective_feerate.value().GetFee(package3_total_vsize), 1499);\r\n+        BOOST_CHECK_EQUAL(it_child_3->second.m_effective_feerate.value().GetFee(package3_total_vsize), 1499);\r\n+\r\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\r\n-        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent_3->GetHash())));\r\n-        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_3->GetHash())));\r\n     }\r\n \r\n }\r\n\r\n```",
      "created_at": "2024-06-10T10:32:58Z",
      "updated_at": "2024-06-10T10:58:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633026172",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633026172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1074,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633036250",
      "pull_request_review_id": 2107324391,
      "id": 1633036250,
      "node_id": "PRRC_kwDOABII585hVifa",
      "diff_hunk": "@@ -0,0 +1,590 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import fill_mempool\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+# Value high enough to cause evictions in each subtest\n+# for typical cases\n+DEFAULT_CHILD_FEE = DEFAULT_FEE * 4\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-acceptnonstdtxn=1\", # TRUC test; remove once standard",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 37,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "7d895935aef63b4aa728310b580f418ce35fc234",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Needs rebase for #29496?",
      "created_at": "2024-06-10T10:41:44Z",
      "updated_at": "2024-06-10T10:58:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633036250",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633036250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633039485",
      "pull_request_review_id": 2107324391,
      "id": 1633039485,
      "node_id": "PRRC_kwDOABII585hVjR9",
      "diff_hunk": "@@ -1391,6 +1393,13 @@ bool MemPoolAccept::SubmitPackage(const ATMPArgs& args, std::vector<Workspace>&\n     std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(all_package_wtxids),\n                    [](const auto& ws) { return ws.m_ptx->GetWitnessHash(); });\n \n+    if (!m_subpackage.m_replaced_transactions.empty()) {\n+        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with %u new one(s) for %s additional fees, %d delta bytes\\n\",\n+                 m_subpackage.m_replaced_transactions.size(), workspaces.size(),\n+                 m_subpackage.m_total_modified_fees - static_cast<int>(m_subpackage.m_conflicting_fees),\n+                 m_subpackage.m_total_vsize - static_cast<int>(m_subpackage.m_conflicting_size));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "aa3a4da248fe9d4a765fa4c80797ca333ee37f07",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "aa3a4da248fe9d4a765fa4c80797ca333ee37f07: is the static cast necessary?",
      "created_at": "2024-06-10T10:44:48Z",
      "updated_at": "2024-06-10T10:58:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633039485",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633039485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1399,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633045871",
      "pull_request_review_id": 2107324391,
      "id": 1633045871,
      "node_id": "PRRC_kwDOABII585hVk1v",
      "diff_hunk": "@@ -307,7 +307,7 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n             // just use result_package.m_state here. This makes the expect_valid check meaningless, but\n             // we can still verify that the contents of m_tx_results are consistent with m_state.\n             const bool expect_valid{result_package.m_state.IsValid()};\n-            Assert(!CheckPackageMempoolAcceptResult(txs, result_package, expect_valid, nullptr));\n+            Assert(!CheckPackageMempoolAcceptResult(txs, result_package, expect_valid, &tx_pool));",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "5dd74f9c6ddc218417bda841f493ca2ed3f2b327",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "5dd74f9c6ddc218417bda841f493ca2ed3f2b327\r\n\r\nI don't 100% remember why we did this, but I think it was so we don't check mempool contents when `test_accept=true`?",
      "created_at": "2024-06-10T10:50:23Z",
      "updated_at": "2024-06-10T10:58:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633045871",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633045871"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 310,
      "original_start_line": 310,
      "start_side": "LEFT",
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633049147",
      "pull_request_review_id": 2107324391,
      "id": 1633049147,
      "node_id": "PRRC_kwDOABII585hVlo7",
      "diff_hunk": "@@ -82,6 +82,19 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n                                 wtxid.ToString());\n         }\n \n+        if (!atmp_result.m_replaced_transactions.empty() && mempool) {\n+            LOCK(mempool->cs);\n+            // If replacements occurred and it used 2 transactions, this is a package RBF and should result in a cluster of size 2\n+            if (atmp_result.m_wtxids_fee_calculations.has_value() && atmp_result.m_wtxids_fee_calculations.value().size() == 2) {\n+                for (const auto& fee_calc_wtxid : atmp_result.m_wtxids_fee_calculations.value()) {\n+                    const auto& entry = *Assert(mempool->GetEntry(fee_calc_wtxid));\n+                    if (entry.GetCountWithDescendants() + entry.GetCountWithAncestors() != 3) {\n+                        return strprintf(\"tx %s has too many ancestors or descendants for a package rbf\", fee_calc_wtxid.ToString());\n+                    }",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "91a7e8ba7606b68401b29d2609c240a604ab6fe1",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "91a7e8ba7606b68401b29d2609c240a604ab6fe1: this isn't a perfect test for cluster size 2... why not call `CheckConflictTopology`?",
      "created_at": "2024-06-10T10:53:22Z",
      "updated_at": "2024-06-10T10:58:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633049147",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633049147"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633053605",
      "pull_request_review_id": 2107324391,
      "id": 1633053605,
      "node_id": "PRRC_kwDOABII585hVmul",
      "diff_hunk": "@@ -36,10 +36,27 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Total fee plus incremental relay fee must be paid (ala bip125 rules 3 and 4).",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 17,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "7b74cbf6ed7cafdbd458471ae89fa88c52256278",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "No mentions of BIP125 outside of signaling pls\r\n```suggestion\r\n   - Replacements must pay more total total fees at the incremental relay fee (analogous to regular [replacement rules](./mempool-replacements.md) 3 and 4).\r\n```",
      "created_at": "2024-06-10T10:57:27Z",
      "updated_at": "2024-06-10T10:58:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633053605",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633053605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633714824",
      "pull_request_review_id": 2108570769,
      "id": 1633714824,
      "node_id": "PRRC_kwDOABII585hYIKI",
      "diff_hunk": "@@ -938,4 +939,140 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 199, /*submit=*/false));\n+        CTransactionRef tx_child_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_3, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 199 - 1300, /*submit=*/false));\n+\n+        // In all packages, the parents conflict with each other\n+        BOOST_CHECK(tx_parent_1->GetHash() != tx_parent_2->GetHash() && tx_parent_2->GetHash() != tx_parent_3->GetHash());\n+\n+        // 1 parent paying 200sat, 1 child paying 200sat.\n+        Package package1{tx_parent_1, tx_child_1};\n+        // 1 parent paying 800sat, 1 child paying 200sat.\n+        Package package2{tx_parent_2, tx_child_2};\n+        // 1 parent paying 199sat, 1 child paying 1300.\n+        Package package3{tx_parent_3, tx_child_3};\n+\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent_1->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent_1->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+\n+        // This replacement is actually not package rbf; the parent carries enough fees\n+        // to replace the entire package on its own.\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit2.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit2.m_state.GetRejectReason());\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent_2->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK(it_parent_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK(it_child_2 != submit2.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent_2->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_2->GetHash())));\n+\n+        // Package RBF, in which the replacement transaction's child sponsors the fees to meet RBF feerate rules\n+        const auto submit3 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package3, false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit3.m_state.IsValid(), \"Package validation unexpectedly failed\" << submit3.m_state.GetRejectReason());\n+        auto it_parent_3 = submit3.m_tx_results.find(tx_parent_3->GetWitnessHash());\n+        auto it_child_3 = submit3.m_tx_results.find(tx_child_3->GetWitnessHash());\n+        BOOST_CHECK(it_parent_3 != submit3.m_tx_results.end());\n+        BOOST_CHECK(it_child_3 != submit3.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_3->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_3->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent_3->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_3->GetHash())));",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "7d895935aef63b4aa728310b580f418ce35fc234",
      "in_reply_to_id": 1633026172,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken with only light modifications",
      "created_at": "2024-06-10T19:09:31Z",
      "updated_at": "2024-06-10T19:09:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633714824",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633714824"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1074,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633714910",
      "pull_request_review_id": 2108570938,
      "id": 1633714910,
      "node_id": "PRRC_kwDOABII585hYILe",
      "diff_hunk": "@@ -82,6 +82,19 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n                                 wtxid.ToString());\n         }\n \n+        if (!atmp_result.m_replaced_transactions.empty() && mempool) {\n+            LOCK(mempool->cs);\n+            // If replacements occurred and it used 2 transactions, this is a package RBF and should result in a cluster of size 2\n+            if (atmp_result.m_wtxids_fee_calculations.has_value() && atmp_result.m_wtxids_fee_calculations.value().size() == 2) {\n+                for (const auto& fee_calc_wtxid : atmp_result.m_wtxids_fee_calculations.value()) {\n+                    const auto& entry = *Assert(mempool->GetEntry(fee_calc_wtxid));\n+                    if (entry.GetCountWithDescendants() + entry.GetCountWithAncestors() != 3) {\n+                        return strprintf(\"tx %s has too many ancestors or descendants for a package rbf\", fee_calc_wtxid.ToString());\n+                    }",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "91a7e8ba7606b68401b29d2609c240a604ab6fe1",
      "in_reply_to_id": 1633049147,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Directly checked cluster size instead.",
      "created_at": "2024-06-10T19:09:35Z",
      "updated_at": "2024-06-10T19:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633714910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633714910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633714959",
      "pull_request_review_id": 2108571034,
      "id": 1633714959,
      "node_id": "PRRC_kwDOABII585hYIMP",
      "diff_hunk": "@@ -307,7 +307,7 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n             // just use result_package.m_state here. This makes the expect_valid check meaningless, but\n             // we can still verify that the contents of m_tx_results are consistent with m_state.\n             const bool expect_valid{result_package.m_state.IsValid()};\n-            Assert(!CheckPackageMempoolAcceptResult(txs, result_package, expect_valid, nullptr));\n+            Assert(!CheckPackageMempoolAcceptResult(txs, result_package, expect_valid, &tx_pool));",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "5dd74f9c6ddc218417bda841f493ca2ed3f2b327",
      "in_reply_to_id": 1633045871,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This should only be called when not `test_accept`, right?",
      "created_at": "2024-06-10T19:09:39Z",
      "updated_at": "2024-06-10T19:09:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633714959",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633714959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 310,
      "original_start_line": 310,
      "start_side": "LEFT",
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633714993",
      "pull_request_review_id": 2108571086,
      "id": 1633714993,
      "node_id": "PRRC_kwDOABII585hYIMx",
      "diff_hunk": "@@ -1391,6 +1393,13 @@ bool MemPoolAccept::SubmitPackage(const ATMPArgs& args, std::vector<Workspace>&\n     std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(all_package_wtxids),\n                    [](const auto& ws) { return ws.m_ptx->GetWitnessHash(); });\n \n+    if (!m_subpackage.m_replaced_transactions.empty()) {\n+        LogPrint(BCLog::MEMPOOL, \"replaced %u mempool transactions with %u new one(s) for %s additional fees, %d delta bytes\\n\",\n+                 m_subpackage.m_replaced_transactions.size(), workspaces.size(),\n+                 m_subpackage.m_total_modified_fees - static_cast<int>(m_subpackage.m_conflicting_fees),\n+                 m_subpackage.m_total_vsize - static_cast<int>(m_subpackage.m_conflicting_size));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "aa3a4da248fe9d4a765fa4c80797ca333ee37f07",
      "in_reply_to_id": 1633039485,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "removed the static cast for `m_conflicting_fees` since that's the same type as `m_total_modified_fees`, but left the other static casts in place since explicit is better than implicit",
      "created_at": "2024-06-10T19:09:41Z",
      "updated_at": "2024-06-10T19:09:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633714993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633714993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1399,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633715042",
      "pull_request_review_id": 2108571143,
      "id": 1633715042,
      "node_id": "PRRC_kwDOABII585hYINi",
      "diff_hunk": "@@ -0,0 +1,590 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import fill_mempool\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+# Value high enough to cause evictions in each subtest\n+# for typical cases\n+DEFAULT_CHILD_FEE = DEFAULT_FEE * 4\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+            \"-acceptnonstdtxn=1\", # TRUC test; remove once standard",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 37,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "7d895935aef63b4aa728310b580f418ce35fc234",
      "in_reply_to_id": 1633036250,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yep, rebased + removed",
      "created_at": "2024-06-10T19:09:44Z",
      "updated_at": "2024-06-10T19:09:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633715042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633715042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633715153",
      "pull_request_review_id": 2108571292,
      "id": 1633715153,
      "node_id": "PRRC_kwDOABII585hYIPR",
      "diff_hunk": "@@ -938,4 +939,140 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 500, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - 700, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit1.m_state.IsValid(), \"Package validation unexpectedly failed: \" << submit1.m_state.GetRejectReason());\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK(it_parent_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK(it_child_1 != submit1.m_tx_results.end());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "7d895935aef63b4aa728310b580f418ce35fc234",
      "in_reply_to_id": 1632990659,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "great, added a little commentary on top and repeated this for 2nd package",
      "created_at": "2024-06-10T19:09:49Z",
      "updated_at": "2024-06-10T19:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633715153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633715153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 978,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 988,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633715573",
      "pull_request_review_id": 2108571882,
      "id": 1633715573,
      "node_id": "PRRC_kwDOABII585hYIV1",
      "diff_hunk": "@@ -36,10 +36,27 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Total fee plus incremental relay fee must be paid (ala bip125 rules 3 and 4).",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 17,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "7b74cbf6ed7cafdbd458471ae89fa88c52256278",
      "in_reply_to_id": 1633053605,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "sure, taken",
      "created_at": "2024-06-10T19:10:13Z",
      "updated_at": "2024-06-10T19:10:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633715573",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633715573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633715847",
      "pull_request_review_id": 2108572306,
      "id": 1633715847,
      "node_id": "PRRC_kwDOABII585hYIaH",
      "diff_hunk": "@@ -938,4 +939,140 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - 200, /*submit=*/false);",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "7d895935aef63b4aa728310b580f418ce35fc234",
      "in_reply_to_id": 1632980812,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "adapted more of the test to use this value",
      "created_at": "2024-06-10T19:10:29Z",
      "updated_at": "2024-06-10T19:10:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633715847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633715847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 966,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633715933",
      "pull_request_review_id": 2108572437,
      "id": 1633715933,
      "node_id": "PRRC_kwDOABII585hYIbd",
      "diff_hunk": "@@ -1141,7 +1140,80 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2.\n+    // N.B. To relax this constraint we will need to revisit how CCoinsViewMemPool::PackageAddTransaction\n+    // is being used inside AcceptMultipleTransactions to track available inputs while processing a package.\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // The aggregated set of conflicts cannot exceed 100.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 93,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "0044c1dad9ffc3d58afd06d7533f16beb0d0a829",
      "in_reply_to_id": 1632970572,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-06-10T19:10:35Z",
      "updated_at": "2024-06-10T19:10:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1633715933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1633715933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634857819",
      "pull_request_review_id": 2110414831,
      "id": 1634857819,
      "node_id": "PRRC_kwDOABII585hcfNb",
      "diff_hunk": "@@ -524,7 +524,7 @@ class MemPoolAccept\n                             /* m_bypass_limits */ false,",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "d3d653dce34ad1f3235869b8a54f9572e89e5b68",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In d3d653dce34ad1f3235869b8a54f9572e89e5b68  [policy] package rbf \r\n\r\nUpdate places where it is claimed that package RBF is disabled?\r\n\r\n\r\n```diff\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex 8372fcadca1..d18fc1c0f2c 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -602,8 +602,8 @@ public:\r\n     /**\r\n      * Submission of a subpackage.\r\n      * If subpackage size == 1, calls AcceptSingleTransaction() with adjusted ATMPArgs to avoid\r\n-     * package policy restrictions like no CPFP carve out (PackageMempoolChecks) and disabled RBF\r\n-     * (m_allow_replacement), and creates a PackageMempoolAcceptResult wrapping the result.\r\n+     * package policy restrictions like no CPFP carve out (PackageMempoolChecks)\r\n+     * and creates a PackageMempoolAcceptResult wrapping the result.\r\n      *\r\n      * If subpackage size > 1, calls AcceptMultipleTransactions() with the provided ATMPArgs.\r\n      *\r\n@@ -950,7 +950,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\r\n     ws.m_iters_conflicting = m_pool.GetIterSet(ws.m_conflicts);\r\n \r\n     // Note that these modifications are only applicable to single transaction scenarios;\r\n-    // carve-outs and package RBF are disabled for multi-transaction evaluations.\r\n+    // carve-outs are disabled for multi-transaction evaluations.\r\n     CTxMemPool::Limits maybe_rbf_limits = m_pool.m_opts.limits;\r\n \r\n     // Calculate in-mempool ancestors, up to a limit.\r\n```",
      "created_at": "2024-06-11T13:07:48Z",
      "updated_at": "2024-06-11T13:14:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1634857819",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634857819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634859550",
      "pull_request_review_id": 2110414831,
      "id": 1634859550,
      "node_id": "PRRC_kwDOABII585hcfoe",
      "diff_hunk": "@@ -135,10 +134,7 @@ std::optional<std::string> PackageV3Checks(const CTransactionRef& ptx, int64_t v\n                 }\n             }\n \n-            // It shouldn't be possible to have any mempool siblings at this point. SingleV3Checks\n-            // catches mempool siblings and sibling eviction is not extended to packages. Also, if the package consists of connected transactions,\n-            // any tx having a mempool ancestor would mean the package exceeds ancestor limits.\n-            if (!Assume(!parent_info.m_has_mempool_descendant)) {\n+            if (parent_info.m_has_mempool_descendant) {",
      "path": "src/policy/v3_policy.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "848c4e55da85ec9776ce1c16ca51ea370502125b",
      "in_reply_to_id": 1619222418,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> It hits in the fuzzing package_eval fuzzing target.\r\n\r\nI was able to reproduce this locally.\r\n",
      "created_at": "2024-06-11T13:08:53Z",
      "updated_at": "2024-06-11T13:14:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1634859550",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634859550"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 138,
      "original_start_line": 138,
      "start_side": "LEFT",
      "line": 137,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634885258",
      "pull_request_review_id": 2110459573,
      "id": 1634885258,
      "node_id": "PRRC_kwDOABII585hcl6K",
      "diff_hunk": "@@ -938,4 +939,149 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - low_fee_amt, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - low_fee_amt - 300, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - low_fee_amt - 500, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        if (auto err_1{CheckPackageMempoolAcceptResult(package1, submit1, /*expect_valid=*/true, m_node.mempool.get())}) {\n+            BOOST_ERROR(err_1.value());\n+        }\n+\n+        // Check precise ResultTypes and mempool size. We know it_parent_1 and it_child_1 exist from above call\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        if (auto err_2{CheckPackageMempoolAcceptResult(package2, submit2, /*expect_valid=*/true, m_node.mempool.get())}) {\n+            BOOST_ERROR(err_2.value());\n+        }\n+\n+        // Check precise ResultTypes and mempool size. We know it_parent_2 and it_child_2 exist from above call\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+        // child1 has been replaced\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 199, /*submit=*/false));\n+        CTransactionRef tx_child_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_3, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 199 - 1300, /*submit=*/false));\n+\n+        // In all packages, the parents conflict with each other\n+        BOOST_CHECK(tx_parent_1->GetHash() != tx_parent_2->GetHash() && tx_parent_2->GetHash() != tx_parent_3->GetHash());\n+\n+        // 1 parent paying 200sat, 1 child paying 200sat.\n+        Package package1{tx_parent_1, tx_child_1};\n+        // 1 parent paying 800sat, 1 child paying 200sat.\n+        Package package2{tx_parent_2, tx_child_2};\n+        // 1 parent paying 199sat, 1 child paying 1300.",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "49b0f706fd26257505e2dd070b7d8909a01b6fcc",
      "in_reply_to_id": null,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n```suggestion\r\n        // 1 parent paying 199sat, 1 child paying 1300sat.\r\n```",
      "created_at": "2024-06-11T13:24:01Z",
      "updated_at": "2024-06-11T13:24:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1634885258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634885258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1036,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634923804",
      "pull_request_review_id": 2110525872,
      "id": 1634923804,
      "node_id": "PRRC_kwDOABII585hcvUc",
      "diff_hunk": "@@ -524,7 +524,7 @@ class MemPoolAccept\n                             /* m_bypass_limits */ false,",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "d3d653dce34ad1f3235869b8a54f9572e89e5b68",
      "in_reply_to_id": 1634857819,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done, and found one more place with out of date comment",
      "created_at": "2024-06-11T13:46:39Z",
      "updated_at": "2024-06-11T13:46:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1634923804",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634923804"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 524,
      "original_line": 524,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634923975",
      "pull_request_review_id": 2110526121,
      "id": 1634923975,
      "node_id": "PRRC_kwDOABII585hcvXH",
      "diff_hunk": "@@ -938,4 +939,149 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    const CAmount coinbase_value{50 * COIN};\n+    // Test that de-duplication works. This is not actually package rbf.\n+    {\n+        // 1 parent paying 200sat, 1 child paying 300sat\n+        Package package1;\n+        // 1 parent paying 200sat, 1 child paying 500sat\n+        Package package2;\n+        // Package1 and package2 have the same parent. The children conflict.\n+        auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/m_coinbase_txns[0], /*input_vout=*/0,\n+                                                        /*input_height=*/0, /*input_signing_key=*/coinbaseKey,\n+                                                        /*output_destination=*/parent_spk,\n+                                                        /*output_amount=*/coinbase_value - low_fee_amt, /*submit=*/false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+        package1.push_back(tx_parent);\n+        package2.push_back(tx_parent);\n+\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - low_fee_amt - 300, false));\n+        package1.push_back(tx_child_1);\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(tx_parent, 0, 101, child_key, child_spk, coinbase_value - low_fee_amt - 500, false));\n+        package2.push_back(tx_child_2);\n+\n+        LOCK(m_node.mempool->cs);\n+        const auto submit1 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package1, /*test_accept=*/false, std::nullopt);\n+        if (auto err_1{CheckPackageMempoolAcceptResult(package1, submit1, /*expect_valid=*/true, m_node.mempool.get())}) {\n+            BOOST_ERROR(err_1.value());\n+        }\n+\n+        // Check precise ResultTypes and mempool size. We know it_parent_1 and it_child_1 exist from above call\n+        auto it_parent_1 = submit1.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_1 = submit1.m_tx_results.find(tx_child_1->GetWitnessHash());\n+        BOOST_CHECK_EQUAL(it_parent_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(it_child_1->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+        const auto submit2 = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool, package2, /*test_accept=*/false, std::nullopt);\n+        if (auto err_2{CheckPackageMempoolAcceptResult(package2, submit2, /*expect_valid=*/true, m_node.mempool.get())}) {\n+            BOOST_ERROR(err_2.value());\n+        }\n+\n+        // Check precise ResultTypes and mempool size. We know it_parent_2 and it_child_2 exist from above call\n+        auto it_parent_2 = submit2.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child_2 = submit2.m_tx_results.find(tx_child_2->GetWitnessHash());\n+        BOOST_CHECK_EQUAL(it_parent_2->second.m_result_type, MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);\n+        BOOST_CHECK_EQUAL(it_child_2->second.m_result_type, MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+        // child1 has been replaced\n+        BOOST_CHECK(!m_node.mempool->exists(GenTxid::Txid(tx_child_1->GetHash())));\n+    }\n+\n+    // Test package rbf.\n+    {\n+        CTransactionRef tx_parent_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 200, /*submit=*/false));\n+        CTransactionRef tx_child_1 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_1, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 400, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 800, /*submit=*/false));\n+        CTransactionRef tx_child_2 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_2, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 800 - 200, /*submit=*/false));\n+\n+        CTransactionRef tx_parent_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            m_coinbase_txns[1], /*input_vout=*/0, /*input_height=*/0,\n+            coinbaseKey, parent_spk, coinbase_value - 199, /*submit=*/false));\n+        CTransactionRef tx_child_3 = MakeTransactionRef(CreateValidMempoolTransaction(\n+            tx_parent_3, /*input_vout=*/0, /*input_height=*/101,\n+            child_key, child_spk, coinbase_value - 199 - 1300, /*submit=*/false));\n+\n+        // In all packages, the parents conflict with each other\n+        BOOST_CHECK(tx_parent_1->GetHash() != tx_parent_2->GetHash() && tx_parent_2->GetHash() != tx_parent_3->GetHash());\n+\n+        // 1 parent paying 200sat, 1 child paying 200sat.\n+        Package package1{tx_parent_1, tx_child_1};\n+        // 1 parent paying 800sat, 1 child paying 200sat.\n+        Package package2{tx_parent_2, tx_child_2};\n+        // 1 parent paying 199sat, 1 child paying 1300.",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "49b0f706fd26257505e2dd070b7d8909a01b6fcc",
      "in_reply_to_id": 1634885258,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-06-11T13:46:44Z",
      "updated_at": "2024-06-11T13:46:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1634923975",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1634923975"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1036,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635107884",
      "pull_request_review_id": 2110833158,
      "id": 1635107884,
      "node_id": "PRRC_kwDOABII585hdcQs",
      "diff_hunk": "@@ -82,6 +82,19 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n                                 wtxid.ToString());\n         }\n \n+        if (!atmp_result.m_replaced_transactions.empty() && mempool) {\n+            LOCK(mempool->cs);\n+            // If replacements occurred and it used 2 transactions, this is a package RBF and should result in a cluster of size 2\n+            if (atmp_result.m_wtxids_fee_calculations.has_value() && atmp_result.m_wtxids_fee_calculations.value().size() == 2) {\n+                for (const auto& fee_calc_wtxid : atmp_result.m_wtxids_fee_calculations.value()) {\n+                    const auto& entry = *Assert(mempool->GetEntry(fee_calc_wtxid));\n+                    if (entry.GetCountWithDescendants() + entry.GetCountWithAncestors() != 3) {\n+                        return strprintf(\"tx %s has too many ancestors or descendants for a package rbf\", fee_calc_wtxid.ToString());\n+                    }",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "91a7e8ba7606b68401b29d2609c240a604ab6fe1",
      "in_reply_to_id": 1633049147,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice, agree that's better. However e4e14fedc9622ca7cfc40af4f2aa70ed4bb7daa6 is now unnecessary and can be dropped.",
      "created_at": "2024-06-11T15:38:55Z",
      "updated_at": "2024-06-11T15:38:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1635107884",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635107884"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635112115",
      "pull_request_review_id": 2110840375,
      "id": 1635112115,
      "node_id": "PRRC_kwDOABII585hddSz",
      "diff_hunk": "@@ -307,7 +307,7 @@ FUZZ_TARGET(tx_package_eval, .init = initialize_tx_pool)\n             // just use result_package.m_state here. This makes the expect_valid check meaningless, but\n             // we can still verify that the contents of m_tx_results are consistent with m_state.\n             const bool expect_valid{result_package.m_state.IsValid()};\n-            Assert(!CheckPackageMempoolAcceptResult(txs, result_package, expect_valid, nullptr));\n+            Assert(!CheckPackageMempoolAcceptResult(txs, result_package, expect_valid, &tx_pool));",
      "path": "src/test/fuzz/package_eval.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "5dd74f9c6ddc218417bda841f493ca2ed3f2b327",
      "in_reply_to_id": 1633045871,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Aha yes. Can resolve.",
      "created_at": "2024-06-11T15:41:49Z",
      "updated_at": "2024-06-11T15:41:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1635112115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635112115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 310,
      "original_start_line": 310,
      "start_side": "LEFT",
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635115027",
      "pull_request_review_id": 2110845000,
      "id": 1635115027,
      "node_id": "PRRC_kwDOABII585hdeAT",
      "diff_hunk": "@@ -82,6 +82,15 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n                                 wtxid.ToString());\n         }\n \n+        if (!atmp_result.m_replaced_transactions.empty() && mempool) {",
      "path": "src/test/util/txmempool.cpp",
      "position": 25,
      "original_position": 4,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "5bb449cf91907f613dc4d7e1114be3befaf7b2ff",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: 5bb449cf91907f613dc4d7e1114be3befaf7b2ff commit message should be test util instead of fuzz, since this is used in unit tests too",
      "created_at": "2024-06-11T15:43:52Z",
      "updated_at": "2024-06-12T10:45:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1635115027",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635115027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635117157",
      "pull_request_review_id": 2110848403,
      "id": 1635117157,
      "node_id": "PRRC_kwDOABII585hdehl",
      "diff_hunk": "@@ -82,6 +82,19 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n                                 wtxid.ToString());\n         }\n \n+        if (!atmp_result.m_replaced_transactions.empty() && mempool) {\n+            LOCK(mempool->cs);\n+            // If replacements occurred and it used 2 transactions, this is a package RBF and should result in a cluster of size 2\n+            if (atmp_result.m_wtxids_fee_calculations.has_value() && atmp_result.m_wtxids_fee_calculations.value().size() == 2) {\n+                for (const auto& fee_calc_wtxid : atmp_result.m_wtxids_fee_calculations.value()) {\n+                    const auto& entry = *Assert(mempool->GetEntry(fee_calc_wtxid));\n+                    if (entry.GetCountWithDescendants() + entry.GetCountWithAncestors() != 3) {\n+                        return strprintf(\"tx %s has too many ancestors or descendants for a package rbf\", fee_calc_wtxid.ToString());\n+                    }",
      "path": "src/test/util/txmempool.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "91a7e8ba7606b68401b29d2609c240a604ab6fe1",
      "in_reply_to_id": 1633049147,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "even better. dropped.",
      "created_at": "2024-06-11T15:45:23Z",
      "updated_at": "2024-06-11T15:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1635117157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635117157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635164607",
      "pull_request_review_id": 2110845000,
      "id": 1635164607,
      "node_id": "PRRC_kwDOABII585hdqG_",
      "diff_hunk": "@@ -1434,11 +1530,14 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n \n         // Make the coins created by this transaction available for subsequent transactions in the\n-        // package to spend. Since we already checked conflicts in the package and we don't allow\n-        // replacements, we don't need to track the coins spent. Note that this logic will need to be\n-        // updated if package replace-by-fee is allowed in the future.\n-        assert(!args.m_allow_replacement);\n-        assert(!m_subpackage.m_rbf);\n+        // package to spend. If there are no conflicts, no transaction can spend a coin\n+        // needed by another transaction in the package. We also need to make sure that no package\n+        // tx replaces (or replaces the ancestor of) the parent of another package tx. As long as we\n+        // check these two things, we don't need to track the coins spent.\n+        // If there are conflicts, PackageMempoolChecks() ensures later that any package RBF attempt",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 241,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "dd364f9a813221956ec0b19f45db231b148491c2",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Very different uses of \"conflicts\" here\r\n\r\n```suggestion\r\n        // package to spend. If there are no conflicts within the package, no transaction can spend a coin\r\n        // needed by another transaction in the package. We also need to make sure that no package\r\n        // tx replaces (or replaces the ancestor of) the parent of another package tx. As long as we\r\n        // check these two things, we don't need to track the coins spent.\r\n        // If a package tx conflicts with a mempool tx, PackageMempoolChecks() ensures later that any package RBF attempt\r\n```",
      "created_at": "2024-06-11T16:21:07Z",
      "updated_at": "2024-06-12T10:45:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1635164607",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635164607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1533,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1537,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635166974",
      "pull_request_review_id": 2110845000,
      "id": 1635166974,
      "node_id": "PRRC_kwDOABII585hdqr-",
      "diff_hunk": "@@ -36,10 +36,28 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 13,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "dd364f9a813221956ec0b19f45db231b148491c2",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "dd364f9a813221956ec0b19f45db231b148491c2:\r\nI suppose we should more thoroughly define what \"cluster\" means somewhere",
      "created_at": "2024-06-11T16:23:01Z",
      "updated_at": "2024-06-12T10:45:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1635166974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635166974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635168196",
      "pull_request_review_id": 2110845000,
      "id": 1635168196,
      "node_id": "PRRC_kwDOABII585hdq_E",
      "diff_hunk": "@@ -36,10 +36,28 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Replacements must pay more total total fees at the incremental relay fee (analogous to\n+     regular [replacement rules](./mempool-replacements.md) 3 and 4).\n+\n+   - Parent feerate must be lower than package feerate.\n+\n+   - Must improve feerate diagram. (#29242)",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 22,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "dd364f9a813221956ec0b19f45db231b148491c2",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also somewhat unclear... perhaps needs a link to the delving post or something",
      "created_at": "2024-06-11T16:23:57Z",
      "updated_at": "2024-06-12T10:45:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1635168196",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635168196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635171418",
      "pull_request_review_id": 2110845000,
      "id": 1635171418,
      "node_id": "PRRC_kwDOABII585hdrxa",
      "diff_hunk": "@@ -82,6 +82,15 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n                                 wtxid.ToString());\n         }\n \n+        if (!atmp_result.m_replaced_transactions.empty() && mempool) {",
      "path": "src/test/util/txmempool.cpp",
      "position": 25,
      "original_position": 4,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "5bb449cf91907f613dc4d7e1114be3befaf7b2ff",
      "in_reply_to_id": 1635115027,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I got f25c15383ff051effd0add25352fe0f0e2224d0c and 5bb449cf91907f613dc4d7e1114be3befaf7b2ff mixed up - they could be squashed.",
      "created_at": "2024-06-11T16:26:27Z",
      "updated_at": "2024-06-12T10:45:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1635171418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1635171418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636499615",
      "pull_request_review_id": 2113085876,
      "id": 1636499615,
      "node_id": "PRRC_kwDOABII585hiwCf",
      "diff_hunk": "@@ -1434,11 +1530,14 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n \n         // Make the coins created by this transaction available for subsequent transactions in the\n-        // package to spend. Since we already checked conflicts in the package and we don't allow\n-        // replacements, we don't need to track the coins spent. Note that this logic will need to be\n-        // updated if package replace-by-fee is allowed in the future.\n-        assert(!args.m_allow_replacement);\n-        assert(!m_subpackage.m_rbf);\n+        // package to spend. If there are no conflicts, no transaction can spend a coin\n+        // needed by another transaction in the package. We also need to make sure that no package\n+        // tx replaces (or replaces the ancestor of) the parent of another package tx. As long as we\n+        // check these two things, we don't need to track the coins spent.\n+        // If there are conflicts, PackageMempoolChecks() ensures later that any package RBF attempt",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 241,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "dd364f9a813221956ec0b19f45db231b148491c2",
      "in_reply_to_id": 1635164607,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "taken",
      "created_at": "2024-06-12T13:48:12Z",
      "updated_at": "2024-06-12T13:48:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1636499615",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636499615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 1533,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1537,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636499712",
      "pull_request_review_id": 2113086023,
      "id": 1636499712,
      "node_id": "PRRC_kwDOABII585hiwEA",
      "diff_hunk": "@@ -36,10 +36,28 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 13,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "dd364f9a813221956ec0b19f45db231b148491c2",
      "in_reply_to_id": 1635166974,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "defined it inline",
      "created_at": "2024-06-12T13:48:15Z",
      "updated_at": "2024-06-12T13:48:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1636499712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636499712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636499798",
      "pull_request_review_id": 2113086157,
      "id": 1636499798,
      "node_id": "PRRC_kwDOABII585hiwFW",
      "diff_hunk": "@@ -36,10 +36,28 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Replacements must pay more total total fees at the incremental relay fee (analogous to\n+     regular [replacement rules](./mempool-replacements.md) 3 and 4).\n+\n+   - Parent feerate must be lower than package feerate.\n+\n+   - Must improve feerate diagram. (#29242)",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 22,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "dd364f9a813221956ec0b19f45db231b148491c2",
      "in_reply_to_id": 1635168196,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added delving link but for Future Work I'm wondering longer term where cluster mempool design stuff should live.",
      "created_at": "2024-06-12T13:48:18Z",
      "updated_at": "2024-06-12T13:48:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1636499798",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636499798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636499902",
      "pull_request_review_id": 2113086324,
      "id": 1636499902,
      "node_id": "PRRC_kwDOABII585hiwG-",
      "diff_hunk": "@@ -82,6 +82,15 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n                                 wtxid.ToString());\n         }\n \n+        if (!atmp_result.m_replaced_transactions.empty() && mempool) {",
      "path": "src/test/util/txmempool.cpp",
      "position": 25,
      "original_position": 4,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "5bb449cf91907f613dc4d7e1114be3befaf7b2ff",
      "in_reply_to_id": 1635115027,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "squashed and lightly re-ordered",
      "created_at": "2024-06-12T13:48:22Z",
      "updated_at": "2024-06-12T13:48:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1636499902",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1636499902"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637812555",
      "pull_request_review_id": 2115139302,
      "id": 1637812555,
      "node_id": "PRRC_kwDOABII585hnwlL",
      "diff_hunk": "@@ -1141,7 +1140,81 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2.\n+    // N.B. To relax this constraint we will need to revisit how CCoinsViewMemPool::PackageAddTransaction\n+    // is being used inside AcceptMultipleTransactions to track available inputs while processing a package.\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Don't consider replacements that would cause us to remove a large number of mempool entries.\n+    // This limit is not increased in a package RBF. Use the aggregate number of transactions.\n+    if (const auto err_string{GetEntriesForConflicts(*child_ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                     m_subpackage.m_all_conflicts)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: too many potential replacements\", *err_string);\n+    }\n+\n+    for (CTxMemPool::txiter it : m_subpackage.m_all_conflicts) {\n+        m_subpackage.m_conflicting_fees += it->GetModifiedFee();\n+        m_subpackage.m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid& child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_subpackage.m_conflicting_fees,\n+                                         /*replacement_fees=*/m_subpackage.m_total_modified_fees,\n+                                         /*replacement_vsize=*/m_subpackage.m_total_vsize,\n+                                         m_pool.m_opts.incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(m_subpackage.m_total_modified_fees, m_subpackage.m_total_vsize);\n+    if (parent_feerate >= package_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: package feerate is less than parent feerate\",\n+                                     strprintf(\"package feerate %s <= parent feerate is %s\", package_feerate.ToString(), parent_feerate.ToString()));\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    // This takes the place of ReplacementChecks()'s PaysMoreForConflicts() in the package RBF setting.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 147,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "612847ae1a55e92bb7732905a026be96a436372a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n    // This takes the place of ReplacementChecks()'s PaysMoreThanConflicts() in the package RBF setting.\r\n```",
      "created_at": "2024-06-13T08:32:50Z",
      "updated_at": "2024-06-13T09:59:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1637812555",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637812555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637815039",
      "pull_request_review_id": 2115139302,
      "id": 1637815039,
      "node_id": "PRRC_kwDOABII585hnxL_",
      "diff_hunk": "@@ -1141,7 +1140,81 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2.\n+    // N.B. To relax this constraint we will need to revisit how CCoinsViewMemPool::PackageAddTransaction\n+    // is being used inside AcceptMultipleTransactions to track available inputs while processing a package.\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Don't consider replacements that would cause us to remove a large number of mempool entries.\n+    // This limit is not increased in a package RBF. Use the aggregate number of transactions.\n+    if (const auto err_string{GetEntriesForConflicts(*child_ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                     m_subpackage.m_all_conflicts)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: too many potential replacements\", *err_string);\n+    }\n+\n+    for (CTxMemPool::txiter it : m_subpackage.m_all_conflicts) {\n+        m_subpackage.m_conflicting_fees += it->GetModifiedFee();\n+        m_subpackage.m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid& child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_subpackage.m_conflicting_fees,\n+                                         /*replacement_fees=*/m_subpackage.m_total_modified_fees,\n+                                         /*replacement_vsize=*/m_subpackage.m_total_vsize,\n+                                         m_pool.m_opts.incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(m_subpackage.m_total_modified_fees, m_subpackage.m_total_vsize);\n+    if (parent_feerate >= package_feerate) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "612847ae1a55e92bb7732905a026be96a436372a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: slightly easier to reason for the reader imho\r\n\r\n```suggestion\r\n    if (package_feerate <= parent_feerate) {\r\n```",
      "created_at": "2024-06-13T08:34:21Z",
      "updated_at": "2024-06-13T09:59:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1637815039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637815039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637859001",
      "pull_request_review_id": 2115139302,
      "id": 1637859001,
      "node_id": "PRRC_kwDOABII585hn765",
      "diff_hunk": "@@ -1141,7 +1140,81 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2.\n+    // N.B. To relax this constraint we will need to revisit how CCoinsViewMemPool::PackageAddTransaction\n+    // is being used inside AcceptMultipleTransactions to track available inputs while processing a package.\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Don't consider replacements that would cause us to remove a large number of mempool entries.\n+    // This limit is not increased in a package RBF. Use the aggregate number of transactions.\n+    if (const auto err_string{GetEntriesForConflicts(*child_ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                     m_subpackage.m_all_conflicts)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: too many potential replacements\", *err_string);\n+    }\n+\n+    for (CTxMemPool::txiter it : m_subpackage.m_all_conflicts) {\n+        m_subpackage.m_conflicting_fees += it->GetModifiedFee();\n+        m_subpackage.m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid& child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_subpackage.m_conflicting_fees,\n+                                         /*replacement_fees=*/m_subpackage.m_total_modified_fees,\n+                                         /*replacement_vsize=*/m_subpackage.m_total_vsize,\n+                                         m_pool.m_opts.incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(m_subpackage.m_total_modified_fees, m_subpackage.m_total_vsize);\n+    if (parent_feerate >= package_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: package feerate is less than parent feerate\",\n+                                     strprintf(\"package feerate %s <= parent feerate is %s\", package_feerate.ToString(), parent_feerate.ToString()));\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    // This takes the place of ReplacementChecks()'s PaysMoreForConflicts() in the package RBF setting.\n+    if (const auto err_tup{ImprovesFeerateDiagram(m_pool, direct_conflict_iters, m_subpackage.m_all_conflicts, m_subpackage.m_total_modified_fees, m_subpackage.m_total_vsize)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: \" + err_tup.value().second, \"\");\n+    }\n+\n+    LogPrint(BCLog::TXPACKAGES, \"package RBF checks passed: parent %s (wtxid=%s), child %s (wtxid=%s)\\n\",\n+        txns.front()->GetHash().ToString(), txns.front()->GetWitnessHash().ToString(),\n+        txns.back()->GetHash().ToString(), txns.back()->GetWitnessHash().ToString());",
      "path": "src/validation.cpp",
      "position": 162,
      "original_position": 155,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "612847ae1a55e92bb7732905a026be96a436372a",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: it might be worth to add a belt-and-suspenders check that txns has size two (either directly or indirectly by asserting `txns.size() == workspaces.size()` above)",
      "created_at": "2024-06-13T09:03:39Z",
      "updated_at": "2024-06-13T09:59:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1637859001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637859001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 1215,
      "original_start_line": 1213,
      "start_side": "RIGHT",
      "line": 1216,
      "original_line": 1216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637862004",
      "pull_request_review_id": 2115139302,
      "id": 1637862004,
      "node_id": "PRRC_kwDOABII585hn8p0",
      "diff_hunk": "@@ -938,4 +939,149 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "63307f0aa6c88502c7a1ac5084b6e7ef19e01b62",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: shorter (can also be done for grandchild_key)\r\n```suggestion\r\n    CKey child_key = GenerateRandomKey();\r\n```",
      "created_at": "2024-06-13T09:05:56Z",
      "updated_at": "2024-06-13T09:59:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1637862004",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637862004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 948,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 949,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637914037",
      "pull_request_review_id": 2115139302,
      "id": 1637914037,
      "node_id": "PRRC_kwDOABII585hoJW1",
      "diff_hunk": "@@ -0,0 +1,589 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import fill_mempool\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+# Value high enough to cause evictions in each subtest\n+# for typical cases\n+DEFAULT_CHILD_FEE = DEFAULT_FEE * 4\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_0fee_package_rbf()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_CHILD_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 139,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "63307f0aa6c88502c7a1ac5084b6e7ef19e01b62",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        single_coin = self.coins.pop()\r\n```",
      "created_at": "2024-06-13T09:42:41Z",
      "updated_at": "2024-06-13T09:59:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1637914037",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637914037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 138,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637918078",
      "pull_request_review_id": 2115139302,
      "id": 1637918078,
      "node_id": "PRRC_kwDOABII585hoKV-",
      "diff_hunk": "@@ -36,10 +36,28 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters(connected components of mempool transactions) must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 15,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "8f2f64cb99b316198a1090a78878b85214780277",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could mention \"analogous to regular replacement rule 5\"?",
      "created_at": "2024-06-13T09:45:34Z",
      "updated_at": "2024-06-13T09:59:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1637918078",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1637918078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638262708",
      "pull_request_review_id": 2115877848,
      "id": 1638262708,
      "node_id": "PRRC_kwDOABII585hpee0",
      "diff_hunk": "@@ -1141,7 +1140,81 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2.\n+    // N.B. To relax this constraint we will need to revisit how CCoinsViewMemPool::PackageAddTransaction\n+    // is being used inside AcceptMultipleTransactions to track available inputs while processing a package.\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Don't consider replacements that would cause us to remove a large number of mempool entries.\n+    // This limit is not increased in a package RBF. Use the aggregate number of transactions.\n+    if (const auto err_string{GetEntriesForConflicts(*child_ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                     m_subpackage.m_all_conflicts)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: too many potential replacements\", *err_string);\n+    }\n+\n+    for (CTxMemPool::txiter it : m_subpackage.m_all_conflicts) {\n+        m_subpackage.m_conflicting_fees += it->GetModifiedFee();\n+        m_subpackage.m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid& child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_subpackage.m_conflicting_fees,\n+                                         /*replacement_fees=*/m_subpackage.m_total_modified_fees,\n+                                         /*replacement_vsize=*/m_subpackage.m_total_vsize,\n+                                         m_pool.m_opts.incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(m_subpackage.m_total_modified_fees, m_subpackage.m_total_vsize);\n+    if (parent_feerate >= package_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: package feerate is less than parent feerate\",\n+                                     strprintf(\"package feerate %s <= parent feerate is %s\", package_feerate.ToString(), parent_feerate.ToString()));\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    // This takes the place of ReplacementChecks()'s PaysMoreForConflicts() in the package RBF setting.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 147,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "612847ae1a55e92bb7732905a026be96a436372a",
      "in_reply_to_id": 1637812555,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-06-13T13:53:31Z",
      "updated_at": "2024-06-13T13:53:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1638262708",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638262708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638262828",
      "pull_request_review_id": 2115878036,
      "id": 1638262828,
      "node_id": "PRRC_kwDOABII585hpegs",
      "diff_hunk": "@@ -1141,7 +1140,81 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2.\n+    // N.B. To relax this constraint we will need to revisit how CCoinsViewMemPool::PackageAddTransaction\n+    // is being used inside AcceptMultipleTransactions to track available inputs while processing a package.\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Don't consider replacements that would cause us to remove a large number of mempool entries.\n+    // This limit is not increased in a package RBF. Use the aggregate number of transactions.\n+    if (const auto err_string{GetEntriesForConflicts(*child_ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                     m_subpackage.m_all_conflicts)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: too many potential replacements\", *err_string);\n+    }\n+\n+    for (CTxMemPool::txiter it : m_subpackage.m_all_conflicts) {\n+        m_subpackage.m_conflicting_fees += it->GetModifiedFee();\n+        m_subpackage.m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid& child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_subpackage.m_conflicting_fees,\n+                                         /*replacement_fees=*/m_subpackage.m_total_modified_fees,\n+                                         /*replacement_vsize=*/m_subpackage.m_total_vsize,\n+                                         m_pool.m_opts.incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(m_subpackage.m_total_modified_fees, m_subpackage.m_total_vsize);\n+    if (parent_feerate >= package_feerate) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "612847ae1a55e92bb7732905a026be96a436372a",
      "in_reply_to_id": 1637815039,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-06-13T13:53:35Z",
      "updated_at": "2024-06-13T13:53:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1638262828",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638262828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638262918",
      "pull_request_review_id": 2115878196,
      "id": 1638262918,
      "node_id": "PRRC_kwDOABII585hpeiG",
      "diff_hunk": "@@ -1141,7 +1140,81 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", util::ErrorString(result).original);\n     }\n-   return true;\n+\n+    // No conflicts means we're finished. Further checks are all RBF-only.\n+    if (!m_subpackage.m_rbf) return true;\n+\n+    // We're in package RBF context; replacement proposal must be size 2\n+    if (workspaces.size() != 2 || !Assume(IsChildWithParents(txns))) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: package must be 1-parent-1-child\");\n+    }\n+\n+    // If the package has in-mempool ancestors, we won't consider a package RBF\n+    // since it would result in a cluster larger than 2.\n+    // N.B. To relax this constraint we will need to revisit how CCoinsViewMemPool::PackageAddTransaction\n+    // is being used inside AcceptMultipleTransactions to track available inputs while processing a package.\n+    for (const auto& ws : workspaces) {\n+        if (!ws.m_ancestors.empty()) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: new transaction cannot have mempool ancestors\");\n+        }\n+    }\n+\n+    // Aggregate all conflicts into one set.\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    const auto& parent_ws = workspaces[0];\n+    const auto& child_ws = workspaces[1];\n+\n+    // Don't consider replacements that would cause us to remove a large number of mempool entries.\n+    // This limit is not increased in a package RBF. Use the aggregate number of transactions.\n+    if (const auto err_string{GetEntriesForConflicts(*child_ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                     m_subpackage.m_all_conflicts)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: too many potential replacements\", *err_string);\n+    }\n+\n+    for (CTxMemPool::txiter it : m_subpackage.m_all_conflicts) {\n+        m_subpackage.m_conflicting_fees += it->GetModifiedFee();\n+        m_subpackage.m_conflicting_size += it->GetTxSize();\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const Txid& child_hash = child_ws.m_ptx->GetHash();\n+    if (const auto err_string{PaysForRBF(/*original_fees=*/m_subpackage.m_conflicting_fees,\n+                                         /*replacement_fees=*/m_subpackage.m_total_modified_fees,\n+                                         /*replacement_vsize=*/m_subpackage.m_total_vsize,\n+                                         m_pool.m_opts.incremental_relay_feerate, child_hash)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: insufficient anti-DoS fees\", *err_string);\n+    }\n+\n+    // Ensure this two transaction package is a \"chunk\" on its own; we don't want the child\n+    // to be only paying anti-DoS fees\n+    const CFeeRate parent_feerate(parent_ws.m_modified_fees, parent_ws.m_vsize);\n+    const CFeeRate package_feerate(m_subpackage.m_total_modified_fees, m_subpackage.m_total_vsize);\n+    if (parent_feerate >= package_feerate) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: package feerate is less than parent feerate\",\n+                                     strprintf(\"package feerate %s <= parent feerate is %s\", package_feerate.ToString(), parent_feerate.ToString()));\n+    }\n+\n+    // Check if it's economically rational to mine this package rather than the ones it replaces.\n+    // This takes the place of ReplacementChecks()'s PaysMoreForConflicts() in the package RBF setting.\n+    if (const auto err_tup{ImprovesFeerateDiagram(m_pool, direct_conflict_iters, m_subpackage.m_all_conflicts, m_subpackage.m_total_modified_fees, m_subpackage.m_total_vsize)}) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: \" + err_tup.value().second, \"\");\n+    }\n+\n+    LogPrint(BCLog::TXPACKAGES, \"package RBF checks passed: parent %s (wtxid=%s), child %s (wtxid=%s)\\n\",\n+        txns.front()->GetHash().ToString(), txns.front()->GetWitnessHash().ToString(),\n+        txns.back()->GetHash().ToString(), txns.back()->GetWitnessHash().ToString());",
      "path": "src/validation.cpp",
      "position": 162,
      "original_position": 155,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "612847ae1a55e92bb7732905a026be96a436372a",
      "in_reply_to_id": 1637859001,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "added at beginning of function",
      "created_at": "2024-06-13T13:53:39Z",
      "updated_at": "2024-06-13T13:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1638262918",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638262918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 1215,
      "original_start_line": 1213,
      "start_side": "RIGHT",
      "line": 1216,
      "original_line": 1216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638263066",
      "pull_request_review_id": 2115878420,
      "id": 1638263066,
      "node_id": "PRRC_kwDOABII585hpeka",
      "diff_hunk": "@@ -938,4 +939,149 @@ BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n         BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n     }\n }\n+\n+BOOST_FIXTURE_TEST_CASE(package_rbf_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(::cs_main);\n+    size_t expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "63307f0aa6c88502c7a1ac5084b6e7ef19e01b62",
      "in_reply_to_id": 1637862004,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-06-13T13:53:44Z",
      "updated_at": "2024-06-13T13:53:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1638263066",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638263066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 948,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 949,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638263169",
      "pull_request_review_id": 2115878583,
      "id": 1638263169,
      "node_id": "PRRC_kwDOABII585hpemB",
      "diff_hunk": "@@ -0,0 +1,589 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import fill_mempool\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+# Value high enough to cause evictions in each subtest\n+# for typical cases\n+DEFAULT_CHILD_FEE = DEFAULT_FEE * 4\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_0fee_package_rbf()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_CHILD_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins[-1]\n+        del self.coins[-1]",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 139,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "63307f0aa6c88502c7a1ac5084b6e7ef19e01b62",
      "in_reply_to_id": 1637914037,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done in this and one more location",
      "created_at": "2024-06-13T13:53:48Z",
      "updated_at": "2024-06-13T13:53:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1638263169",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638263169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": 138,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638263303",
      "pull_request_review_id": 2115878785,
      "id": 1638263303,
      "node_id": "PRRC_kwDOABII585hpeoH",
      "diff_hunk": "@@ -36,10 +36,28 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters(connected components of mempool transactions) must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 15,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "8f2f64cb99b316198a1090a78878b85214780277",
      "in_reply_to_id": 1637918078,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2024-06-13T13:53:53Z",
      "updated_at": "2024-06-13T13:53:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1638263303",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1638263303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643019636",
      "pull_request_review_id": 2123251625,
      "id": 1643019636,
      "node_id": "PRRC_kwDOABII585h7n10",
      "diff_hunk": "@@ -36,10 +36,29 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).",
      "path": "doc/policy/packages.md",
      "position": 9,
      "original_position": 9,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "afd52d8e63ed323a159ea49fd1f10542abeacb97",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n   - All direct conflicts must signal replacement (or the node must have `-mempoolfullrbf=1` set).\r\n```",
      "created_at": "2024-06-17T15:41:14Z",
      "updated_at": "2024-06-17T17:15:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643019636",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643019636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643020251",
      "pull_request_review_id": 2123251625,
      "id": 1643020251,
      "node_id": "PRRC_kwDOABII585h7n_b",
      "diff_hunk": "@@ -36,10 +36,29 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters(connected components of mempool transactions) must be clusters of up to size 2.",
      "path": "doc/policy/packages.md",
      "position": 13,
      "original_position": 13,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "afd52d8e63ed323a159ea49fd1f10542abeacb97",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n   - All conflicting clusters (connected components of mempool transactions) must be clusters of up to size 2.\r\n```",
      "created_at": "2024-06-17T15:41:42Z",
      "updated_at": "2024-06-17T17:15:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643020251",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643020251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643022823",
      "pull_request_review_id": 2123251625,
      "id": 1643022823,
      "node_id": "PRRC_kwDOABII585h7onn",
      "diff_hunk": "@@ -36,10 +36,27 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Total fee plus incremental relay fee must be paid (ala bip125 rules 3 and 4).\n+\n+   - Parent feerate must be lower than package feerate.\n+\n+   - Must improve feerate diagram. (#29242)\n+\n+   - *Rationale*: Basic support for package RBF can be used by wallets\n+     by making chains of no longer than two, then directly conflicting\n+     those chains when needed. Combined with V3 transactions this can",
      "path": "doc/policy/packages.md",
      "position": 27,
      "original_position": 25,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1598248191,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I understood above comments to mean that this reference to v3 was replaced by a reference to TRUC transactions, but it seems to still mention v3.",
      "created_at": "2024-06-17T15:43:45Z",
      "updated_at": "2024-06-17T17:15:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643022823",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643022823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643027843",
      "pull_request_review_id": 2123251625,
      "id": 1643027843,
      "node_id": "PRRC_kwDOABII585h7p2D",
      "diff_hunk": "@@ -68,6 +69,28 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n             return strprintf(\"tx %s unexpectedly failed: %s\", wtxid.ToString(), atmp_result.m_state.ToString());\n         }\n \n+        // Each subpackage is allowed MAX_REPLACEMENT_CANDIDATES replacements (only checking individually here)\n+        if (atmp_result.m_replaced_transactions.size() > MAX_REPLACEMENT_CANDIDATES) {\n+            return strprintf(\"tx %s result replaced too many transactions\",\n+                                wtxid.ToString());\n+        }",
      "path": "src/test/util/txmempool.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "d3466e4cc5051c314873dd14ec8f7a88494c0780",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"result replaced\" seems like the wrong tense to me, given that the transaction was not accepted. Should this perhaps be:\r\n\r\n```suggestion\r\n        // Each subpackage is allowed MAX_REPLACEMENT_CANDIDATES replacements (only checking individually here)\r\n        if (atmp_result.m_replaced_transactions.size() > MAX_REPLACEMENT_CANDIDATES) {\r\n            return strprintf(\"tx %s would replace too many transactions\",\r\n                                wtxid.ToString());\r\n        }\r\n```",
      "created_at": "2024-06-17T15:47:34Z",
      "updated_at": "2024-06-17T17:15:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643027843",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643027843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 72,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643031435",
      "pull_request_review_id": 2123251625,
      "id": 1643031435,
      "node_id": "PRRC_kwDOABII585h7quL",
      "diff_hunk": "@@ -68,6 +69,28 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n             return strprintf(\"tx %s unexpectedly failed: %s\", wtxid.ToString(), atmp_result.m_state.ToString());\n         }\n \n+        // Each subpackage is allowed MAX_REPLACEMENT_CANDIDATES replacements (only checking individually here)\n+        if (atmp_result.m_replaced_transactions.size() > MAX_REPLACEMENT_CANDIDATES) {\n+            return strprintf(\"tx %s result replaced too many transactions\",\n+                                wtxid.ToString());\n+        }\n+\n+        // Replacements can't happen for subpackages larger than 2\n+        if (!atmp_result.m_replaced_transactions.empty() &&\n+            atmp_result.m_wtxids_fee_calculations.has_value() && atmp_result.m_wtxids_fee_calculations.value().size() > 2) {\n+             return strprintf(\"tx %s was part of a too-large package RBF subpackage\",\n+                                wtxid.ToString());",
      "path": "src/test/util/txmempool.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "d3466e4cc5051c314873dd14ec8f7a88494c0780",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think there may be extraneous words in \"too-large package RBF subpackage\". How about:\r\n\r\n```suggestion\r\n             return strprintf(\"RBF subpackage with tx %s was too large\",\r\n                                wtxid.ToString());\r\n```",
      "created_at": "2024-06-17T15:50:05Z",
      "updated_at": "2024-06-17T17:15:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643031435",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643031435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 81,
      "original_start_line": 81,
      "start_side": "RIGHT",
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643074768",
      "pull_request_review_id": 2123251625,
      "id": 1643074768,
      "node_id": "PRRC_kwDOABII585h71TQ",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import fill_mempool\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+# Value high enough to cause evictions in each subtest\n+# for typical cases\n+DEFAULT_CHILD_FEE = DEFAULT_FEE * 4\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_0fee_package_rbf()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_CHILD_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins.pop()\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        PACKAGE_FEE = DEFAULT_FEE + DEFAULT_CHILD_FEE\n+        PACKAGE_FEE_MINUS_ONE = PACKAGE_FEE - Decimal(\"0.00000001\")\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns2[1].rehash()}, less fees than conflicting txs; {PACKAGE_FEE_MINUS_ONE} < {PACKAGE_FEE}\", pkg_results2[\"package_msg\"])\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        self.log.info(\"Check replacement pays for incremental bandwidth\")\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE)\n+        pkg_results3 = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns3[1].rehash()}, not enough additional fees to relay; 0.00 < 0.00000{sum([tx.get_vsize() for tx in package_txns3])}\", pkg_results3[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns1)\n+        self.generate(node, 1)",
      "path": "test/functional/mempool_package_rbf.py",
      "position": 176,
      "original_position": 176,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "4d15bcf448eb3c4451b63e8f78cc61f3f9f9b639",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe also add a success case in the end to prove that all the reasons for rejection were enumerated?\r\n\r\n```suggestion\r\n        self.log.info(\"Check non-heavy child with higher absolute fee will replace\")\r\n        package_hex3_1, package_txns3_1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE + Decimal(\"0.00000001\") )\r\n        pkg_results3_1 = node.submitpackage(package_hex3_1)\r\n        self.assert_mempool_contents(expected=package_txns3_1)\r\n        self.generate(node, 1)\r\n```",
      "created_at": "2024-06-17T16:17:53Z",
      "updated_at": "2024-06-17T17:15:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643074768",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643074768"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643079133",
      "pull_request_review_id": 2123251625,
      "id": 1643079133,
      "node_id": "PRRC_kwDOABII585h72Xd",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import fill_mempool\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+# Value high enough to cause evictions in each subtest\n+# for typical cases\n+DEFAULT_CHILD_FEE = DEFAULT_FEE * 4\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_0fee_package_rbf()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_CHILD_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins.pop()\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        PACKAGE_FEE = DEFAULT_FEE + DEFAULT_CHILD_FEE\n+        PACKAGE_FEE_MINUS_ONE = PACKAGE_FEE - Decimal(\"0.00000001\")\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns2[1].rehash()}, less fees than conflicting txs; {PACKAGE_FEE_MINUS_ONE} < {PACKAGE_FEE}\", pkg_results2[\"package_msg\"])\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        self.log.info(\"Check replacement pays for incremental bandwidth\")\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE)\n+        pkg_results3 = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns3[1].rehash()}, not enough additional fees to relay; 0.00 < 0.00000{sum([tx.get_vsize() for tx in package_txns3])}\", pkg_results3[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_CHILD_FEE, child_fee=DEFAULT_CHILD_FEE - Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert 'package RBF failed: package feerate is less than parent feerate' in pkg_results5[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)",
      "path": "test/functional/mempool_package_rbf.py",
      "position": 188,
      "original_position": 188,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "4d15bcf448eb3c4451b63e8f78cc61f3f9f9b639",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        package_hex5_1, package_txns5_1 = self.create_simple_package(coin, parent_fee=DEFAULT_CHILD_FEE, child_fee=DEFAULT_CHILD_FEE)\r\n        pkg_results5_1 = node.submitpackage(package_hex5_1)\r\n        self.assert_mempool_contents(expected=package_txns5_1)\r\n        self.generate(node, 1)\r\n```",
      "created_at": "2024-06-17T16:21:50Z",
      "updated_at": "2024-06-17T17:15:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643079133",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643079133"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 188,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643277261",
      "pull_request_review_id": 2123642553,
      "id": 1643277261,
      "node_id": "PRRC_kwDOABII585h8mvN",
      "diff_hunk": "@@ -36,10 +36,29 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters(connected components of mempool transactions) must be clusters of up to size 2.",
      "path": "doc/policy/packages.md",
      "position": 13,
      "original_position": 13,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "afd52d8e63ed323a159ea49fd1f10542abeacb97",
      "in_reply_to_id": 1643020251,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done in follow-up",
      "created_at": "2024-06-17T18:36:37Z",
      "updated_at": "2024-06-17T18:36:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643277261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643277261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 45,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643277352",
      "pull_request_review_id": 2123642708,
      "id": 1643277352,
      "node_id": "PRRC_kwDOABII585h8mwo",
      "diff_hunk": "@@ -36,10 +36,29 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).",
      "path": "doc/policy/packages.md",
      "position": 9,
      "original_position": 9,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "afd52d8e63ed323a159ea49fd1f10542abeacb97",
      "in_reply_to_id": 1643019636,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done in follow-up",
      "created_at": "2024-06-17T18:36:39Z",
      "updated_at": "2024-06-17T18:36:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643277352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643277352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643277672",
      "pull_request_review_id": 2123643260,
      "id": 1643277672,
      "node_id": "PRRC_kwDOABII585h8m1o",
      "diff_hunk": "@@ -36,10 +36,27 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n+* Only limited package replacements are currently considered. (#28984)\n \n-   - Package RBF may be enabled in the future.\n+   - All direct conflicts must signal replacement (or have `-mempoolfullrbf=1` set).\n+\n+   - Packages are 1-parent-1-child, with no in-mempool ancestors of the package.\n+\n+   - All conflicting clusters must be clusters of up to size 2.\n+\n+   - No more than MAX_REPLACEMENT_CANDIDATES transactions can be replaced.\n+\n+   - Total fee plus incremental relay fee must be paid (ala bip125 rules 3 and 4).\n+\n+   - Parent feerate must be lower than package feerate.\n+\n+   - Must improve feerate diagram. (#29242)\n+\n+   - *Rationale*: Basic support for package RBF can be used by wallets\n+     by making chains of no longer than two, then directly conflicting\n+     those chains when needed. Combined with V3 transactions this can",
      "path": "doc/policy/packages.md",
      "position": 27,
      "original_position": 25,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "99c0f92015ac094b5a3a3fb694f6695c1eea4b33",
      "in_reply_to_id": 1598248191,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done in follow-up, I had removed V3 in test, not the actual doc",
      "created_at": "2024-06-17T18:36:46Z",
      "updated_at": "2024-06-17T18:36:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643277672",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643277672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643277948",
      "pull_request_review_id": 2123643709,
      "id": 1643277948,
      "node_id": "PRRC_kwDOABII585h8m58",
      "diff_hunk": "@@ -68,6 +69,28 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n             return strprintf(\"tx %s unexpectedly failed: %s\", wtxid.ToString(), atmp_result.m_state.ToString());\n         }\n \n+        // Each subpackage is allowed MAX_REPLACEMENT_CANDIDATES replacements (only checking individually here)\n+        if (atmp_result.m_replaced_transactions.size() > MAX_REPLACEMENT_CANDIDATES) {\n+            return strprintf(\"tx %s result replaced too many transactions\",\n+                                wtxid.ToString());\n+        }\n+\n+        // Replacements can't happen for subpackages larger than 2\n+        if (!atmp_result.m_replaced_transactions.empty() &&\n+            atmp_result.m_wtxids_fee_calculations.has_value() && atmp_result.m_wtxids_fee_calculations.value().size() > 2) {\n+             return strprintf(\"tx %s was part of a too-large package RBF subpackage\",\n+                                wtxid.ToString());",
      "path": "src/test/util/txmempool.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "d3466e4cc5051c314873dd14ec8f7a88494c0780",
      "in_reply_to_id": 1643031435,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done in follow-up",
      "created_at": "2024-06-17T18:36:51Z",
      "updated_at": "2024-06-17T18:36:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643277948",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643277948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 81,
      "original_start_line": 81,
      "start_side": "RIGHT",
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643278127",
      "pull_request_review_id": 2123644012,
      "id": 1643278127,
      "node_id": "PRRC_kwDOABII585h8m8v",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import fill_mempool\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+# Value high enough to cause evictions in each subtest\n+# for typical cases\n+DEFAULT_CHILD_FEE = DEFAULT_FEE * 4\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_0fee_package_rbf()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_CHILD_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins.pop()\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        PACKAGE_FEE = DEFAULT_FEE + DEFAULT_CHILD_FEE\n+        PACKAGE_FEE_MINUS_ONE = PACKAGE_FEE - Decimal(\"0.00000001\")\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns2[1].rehash()}, less fees than conflicting txs; {PACKAGE_FEE_MINUS_ONE} < {PACKAGE_FEE}\", pkg_results2[\"package_msg\"])\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        self.log.info(\"Check replacement pays for incremental bandwidth\")\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE)\n+        pkg_results3 = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns3[1].rehash()}, not enough additional fees to relay; 0.00 < 0.00000{sum([tx.get_vsize() for tx in package_txns3])}\", pkg_results3[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns1)\n+        self.generate(node, 1)",
      "path": "test/functional/mempool_package_rbf.py",
      "position": 176,
      "original_position": 176,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "4d15bcf448eb3c4451b63e8f78cc61f3f9f9b639",
      "in_reply_to_id": 1643074768,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "wrote a better boundary test in this vein in follow-up, thanks. You actually need incremental added, not 1 sat.",
      "created_at": "2024-06-17T18:36:55Z",
      "updated_at": "2024-06-17T18:36:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643278127",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643278127"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643278301",
      "pull_request_review_id": 2123644302,
      "id": 1643278301,
      "node_id": "PRRC_kwDOABII585h8m_d",
      "diff_hunk": "@@ -0,0 +1,587 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mempool_util import fill_mempool\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+MAX_REPLACEMENT_CANDIDATES = 100\n+\n+# Value high enough to cause evictions in each subtest\n+# for typical cases\n+DEFAULT_CHILD_FEE = DEFAULT_FEE * 4\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+        # Required for fill_mempool()\n+        self.extra_args = [[\n+            \"-datacarriersize=100000\",\n+            \"-maxmempool=5\",\n+        ]] * self.num_nodes\n+\n+    def assert_mempool_contents(self, expected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and no additional ones exist.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        assert_equal(len(mempool), len(expected))\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE, heavy_child=False):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and perhaps giving them the same fee, we might accidentally just create the same transaction again.\n+        # To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        self.wallet = MiniWallet(self.nodes[0])\n+\n+        # Make more than enough coins for the sum of all tests,\n+        # otherwise a wallet rescan is needed later\n+        self.generate(self.wallet, 300)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_singleton()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_too_numerous_ancestors()\n+        self.test_package_rbf_with_wrong_pkg_size()\n+        self.test_insufficient_feerate()\n+        self.test_wrong_conflict_cluster_size_linear()\n+        self.test_wrong_conflict_cluster_size_parents_child()\n+        self.test_wrong_conflict_cluster_size_parent_children()\n+        self.test_0fee_package_rbf()\n+        self.test_child_conflicts_parent_mempool_ancestor()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts of cluster size 2\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_CHILD_FEE)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        # Make sure 2nd node gets set up for basic package RBF\n+        self.sync_all()\n+\n+        # Test run rejected because conflicts are not allowed in subpackage evaluation\n+        testres = node.testmempoolaccept(package_hex2)\n+        assert_equal(testres[0][\"reject-reason\"], \"bip125-replacement-disallowed\")\n+\n+        # But accepted during normal submission\n+        submitres = node.submitpackage(package_hex2)\n+        assert_equal(set(submitres[\"replaced-transactions\"]), set([tx.rehash() for tx in package_txns1]))\n+        self.assert_mempool_contents(expected=package_txns2)\n+\n+        # Make sure 2nd node gets a basic package RBF over p2p\n+        self.sync_all()\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_singleton(self):\n+        self.log.info(\"Test child can pay to replace a parent's single conflicted tx\")\n+        node = self.nodes[0]\n+\n+        # Make singleton tx to conflict with in next batch\n+        singleton_coin = self.coins.pop()\n+        singleton_tx = self.wallet.create_self_transfer(utxo_to_spend=singleton_coin)\n+        node.sendrawtransaction(singleton_tx[\"hex\"])\n+        self.assert_mempool_contents(expected=[singleton_tx[\"tx\"]])\n+\n+        package_hex, package_txns = self.create_simple_package(singleton_coin, DEFAULT_FEE, singleton_tx[\"fee\"] * 2)\n+\n+        submitres = node.submitpackage(package_hex)\n+        assert_equal(submitres[\"replaced-transactions\"], [singleton_tx[\"tx\"].rehash()])\n+        self.assert_mempool_contents(expected=package_txns)\n+\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        PACKAGE_FEE = DEFAULT_FEE + DEFAULT_CHILD_FEE\n+        PACKAGE_FEE_MINUS_ONE = PACKAGE_FEE - Decimal(\"0.00000001\")\n+\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE - Decimal(\"0.00000001\"))\n+        pkg_results2 = node.submitpackage(package_hex2)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns2[1].rehash()}, less fees than conflicting txs; {PACKAGE_FEE_MINUS_ONE} < {PACKAGE_FEE}\", pkg_results2[\"package_msg\"])\n+        self.assert_mempool_contents(expected=package_txns1)\n+\n+        self.log.info(\"Check replacement pays for incremental bandwidth\")\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE)\n+        pkg_results3 = node.submitpackage(package_hex3)\n+        assert_equal(f\"package RBF failed: insufficient anti-DoS fees, rejecting replacement {package_txns3[1].rehash()}, not enough additional fees to relay; 0.00 < 0.00000{sum([tx.get_vsize() for tx in package_txns3])}\", pkg_results3[\"package_msg\"])\n+\n+        self.assert_mempool_contents(expected=package_txns1)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must have strict cpfp structure\")\n+        coin = self.coins.pop()\n+        package_hex4, package_txns4 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_CHILD_FEE)\n+        node.submitpackage(package_hex4)\n+        self.assert_mempool_contents(expected=package_txns4)\n+        package_hex5, package_txns5 = self.create_simple_package(coin, parent_fee=DEFAULT_CHILD_FEE, child_fee=DEFAULT_CHILD_FEE - Decimal(\"0.00000001\"))\n+        pkg_results5 = node.submitpackage(package_hex5)\n+        assert 'package RBF failed: package feerate is less than parent feerate' in pkg_results5[\"package_msg\"]\n+\n+        self.assert_mempool_contents(expected=package_txns4)\n+        self.generate(node, 1)",
      "path": "test/functional/mempool_package_rbf.py",
      "position": 188,
      "original_position": 188,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "4d15bcf448eb3c4451b63e8f78cc61f3f9f9b639",
      "in_reply_to_id": 1643079133,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "took as inspiration to make an actual boundary-condition test in follow-up, thanks",
      "created_at": "2024-06-17T18:36:59Z",
      "updated_at": "2024-06-17T18:36:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643278301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643278301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 188,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643279044",
      "pull_request_review_id": 2123645481,
      "id": 1643279044,
      "node_id": "PRRC_kwDOABII585h8nLE",
      "diff_hunk": "@@ -68,6 +69,28 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n             return strprintf(\"tx %s unexpectedly failed: %s\", wtxid.ToString(), atmp_result.m_state.ToString());\n         }\n \n+        // Each subpackage is allowed MAX_REPLACEMENT_CANDIDATES replacements (only checking individually here)\n+        if (atmp_result.m_replaced_transactions.size() > MAX_REPLACEMENT_CANDIDATES) {\n+            return strprintf(\"tx %s result replaced too many transactions\",\n+                                wtxid.ToString());\n+        }",
      "path": "src/test/util/txmempool.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "d3466e4cc5051c314873dd14ec8f7a88494c0780",
      "in_reply_to_id": 1643027843,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done in follow-up",
      "created_at": "2024-06-17T18:37:14Z",
      "updated_at": "2024-06-17T18:37:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1643279044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1643279044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 72,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665534798",
      "pull_request_review_id": 2158641410,
      "id": 1665534798,
      "node_id": "PRRC_kwDOABII585jRgtO",
      "diff_hunk": "@@ -68,6 +69,28 @@ std::optional<std::string> CheckPackageMempoolAcceptResult(const Package& txns,\n             return strprintf(\"tx %s unexpectedly failed: %s\", wtxid.ToString(), atmp_result.m_state.ToString());\n         }\n \n+        // Each subpackage is allowed MAX_REPLACEMENT_CANDIDATES replacements (only checking individually here)\n+        if (atmp_result.m_replaced_transactions.size() > MAX_REPLACEMENT_CANDIDATES) {\n+            return strprintf(\"tx %s result replaced too many transactions\",\n+                                wtxid.ToString());\n+        }",
      "path": "src/test/util/txmempool.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "94ed4fbf8e1a396c650b5134d396d6c0be35ce10",
      "original_commit_id": "d3466e4cc5051c314873dd14ec8f7a88494c0780",
      "in_reply_to_id": 1643027843,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't agree with this suggestion - we are checking the result of a transaction that *was* accepted here. So \"would replace\" is incorrect and \"replaced\" is correct.",
      "created_at": "2024-07-04T10:55:28Z",
      "updated_at": "2024-07-04T10:55:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/28984#discussion_r1665534798",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1665534798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/28984"
        }
      },
      "start_line": 72,
      "original_start_line": 72,
      "start_side": "RIGHT",
      "line": 76,
      "original_line": 76,
      "side": "RIGHT"
    }
  ]
}