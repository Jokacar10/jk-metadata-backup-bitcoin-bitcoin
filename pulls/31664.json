{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664",
    "id": 2280235009,
    "node_id": "PR_kwDOABII586H6aAB",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31664",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31664.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31664.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31664",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31664/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
    "number": 31664,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "Fees:  add Fee rate Forecaster Manager",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "- This PR implements the core component of #30392, introducing a new fee rate forecasting module. \r\nThe primary addition is a `ForecasterManager` that coordinates multiple forecasting strategies to be able to provide better transaction fee rate predictions.\r\n\r\n\r\n### Key Changes  \r\n\r\n1. **Addition of Fee Rate Forecasting Utility Structures**  \r\n   - `Forecaster` abstract class, serving as the base class for all fee rate forecasters.\r\n   - `ForecastResult` (the response from a `Forecaster`) with all metadata.  \r\n   - `ConfirmationTarget`, which represents the input fee rate forecasters receive. Currently, forecasters provide block-based fee rate forecasts, but this structure allows for potential time-based inputs, offering more flexibility.  \r\n   - `ForecastType` enum, identify and distinguish forecasters.    \r\n\r\n2. **Refactoring of `CBlockPolicyEstimator`**  \r\n   - Renames `fees` to `block_policy_estimator` for clarity.  \r\n   - Renames`fees_args` to `block_policy_estimator_args` for clarity\r\n   - Renames `policy_fee_tests` to `feerounder_tests` also for clarity.  \r\n   - Modifies `CBlockPolicyEstimator` to inherit from the `Forecaster` class and implement the `EstimateFee` method.  \r\n\r\n3. **Introduce `FeeRateForecasterManager` class**  \r\n   - Adds the `FeeRateForecasterManager` class, responsible for managing all fee rate forecasters, including `CBlockPolicyEstimator`, which is now a forecaster.  \r\n   - Updates the node context to hold a unique pointer to `FeeRateForecasterManager` instead of `CBlockPolicyEstimator`.  \r\n   - Changes `CBlockPolicyEstimator` instance from `unique_ptr` to a `shared_pointer`, allowing it to be registered in the validation interface without requiring explicit unregistration during shutdown (current master behaviour). Registering for `CBlockPolicyEstimator` flushes also get a `shared_pointer`.  \r\n   - Exposes a raw pointer of `CBlockPolicyEstimator` through `FeeRateForecasterManager` for compatibility with `estimateSmartFee`, friends, and node interfaces.  \r\n\r\n4. **Introduce `MempoolForecaster` class**  \r\n   - Adds the `MempoolForecaster`, which forecast the fee rate required for a transaction to confirm as soon as possible. It generates a block template and returns the 75th and 50th percentile fee rates  as low-priority and high-priority fee rate forecasts.  \r\n   - Implements caching for the last fee rate forecast, using a 30-second rate limit to avoid frequent block generation via the block assembler.\r\n\r\n\r\nThe `FeeRateForecasterManager` now includes a method `GetFeeRateForecast`. This method polls forecasts from all registered forecasters and returns the lowest value. This behavior aligns with discussions and research outlined in [this post](https://delvingbitcoin.org/t/mempool-based-fee-estimation-on-bitcoin-core/703).  But the primary aim of the `FeeRateForecasterManager` is to be able to perform sanity checks and potentially apply heuristics to determine the most appropriate fee rate forecast from polled forecasters, for now it just return the lowest.\r\n\r\nThis PR also add unit tests for the classes.\r\n",
    "labels": [
      {
        "id": 82428251,
        "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
        "name": "TX fees and policy",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2025-01-15T21:42:52Z",
    "updated_at": "2025-04-10T14:35:27Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "2b966f067c0ece225579a0bc4b57aff21af971cd",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ismaelsadeeq:01-2025-feerate-forecastman",
      "ref": "01-2025-feerate-forecastman",
      "sha": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 577730599,
        "node_id": "R_kgDOIm94Jw",
        "name": "bitcoin",
        "full_name": "ismaelsadeeq/bitcoin",
        "owner": {
          "login": "ismaelsadeeq",
          "id": 48946461,
          "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
          "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ismaelsadeeq",
          "html_url": "https://github.com/ismaelsadeeq",
          "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
          "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
          "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
          "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
          "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/ismaelsadeeq/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ismaelsadeeq/bitcoin",
        "archive_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ismaelsadeeq/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ismaelsadeeq/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ismaelsadeeq/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/hooks",
        "svn_url": "https://github.com/ismaelsadeeq/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 273622,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-03-27T12:13:15Z",
        "created_at": "2022-12-13T11:54:34Z",
        "updated_at": "2023-03-10T09:46:26Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "5acf12bafeb126f2190b3f401f95199e0eea90c9",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37026,
        "stargazers_count": 82838,
        "watchers_count": 82838,
        "size": 279518,
        "default_branch": "master",
        "open_issues_count": 697,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-10T11:30:25Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-04-10T14:34:53Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 835,
    "deletions": 84,
    "changed_files": 37,
    "commits": 17,
    "review_comments": 10,
    "comments": 3
  },
  "events": [
    {
      "event": "commented",
      "id": 2593999478,
      "node_id": "IC_kwDOABII586anUp2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2593999478",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-15T21:42:56Z",
      "updated_at": "2025-04-02T09:25:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31664.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31382](https://github.com/bitcoin/bitcoin/pull/31382) (kernel: Flush in ChainstateManager destructor by TheCharlatan)\n* [#31282](https://github.com/bitcoin/bitcoin/pull/31282) (refactor: Make node_id a const& in RemoveBlockRequest by maflcko)\n* [#30079](https://github.com/bitcoin/bitcoin/pull/30079) (Fee Estimation: Ignore all transactions that are CPFP'd by ismaelsadeeq)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#issuecomment-2593999478",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31664"
    },
    {
      "event": "labeled",
      "id": 16034779326,
      "node_id": "LE_lADOABII586mWxXrzwAAAAO7v1C-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16034779326",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T20:57:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFlNmNlMDZiZjM0ZWIzMTc5ZjgwN2VmYmRkYjBlOWJjYTJkMjdmMjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e6ce06bf34eb3179f807efbddb0e9bca2d27f28",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1e6ce06bf34eb3179f807efbddb0e9bca2d27f28",
      "tree": {
        "sha": "11d154d318a10918254e46ef093ec388a88bf55b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11d154d318a10918254e46ef093ec388a88bf55b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5acf12bafeb126f2190b3f401f95199e0eea90c9",
          "sha": "5acf12bafeb126f2190b3f401f95199e0eea90c9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5acf12bafeb126f2190b3f401f95199e0eea90c9"
        }
      ],
      "message": "fees: add `ForecastResult` class\n\n- This class represents the response returned by\n  a fee rate forecaster.",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:00:54Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-09T19:41:53Z"
      },
      "sha": "1e6ce06bf34eb3179f807efbddb0e9bca2d27f28"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRmN2ZmYzlmNjg4MDIyYjkxNGU1MTMwMTQyY2E0YWE3ZGFmYWYxOGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df7ffc9f688022b914e5130142ca4aa7dafaf18b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/df7ffc9f688022b914e5130142ca4aa7dafaf18b",
      "tree": {
        "sha": "d0c409c9cf81fca2024ee3d0689b4b4245404861",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0c409c9cf81fca2024ee3d0689b4b4245404861"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e6ce06bf34eb3179f807efbddb0e9bca2d27f28",
          "sha": "1e6ce06bf34eb3179f807efbddb0e9bca2d27f28",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1e6ce06bf34eb3179f807efbddb0e9bca2d27f28"
        }
      ],
      "message": "fees: add `ConfirmationTarget` struct\n\n- Defines the types of confirmation targets for fee rate forecasters.\n\n- This enable having a generic input for fee rate forecasters.",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:00:54Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-09T19:43:02Z"
      },
      "sha": "df7ffc9f688022b914e5130142ca4aa7dafaf18b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEyZTMzMjYyYjlmMmZjZWY2YjEyZTVhMzVmYTczNmZjM2E1YzQ1OGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2e33262b9f2fcef6b12e5a35fa736fc3a5c458d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a2e33262b9f2fcef6b12e5a35fa736fc3a5c458d",
      "tree": {
        "sha": "384e160415642fe46970f02602baca28a3d6185d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/384e160415642fe46970f02602baca28a3d6185d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df7ffc9f688022b914e5130142ca4aa7dafaf18b",
          "sha": "df7ffc9f688022b914e5130142ca4aa7dafaf18b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/df7ffc9f688022b914e5130142ca4aa7dafaf18b"
        }
      ],
      "message": "fees: add Forecaster abstract class\n\n- This commit implements `Forecaster` abstract class\n  as the base class of fee rate forecasters.\n\n- Derived classes must provide concrete implementation\n  of the virtual methods.\n\nCo-authored-by: willcl-ark <will@256k1.dev>",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:00:54Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-09T19:55:59Z"
      },
      "sha": "a2e33262b9f2fcef6b12e5a35fa736fc3a5c458d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA3NDVkZDc4OWIxY2NjMjczZjcxZmQ5MTZlZTg3ODYyZWI2NmZmMzQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0745dd789b1ccc273f71fd916ee87862eb66ff34",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0745dd789b1ccc273f71fd916ee87862eb66ff34",
      "tree": {
        "sha": "f4a64a4bf35ec07e0e75e9e337bd3917c0569039",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4a64a4bf35ec07e0e75e9e337bd3917c0569039"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2e33262b9f2fcef6b12e5a35fa736fc3a5c458d",
          "sha": "a2e33262b9f2fcef6b12e5a35fa736fc3a5c458d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a2e33262b9f2fcef6b12e5a35fa736fc3a5c458d"
        }
      ],
      "message": "fees: add `ForecastType` enum\n\n- ForecastType will be used to identify forecasters.\n\n- Each time a new forecaster is added, a corresponding\n  enum value should be added to ForecastType.\n\n- This allows users to identify which forecasting strategy\n  was used to make a fee rate estimate.",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:00:54Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-09T20:17:07Z"
      },
      "sha": "0745dd789b1ccc273f71fd916ee87862eb66ff34"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRmMTZiNzBhNzE2OTdiN2NhNDhhYTAxODBmN2IyNWIzZmNlMDM0NmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df16b70a71697b7ca48aa0180f7b25b3fce0346b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/df16b70a71697b7ca48aa0180f7b25b3fce0346b",
      "tree": {
        "sha": "61f2b6d3dde228f3e562bd0d6096c568913dd9cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61f2b6d3dde228f3e562bd0d6096c568913dd9cd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0745dd789b1ccc273f71fd916ee87862eb66ff34",
          "sha": "0745dd789b1ccc273f71fd916ee87862eb66ff34",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0745dd789b1ccc273f71fd916ee87862eb66ff34"
        }
      ],
      "message": "fees: add `ForecasterMan` class\n\n- Its a module for managing and utilising multiple\n  fee rate forecasters to provide fee rate forecast.\n\n- The ForecasterManager class allows for the registration of\n  multiple fee rate forecasters.\n\nCo-authored-by: willcl-ark <will@256k1.dev>",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:00:54Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-13T22:02:27Z"
      },
      "sha": "df16b70a71697b7ca48aa0180f7b25b3fce0346b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNkOWEzOTNlZjg3YjI3OTQ1Nzk1YTRlN2RjMjJkZWQ4OWFiYmZkNmU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d9a393ef87b27945795a4e7dc22ded89abbfd6e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3d9a393ef87b27945795a4e7dc22ded89abbfd6e",
      "tree": {
        "sha": "bb38afbe962dd30b5dd2115d5207fad155fba27c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb38afbe962dd30b5dd2115d5207fad155fba27c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df16b70a71697b7ca48aa0180f7b25b3fce0346b",
          "sha": "df16b70a71697b7ca48aa0180f7b25b3fce0346b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/df16b70a71697b7ca48aa0180f7b25b3fce0346b"
        }
      ],
      "message": "fees: refactor: rename policy_fee_tests.cpp to feerounder_tests.cpp\n\n- Also remame the test suite name to match the new name.",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:00:54Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-13T14:58:23Z"
      },
      "sha": "3d9a393ef87b27945795a4e7dc22ded89abbfd6e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg1ZGNlMDdlM2JjY2VkMzEwNTFlMTU0MWM4ZDlmNDA4ZGNhZGJhYzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85dce07e3bcced31051e1541c8d9f408dcadbac9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/85dce07e3bcced31051e1541c8d9f408dcadbac9",
      "tree": {
        "sha": "1ea8cb3f6722f6b0aca551b251cc3fbb2fb66ca1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ea8cb3f6722f6b0aca551b251cc3fbb2fb66ca1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d9a393ef87b27945795a4e7dc22ded89abbfd6e",
          "sha": "3d9a393ef87b27945795a4e7dc22ded89abbfd6e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3d9a393ef87b27945795a4e7dc22ded89abbfd6e"
        }
      ],
      "message": "fees: refactor: rename fees to block_policy_estimator\n\n- Also move it to policy/fees and update the includes\n- Note: the block_policy_estimator.h include in block_policy_estimator.cpp was done manually.",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:01:42Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-09T22:31:05Z"
      },
      "sha": "85dce07e3bcced31051e1541c8d9f408dcadbac9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVjOTI1ODRkNTVkYTI2M2IzYzZhOGY3YTBkZDNlNmY2OTM3ZjZlNDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec92584d55da263b3c6a8f7a0dd3e6f6937f6e45",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ec92584d55da263b3c6a8f7a0dd3e6f6937f6e45",
      "tree": {
        "sha": "05f267b6b5c3d5a124e1b599f394d1cc7bbb66b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05f267b6b5c3d5a124e1b599f394d1cc7bbb66b0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85dce07e3bcced31051e1541c8d9f408dcadbac9",
          "sha": "85dce07e3bcced31051e1541c8d9f408dcadbac9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/85dce07e3bcced31051e1541c8d9f408dcadbac9"
        }
      ],
      "message": "fees: rename fees_args to block_policy_estimator_args\n\n- Also move them to policy/fees/ and update includes\n- Note: the block_policy_estimator_args.h include in block_policy_estimator_args.cpp was done manually.",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:01:47Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-15T18:10:55Z"
      },
      "sha": "ec92584d55da263b3c6a8f7a0dd3e6f6937f6e45"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE0M2EzMDFkM2EzZmM2MWUzMTRiNjgzMDhhNDcxOTE1NDNjNzU0MjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/143a301d3a3fc61e314b68308a47191543c75421",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/143a301d3a3fc61e314b68308a47191543c75421",
      "tree": {
        "sha": "341f349bdc94d0e63b5adfe8eeb185ac347883b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/341f349bdc94d0e63b5adfe8eeb185ac347883b0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec92584d55da263b3c6a8f7a0dd3e6f6937f6e45",
          "sha": "ec92584d55da263b3c6a8f7a0dd3e6f6937f6e45",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ec92584d55da263b3c6a8f7a0dd3e6f6937f6e45"
        }
      ],
      "message": "fees: return current block height in `estimateSmartFee`",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:01:47Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2024-08-12T14:40:20Z"
      },
      "sha": "143a301d3a3fc61e314b68308a47191543c75421"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDkzNTVkYTZkZTRhNzExMDRkYzMzMTllMjc5MDQ3Y2RjNWM5MGIwYWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9355da6de4a71104dc3319e279047cdc5c90b0aa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9355da6de4a71104dc3319e279047cdc5c90b0aa",
      "tree": {
        "sha": "bd31a21e69b9e1a6aa3be4446cc949cd3cd12cc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd31a21e69b9e1a6aa3be4446cc949cd3cd12cc3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/143a301d3a3fc61e314b68308a47191543c75421",
          "sha": "143a301d3a3fc61e314b68308a47191543c75421",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/143a301d3a3fc61e314b68308a47191543c75421"
        }
      ],
      "message": "fees: make block_policy_estimator a forecaster",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:01:47Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-13T22:59:06Z"
      },
      "sha": "9355da6de4a71104dc3319e279047cdc5c90b0aa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGU4ZjVlYjUxNDM0ZjliNzViN2MzZjM0N2ZlMDczYTliNjBlYjk3N2M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8f5eb51434f9b75b7c3f347fe073a9b60eb977c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f5eb51434f9b75b7c3f347fe073a9b60eb977c",
      "tree": {
        "sha": "1c2caf748338db0b194b876225b5cb20033cd6f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c2caf748338db0b194b876225b5cb20033cd6f5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9355da6de4a71104dc3319e279047cdc5c90b0aa",
          "sha": "9355da6de4a71104dc3319e279047cdc5c90b0aa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9355da6de4a71104dc3319e279047cdc5c90b0aa"
        }
      ],
      "message": "fees: add block policy estimator to forecaster manager\n\n- This changes `CBlockPolicyEstimator` to a shared pointer\n  this gives us three advantages.\n   - Registering to validation interface using shared pointer\n   - Scheduling block policy estimator flushes using shared pointer\n   - Registering block policy estimator to forecaster_man",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:02:16Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-15T18:44:28Z"
      },
      "sha": "e8f5eb51434f9b75b7c3f347fe073a9b60eb977c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJhNDQ5MjNhZWJjY2VlYWNmNTI3YWIxMjM1YWQ4NDI3YzEzZGY1Nzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba44923aebcceeacf527ab1235ad8427c13df579",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ba44923aebcceeacf527ab1235ad8427c13df579",
      "tree": {
        "sha": "13eff6147894a30bcb7c9a6078b51b657de6c55b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13eff6147894a30bcb7c9a6078b51b657de6c55b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8f5eb51434f9b75b7c3f347fe073a9b60eb977c",
          "sha": "e8f5eb51434f9b75b7c3f347fe073a9b60eb977c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f5eb51434f9b75b7c3f347fe073a9b60eb977c"
        }
      ],
      "message": "fees: add `forecastTypeToString` method\n\n- This method converts a ForecastType enum to its\n  string representation.",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:02:20Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-02T18:46:32Z"
      },
      "sha": "ba44923aebcceeacf527ab1235ad8427c13df579"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYxZTI4NDIyZjNmZjdkZDZlMWM4NDBiOWVhYzQ0MmMxNDg0YWEwMTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61e28422f3ff7dd6e1c840b9eac442c1484aa015",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/61e28422f3ff7dd6e1c840b9eac442c1484aa015",
      "tree": {
        "sha": "03a5acc398aee879a598ad4e2ad3206f257adb11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03a5acc398aee879a598ad4e2ad3206f257adb11"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba44923aebcceeacf527ab1235ad8427c13df579",
          "sha": "ba44923aebcceeacf527ab1235ad8427c13df579",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ba44923aebcceeacf527ab1235ad8427c13df579"
        }
      ],
      "message": "fees: add `CalculatePercentiles` function\n\n- The CalculatePercentiles function, given\n  a vector of feerates in the order they were added\n  to the block, will return the 25th, 50th, 75th,\n  and 95th percentile feerates.\n\n- Also add a unit test for this function.",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:02:20Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-15T16:26:09Z"
      },
      "sha": "61e28422f3ff7dd6e1c840b9eac442c1484aa015"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM3Y2RlYWZkNzA0NWM3OTRiMjg5ZTI0MzhjYzYwYmFlZWU3ZTZmNjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7cdeafd7045c794b289e2438cc60baeee7e6f69",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c7cdeafd7045c794b289e2438cc60baeee7e6f69",
      "tree": {
        "sha": "3bc5e96e3f72bde9dd39e42a163dd8b67a444826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bc5e96e3f72bde9dd39e42a163dd8b67a444826"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61e28422f3ff7dd6e1c840b9eac442c1484aa015",
          "sha": "61e28422f3ff7dd6e1c840b9eac442c1484aa015",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/61e28422f3ff7dd6e1c840b9eac442c1484aa015"
        }
      ],
      "message": "fees: add `MemPoolForecaster` class\n\n- The mempool based fee rate forecaster generate a predicted fee rate estimate\n  for a given confirmation target using the mempool unconfirmed transactions.\n\nCo-authored-by: willcl-ark <will@256k1.dev>",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:02:20Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2024-11-13T18:34:33Z"
      },
      "sha": "c7cdeafd7045c794b289e2438cc60baeee7e6f69"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGViNzJhZmMzZWM5MDlkMWJmM2FjODU3ZTEzN2Q2NjQ3YWRkMjBjZjM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb72afc3ec909d1bf3ac857e137d6647add20cf3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/eb72afc3ec909d1bf3ac857e137d6647add20cf3",
      "tree": {
        "sha": "3acafc21afa1a95037bf494b38f7c1008cbbb2b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3acafc21afa1a95037bf494b38f7c1008cbbb2b6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7cdeafd7045c794b289e2438cc60baeee7e6f69",
          "sha": "c7cdeafd7045c794b289e2438cc60baeee7e6f69",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c7cdeafd7045c794b289e2438cc60baeee7e6f69"
        }
      ],
      "message": "test: add mempool forecaster unit test",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:02:20Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2024-11-13T18:36:45Z"
      },
      "sha": "eb72afc3ec909d1bf3ac857e137d6647add20cf3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDViZDIyMjA0MjJhZjAyYjIwY2I5NGRjZDRjMGUyYzM4ZTAyODQ5NTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bd2220422af02b20cb94dcd4c0e2c38e0284952",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5bd2220422af02b20cb94dcd4c0e2c38e0284952",
      "tree": {
        "sha": "4b9a0d00e9d2b016ad5705506f63565dca225c37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b9a0d00e9d2b016ad5705506f63565dca225c37"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb72afc3ec909d1bf3ac857e137d6647add20cf3",
          "sha": "eb72afc3ec909d1bf3ac857e137d6647add20cf3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/eb72afc3ec909d1bf3ac857e137d6647add20cf3"
        }
      ],
      "message": "fees: cache `MemPoolPolicyEstimator` forecasts\n\n- Provide new estimates only when the time delta from previous\n  forecast is older than 30 seconds.\n\n- This caching helps avoid the high cost of frequently generating block templates,\n  preventing users from inadvertently calling `estimateFee` repeatedly.\n\nCo-authored-by: willcl-ark <will@256k1.dev>",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:02:20Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2024-11-13T18:38:17Z"
      },
      "sha": "5bd2220422af02b20cb94dcd4c0e2c38e0284952"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM2Yjk0NDAzYmY5ZDViZjRmZTlkNWU1MzYwYjNkMmMzMGE0MzBkNjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "tree": {
        "sha": "4f10ea90d568fcbdc888961f75d579fbb2ef0997",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f10ea90d568fcbdc888961f75d579fbb2ef0997"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bd2220422af02b20cb94dcd4c0e2c38e0284952",
          "sha": "5bd2220422af02b20cb94dcd4c0e2c38e0284952",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5bd2220422af02b20cb94dcd4c0e2c38e0284952"
        }
      ],
      "message": "fees: add `GetFeeRateForecast` method\n\n- Fallback to Block policy estimator estimates whenever mempool forecaster\n  estimates are higher than block policy estimator.",
      "committer": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-22T22:02:20Z"
      },
      "author": {
        "name": "ismaelsadeeq",
        "email": "ask4ismailsadiq@gmail.com",
        "date": "2025-01-15T17:57:02Z"
      },
      "sha": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16035664389,
      "node_id": "HRFPE_lADOABII586mWxXrzwAAAAO7zNIF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16035664389",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "commit_url": "https://api.github.com/repos/ismaelsadeeq/bitcoin/commits/c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "created_at": "2025-01-22T22:28:33Z"
    },
    {
      "event": "unlabeled",
      "id": 16036017354,
      "node_id": "UNLE_lADOABII586mWxXrzwAAAAO70jTK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16036017354",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-22T23:17:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 16283665927,
      "node_id": "LE_lADOABII586mWxXrzwAAAAPKlQYH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16283665927",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T16:15:21Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 2750226421,
      "node_id": "PRR_kwDOABII586j7R_1",
      "url": null,
      "actor": null,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "frankomosh",
        "id": 33951953,
        "node_id": "MDQ6VXNlcjMzOTUxOTUz",
        "avatar_url": "https://avatars.githubusercontent.com/u/33951953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/frankomosh",
        "html_url": "https://github.com/frankomosh",
        "followers_url": "https://api.github.com/users/frankomosh/followers",
        "following_url": "https://api.github.com/users/frankomosh/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/frankomosh/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/frankomosh/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/frankomosh/subscriptions",
        "organizations_url": "https://api.github.com/users/frankomosh/orgs",
        "repos_url": "https://api.github.com/users/frankomosh/repos",
        "events_url": "https://api.github.com/users/frankomosh/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/frankomosh/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#pullrequestreview-2750226421",
      "submitted_at": "2025-04-08T14:32:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
    },
    {
      "event": "commented",
      "id": 2786767247,
      "node_id": "IC_kwDOABII586mGrGP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2786767247",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-08T15:06:55Z",
      "updated_at": "2025-04-08T15:06:55Z",
      "author_association": "MEMBER",
      "body": "There is going to be a review club tomorrow on this PR\r\nhttps://bitcoincore.reviews/31664 notes and questions are up",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#issuecomment-2786767247",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31664"
    },
    {
      "event": "labeled",
      "id": 17193152254,
      "node_id": "LE_lADOABII586mWxXrzwAAAAQAyq7-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17193152254",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-09T17:05:02Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 2754169488,
      "node_id": "PRR_kwDOABII586kKUqQ",
      "url": null,
      "actor": null,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#pullrequestreview-2754169488",
      "submitted_at": "2025-04-09T18:12:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
    },
    {
      "event": "commented",
      "id": 2792149557,
      "node_id": "IC_kwDOABII586mbNI1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2792149557",
      "actor": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-10T09:35:02Z",
      "updated_at": "2025-04-10T09:35:02Z",
      "author_association": "MEMBER",
      "body": "I will update the PR to address recent comments, I also want to remove some redundancy and restructure the commits.",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#issuecomment-2792149557",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31664"
    },
    {
      "event": "reviewed",
      "id": 2757094288,
      "node_id": "PRR_kwDOABII586kVeuQ",
      "url": null,
      "actor": null,
      "commit_id": "5bd2220422af02b20cb94dcd4c0e2c38e0284952",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "polespinasa",
        "id": 57642229,
        "node_id": "MDQ6VXNlcjU3NjQyMjI5",
        "avatar_url": "https://avatars.githubusercontent.com/u/57642229?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/polespinasa",
        "html_url": "https://github.com/polespinasa",
        "followers_url": "https://api.github.com/users/polespinasa/followers",
        "following_url": "https://api.github.com/users/polespinasa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/polespinasa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/polespinasa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/polespinasa/subscriptions",
        "organizations_url": "https://api.github.com/users/polespinasa/orgs",
        "repos_url": "https://api.github.com/users/polespinasa/repos",
        "events_url": "https://api.github.com/users/polespinasa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/polespinasa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#pullrequestreview-2757094288",
      "submitted_at": "2025-04-10T14:35:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2033340253",
      "pull_request_review_id": 2750226421,
      "id": 2033340253,
      "node_id": "PRRC_kwDOABII5855Mk9d",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license. See the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <logging.h>\n+#include <policy/fees/block_policy_estimator.h>\n+#include <policy/fees/forecaster.h>\n+#include <policy/fees/forecaster_man.h>\n+#include <policy/fees/forecaster_util.h>\n+\n+#include <algorithm>\n+#include <utility>\n+\n+void FeeRateForecasterManager::RegisterForecaster(std::shared_ptr<Forecaster> forecaster)\n+{\n+    forecasters.emplace(forecaster->GetForecastType(), forecaster);\n+}\n+\n+CBlockPolicyEstimator* FeeRateForecasterManager::GetBlockPolicyEstimator()\n+{\n+    Assume(forecasters.contains(ForecastType::BLOCK_POLICY));\n+    Forecaster* block_policy_estimator = forecasters.find(ForecastType::BLOCK_POLICY)->second.get();\n+    return dynamic_cast<CBlockPolicyEstimator*>(block_policy_estimator);\n+}\n+\n+std::pair<std::optional<ForecastResult>, std::vector<std::string>> FeeRateForecasterManager::GetFeeRateForecast(ConfirmationTarget& target)\n+{\n+    std::vector<std::string> err_messages;\n+    ForecastResult selected_forecast;\n+\n+    for (const auto& forecaster : forecasters) {\n+        auto curr_forecast = forecaster.second->EstimateFee(target);\n+\n+        if (curr_forecast.GetError().has_value()) {\n+            err_messages.emplace_back(\n+                strprintf(\"%s: %s\", forecastTypeToString(forecaster.first), curr_forecast.GetError().value_or(\"\")));\n+        }\n+\n+        // Handle case where the block policy estimator does not have enough data for fee estimates.\n+        if (curr_forecast.Empty() && forecaster.first == ForecastType::BLOCK_POLICY) {\n+            return {std::nullopt, err_messages};\n+        }\n+\n+        if (!curr_forecast.Empty()) {\n+            if (selected_forecast.Empty()) {\n+                // If there's no selected forecast, choose curr_forecast as selected_forecast.\n+                selected_forecast = curr_forecast;\n+            } else {\n+                // Otherwise, choose the smaller as selected_forecast.\n+                selected_forecast = std::min(selected_forecast, curr_forecast);",
      "path": "src/policy/fees/forecaster_man.cpp",
      "position": 50,
      "original_position": 50,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "original_commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "in_reply_to_id": null,
      "user": {
        "login": "frankomosh",
        "id": 33951953,
        "node_id": "MDQ6VXNlcjMzOTUxOTUz",
        "avatar_url": "https://avatars.githubusercontent.com/u/33951953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/frankomosh",
        "html_url": "https://github.com/frankomosh",
        "followers_url": "https://api.github.com/users/frankomosh/followers",
        "following_url": "https://api.github.com/users/frankomosh/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/frankomosh/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/frankomosh/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/frankomosh/subscriptions",
        "organizations_url": "https://api.github.com/users/frankomosh/orgs",
        "repos_url": "https://api.github.com/users/frankomosh/repos",
        "events_url": "https://api.github.com/users/frankomosh/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/frankomosh/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "from my understanding here, the manager is to always choose a forecast having the lowest high_priority fee rate from\r\n\r\n```bash\r\nbool operator<(const ForecastResult& other) const { return m_response.high_priority << other.m_response.high_priority; }\r\n\r\n```\r\n\r\nassuming we have mempool congestion spikes or other time-sensitive operations, wouldn’t we have a problem with underpayment if we always taking the minimum fee estimate here?",
      "created_at": "2025-04-08T14:32:14Z",
      "updated_at": "2025-04-08T14:32:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#discussion_r2033340253",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2033340253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2033410318",
      "pull_request_review_id": 2750348550,
      "id": 2033410318,
      "node_id": "PRRC_kwDOABII5855M2EO",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license. See the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <logging.h>\n+#include <policy/fees/block_policy_estimator.h>\n+#include <policy/fees/forecaster.h>\n+#include <policy/fees/forecaster_man.h>\n+#include <policy/fees/forecaster_util.h>\n+\n+#include <algorithm>\n+#include <utility>\n+\n+void FeeRateForecasterManager::RegisterForecaster(std::shared_ptr<Forecaster> forecaster)\n+{\n+    forecasters.emplace(forecaster->GetForecastType(), forecaster);\n+}\n+\n+CBlockPolicyEstimator* FeeRateForecasterManager::GetBlockPolicyEstimator()\n+{\n+    Assume(forecasters.contains(ForecastType::BLOCK_POLICY));\n+    Forecaster* block_policy_estimator = forecasters.find(ForecastType::BLOCK_POLICY)->second.get();\n+    return dynamic_cast<CBlockPolicyEstimator*>(block_policy_estimator);\n+}\n+\n+std::pair<std::optional<ForecastResult>, std::vector<std::string>> FeeRateForecasterManager::GetFeeRateForecast(ConfirmationTarget& target)\n+{\n+    std::vector<std::string> err_messages;\n+    ForecastResult selected_forecast;\n+\n+    for (const auto& forecaster : forecasters) {\n+        auto curr_forecast = forecaster.second->EstimateFee(target);\n+\n+        if (curr_forecast.GetError().has_value()) {\n+            err_messages.emplace_back(\n+                strprintf(\"%s: %s\", forecastTypeToString(forecaster.first), curr_forecast.GetError().value_or(\"\")));\n+        }\n+\n+        // Handle case where the block policy estimator does not have enough data for fee estimates.\n+        if (curr_forecast.Empty() && forecaster.first == ForecastType::BLOCK_POLICY) {\n+            return {std::nullopt, err_messages};\n+        }\n+\n+        if (!curr_forecast.Empty()) {\n+            if (selected_forecast.Empty()) {\n+                // If there's no selected forecast, choose curr_forecast as selected_forecast.\n+                selected_forecast = curr_forecast;\n+            } else {\n+                // Otherwise, choose the smaller as selected_forecast.\n+                selected_forecast = std::min(selected_forecast, curr_forecast);",
      "path": "src/policy/fees/forecaster_man.cpp",
      "position": 50,
      "original_position": 50,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "original_commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "in_reply_to_id": 2033340253,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good question, @frankomosh.\r\n\r\nYou're right to think the lowest fee rate might be an underestimate during instant spikes.\r\n\r\nThis approach was specifically chosen to address the concern raised by @harding here: https://delvingbitcoin.org/t/mempool-based-fee-estimation-on-bitcoin-core/703/6.\r\n\r\nAlthough the concern is currently theoretical, @harding raised a valid point, and it seems reasonable to use mempool forecasts to adjust or correct block policy forecasts.\r\n\r\nEmpirical data also shows that this approach maintains around 60% accuracy, which performs better than the current status quo for economical fee rate forecasts: https://delvingbitcoin.org/t/mempool-based-fee-estimation-on-bitcoin-core/703/8?u=ismaelsadeeq.\r\n\r\nMy goal is to fix these issues with the following steps:\r\n\r\n1. Select the lower value between the mempool forecast and the block policy forecast.\r\n2. Return the certainty level of the mempool fee rate forecast based on statistics from previous block data in the next PR after this — see the POC here: https://github.com/bitcoin/bitcoin/pull/30157.\r\n3. Use fee rate forecast from forecaster manager in the wallet \r\n\r\nPotential Next Steps\r\n\r\n1. Ensure the mempool is not being manipulated, and use the mempool forecast even during congestion for ASAP fee rate estimates. / Or expose the mempool state so users can fee bump when congestion persists and they absolutely need to do so.\r\n2. Switch to a more economical fee rate forecaster for the long term, because the current one pays more than necessary, as by quite a large margin see research https://bitcoin.stackexchange.com/questions/124227/utility-of-longterm-fee-estimation/.\r\n",
      "created_at": "2025-04-08T15:06:05Z",
      "updated_at": "2025-04-08T15:06:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#discussion_r2033410318",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2033410318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2034696995",
      "pull_request_review_id": 2752429651,
      "id": 2034696995,
      "node_id": "PRRC_kwDOABII5855RwMj",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license. See the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <logging.h>\n+#include <policy/fees/block_policy_estimator.h>\n+#include <policy/fees/forecaster.h>\n+#include <policy/fees/forecaster_man.h>\n+#include <policy/fees/forecaster_util.h>\n+\n+#include <algorithm>\n+#include <utility>\n+\n+void FeeRateForecasterManager::RegisterForecaster(std::shared_ptr<Forecaster> forecaster)\n+{\n+    forecasters.emplace(forecaster->GetForecastType(), forecaster);\n+}\n+\n+CBlockPolicyEstimator* FeeRateForecasterManager::GetBlockPolicyEstimator()\n+{\n+    Assume(forecasters.contains(ForecastType::BLOCK_POLICY));\n+    Forecaster* block_policy_estimator = forecasters.find(ForecastType::BLOCK_POLICY)->second.get();\n+    return dynamic_cast<CBlockPolicyEstimator*>(block_policy_estimator);\n+}\n+\n+std::pair<std::optional<ForecastResult>, std::vector<std::string>> FeeRateForecasterManager::GetFeeRateForecast(ConfirmationTarget& target)\n+{\n+    std::vector<std::string> err_messages;\n+    ForecastResult selected_forecast;\n+\n+    for (const auto& forecaster : forecasters) {\n+        auto curr_forecast = forecaster.second->EstimateFee(target);\n+\n+        if (curr_forecast.GetError().has_value()) {\n+            err_messages.emplace_back(\n+                strprintf(\"%s: %s\", forecastTypeToString(forecaster.first), curr_forecast.GetError().value_or(\"\")));\n+        }\n+\n+        // Handle case where the block policy estimator does not have enough data for fee estimates.\n+        if (curr_forecast.Empty() && forecaster.first == ForecastType::BLOCK_POLICY) {\n+            return {std::nullopt, err_messages};\n+        }\n+\n+        if (!curr_forecast.Empty()) {\n+            if (selected_forecast.Empty()) {\n+                // If there's no selected forecast, choose curr_forecast as selected_forecast.\n+                selected_forecast = curr_forecast;\n+            } else {\n+                // Otherwise, choose the smaller as selected_forecast.\n+                selected_forecast = std::min(selected_forecast, curr_forecast);",
      "path": "src/policy/fees/forecaster_man.cpp",
      "position": 50,
      "original_position": 50,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "original_commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "in_reply_to_id": 2033340253,
      "user": {
        "login": "frankomosh",
        "id": 33951953,
        "node_id": "MDQ6VXNlcjMzOTUxOTUz",
        "avatar_url": "https://avatars.githubusercontent.com/u/33951953?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/frankomosh",
        "html_url": "https://github.com/frankomosh",
        "followers_url": "https://api.github.com/users/frankomosh/followers",
        "following_url": "https://api.github.com/users/frankomosh/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/frankomosh/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/frankomosh/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/frankomosh/subscriptions",
        "organizations_url": "https://api.github.com/users/frankomosh/orgs",
        "repos_url": "https://api.github.com/users/frankomosh/repos",
        "events_url": "https://api.github.com/users/frankomosh/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/frankomosh/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks, @ismaelsadeeq, for sharing more context on this topic. I now see and understand why you took this approach. I think that the plan for improvement is also solid.\r\n\r\nIn `1. Select the lower value between the mempool forecast and the block policy forecast.` I appreciate the approach of selecting the lower value forecasters to avoid fee overpayment. \r\n\r\nAdditionally,  I would like to ask if we could improve accuracy by implementing a weighted selection strategy based on confirmation targets (this is just theoretical thinking since I haven’t done any tests on it).\r\n\r\nFrom the little context I have tried to gather, I see that different forecasters seem to do well in different scenarios i.e `CBlockPolicyEstimator` likely offers a more reliable estimates during periods of stability and for longer confirmation targets, while the `MempoolForecaster` might offer better predictions during rapid changes and for immediate confirmation targets of like (1-2 blocks).\r\n\r\nWould it, therefore, be worth considering a more targeted approach where we prefer MempoolForecaster for short-term targets and gradually shift to CBlockPolicyEstimator for longer-term targets of 3+ blocks? \r\n\r\nI think this could maintain the fee savings of your current approach while improving accuracy in time-sensitive scenarios where underpayment could have repercussions for users. \r\nEven if not for this PR, it might be something to consider for a future enhancement.\r\n\r\n(Note that I’m making assumptions here and have not looked into the overhead of actually doing this.)",
      "created_at": "2025-04-09T07:41:46Z",
      "updated_at": "2025-04-09T07:41:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#discussion_r2034696995",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2034696995"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035021352",
      "pull_request_review_id": 2752914132,
      "id": 2035021352,
      "node_id": "PRRC_kwDOABII5855S_Yo",
      "diff_hunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license. See the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <logging.h>\n+#include <policy/fees/block_policy_estimator.h>\n+#include <policy/fees/forecaster.h>\n+#include <policy/fees/forecaster_man.h>\n+#include <policy/fees/forecaster_util.h>\n+\n+#include <algorithm>\n+#include <utility>\n+\n+void FeeRateForecasterManager::RegisterForecaster(std::shared_ptr<Forecaster> forecaster)\n+{\n+    forecasters.emplace(forecaster->GetForecastType(), forecaster);\n+}\n+\n+CBlockPolicyEstimator* FeeRateForecasterManager::GetBlockPolicyEstimator()\n+{\n+    Assume(forecasters.contains(ForecastType::BLOCK_POLICY));\n+    Forecaster* block_policy_estimator = forecasters.find(ForecastType::BLOCK_POLICY)->second.get();\n+    return dynamic_cast<CBlockPolicyEstimator*>(block_policy_estimator);\n+}\n+\n+std::pair<std::optional<ForecastResult>, std::vector<std::string>> FeeRateForecasterManager::GetFeeRateForecast(ConfirmationTarget& target)\n+{\n+    std::vector<std::string> err_messages;\n+    ForecastResult selected_forecast;\n+\n+    for (const auto& forecaster : forecasters) {\n+        auto curr_forecast = forecaster.second->EstimateFee(target);\n+\n+        if (curr_forecast.GetError().has_value()) {\n+            err_messages.emplace_back(\n+                strprintf(\"%s: %s\", forecastTypeToString(forecaster.first), curr_forecast.GetError().value_or(\"\")));\n+        }\n+\n+        // Handle case where the block policy estimator does not have enough data for fee estimates.\n+        if (curr_forecast.Empty() && forecaster.first == ForecastType::BLOCK_POLICY) {\n+            return {std::nullopt, err_messages};\n+        }\n+\n+        if (!curr_forecast.Empty()) {\n+            if (selected_forecast.Empty()) {\n+                // If there's no selected forecast, choose curr_forecast as selected_forecast.\n+                selected_forecast = curr_forecast;\n+            } else {\n+                // Otherwise, choose the smaller as selected_forecast.\n+                selected_forecast = std::min(selected_forecast, curr_forecast);",
      "path": "src/policy/fees/forecaster_man.cpp",
      "position": 50,
      "original_position": 50,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "original_commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "in_reply_to_id": 2033340253,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Mempool forecaster only provide fee rate forecast for 1-2 blocks.\r\nsee `MEMPOOL_FORECAST_MAX_TARGET` constant in  https://github.com/bitcoin/bitcoin/pull/31664/commits/c7cdeafd7045c794b289e2438cc60baeee7e6f69\r\n\r\n",
      "created_at": "2025-04-09T10:04:26Z",
      "updated_at": "2025-04-09T10:52:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#discussion_r2035021352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035021352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035786192",
      "pull_request_review_id": 2754169488,
      "id": 2035786192,
      "node_id": "PRRC_kwDOABII5855V6HQ",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_FEES_FORECASTER_UTIL_H\n+#define BITCOIN_POLICY_FEES_FORECASTER_UTIL_H\n+\n+#include <util/feefrac.h>\n+\n+#include <optional>\n+#include <string>\n+\n+/**\n+ * @enum ForecastType\n+ * Identifier for fee rate forecasters.\n+ */\n+enum class ForecastType {\n+    BLOCK_POLICY,\n+    MEMPOOL_FORECAST,\n+};\n+\n+/**\n+ * @class ForecastResult\n+ * Represents the response returned by a fee rate forecaster.\n+ */\n+class ForecastResult\n+{\n+public:\n+    /**\n+     * @struct ForecastResponse\n+     * Contains fee rate forecast metadata.\n+     */\n+    struct ForecastResponse {\n+        /**\n+         * An estimated fee rate as a result of a forecast for economical transactions.\n+         * This value is sufficient to confirm a package within the specified target.\n+         */\n+        FeeFrac low_priority;\n+\n+        /**\n+         * An estimated fee rate as a result of forecast for high-priority transactions.\n+         * This value is for users willing to pay more to increase the likelihood of\n+         * confirmation within the specified target.\n+         */\n+        FeeFrac high_priority;\n+\n+        /**\n+         * The chain tip at which the forecast was made.\n+         */\n+        unsigned int current_block_height{0};\n+        /* This identifies which forecaster is providing this feerate forecast */\n+        ForecastType forecaster;\n+    };\n+\n+    /**\n+     * Default ForecastResult constructor.\n+     */\n+    ForecastResult() {}\n+\n+    /**\n+     * Constructs a ForecastResult object.\n+     * @param response The forecast response data.\n+     * @param error An optional error message (default: nullopt).\n+     */\n+    ForecastResult(ForecastResponse response, std::optional<std::string> error = std::nullopt)\n+        : m_response(std::move(response)), m_error(std::move(error))\n+    {\n+    }\n+\n+    /**\n+     * Checks if the forecast response is empty.\n+     * @return true if both low and high priority forecast estimates are empty, false otherwise.\n+     */\n+    bool Empty() const\n+    {\n+        return m_response.low_priority.IsEmpty() && m_response.high_priority.IsEmpty();\n+    }\n+\n+    /**\n+     * Overloaded less than operator which compares two ForecastResult objects based on\n+     * their high priority estimates.\n+     * @param other The other ForecastResult object to compare with.\n+     * @return true if the current object's high priority estimate is less than the other, false otherwise.\n+     */\n+    bool operator<(const ForecastResult& other) const\n+    {\n+        return m_response.high_priority << other.m_response.high_priority;\n+    }\n+\n+    /**\n+     * Retrieves the forecast response.\n+     * @return A reference to the forecast response metadata.\n+     */\n+    const ForecastResponse& GetResponse() const\n+    {\n+        return m_response;\n+    }\n+\n+    /**\n+     * Retrieves the error message, if any.\n+     * @return An optional string containing the error message.\n+     */\n+    const std::optional<std::string>& GetError() const\n+    {\n+        return m_error;\n+    }\n+\n+private:\n+    ForecastResponse m_response;        ///< The forecast response data.\n+    std::optional<std::string> m_error; ///< Optional error message.\n+};\n+\n+/**\n+ * @enum ConfirmationTargetType\n+ * Defines the types of confirmation targets for fee rate forecasters.\n+ */\n+enum class ConfirmationTargetType {\n+    BLOCKS, /**< Forecasters providing estimates for a specific number of blocks use this type. */\n+};\n+\n+/**\n+ * @struct ConfirmationTarget\n+ * Represents the input for a parameter of fee rate forecaster.\n+ */\n+struct ConfirmationTarget {\n+    unsigned int value;\n+    ConfirmationTargetType type;\n+};",
      "path": "src/policy/fees/forecaster_util.h",
      "position": 128,
      "original_position": 128,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "original_commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Are there any specific ideas for another `ConfirmationTargetType`? The only type defined here is a number of blocks (which could just be an integer) so I'm wondering why the complexity?",
      "created_at": "2025-04-09T17:04:05Z",
      "updated_at": "2025-04-09T18:12:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#discussion_r2035786192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035786192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
        }
      },
      "start_line": 117,
      "original_start_line": 117,
      "start_side": "RIGHT",
      "line": 128,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035883246",
      "pull_request_review_id": 2754169488,
      "id": 2035883246,
      "node_id": "PRRC_kwDOABII5855WRzu",
      "diff_hunk": "@@ -723,6 +724,29 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n     return estimateRawFee(confTarget, DOUBLE_SUCCESS_PCT, FeeEstimateHorizon::MED_HALFLIFE);\n }\n \n+ForecastResult CBlockPolicyEstimator::EstimateFee(ConfirmationTarget& target)\n+{\n+    ForecastResult::ForecastResponse response;\n+    response.forecaster = ForecastType::BLOCK_POLICY;\n+    if (target.type != ConfirmationTargetType::BLOCKS) {\n+        return ForecastResult(response, \"Incorrect Confirmation target, expecting blocks\");\n+    }\n+    FeeCalculation feeCalcConservative;\n+    CFeeRate feerate_conservative{estimateSmartFee(target.value, &feeCalcConservative, /**conservative**/ true)};\n+    FeeCalculation feeCalcEconomical;\n+    CFeeRate feerate_economical{estimateSmartFee(target.value, &feeCalcEconomical, /**conservative**/ false)};\n+    response.current_block_height = feeCalcEconomical.bestheight;\n+    if (feerate_conservative == CFeeRate(0) || feerate_economical == CFeeRate(0)) {\n+        return ForecastResult(response, \"Insufficient data or no feerate found\");\n+    }\n+    // Note: size can be any positive non-zero integer; the evaluated fee/size will result in the same fee rate,\n+    // and we only care that the fee rate remains consistent.\n+    int32_t size = 1000;\n+    response.low_priority = FeeFrac(feerate_economical.GetFee(size), size);\n+    response.high_priority = FeeFrac(feerate_conservative.GetFee(size), size);",
      "path": "src/policy/fees/block_policy_estimator.cpp",
      "position": 48,
      "original_position": 40,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "original_commit_id": "9355da6de4a71104dc3319e279047cdc5c90b0aa",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this might just be a personal opinion, but \"low priority\" and \"high priority\" usually mean different block targets to me. people who are accustomed to the mempool.space wording might say the same. but really, here and in the `MempoolForecaster`, it's a measure of how conservative/confident we are in our estimate no?\r\n\r\n![image](https://github.com/user-attachments/assets/11477535-87d2-4ad7-b9ab-4f3d6b95c86a)\r\n",
      "created_at": "2025-04-09T18:11:13Z",
      "updated_at": "2025-04-09T18:12:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#discussion_r2035883246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035883246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
        }
      },
      "start_line": 745,
      "original_start_line": 745,
      "start_side": "RIGHT",
      "line": 746,
      "original_line": 746,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035947015",
      "pull_request_review_id": 2754452475,
      "id": 2035947015,
      "node_id": "PRRC_kwDOABII5855WhYH",
      "diff_hunk": "@@ -723,6 +724,29 @@ CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n     return estimateRawFee(confTarget, DOUBLE_SUCCESS_PCT, FeeEstimateHorizon::MED_HALFLIFE);\n }\n \n+ForecastResult CBlockPolicyEstimator::EstimateFee(ConfirmationTarget& target)\n+{\n+    ForecastResult::ForecastResponse response;\n+    response.forecaster = ForecastType::BLOCK_POLICY;\n+    if (target.type != ConfirmationTargetType::BLOCKS) {\n+        return ForecastResult(response, \"Incorrect Confirmation target, expecting blocks\");\n+    }\n+    FeeCalculation feeCalcConservative;\n+    CFeeRate feerate_conservative{estimateSmartFee(target.value, &feeCalcConservative, /**conservative**/ true)};\n+    FeeCalculation feeCalcEconomical;\n+    CFeeRate feerate_economical{estimateSmartFee(target.value, &feeCalcEconomical, /**conservative**/ false)};\n+    response.current_block_height = feeCalcEconomical.bestheight;\n+    if (feerate_conservative == CFeeRate(0) || feerate_economical == CFeeRate(0)) {\n+        return ForecastResult(response, \"Insufficient data or no feerate found\");\n+    }\n+    // Note: size can be any positive non-zero integer; the evaluated fee/size will result in the same fee rate,\n+    // and we only care that the fee rate remains consistent.\n+    int32_t size = 1000;\n+    response.low_priority = FeeFrac(feerate_economical.GetFee(size), size);\n+    response.high_priority = FeeFrac(feerate_conservative.GetFee(size), size);",
      "path": "src/policy/fees/block_policy_estimator.cpp",
      "position": 48,
      "original_position": 40,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "original_commit_id": "9355da6de4a71104dc3319e279047cdc5c90b0aa",
      "in_reply_to_id": 2035883246,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point Yes, it will be better to maintain the conservative and economical name?\r\nHappy to update.",
      "created_at": "2025-04-09T18:54:37Z",
      "updated_at": "2025-04-09T18:54:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#discussion_r2035947015",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035947015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
        }
      },
      "start_line": 745,
      "original_start_line": 745,
      "start_side": "RIGHT",
      "line": 746,
      "original_line": 746,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035983336",
      "pull_request_review_id": 2754507521,
      "id": 2035983336,
      "node_id": "PRRC_kwDOABII5855WqPo",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_FEES_FORECASTER_UTIL_H\n+#define BITCOIN_POLICY_FEES_FORECASTER_UTIL_H\n+\n+#include <util/feefrac.h>\n+\n+#include <optional>\n+#include <string>\n+\n+/**\n+ * @enum ForecastType\n+ * Identifier for fee rate forecasters.\n+ */\n+enum class ForecastType {\n+    BLOCK_POLICY,\n+    MEMPOOL_FORECAST,\n+};\n+\n+/**\n+ * @class ForecastResult\n+ * Represents the response returned by a fee rate forecaster.\n+ */\n+class ForecastResult\n+{\n+public:\n+    /**\n+     * @struct ForecastResponse\n+     * Contains fee rate forecast metadata.\n+     */\n+    struct ForecastResponse {\n+        /**\n+         * An estimated fee rate as a result of a forecast for economical transactions.\n+         * This value is sufficient to confirm a package within the specified target.\n+         */\n+        FeeFrac low_priority;\n+\n+        /**\n+         * An estimated fee rate as a result of forecast for high-priority transactions.\n+         * This value is for users willing to pay more to increase the likelihood of\n+         * confirmation within the specified target.\n+         */\n+        FeeFrac high_priority;\n+\n+        /**\n+         * The chain tip at which the forecast was made.\n+         */\n+        unsigned int current_block_height{0};\n+        /* This identifies which forecaster is providing this feerate forecast */\n+        ForecastType forecaster;\n+    };\n+\n+    /**\n+     * Default ForecastResult constructor.\n+     */\n+    ForecastResult() {}\n+\n+    /**\n+     * Constructs a ForecastResult object.\n+     * @param response The forecast response data.\n+     * @param error An optional error message (default: nullopt).\n+     */\n+    ForecastResult(ForecastResponse response, std::optional<std::string> error = std::nullopt)\n+        : m_response(std::move(response)), m_error(std::move(error))\n+    {\n+    }\n+\n+    /**\n+     * Checks if the forecast response is empty.\n+     * @return true if both low and high priority forecast estimates are empty, false otherwise.\n+     */\n+    bool Empty() const\n+    {\n+        return m_response.low_priority.IsEmpty() && m_response.high_priority.IsEmpty();\n+    }\n+\n+    /**\n+     * Overloaded less than operator which compares two ForecastResult objects based on\n+     * their high priority estimates.\n+     * @param other The other ForecastResult object to compare with.\n+     * @return true if the current object's high priority estimate is less than the other, false otherwise.\n+     */\n+    bool operator<(const ForecastResult& other) const\n+    {\n+        return m_response.high_priority << other.m_response.high_priority;\n+    }\n+\n+    /**\n+     * Retrieves the forecast response.\n+     * @return A reference to the forecast response metadata.\n+     */\n+    const ForecastResponse& GetResponse() const\n+    {\n+        return m_response;\n+    }\n+\n+    /**\n+     * Retrieves the error message, if any.\n+     * @return An optional string containing the error message.\n+     */\n+    const std::optional<std::string>& GetError() const\n+    {\n+        return m_error;\n+    }\n+\n+private:\n+    ForecastResponse m_response;        ///< The forecast response data.\n+    std::optional<std::string> m_error; ///< Optional error message.\n+};\n+\n+/**\n+ * @enum ConfirmationTargetType\n+ * Defines the types of confirmation targets for fee rate forecasters.\n+ */\n+enum class ConfirmationTargetType {\n+    BLOCKS, /**< Forecasters providing estimates for a specific number of blocks use this type. */\n+};\n+\n+/**\n+ * @struct ConfirmationTarget\n+ * Represents the input for a parameter of fee rate forecaster.\n+ */\n+struct ConfirmationTarget {\n+    unsigned int value;\n+    ConfirmationTargetType type;\n+};",
      "path": "src/policy/fees/forecaster_util.h",
      "position": 128,
      "original_position": 128,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "original_commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "in_reply_to_id": 2035786192,
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, as is now, it might seem like overkill (though it will be useful in the future). This is just forward-looking I believe that, realistically, businesses and users care more about time in minutes or hours, etc.\r\n\r\nSo, I envision a fee rate forecaster that accepts input based on time in hours rather than blocks. For example: 'Give me a fee rate that will allow my transaction to confirm within the next 4 hours.'\r\n\r\nthis is a wishful thinking for now; no concrete idea or even reviewable design about it\r\nI don’t have a strong opinion on this we can easily refactor and enable it when needed.\r\n\r\nHappy to remove it if we prefer to keep only structures that are used immediately.",
      "created_at": "2025-04-09T19:07:13Z",
      "updated_at": "2025-04-09T19:07:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#discussion_r2035983336",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2035983336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
        }
      },
      "start_line": 117,
      "original_start_line": 117,
      "start_side": "RIGHT",
      "line": 128,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036045272",
      "pull_request_review_id": 2754621531,
      "id": 2036045272,
      "node_id": "PRRC_kwDOABII5855W5XY",
      "diff_hunk": "@@ -0,0 +1,161 @@\n+// Copyright (c) 2025 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_FEES_FORECASTER_UTIL_H\n+#define BITCOIN_POLICY_FEES_FORECASTER_UTIL_H\n+\n+#include <util/feefrac.h>\n+\n+#include <optional>\n+#include <string>\n+\n+/**\n+ * @enum ForecastType\n+ * Identifier for fee rate forecasters.\n+ */\n+enum class ForecastType {\n+    BLOCK_POLICY,\n+    MEMPOOL_FORECAST,\n+};\n+\n+/**\n+ * @class ForecastResult\n+ * Represents the response returned by a fee rate forecaster.\n+ */\n+class ForecastResult\n+{\n+public:\n+    /**\n+     * @struct ForecastResponse\n+     * Contains fee rate forecast metadata.\n+     */\n+    struct ForecastResponse {\n+        /**\n+         * An estimated fee rate as a result of a forecast for economical transactions.\n+         * This value is sufficient to confirm a package within the specified target.\n+         */\n+        FeeFrac low_priority;\n+\n+        /**\n+         * An estimated fee rate as a result of forecast for high-priority transactions.\n+         * This value is for users willing to pay more to increase the likelihood of\n+         * confirmation within the specified target.\n+         */\n+        FeeFrac high_priority;\n+\n+        /**\n+         * The chain tip at which the forecast was made.\n+         */\n+        unsigned int current_block_height{0};\n+        /* This identifies which forecaster is providing this feerate forecast */\n+        ForecastType forecaster;\n+    };\n+\n+    /**\n+     * Default ForecastResult constructor.\n+     */\n+    ForecastResult() {}\n+\n+    /**\n+     * Constructs a ForecastResult object.\n+     * @param response The forecast response data.\n+     * @param error An optional error message (default: nullopt).\n+     */\n+    ForecastResult(ForecastResponse response, std::optional<std::string> error = std::nullopt)\n+        : m_response(std::move(response)), m_error(std::move(error))\n+    {\n+    }\n+\n+    /**\n+     * Checks if the forecast response is empty.\n+     * @return true if both low and high priority forecast estimates are empty, false otherwise.\n+     */\n+    bool Empty() const\n+    {\n+        return m_response.low_priority.IsEmpty() && m_response.high_priority.IsEmpty();\n+    }\n+\n+    /**\n+     * Overloaded less than operator which compares two ForecastResult objects based on\n+     * their high priority estimates.\n+     * @param other The other ForecastResult object to compare with.\n+     * @return true if the current object's high priority estimate is less than the other, false otherwise.\n+     */\n+    bool operator<(const ForecastResult& other) const\n+    {\n+        return m_response.high_priority << other.m_response.high_priority;\n+    }\n+\n+    /**\n+     * Retrieves the forecast response.\n+     * @return A reference to the forecast response metadata.\n+     */\n+    const ForecastResponse& GetResponse() const\n+    {\n+        return m_response;\n+    }\n+\n+    /**\n+     * Retrieves the error message, if any.\n+     * @return An optional string containing the error message.\n+     */\n+    const std::optional<std::string>& GetError() const\n+    {\n+        return m_error;\n+    }\n+\n+private:\n+    ForecastResponse m_response;        ///< The forecast response data.\n+    std::optional<std::string> m_error; ///< Optional error message.\n+};\n+\n+/**\n+ * @enum ConfirmationTargetType\n+ * Defines the types of confirmation targets for fee rate forecasters.\n+ */\n+enum class ConfirmationTargetType {\n+    BLOCKS, /**< Forecasters providing estimates for a specific number of blocks use this type. */\n+};\n+\n+/**\n+ * @struct ConfirmationTarget\n+ * Represents the input for a parameter of fee rate forecaster.\n+ */\n+struct ConfirmationTarget {\n+    unsigned int value;\n+    ConfirmationTargetType type;\n+};",
      "path": "src/policy/fees/forecaster_util.h",
      "position": 128,
      "original_position": 128,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "original_commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "in_reply_to_id": 2035786192,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If there aren't any concrete ideas, it seems better to add the extra complexity if/when there is a reason to. fwiw I don't see why translating between hours and blocks would require another target type?",
      "created_at": "2025-04-09T19:48:33Z",
      "updated_at": "2025-04-09T19:48:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#discussion_r2036045272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2036045272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
        }
      },
      "start_line": 117,
      "original_start_line": 117,
      "start_side": "RIGHT",
      "line": 128,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2037576101",
      "pull_request_review_id": 2757094288,
      "id": 2037576101,
      "node_id": "PRRC_kwDOABII5855cvGl",
      "diff_hunk": "@@ -31,6 +31,13 @@ ForecastResult MemPoolForecaster::EstimateFee(ConfirmationTarget& target)\n                                             target.value, MEMPOOL_FORECAST_MAX_TARGET, MEMPOOL_FORECAST_MAX_TARGET));\n     }\n \n+    const auto cached_estimate = cache.get();",
      "path": "src/policy/fees/mempool_forecaster.cpp",
      "position": 34,
      "original_position": 4,
      "commit_id": "c6b94403bf9d5bf4fe9d5e5360b3d2c30a430d69",
      "original_commit_id": "5bd2220422af02b20cb94dcd4c0e2c38e0284952",
      "in_reply_to_id": null,
      "user": {
        "login": "polespinasa",
        "id": 57642229,
        "node_id": "MDQ6VXNlcjU3NjQyMjI5",
        "avatar_url": "https://avatars.githubusercontent.com/u/57642229?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/polespinasa",
        "html_url": "https://github.com/polespinasa",
        "followers_url": "https://api.github.com/users/polespinasa/followers",
        "following_url": "https://api.github.com/users/polespinasa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/polespinasa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/polespinasa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/polespinasa/subscriptions",
        "organizations_url": "https://api.github.com/users/polespinasa/orgs",
        "repos_url": "https://api.github.com/users/polespinasa/repos",
        "events_url": "https://api.github.com/users/polespinasa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/polespinasa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Already commented during the [review club](https://bitcoincore.reviews/31664) but leaving a comment to make it easy to track.\r\n\r\nThe cache should not be returned when there is a chain reorganization. This can be done by simply checking if there was a reorganization during the last `CACHE_LIFE` window or by clearing the cache after a reorganization.\r\n\r\nPersonally, clearing the cache seems to me to be the best option, since the method can also be used for testing, as we may want to call the forecaster several times and do not want the cache to influence it.",
      "created_at": "2025-04-10T14:35:27Z",
      "updated_at": "2025-04-10T14:35:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31664#discussion_r2037576101",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2037576101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31664"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 34,
      "original_line": 34,
      "side": "RIGHT"
    }
  ]
}