{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604",
    "id": 2540887489,
    "node_id": "PR_kwDOABII586Xct3B",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/32604",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/32604.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/32604.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/4c772cbd83e502a1339e8993d192ea6416ecd45c",
    "number": 32604,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "log: Mitigate disk filling attacks by rate limiting LogPrintf, LogInfo, LogWarning, LogError",
    "user": {
      "login": "Crypt-iQ",
      "id": 15145615,
      "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Crypt-iQ",
      "html_url": "https://github.com/Crypt-iQ",
      "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
      "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
      "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
      "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
      "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This revives the work done by dergoegge in https://github.com/bitcoin/bitcoin/pull/21603. The approach is similar — this PR uses `std::source_location` under the hood now that we can use c++20 features. It also resets the rate limiting statistics via the `CScheduler`. The logging functions have also changed slightly since that PR was opened, so work has been done to preserve the intent of the original rate limiting change. I have tried to give commit attribution where possible.\r\n\r\n**Approach:**\r\nEach source code location is given an hourly logging quota of 1MiB of logging per hour. Logging is only dropped from source locations that exceed the quota.\r\n- Only logging to disk is rate limited. Logging to console is not rate limited.\r\n- Printing with the category argument is not rate limited.\r\n- `UpdateTip: new best=[…]` is logged without rate limiting. High log volume is expected for that source location during IBD.\r\n- When logging is restarted a tally of how many bytes were dropped is printed.\r\n- All logs will be prefixed with [*] if there is at least one source location that is currently being suppressed.\r\n\r\nI've repurposed the old logging rpc mentioned in #21603 in another branch for testing [here](https://github.com/Crypt-iQ/bitcoin/tree/log_ratelimiting_05192025_rpc). This can be used to log from source locations and test out the new changes in logging behavior. Note that the `setmocktime` RPC needs to be used to set the mock time past the current clock time to reset the logging messages.\r\n\r\nExample usage:\r\n```\r\nbitcoin-cli -regtest excessivelog 1 1048500 # log just under 1MiB\r\nbitcoin-cli -regtest excessivelog 1 100 # this should get the total amount logged above 1MiB\r\n                                        # and the rate limiting logic should kick in\r\nbitcoin-cli -regtest excessivelog 2 1048500\r\nbitcoin-cli -regtest excessivelog 2 100 # trigger rate limiting from another location\r\nbitcoin-cli -regtest mockscheduler 3600 # fast-forward the scheduler\r\nbitcoin-cli -regtest excessivelog 1 100 # this should trigger logging to resume and will log the source locations that were reset\r\n```\r\n\r\nExample output:\r\n```\r\n2025-07-02T22:03:56Z [warning] Excessive logging detected from rpc/node.cpp:142 (RPCHelpMan excessivelog()): >1048576 bytes logged during the last time window of 3600s. Suppressing logging to disk from this source location until time window resets. Console logging unaffected. Last log entry.\r\n[*] 2025-07-02T22:03:56Z aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n2025-07-02T22:04:58Z (mocktime: 2262-04-11T23:47:15Z) Restarting logging from rpc/node.cpp:142 (RPCHelpMan excessivelog()): 121 bytes were dropped during the last 3600s.\r\n2025-07-02T22:04:58Z (mocktime: 2262-04-11T23:47:15Z) Restarting logging from rpc/node.cpp:139 (RPCHelpMan excessivelog()): 121 bytes were dropped during the last 3600s.\r\n```",
    "labels": [
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/72",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/72",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/72/labels",
      "id": 12172984,
      "node_id": "MI_kwDOABII584Aub64",
      "number": 72,
      "state": "open",
      "title": "30.0",
      "description": "",
      "creator": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "open_issues": 12,
      "closed_issues": 93,
      "created_at": "2025-01-15T19:21:36Z",
      "updated_at": "2025-09-12T17:00:41Z"
    },
    "created_at": "2025-05-23T20:48:49Z",
    "updated_at": "2025-09-12T17:52:11Z",
    "closed_at": "2025-07-09T18:44:54Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2025-07-09T18:44:54Z",
    "merged_by": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "2d59977601ea18f189991fa027364e69293c61a9",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "janb84",
        "id": 608446,
        "node_id": "MDQ6VXNlcjYwODQ0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/608446?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janb84",
        "html_url": "https://github.com/janb84",
        "followers_url": "https://api.github.com/users/janb84/followers",
        "following_url": "https://api.github.com/users/janb84/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/janb84/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/janb84/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/janb84/subscriptions",
        "organizations_url": "https://api.github.com/users/janb84/orgs",
        "repos_url": "https://api.github.com/users/janb84/repos",
        "events_url": "https://api.github.com/users/janb84/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/janb84/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "Crypt-iQ:log_ratelimiting_05192025",
      "ref": "log_ratelimiting_05192025",
      "sha": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 79155174,
        "node_id": "MDEwOlJlcG9zaXRvcnk3OTE1NTE3NA==",
        "name": "bitcoin",
        "full_name": "Crypt-iQ/bitcoin",
        "owner": {
          "login": "Crypt-iQ",
          "id": 15145615,
          "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
          "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Crypt-iQ",
          "html_url": "https://github.com/Crypt-iQ",
          "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
          "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
          "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
          "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
          "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/Crypt-iQ/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/Crypt-iQ/bitcoin",
        "archive_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/events",
        "forks_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/Crypt-iQ/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:Crypt-iQ/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/Crypt-iQ/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/hooks",
        "svn_url": "https://github.com/Crypt-iQ/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 262700,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-09T14:49:55Z",
        "created_at": "2017-01-16T20:09:01Z",
        "updated_at": "2025-07-28T14:17:58Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b7e9dc8e468b9a6714fea59432b3c33a723e2bdf",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37774,
        "stargazers_count": 85464,
        "watchers_count": 85464,
        "size": 293563,
        "default_branch": "master",
        "open_issues_count": 776,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-12T13:42:12Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-09-12T17:39:32Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 466,
    "deletions": 62,
    "changed_files": 8,
    "commits": 5,
    "review_comments": 262,
    "comments": 27
  },
  "events": [
    {
      "event": "mentioned",
      "id": 17796220658,
      "node_id": "MEE_lADOABII5864B5OdzwAAAAQkvMby",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17796220658",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T20:48:50Z"
    },
    {
      "event": "subscribed",
      "id": 17796220669,
      "node_id": "SE_lADOABII5864B5OdzwAAAAQkvMb9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17796220669",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T20:48:50Z"
    },
    {
      "event": "commented",
      "id": 2905779417,
      "node_id": "IC_kwDOABII586tMqzZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2905779417",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T20:48:51Z",
      "updated_at": "2025-07-09T18:39:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/32604.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3052678805), [stickies-v](https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-3002650511), [glozow](https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3053633853) |\n| Concept ACK | [davidgumberg](https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2905800955), [brunoerg](https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2910538498) |\n| Stale ACK | [janb84](https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2868443828), [l0rinc](https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2995010190), [dergoegge](https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2997492533) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#29641](https://github.com/bitcoin/bitcoin/pull/29641) (scripted-diff: Use LogInfo over LogPrintf [WIP, NOMERGE, DRAFT] by maflcko)\n* [#29256](https://github.com/bitcoin/bitcoin/pull/29256) (log, refactor: Allow log macros to accept context arguments by ryanofsky)\n* [#26812](https://github.com/bitcoin/bitcoin/pull/26812) (test: add end-to-end tests for CConnman and PeerManager by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2905779417",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "labeled",
      "id": 17796225522,
      "node_id": "LE_lADOABII5864B5OdzwAAAAQkvNny",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17796225522",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T20:49:22Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 2905800955,
      "node_id": "IC_kwDOABII586tMwD7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2905800955",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T21:00:08Z",
      "updated_at": "2025-05-23T21:00:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2905800955",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "commented",
      "id": 2905866738,
      "node_id": "IC_kwDOABII586tNAHy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2905866738",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T21:34:45Z",
      "updated_at": "2025-05-23T21:34:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Any thoughts about adding some kind of dying gasp so that if a node crashes or hits some fatal error the most recent unfiltered log can be saved?",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2905866738",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "labeled",
      "id": 17796736612,
      "node_id": "LE_lADOABII5864B5OdzwAAAAQkxKZk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17796736612",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T21:47:17Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2905884570,
      "node_id": "IC_kwDOABII586tNEea",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2905884570",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-23T21:47:18Z",
      "updated_at": "2025-05-23T21:47:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `lint`: https://github.com/bitcoin/bitcoin/runs/42810774045</sub>\n<sub>LLM reason (✨ experimental): The CI failure is due to linting errors related to `std::filesystem` and locale dependence.\n</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2905884570",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "commented",
      "id": 2907015832,
      "node_id": "IC_kwDOABII586tRYqY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2907015832",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-24T20:49:35Z",
      "updated_at": "2025-05-24T20:49:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "> if a node crashes or hits some fatal error the most recent unfiltered log can be saved?\r\n\r\nDoes unfiltered here mean a log line that was rate limited or does it mean something else in this context? I think that we would need to know ahead of time if we were going to crash to save the most recent unfiltered log unless we somehow always cache it?",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2907015832",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "commented",
      "id": 2909514124,
      "node_id": "IC_kwDOABII586ta6mM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2909514124",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-26T12:07:55Z",
      "updated_at": "2025-05-26T12:07:55Z",
      "author_association": "MEMBER",
      "body": "Concept ACK\n\nThanks for picking this up!",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2909514124",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "reviewed",
      "id": 2868443828,
      "node_id": "PRR_kwDOABII586q-Pq0",
      "url": null,
      "actor": null,
      "commit_id": "0bc6ed61cfab6d97e74103efd41c46faf5941ff6",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-05-26T13:41:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 0bc6ed61cfab6d97e74103efd41c46faf5941ff6\r\n\r\nRatelimits loging to disk if loggin exceeds 1 MiB  in  1 hour (WINDOW_MAX_BYTES const & WINDOW_SIZE const)\r\n \r\n- code review \r\n- build & tested ",
      "user": {
        "login": "janb84",
        "id": 608446,
        "node_id": "MDQ6VXNlcjYwODQ0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/608446?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janb84",
        "html_url": "https://github.com/janb84",
        "followers_url": "https://api.github.com/users/janb84/followers",
        "following_url": "https://api.github.com/users/janb84/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/janb84/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/janb84/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/janb84/subscriptions",
        "organizations_url": "https://api.github.com/users/janb84/orgs",
        "repos_url": "https://api.github.com/users/janb84/repos",
        "events_url": "https://api.github.com/users/janb84/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/janb84/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2868443828",
      "submitted_at": "2025-05-26T13:41:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "review_requested",
      "id": 17815097347,
      "node_id": "RRE_lADOABII5864B5OdzwAAAAQl3NAD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17815097347",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-26T13:41:26Z",
      "requested_reviewer": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 17815097535,
      "node_id": "RRE_lADOABII5864B5OdzwAAAAQl3NC_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17815097535",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-26T13:41:27Z",
      "requested_reviewer": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2910538498,
      "node_id": "IC_kwDOABII586te0sC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2910538498",
      "actor": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-26T19:47:41Z",
      "updated_at": "2025-05-26T19:47:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2910538498",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17852493897,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAAQoF3BJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17852493897",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "created_at": "2025-05-28T14:38:13Z"
    },
    {
      "event": "commented",
      "id": 2919920634,
      "node_id": "IC_kwDOABII586uCnP6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2919920634",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-29T16:22:13Z",
      "updated_at": "2025-05-29T16:24:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "The tidy job is failing because it doesn't like the logging macros being used in lambda functions. It seems like this is pre-existing so I'm not sure why it's failing now. The windows cross-built job is failing on the `rate_limiting` test at every file-size comparison. I don't have a windows machine to debug this, but I think maybe `fs::file_size` is failing or some other quirk is showing up?",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2919920634",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "reviewed",
      "id": 2880741415,
      "node_id": "PRR_kwDOABII586rtKAn",
      "url": null,
      "actor": null,
      "commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-05-30T10:21:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK on locking down this attack vector, and the code changes required seem acceptable. Also nice to start using `std::source_location` here.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2880741415",
      "submitted_at": "2025-05-30T10:21:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "commented",
      "id": 2922025698,
      "node_id": "IC_kwDOABII586uKpLi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2922025698",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-30T10:57:04Z",
      "updated_at": "2025-05-30T10:57:04Z",
      "author_association": "MEMBER",
      "body": "> The windows cross-built job is failing on the rate_limiting test at every file-size comparison. I don't have a windows machine to debug this, but I think maybe fs::file_size is failing or some other quirk is showing up?\r\n\r\n@hebasto can you take a look here? I ran `test_bitcoin.exe` from this branch (rebased) under wine and didn't see any failures.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2922025698",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "mentioned",
      "id": 17883600371,
      "node_id": "MEE_lADOABII5864B5OdzwAAAAQp8hXz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17883600371",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-30T10:57:05Z"
    },
    {
      "event": "subscribed",
      "id": 17883600405,
      "node_id": "SE_lADOABII5864B5OdzwAAAAQp8hYV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17883600405",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-30T10:57:05Z"
    },
    {
      "event": "commented",
      "id": 2922246861,
      "node_id": "IC_kwDOABII586uLfLN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2922246861",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-30T12:20:01Z",
      "updated_at": "2025-05-30T12:22:49Z",
      "author_association": "MEMBER",
      "body": "> > The windows cross-built job is failing on the rate_limiting test at every file-size comparison. I don't have a windows machine to debug this, but I think maybe fs::file_size is failing or some other quirk is showing up?\r\n> \r\n> @hebasto can you take a look here? I ran `test_bitcoin.exe` from this branch (rebased) under wine and didn't see any failures.\r\n\r\nIt seems to be related to MSVCRT behaviour, as binaries [linked to UCRT](https://github.com/hebasto/bitcoin-core-nightly/actions/runs/15345658695) pass all unit tests.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2922246861",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "mentioned",
      "id": 17884641427,
      "node_id": "MEE_lADOABII5864B5OdzwAAAAQqAfiT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17884641427",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-30T12:20:02Z"
    },
    {
      "event": "subscribed",
      "id": 17884641493,
      "node_id": "SE_lADOABII5864B5OdzwAAAAQqAfjV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17884641493",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-30T12:20:02Z"
    },
    {
      "event": "reviewed",
      "id": 2881185484,
      "node_id": "PRR_kwDOABII586ru2bM",
      "url": null,
      "actor": null,
      "commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-05-30T12:52:50Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2881185484",
      "submitted_at": "2025-05-30T12:52:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "commented",
      "id": 2934186705,
      "node_id": "IC_kwDOABII586u5CLR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2934186705",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T08:47:37Z",
      "updated_at": "2025-06-03T08:47:37Z",
      "author_association": "MEMBER",
      "body": "I vaguely remember having trouble with the unit tests on windows too. Iirc it had something to do with windows line endings being different (i.e. `\\r\\n` on windows vs `\\n` on linux), which throws off the size accounting.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2934186705",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "commented",
      "id": 2934471353,
      "node_id": "IC_kwDOABII586u6Hq5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2934471353",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T10:03:15Z",
      "updated_at": "2025-06-03T10:03:15Z",
      "author_association": "MEMBER",
      "body": "> The tidy job is failing because it doesn't like the logging macros being used in lambda functions. It seems like this is pre-existing so I'm not sure why it's failing now.\r\n\r\nIt happens after commit dfbc3e46b8661b112a91c5f00a4dce439f4f5914 and looks unrelated. Maybe just use the workaround from ./src/util/check.h?",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2934471353",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "commented",
      "id": 2934495128,
      "node_id": "IC_kwDOABII586u6NeY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2934495128",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-03T10:09:15Z",
      "updated_at": "2025-06-03T10:12:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, but I'm not yet sure about the approach. Let me know if I misunderstood something important here.\r\n\r\nEdit:\r\n> All logs will be prefixed with [*] if there is at least one source location that is currently being suppressed\r\n\r\nWill that appear on the console as well, which didn't have any messages dropped?",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2934495128",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "reviewed",
      "id": 2891468741,
      "node_id": "PRR_kwDOABII586sWE_F",
      "url": null,
      "actor": null,
      "commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-03T10:09:27Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2891468741",
      "submitted_at": "2025-06-03T10:09:27Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17986304449,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAAQwETnB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17986304449",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b275b241a38d0ec0cb6f2899859813d2da5a89d0",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/b275b241a38d0ec0cb6f2899859813d2da5a89d0",
      "created_at": "2025-06-04T17:37:30Z"
    },
    {
      "event": "reviewed",
      "id": 2897579695,
      "node_id": "PRR_kwDOABII586stY6v",
      "url": null,
      "actor": null,
      "commit_id": "b275b241a38d0ec0cb6f2899859813d2da5a89d0",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-04T17:58:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "The latest change uses a single `BCLog::LogRateLimiter` instance and uses a slimmer way of tracking the amount of logging bytes left per `std::source_location`. I like the approach better as `m_categories` is no longer being used. I would like to point out that the rate-limiting logic can be bypassed if `LogPrintLevel` is used. I think `LogPrintLevel` callers need to be cautious and I kind of think this macro shouldn't be used if `level >= BCLog::Level::Info`.\r\n\r\n> Will that appear on the console as well, which didn't have any messages dropped?\r\n\r\nYes this appears in the console as well. I actually was unsure if console-logging should be rate-limited or not. Hopefully users have sensible limits on their terminal history?\r\n\r\nI will work on fixing the CI, I think review can still happen in the meantime while I debug the windows failure and fix the tidy job.",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2897579695",
      "submitted_at": "2025-06-04T17:58:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17989201758,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAAQwPW9e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17989201758",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/5535df69a2a7f198e48656912522d531d3867346",
      "created_at": "2025-06-04T20:52:53Z"
    },
    {
      "event": "unlabeled",
      "id": 17989831096,
      "node_id": "UNLE_lADOABII5864B5OdzwAAAAQwRwm4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17989831096",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-04T21:41:43Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2899378420,
      "node_id": "PRR_kwDOABII586s0QD0",
      "url": null,
      "actor": null,
      "commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-05T09:54:59Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2899378420",
      "submitted_at": "2025-06-05T09:54:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "reviewed",
      "id": 2899720611,
      "node_id": "PRR_kwDOABII586s1jmj",
      "url": null,
      "actor": null,
      "commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-05T10:15:01Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2899720611",
      "submitted_at": "2025-06-05T10:15:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18007029928,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAAQxTXio",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18007029928",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "46432604a96b84cbb0c8781f9996b089c1ba4622",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/46432604a96b84cbb0c8781f9996b089c1ba4622",
      "created_at": "2025-06-05T18:09:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18007856182,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAAQxWhQ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18007856182",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7304113c87efe430cd3a0572b96ec01c61aaf2f0",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/7304113c87efe430cd3a0572b96ec01c61aaf2f0",
      "created_at": "2025-06-05T18:57:15Z"
    },
    {
      "event": "labeled",
      "id": 18007859435,
      "node_id": "LE_lADOABII5864B5OdzwAAAAQxWiDr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18007859435",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-05T18:57:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2945718154,
      "node_id": "IC_kwDOABII586vlBeK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2945718154",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-05T18:57:26Z",
      "updated_at": "2025-06-05T18:57:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `previous releases, depends DEBUG`: https://github.com/bitcoin/bitcoin/runs/43565644662</sub>\n<sub>LLM reason (✨ experimental): The build failed due to a compilation error caused by incomplete type declaration of BCLog::SourceLocationCounter.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2945718154",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18008346739,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAAQxYZBz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18008346739",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3c6cb3723bc0a54544b6dc640ab08915a089c31d",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/3c6cb3723bc0a54544b6dc640ab08915a089c31d",
      "created_at": "2025-06-05T19:23:48Z"
    },
    {
      "event": "commented",
      "id": 2946022873,
      "node_id": "IC_kwDOABII586vmL3Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2946022873",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-05T20:12:21Z",
      "updated_at": "2025-06-05T20:25:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "The latest push encapsulates things a bit more. I think there's still room for improvement and am open to suggestions -- I don't like how `WINDOW_MAX_BYTES` is not a `LogRateLimiter` member and I also dislike the `friend class Logger` usage.\r\n\r\nI think the windows cross-built job is failing because a `static BCLog::Logger*` is shared across tests and is triggering the rate-limiting logic before the logging tests are run. The [CI logs](https://github.com/bitcoin/bitcoin/actions/runs/15475499996/job/43571253106?pr=32604: 2025-06-05T19:56:44.9566257Z) have an asterisk:\r\n`Mismatch at position 0: [*] foo5: bar5 != foo5: bar5`",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2946022873",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18009426930,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAAQxcgvy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18009426930",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "21a3a509ac9c317260e12a01df6252412649dd84",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/21a3a509ac9c317260e12a01df6252412649dd84",
      "created_at": "2025-06-05T20:24:26Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18011044948,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAAQxirxU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18011044948",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "created_at": "2025-06-05T21:59:16Z"
    },
    {
      "event": "unlabeled",
      "id": 18012243983,
      "node_id": "UNLE_lADOABII5864B5OdzwAAAAQxnQgP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18012243983",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-05T23:08:52Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2904095923,
      "node_id": "PRR_kwDOABII586tGPyz",
      "url": null,
      "actor": null,
      "commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-06T10:07:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK. I think this PR needs release notes because of the behaviour change.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2904095923",
      "submitted_at": "2025-06-06T10:07:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18096945888,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAAQ2qXrg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18096945888",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "387ccd959e230d525c16579fdd6e91110d783a40",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/387ccd959e230d525c16579fdd6e91110d783a40",
      "created_at": "2025-06-11T15:26:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18097298592,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAAQ2rtyg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18097298592",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a7bd7c9a69de72739326026b7ab660181c8d02fb",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/a7bd7c9a69de72739326026b7ab660181c8d02fb",
      "created_at": "2025-06-11T15:46:29Z"
    },
    {
      "event": "labeled",
      "id": 18097301520,
      "node_id": "LE_lADOABII5864B5OdzwAAAAQ2rugQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18097301520",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-11T15:46:41Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2963337913,
      "node_id": "IC_kwDOABII586woPK5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2963337913",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-11T15:46:43Z",
      "updated_at": "2025-06-11T15:46:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `ARM, unit tests, no functional tests`: https://github.com/bitcoin/bitcoin/runs/43903011789</sub>\n<sub>LLM reason (✨ experimental): The CI failure is caused by a compilation error in logging_tests.cpp due to a narrowing type conversion resulting in the build stopping.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2963337913",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "commented",
      "id": 2963542895,
      "node_id": "IC_kwDOABII586wpBNv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2963542895",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-11T16:56:16Z",
      "updated_at": "2025-06-11T17:00:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "The latest push a7bd7c9a69de72739326026b7ab660181c8d02fb includes:\r\n- rate limiting for callers of `LogPrintLevel` with level >= `BCLog::Level::Info`.\r\n- fix for the windows cross-built CI by using `GetFileSize` instead of `fs::file_size` in `logging_tests/rate_limiting`\r\n\r\nI've repurposed the old logging rpc from #21603 in another branch for testing [here](https://github.com/Crypt-iQ/bitcoin/tree/log_ratelimiting_05192025_rpc). This can be used to log from source locations and test out the new changes in logging behavior. Note that the `setmocktime` RPC needs to be used to set the mock time past the current clock time to reset the logging messages.\r\n\r\nExample usage:\r\n```\r\nbitcoin-cli -regtest excessivelog 1 1048500 # log just under 1MiB\r\nbitcoin-cli -regtest excessivelog 1 100 # this should get the total amount logged above 1MiB\r\n                                        # and the rate limiting logic should kick in\r\nbitcoin-cli -regtest excessivelog 2 1048500\r\nbitcoin-cli -regtest excessivelog 2 100 # trigger rate limiting from another location\r\nbitcoin-cli -regtest setmocktime <N> # set this past the current clock time because of how `LogRateLimiter` is initialized\r\nbitcoin-cli -regtest excessivelog 1 100 # this should trigger logging to resume and will log the source locations that were reset\r\n```\r\n\r\nExample output:\r\n```\r\n[*] Excessive logging detected from rpc/node.cpp:139 (RPCHelpMan excessivelog()): >1 MiB logged during the last hour.Suppressing logging to disk from this source location for up to one hour. Console logging unaffected. Last log entry.2025-06-11T16:32:41Z aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n[*] Excessive logging detected from rpc/node.cpp:142 (RPCHelpMan excessivelog()): >1 MiB logged during the last hour.Suppressing logging to disk from this source location for up to one hour. Console logging unaffected. Last log entry.2025-06-11T16:33:04Z aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\nRestarting logging from rpc/node.cpp:139 (RPCHelpMan excessivelog()): (1 MiB) were dropped during the last hour.\r\nRestarting logging from rpc/node.cpp:142 (RPCHelpMan excessivelog()): (0 MiB) were dropped during the last hour.\r\n```",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-2963542895",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "unlabeled",
      "id": 18099349815,
      "node_id": "UNLE_lADOABII5864B5OdzwAAAAQ2zik3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18099349815",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-11T17:54:14Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18124020366,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAAQ4RpqO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18124020366",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "created_at": "2025-06-12T23:17:29Z"
    },
    {
      "event": "reviewed",
      "id": 2924083057,
      "node_id": "PRR_kwDOABII586uSfdx",
      "url": null,
      "actor": null,
      "commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-13T09:40:08Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2924083057",
      "submitted_at": "2025-06-13T09:40:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "reviewed",
      "id": 2942493812,
      "node_id": "PRR_kwDOABII586vYuR0",
      "url": null,
      "actor": null,
      "commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-19T12:28:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK b7d9c669cadf666f595a3e20ee3726a9ede88acd modulo [missing release notes](https://github.com/bitcoin/bitcoin/pull/32604/files#r2131883418)\r\n\r\nThanks for quickly addressing my copious amounts of comments, it's been fun reviewing this. I've left a few (final?) nits, but none are blocking. Would prefer to squash the last 2 test commits into the 2 commits where the relevant functionality was introduced, but either is fine.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2942493812",
      "submitted_at": "2025-06-19T12:28:52Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "review_requested",
      "id": 18229614984,
      "node_id": "RRE_lADOABII5864B5OdzwAAAAQ-kdmI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18229614984",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-19T12:28:56Z",
      "requested_reviewer": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18229615452,
      "node_id": "RRE_lADOABII5864B5OdzwAAAAQ-kdtc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18229615452",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-19T12:28:58Z",
      "requested_reviewer": {
        "login": "janb84",
        "id": 608446,
        "node_id": "MDQ6VXNlcjYwODQ0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/608446?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janb84",
        "html_url": "https://github.com/janb84",
        "followers_url": "https://api.github.com/users/janb84/followers",
        "following_url": "https://api.github.com/users/janb84/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/janb84/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/janb84/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/janb84/subscriptions",
        "organizations_url": "https://api.github.com/users/janb84/orgs",
        "repos_url": "https://api.github.com/users/janb84/repos",
        "events_url": "https://api.github.com/users/janb84/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/janb84/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18229615606,
      "node_id": "RRE_lADOABII5864B5OdzwAAAAQ-kdv2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18229615606",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-19T12:28:59Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18280747381,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAARBnhF1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18280747381",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "created_at": "2025-06-23T20:28:39Z"
    },
    {
      "event": "reviewed",
      "id": 2952512677,
      "node_id": "PRR_kwDOABII586v-8Sl",
      "url": null,
      "actor": null,
      "commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-24T10:43:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Can you please update the PR descripton now that there's no `UNCONDITIONAL_ALWAYS category`?\r\n\r\nI'm mostly ok with the change, I'm testing if it introduces any slowdown and would prefer making the tests a bit more typesafe and compact (and the failure seems related to the change) and some of the new classes could use a more descriptive naming in my opinion.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2952512677",
      "submitted_at": "2025-06-24T09:49:29Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "reviewed",
      "id": 2957730107,
      "node_id": "PRR_kwDOABII586wS2E7",
      "url": null,
      "actor": null,
      "commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-25T11:10:30Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 2ac8696b53e455dd27c8341828404a23b5cb68a9\r\n\r\nI think the commit order needs to change, so that 3c30ee9107fd0e916f9784b091a4d02f3a73ce46 comes before the tests that make use of the change?\r\n\r\nnit: I'd also suggest to squash b44d31455ad46ca3ed95690dfc0a913445b9c1c9 and 5fe08e01384c4a4c8525060d365fa38c312758f0 into one commit, so there is no intermediate state between the commits where the validation logs are rate limited. ",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2957730107",
      "submitted_at": "2025-06-25T11:10:29Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "review_requested",
      "id": 18314483547,
      "node_id": "RRE_lADOABII5864B5OdzwAAAARDoNdb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18314483547",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-25T11:10:35Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18314484018,
      "node_id": "RRE_lADOABII5864B5OdzwAAAARDoNky",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18314484018",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-25T11:10:37Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2958036547,
      "node_id": "PRR_kwDOABII586wUA5D",
      "url": null,
      "actor": null,
      "commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-27T16:33:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "This [thread](https://github.com/bitcoin/bitcoin/pull/32604/files#r2164992810) nerdsniped me into reimplementing this PR with a different approach, leaving the scheduled resetting to `CScheduler`. This feels like a much more natural fit to me, and allows a couple of other improvements. See branch [here](https://github.com/stickies-v/bitcoin/commits/2025-06/schedule-ratelimit-reset/), or diff [here](https://github.com/Crypt-iQ/bitcoin/compare/2ac8696b53e455dd27c8341828404a23b5cb68a9..9fb36ba46bccad079b4aea6062f7d187b7ef7775).\r\n\r\nEither way, I'll do a full re-review soon. I think the PR achieves its (important) stated goals, and while I think my suggested improvement is worthwhile, it isn't necessary or blocking. Making progress is more important than getting it perfectly right here.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2958036547",
      "submitted_at": "2025-06-27T16:33:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "review_requested",
      "id": 18360990103,
      "node_id": "RRE_lADOABII5864B5OdzwAAAARGZnmX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18360990103",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-06-27T16:33:46Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2971317445,
      "node_id": "PRR_kwDOABII586xGrTF",
      "url": null,
      "actor": null,
      "commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-06-30T14:36:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 2ac8696b53e455dd27c8341828404a23b5cb68a9\r\n\r\nI still would prefer the approach I suggested [here](https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2172385738) (and am happy to re-review), but I think the PR is fine as is now too.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2971317445",
      "submitted_at": "2025-06-30T14:36:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "milestoned",
      "id": 18432643545,
      "node_id": "MIE_lADOABII5864B5OdzwAAAARKq9HZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18432643545",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-02T13:47:19Z",
      "milestone": {
        "title": "30.0"
      }
    },
    {
      "event": "commented",
      "id": 3027954533,
      "node_id": "IC_kwDOABII5860eutl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3027954533",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-02T13:47:29Z",
      "updated_at": "2025-07-02T13:47:29Z",
      "author_association": "MEMBER",
      "body": "Added this to `30.0`.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3027954533",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18440111593,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAARLHcXp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18440111593",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "34fc54d5476af464407c8de64c58897a35dce5cb",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/34fc54d5476af464407c8de64c58897a35dce5cb",
      "created_at": "2025-07-02T21:32:00Z"
    },
    {
      "event": "commented",
      "id": 3029466719,
      "node_id": "IC_kwDOABII5860kf5f",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3029466719",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-02T22:15:44Z",
      "updated_at": "2025-07-02T22:15:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "The latest push 34fc54d5476af464407c8de64c58897a35dce5cb should address the most pressing comments. IMO there is still a bit of cleanup to be done in the tests, but I would like to leave that for a follow-up. I'm going to test this branch more, so I've updated the branch mentioned in OP that can trigger the rate limiting logic: https://github.com/Crypt-iQ/bitcoin/tree/log_ratelimiting_05192025_rpc\r\n\r\nWindows CI failure is unrelated and is addressed by https://github.com/bitcoin/bitcoin/pull/32859",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3029466719",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "labeled",
      "id": 18441601766,
      "node_id": "LE_lADOABII5864B5OdzwAAAARLNILm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18441601766",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-03T00:09:08Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3029762627,
      "node_id": "IC_kwDOABII5860loJD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3029762627",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-03T00:09:09Z",
      "updated_at": "2025-07-03T00:09:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Task `tidy`: https://github.com/bitcoin/bitcoin/runs/45248600923</sub>\n<sub>LLM reason (✨ experimental): Clang-tidy detected a recursive call chain in logging.cpp, leading to a function within a recursive call being treated as an error.</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3029762627",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "reviewed",
      "id": 2982672891,
      "node_id": "PRR_kwDOABII586xx_n7",
      "url": null,
      "actor": null,
      "commit_id": "34fc54d5476af464407c8de64c58897a35dce5cb",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-03T11:30:53Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2982672891",
      "submitted_at": "2025-07-03T11:30:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18452342061,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAARL2GUt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18452342061",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "created_at": "2025-07-03T12:58:38Z"
    },
    {
      "event": "unlabeled",
      "id": 18456351998,
      "node_id": "UNLE_lADOABII5864B5OdzwAAAARMFZT-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18456351998",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-03T16:47:21Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2986225449,
      "node_id": "PRR_kwDOABII586x_i8p",
      "url": null,
      "actor": null,
      "commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-04T09:13:37Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2986225449",
      "submitted_at": "2025-07-04T09:13:37Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "review_requested",
      "id": 18467722399,
      "node_id": "RRE_lADOABII5864B5OdzwAAAARMwxSf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18467722399",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-04T09:13:42Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2983245277,
      "node_id": "PRR_kwDOABII586x0LXd",
      "url": null,
      "actor": null,
      "commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-04T13:12:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff\r\n\r\nKeeping nits to a minimum because I've already been quite loud on this PR and I want to make sure we get the improvements merged soon. Left a few nits/test comments that can be done in a follow-up (although I'd be happy to quickly re-ACK here).",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2983245277",
      "submitted_at": "2025-07-04T13:12:47Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "commented",
      "id": 3036620662,
      "node_id": "IC_kwDOABII5860_yd2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3036620662",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-04T15:06:28Z",
      "updated_at": "2025-07-04T15:06:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Left a few nits/test comments that can be done in a follow-up\r\n\r\nI will make a follow-up PR post-merge to address the comments (which are all reasonable, just want to limit re-review)",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3036620662",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "reviewed",
      "id": 2991145098,
      "node_id": "PRR_kwDOABII586ySUCK",
      "url": null,
      "actor": null,
      "commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-06T22:10:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "We're getting closer, but the PR is not ready yet. I went over the code multiple times, left nits and comments and questions all over, regardless of the severity. I hope you can untangle the different directions, I know that so many comments can be overwhelming, I hope you take it the way that I meant them.\r\n\r\nMy main concerns are that the code doesn't seem finished yet, it still contains commented out code, typos, redundant comments, dangerous recursion, prefixes for non-dropped log lines, duplicate state management - and I'm not even entirely sure we should be restricting logs per line in the first place.\r\nAlso, having so many remaining inconsistencies and mixed styles and undocumented decisions makes it harder to find code smells that would help us catch mistakes (e.g. like the ones I mentioned above).",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2991145098",
      "submitted_at": "2025-07-06T22:10:40Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "review_requested",
      "id": 18494096561,
      "node_id": "RRE_lADOABII5864B5OdzwAAAAROVYSx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18494096561",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-06T22:10:45Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2993531256,
      "node_id": "PRR_kwDOABII586ybal4",
      "url": null,
      "actor": null,
      "commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-07T12:50:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "> My main concerns are that the code doesn't seem finished yet, it still contains commented out code, typos, redundant comments, dangerous recursion, prefixes for non-dropped log lines, duplicate state management - and I'm not even entirely sure we should be restricting logs per line in the first place.\r\n\r\nI've responded to most of your concerns in-line. I think you've left some excellent suggestions for a follow-up, but I've not seen anything that imo warrants not merging this PR in this current shape. I understand that you'd like to see improvements, and I'd be happy to review the follow-up (as well as re-review here if the author decides to address anything), but without blockers I think it's absolutely fair for the author to decide that these can be done in a follow-up. I'd prefer not having a third version of this PR.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2993531256",
      "submitted_at": "2025-07-07T12:50:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18508299536,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAARPLj0Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18508299536",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "created_at": "2025-07-07T15:43:54Z"
    },
    {
      "event": "reviewed",
      "id": 2994424840,
      "node_id": "PRR_kwDOABII586ye0wI",
      "url": null,
      "actor": null,
      "commit_id": "f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-07T15:49:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK f47e2ea9137c3a832e07d6dd845c55d35d533fa9\r\n\r\nNo changes since 6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff except commit message and release notes improvements, and removing a commented-out test line.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2994424840",
      "submitted_at": "2025-07-07T15:49:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "review_requested",
      "id": 18508406230,
      "node_id": "RRE_lADOABII5864B5OdzwAAAARPL93W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18508406230",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-07T15:49:40Z",
      "requested_reviewer": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 3045985477,
      "node_id": "IC_kwDOABII5861jgzF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3045985477",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-07T17:19:56Z",
      "updated_at": "2025-07-07T17:19:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "The latest push f47e2ea9137c3a832e07d6dd845c55d35d533fa9 has a few (minor) changes:\r\n- removing the comment in `logging_filesize_rate_limit`\r\n- documents restart behavior in the commit message of 6e47dad25c5a167cd171e5c11d51a7bee7c8d3c6\r\n- fixes the typo of `-logsourcelocations` in the release notes\r\n- makes the release notes more clear wrt. `LogPrintLevel`\r\n\r\n> We're getting closer, but the PR is not ready yet. I went over the code multiple times, left nits and comments and questions all over, regardless of the severity.\r\n\r\nI have responded to some of the comments that were about behavior changes. I hope this isn't taken as lip-service to get the PR merged, but I will make a follow-up PR post-merge to address the style and test comments (I have a list of the comments that need to be addressed). I think the most pressing comments are about behavior changes and I have attempted to address those. I think this behavior change is overdue for the codebase and it has went through iterations across several previous PRs of striking a balance between getting this mitigation shipped into production and some other less-pressing issues.\r\n\r\n> I know that so many comments can be overwhelming, I hope you take it the way that I meant them.\r\n\r\nI don't take it personally, review is a scarce resource and more review is better than less review. As a newcomer, I'm realizing the (appropriate) high bar for review in this project. At this point, though, I think this PR is finished as far as behavior goes and I think it is reasonable to leave the non-behavior changes to a follow-up PR.",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3045985477",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "reviewed",
      "id": 2995010190,
      "node_id": "PRR_kwDOABII586yhDqO",
      "url": null,
      "actor": null,
      "commit_id": "f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-07T19:07:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "While there are still more nits left than I'm comfortable with, I understand wanting to have some progress - and the current PR is indeed an improvement.\r\n\r\nLightly tested code review ACK f47e2ea9137c3a832e07d6dd845c55d35d533fa9\r\n\r\nI'm looking forward to ironing out the wrinkles in follow-up PRs.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2995010190",
      "submitted_at": "2025-07-07T19:07:42Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "reviewed",
      "id": 2997492533,
      "node_id": "PRR_kwDOABII586yqhs1",
      "url": null,
      "actor": null,
      "commit_id": "f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-08T12:46:46Z",
      "author_association": "MEMBER",
      "body": "Code review ACK f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2997492533",
      "submitted_at": "2025-07-08T12:46:46Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "reviewed",
      "id": 2999048711,
      "node_id": "PRR_kwDOABII586ywdoH",
      "url": null,
      "actor": null,
      "commit_id": "f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-08T20:40:27Z",
      "author_association": "MEMBER",
      "body": "lightly reviewed ACK f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-2999048711",
      "submitted_at": "2025-07-08T20:40:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "reviewed",
      "id": 3000242855,
      "node_id": "PRR_kwDOABII586y1BKn",
      "url": null,
      "actor": null,
      "commit_id": "f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-09T10:11:07Z",
      "author_association": "MEMBER",
      "body": "left some style nits, which are trivial to ignore, or follow-up with. Nothing blocking.\r\n\r\nreview ACK f47e2ea9137c3a832e07d6dd845c55d35d533fa9 🌬\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: review ACK f47e2ea9137c3a832e07d6dd845c55d35d533fa9 🌬\r\n+pM3Ddrk7WibLtn6aVjOQrHL+AGn6QroR8oMDjJ+OI61/kG1FDIzwCo6dTnDvuZcMfHPBic+N1tQI2C4dPYwCg==\r\n```\r\n\r\n</details>\r\n\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-3000242855",
      "submitted_at": "2025-07-09T10:11:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGRmNzk3MmE2Y2ZkOTE5Yjk3MmJjYmJhMDdkZTg1Zjc3OTc4OTg1Mjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df7972a6cfd919b972bcbba07de85f7797898529",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/df7972a6cfd919b972bcbba07de85f7797898529",
      "tree": {
        "sha": "89fbacce61309011c00080c3a723c85c8f076be6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89fbacce61309011c00080c3a723c85c8f076be6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 89fbacce61309011c00080c3a723c85c8f076be6\nparent b7e9dc8e468b9a6714fea59432b3c33a723e2bdf\nauthor Eugene Siegel <elzeigel@gmail.com> 1749145669 -0400\ncommitter Eugene Siegel <elzeigel@gmail.com> 1752066779 -0400\n\ntest: Mark ~DebugLogHelper as noexcept(false)\n\nWe mark ~DebugLogHelper as noexcept(false) to be able to catch the\nexception it throws. This lets us use it in test in combination with\nBOOST_CHECK_THROW and BOOST_CHECK_NO_THROW to check that certain log\nmessages are (not) logged.\n\nCo-Authored-By: Niklas Gogge <n.goeggi@gmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEfoHva5mJqcyTiEgDEYdZ6DQ5qbEFAmhuatsACgkQEYdZ6DQ5\nqbGtVwgAizmS/xFcYsMq04Z66f34DtgksqGVMRC8ulH1uA4dRBtGXdmSLM/tMQbX\n1FFglwRzIzYjihQiq37Pt3w41aRTQOPakJjICCF5R3L2ZJk48KXPJ+5lrf2nAc8V\ncziyO4a2FGLCeTZr3GnOZGP4NvpOMbYEvjC+n9qOHawWYSSeYjtnsEMmQCZwGACu\nF36vjZjeID5AmUZSRikxr19tss8pVFI6/EUSJ44C00OTLa7wWbmf8giVdKYuJ6HE\ntFLC2irlYvjRfLaVl2KkK0T84wdNxbwdRnYZApis1bYDiEpO6V4aO/CsazaSJ1BW\n2a/tDU1CV3BHA6+fCbjpkU3t1x2qQw==\n=HY4y\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7e9dc8e468b9a6714fea59432b3c33a723e2bdf",
          "sha": "b7e9dc8e468b9a6714fea59432b3c33a723e2bdf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b7e9dc8e468b9a6714fea59432b3c33a723e2bdf"
        }
      ],
      "message": "test: Mark ~DebugLogHelper as noexcept(false)\n\nWe mark ~DebugLogHelper as noexcept(false) to be able to catch the\nexception it throws. This lets us use it in test in combination with\nBOOST_CHECK_THROW and BOOST_CHECK_NO_THROW to check that certain log\nmessages are (not) logged.\n\nCo-Authored-By: Niklas Gogge <n.goeggi@gmail.com>",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-09T13:12:59Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-06-05T17:47:49Z"
      },
      "sha": "df7972a6cfd919b972bcbba07de85f7797898529"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFmYjllMzllYzU1NTJlNTk4YTVmZWJhYTgxODIwZDU1MDliN2M1ZDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afb9e39ec5552e598a5febaa81820d5509b7c5d2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/afb9e39ec5552e598a5febaa81820d5509b7c5d2",
      "tree": {
        "sha": "c6f6ba96e1d76b0b7de968d4ffa3b4cd896ac71a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6f6ba96e1d76b0b7de968d4ffa3b4cd896ac71a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c6f6ba96e1d76b0b7de968d4ffa3b4cd896ac71a\nparent df7972a6cfd919b972bcbba07de85f7797898529\nauthor Eugene Siegel <elzeigel@gmail.com> 1749140368 -0400\ncommitter Eugene Siegel <elzeigel@gmail.com> 1752066779 -0400\n\nlog: introduce LogRateLimiter, LogLimitStats, Status\n\nLogRateLimiter will be used to keep track of source locations and our\ncurrent time-based logging window. It contains an unordered_map and a\nm_suppressions_active bool to track source locations. The map is keyed\nby std::source_location, so a custom Hash function (SourceLocationHasher)\nand custom KeyEqual function (SourceLocationEqual) is provided.\nSourceLocationHasher uses CSipHasher(0,0) under the hood to get a\nuniform distribution.\n\nA public Reset method is provided so that a scheduler (e.g. the\n\"b-scheduler\" thread) can periodically reset LogRateLimiter's state when\nthe time window has elapsed.\n\nThe LogRateLimiter::Consume method checks if we have enough available\nbytes in our rate limiting budget to log an additional string. It\nreturns a Status enum that denotes the rate limiting status and can\nbe used by the caller to emit a warning, skip logging, etc.\n\nThe Status enum has three states:\n- UNSUPPRESSED     (logging was successful)\n- NEWLY_SUPPRESSED (logging was succcesful, next log will be suppressed)\n- STILL_SUPPRESSED (logging was unsuccessful)\n\nLogLimitStats counts the available bytes left for logging per source\nlocation for the current logging window. It does not track actual source\nlocations; it is used as a value in m_source_locations.\n\nAlso exposes a SuppressionsActive() method so the logger can use\nthat in a later commit to prefix [*] to logs whenenever suppressions\nare active.\n\nCo-Authored-By: Niklas Gogge <n.goeggi@gmail.com>\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEfoHva5mJqcyTiEgDEYdZ6DQ5qbEFAmhuatsACgkQEYdZ6DQ5\nqbHkMAf/VccIZLg8a55NFpKH/FIHtiYNEqOfGlnJv6TiYLM2Qii7D6Sl2PtUFrZN\nI/RgZ9YDh4iLP3cHFsI1Zqu6BrzahFH9BM4uelQSsaB+Z/xG6lHSx6VJYCofYPMr\nyKszVf1qhI7NEOaPsPTFvphBF1Ax65zl/7cIfMQGjsa1RV5yqMoU6ivvOlAKAUG1\nJEibhhH17OEcMcXoYHVsUlysqIQgrkokk/Pg5x2zZp8Pv7y04/dxDPqgrZdxqfDt\nU2bx18zVyK4mTUNma43AeIAH6McXzecrF0QB2NplQIkSfkC5++l+nVfNV95cMH9N\ngTUT4+0hE4EJuxIqUU/zeRYLK2oW3w==\n=A6pB\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df7972a6cfd919b972bcbba07de85f7797898529",
          "sha": "df7972a6cfd919b972bcbba07de85f7797898529",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/df7972a6cfd919b972bcbba07de85f7797898529"
        }
      ],
      "message": "log: introduce LogRateLimiter, LogLimitStats, Status\n\nLogRateLimiter will be used to keep track of source locations and our\ncurrent time-based logging window. It contains an unordered_map and a\nm_suppressions_active bool to track source locations. The map is keyed\nby std::source_location, so a custom Hash function (SourceLocationHasher)\nand custom KeyEqual function (SourceLocationEqual) is provided.\nSourceLocationHasher uses CSipHasher(0,0) under the hood to get a\nuniform distribution.\n\nA public Reset method is provided so that a scheduler (e.g. the\n\"b-scheduler\" thread) can periodically reset LogRateLimiter's state when\nthe time window has elapsed.\n\nThe LogRateLimiter::Consume method checks if we have enough available\nbytes in our rate limiting budget to log an additional string. It\nreturns a Status enum that denotes the rate limiting status and can\nbe used by the caller to emit a warning, skip logging, etc.\n\nThe Status enum has three states:\n- UNSUPPRESSED     (logging was successful)\n- NEWLY_SUPPRESSED (logging was succcesful, next log will be suppressed)\n- STILL_SUPPRESSED (logging was unsuccessful)\n\nLogLimitStats counts the available bytes left for logging per source\nlocation for the current logging window. It does not track actual source\nlocations; it is used as a value in m_source_locations.\n\nAlso exposes a SuppressionsActive() method so the logger can use\nthat in a later commit to prefix [*] to logs whenenever suppressions\nare active.\n\nCo-Authored-By: Niklas Gogge <n.goeggi@gmail.com>\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-09T13:12:59Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-06-05T16:19:28Z"
      },
      "sha": "afb9e39ec5552e598a5febaa81820d5509b7c5d2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE2YTM1Y2MwYzIzZDBkNTI5YmZlYjJmNDBkODNkNjFmMTVjYTdiNDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6a35cc0c23d0d529bfeb2f40d83d61f15ca7b40",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a6a35cc0c23d0d529bfeb2f40d83d61f15ca7b40",
      "tree": {
        "sha": "7f62372649b881fc400d783b8956d9362f4ffad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f62372649b881fc400d783b8956d9362f4ffad8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7f62372649b881fc400d783b8956d9362f4ffad8\nparent afb9e39ec5552e598a5febaa81820d5509b7c5d2\nauthor Eugene Siegel <elzeigel@gmail.com> 1749145047 -0400\ncommitter Eugene Siegel <elzeigel@gmail.com> 1752066779 -0400\n\nlog: use std::source_location in place of __func__, __FILE__, __LINE__\n\nThe std::source_location conveniently stores the file name, line number,\nand function name of a source code location. We switch to using it instead\nof the __func__ identifier and the __FILE__ and __LINE__ macros.\n\nBufferedLog is changed to have a std::source_location member, replacing the\nsource_file, source_line, and logging_function members. As a result,\nMemUsage no longer explicitly counts source_file or logging_function as the\nstd::source_location memory usage is included in the MallocUsage call.\n\nThis also changes the behavior of -logsourcelocations as std::source_location\nincludes the entire function signature. Because of this, the functional test\nfeature_config_args.py must be changed to no longer include the function\nsignature as the function signature can differ across platforms.\n\nCo-Authored-By: Niklas Gogge <n.goeggi@gmail.com>\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEfoHva5mJqcyTiEgDEYdZ6DQ5qbEFAmhuatsACgkQEYdZ6DQ5\nqbFtEwf9Fza91CUFRLERPhVpphIHmoKUuPWMGcAoUGgew6EN47WPofriRNlNaeQ3\n5PTKG6inHAP07xgDXYVCibxRuqPfrJ/SuC9pFaBbvEfKkxZHOJZGicX5yme8RwUq\nWhcOo+FkStVbJDB+6t+ah8CPPKFiIok0/hUP1DgKawdsYuHP+bsY8HvdO+QlGw7o\n0DIMMpb+/f1fFAUO0Xtm5GeLXK5GhKyKeYzLWsKZTY2iaLDwlhTanyPHQQExeG5X\nPF+HysBZ4Eg9uefMHdKZZUKkz/5Xk4gjmjzC9KrTYa+GBB/vxeCaLn0srOpNdU5J\nC1N3amLfxzE0BTSL0Lnswjck77oORw==\n=Eo97\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afb9e39ec5552e598a5febaa81820d5509b7c5d2",
          "sha": "afb9e39ec5552e598a5febaa81820d5509b7c5d2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/afb9e39ec5552e598a5febaa81820d5509b7c5d2"
        }
      ],
      "message": "log: use std::source_location in place of __func__, __FILE__, __LINE__\n\nThe std::source_location conveniently stores the file name, line number,\nand function name of a source code location. We switch to using it instead\nof the __func__ identifier and the __FILE__ and __LINE__ macros.\n\nBufferedLog is changed to have a std::source_location member, replacing the\nsource_file, source_line, and logging_function members. As a result,\nMemUsage no longer explicitly counts source_file or logging_function as the\nstd::source_location memory usage is included in the MallocUsage call.\n\nThis also changes the behavior of -logsourcelocations as std::source_location\nincludes the entire function signature. Because of this, the functional test\nfeature_config_args.py must be changed to no longer include the function\nsignature as the function signature can differ across platforms.\n\nCo-Authored-By: Niklas Gogge <n.goeggi@gmail.com>\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-09T13:12:59Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-06-05T17:37:27Z"
      },
      "sha": "a6a35cc0c23d0d529bfeb2f40d83d61f15ca7b40"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ1NDE0MDlhNjRjNjBkMTI3ZmY5MTJkYWQ5ZGVhOTQ5ZDQ1ZGJkOGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d541409a64c60d127ff912dad9dea949d45dbd8c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d541409a64c60d127ff912dad9dea949d45dbd8c",
      "tree": {
        "sha": "96aff43e1ab48cf378b1acf5996bd3ffcc8312be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96aff43e1ab48cf378b1acf5996bd3ffcc8312be"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 96aff43e1ab48cf378b1acf5996bd3ffcc8312be\nparent a6a35cc0c23d0d529bfeb2f40d83d61f15ca7b40\nauthor Eugene Siegel <elzeigel@gmail.com> 1749145323 -0400\ncommitter Eugene Siegel <elzeigel@gmail.com> 1752066780 -0400\n\nlog: Add rate limiting to LogPrintf, LogInfo, LogWarning, LogError, LogPrintLevel\n\nTo mitigate disk-filling attacks caused by unsafe usages of LogPrintf and\nfriends, we rate-limit them by passing a should_ratelimit bool that\neventually makes its way to LogPrintStr which may call\nLogRateLimiter::Consume. The rate limiting is accomplished by\nadding a LogRateLimiter member to BCLog::Logger which tracks source\ncode locations for the given logging window.\n\nEvery hour, a source location can log up to 1MiB of data. Source\nlocations that exceed the limit will have their logs suppressed for the\nrest of the window determined by m_limiter.\n\nThis change affects the public LogPrintLevel function if called with\na level >= BCLog::Level::Info.\n\nThe UpdateTipLog function has been changed to use the private LogPrintLevel_\nmacro with should_ratelimit set to false. This allows UpdateTipLog to log\nduring IBD without hitting the rate limit.\n\nNote that on restart, a source location that was rate limited before the\nrestart will be able to log until it hits the rate limit again.\n\nCo-Authored-By: Niklas Gogge <n.goeggi@gmail.com>\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEfoHva5mJqcyTiEgDEYdZ6DQ5qbEFAmhuatwACgkQEYdZ6DQ5\nqbGaowf/WJT9Hz+0tzeboJoHSIV6nUaatHeWFmIm/khbY9/x7b4jspwfRSnFYKRG\nrvbJBohIXMGgmEhF2wrThBRC5q6GnuiWCsSulOiVMkUMV2P+haXJ8oWu8usTS/p0\no3Yv6O0C/bqRhs6/f/5PqRNj/PRuqhPDllrbwNPs7E6pI0vsAFlm6KeUhc3BK5Ku\nSSs9uFSbUOk/BNES9IaLef0FJqeZ3ipGpGb6V+13qbyCcUCnxMY4tjUCdS7UlsP+\nKp6G+cwETcwEbgw8Lzh2RPd7a0upb3RWg0JSHKe7aunPbmpuwdtRZLqUMxsaSn6f\nOwnTyACaTFMph3w3txbnu6LABSb0mA==\n=d5hM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6a35cc0c23d0d529bfeb2f40d83d61f15ca7b40",
          "sha": "a6a35cc0c23d0d529bfeb2f40d83d61f15ca7b40",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a6a35cc0c23d0d529bfeb2f40d83d61f15ca7b40"
        }
      ],
      "message": "log: Add rate limiting to LogPrintf, LogInfo, LogWarning, LogError, LogPrintLevel\n\nTo mitigate disk-filling attacks caused by unsafe usages of LogPrintf and\nfriends, we rate-limit them by passing a should_ratelimit bool that\neventually makes its way to LogPrintStr which may call\nLogRateLimiter::Consume. The rate limiting is accomplished by\nadding a LogRateLimiter member to BCLog::Logger which tracks source\ncode locations for the given logging window.\n\nEvery hour, a source location can log up to 1MiB of data. Source\nlocations that exceed the limit will have their logs suppressed for the\nrest of the window determined by m_limiter.\n\nThis change affects the public LogPrintLevel function if called with\na level >= BCLog::Level::Info.\n\nThe UpdateTipLog function has been changed to use the private LogPrintLevel_\nmacro with should_ratelimit set to false. This allows UpdateTipLog to log\nduring IBD without hitting the rate limit.\n\nNote that on restart, a source location that was rate limited before the\nrestart will be able to log until it hits the rate limit again.\n\nCo-Authored-By: Niklas Gogge <n.goeggi@gmail.com>\nCo-Authored-By: stickies-v <stickies-v@protonmail.com>",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-09T13:13:00Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-06-05T17:42:03Z"
      },
      "sha": "d541409a64c60d127ff912dad9dea949d45dbd8c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRjNzcyY2JkODNlNTAyYTEzMzllODk5M2QxOTJlYTY0MTZlY2Q0NWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "tree": {
        "sha": "69f38f9e89bc9cf6566aac439464ceeeefd3d0cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69f38f9e89bc9cf6566aac439464ceeeefd3d0cb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 69f38f9e89bc9cf6566aac439464ceeeefd3d0cb\nparent d541409a64c60d127ff912dad9dea949d45dbd8c\nauthor Eugene Siegel <elzeigel@gmail.com> 1750708664 -0400\ncommitter Eugene Siegel <elzeigel@gmail.com> 1752066780 -0400\n\ndoc: add release notes for new rate limiting logging behavior\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEfoHva5mJqcyTiEgDEYdZ6DQ5qbEFAmhuatwACgkQEYdZ6DQ5\nqbEZmgf/Z0tLxvxmR+kB7oPigS5siQ3fsTAdWmf3BNohOZIPm9vdmJqxj4iDjnoh\nyeeChKgFwQXxLo2I08uN30GkTxZg2ikvPmnZ99Ke069Ewc24CfeFze9ac9ssicEF\nDE4lsjqMZjGBLo9+Sf+irjP6Ux+uW+3pfdB3jF/f+zUVxjff0MdbQSQtgwwDexWq\nrJIc12sXmfzb0UawfwMwluEOAnKL1EbplA0kiyANJk05iZ5Z/pnmmarWaMS2Spc/\naejqnQ47ClamglG06C+VNYWYB7MCy7KQ4OmhUFl7eGbLq6J1s37+3XK/Nuam/wUa\nKM4M+293O90CF7NS9q2omoSN3FBRDw==\n=qttb\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d541409a64c60d127ff912dad9dea949d45dbd8c",
          "sha": "d541409a64c60d127ff912dad9dea949d45dbd8c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d541409a64c60d127ff912dad9dea949d45dbd8c"
        }
      ],
      "message": "doc: add release notes for new rate limiting logging behavior",
      "committer": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-07-09T13:13:00Z"
      },
      "author": {
        "name": "Eugene Siegel",
        "email": "elzeigel@gmail.com",
        "date": "2025-06-23T19:57:44Z"
      },
      "sha": "4c772cbd83e502a1339e8993d192ea6416ecd45c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 18546256006,
      "node_id": "HRFPE_lADOABII5864B5OdzwAAAARRcWiG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18546256006",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "created_at": "2025-07-09T13:13:45Z"
    },
    {
      "event": "commented",
      "id": 3052667445,
      "node_id": "IC_kwDOABII58619AI1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3052667445",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-09T13:24:39Z",
      "updated_at": "2025-07-09T13:24:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "4c772cbd83e502a1339e8993d192ea6416ecd45c changes the release notes for clarity.",
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3052667445",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "commented",
      "id": 3052678805,
      "node_id": "IC_kwDOABII58619C6V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3052678805",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-09T13:27:45Z",
      "updated_at": "2025-07-09T13:27:45Z",
      "author_association": "MEMBER",
      "body": "Looks like the release notes were changed a bit. No other changes.\r\n\r\nre-ACK 4c772cbd83e502a1339e8993d192ea6416ecd45c 🕚\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\nuntrusted comment: signature from minisign secret key on empty file; verify via: minisign -Vm \"${path_to_any_empty_file}\" -P RWTRmVTMeKV5noAMqVlsMugDDCyyTSbA3Re5AkUrhvLVln0tSaFWglOw -x \"${path_to_this_whole_four_line_signature_blob}\"\r\nRUTRmVTMeKV5npGrKx1nqXCw5zeVHdtdYURB/KlyA/LMFgpNCs+SkW9a8N95d+U4AP1RJMi+krxU1A3Yux4bpwZNLvVBKy0wLgM=\r\ntrusted comment: re-ACK 4c772cbd83e502a1339e8993d192ea6416ecd45c 🕚\r\naX1k/VIO05nW5TdjiVUsNZRpBgwjspZr8wge8cxoZ0AX7CEH3A11ewaSn3WYsL7j8+H4P6G+OvfHD1xFYdGtDg==\r\n```\r\n\r\n</details>\r\n",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3052678805",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "review_requested",
      "id": 18546514651,
      "node_id": "RRE_lADOABII5864B5OdzwAAAARRdVrb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18546514651",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-09T13:27:52Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18546514905,
      "node_id": "RRE_lADOABII5864B5OdzwAAAARRdVvZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18546514905",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-09T13:27:53Z",
      "requested_reviewer": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18546515178,
      "node_id": "RRE_lADOABII5864B5OdzwAAAARRdVzq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18546515178",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-09T13:27:54Z",
      "requested_reviewer": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 18546515404,
      "node_id": "RRE_lADOABII5864B5OdzwAAAARRdV3M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18546515404",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-09T13:27:55Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 3002650511,
      "node_id": "PRR_kwDOABII586y-M-P",
      "url": null,
      "actor": null,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-07-09T18:26:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "re-ACK 4c772cbd83, no changes except release notes update",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-3002650511",
      "submitted_at": "2025-07-09T18:26:00Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "commented",
      "id": 3053633853,
      "node_id": "IC_kwDOABII5862AsE9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3053633853",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-09T18:39:52Z",
      "updated_at": "2025-07-09T18:39:52Z",
      "author_association": "MEMBER",
      "body": "reACK 4c772cb",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3053633853",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "merged",
      "id": 18551727951,
      "node_id": "ME_lADOABII5864B5OdzwAAAARRxOdP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18551727951",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2d59977601ea18f189991fa027364e69293c61a9",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d59977601ea18f189991fa027364e69293c61a9",
      "created_at": "2025-07-09T18:44:54Z"
    },
    {
      "event": "closed",
      "id": 18551727985,
      "node_id": "CE_lADOABII5864B5OdzwAAAARRxOdx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18551727985",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-09T18:44:54Z"
    },
    {
      "event": "commented",
      "id": 3054117201,
      "node_id": "IC_kwDOABII5862CiFR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3054117201",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-09T21:29:49Z",
      "updated_at": "2025-07-09T21:29:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Post-merge ACK https://github.com/bitcoin/bitcoin/commit/4c772cbd83e502a1339e8993d192ea6416ecd45c\r\n\r\nLightly reviewed code, tested by running IBD with `debug=all` and `-nodebug`, no messages suppressed, ran logging related benchmarks and measured performance impact is minimal.\r\n\t\r\nOne more really minor and feel-free-to-disregard nit for the follow-up pile:\r\n\r\nThe `LOG_TIME*` macros incorrectly report source locations from `logging/timer.h` rather than where the macros are invoked. There are currently only two places where these log unconditionally, when [flushing to anchors.dat](https://github.com/bitcoin/bitcoin/blob/2d59977601ea18f189991fa027364e69293c61a9/src/addrdb.cpp#L230) and when [writing UTXO snapshots](https://github.com/bitcoin/bitcoin/blob/2d59977601ea18f189991fa027364e69293c61a9/src/rpc/blockchain.cpp#L3182-L3184) so this is not a problem today AFAICT, but it is a bit of a footgun for future users of `LOG_TIME*`, one approach to solving it could look like: https://github.com/davidgumberg/bitcoin/commit/5fb07e80a422cf7b65da94dda2e1c0619c80eab3\r\n\r\n<details>\r\n\r\n<summary> \r\n\r\n#### Benchmark results\r\n\r\n</summary>\r\n\r\n```console\r\n$ ./build/bin/bench_bitcoin -filter=\"Log.*\" -min-time=10000\r\n```\r\n\r\n#### Branch (4c772cbd83e502a1339e8993d192ea6416ecd45c)\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|              901.02 |        1,109,855.48 |    0.7% |       14,673.87 |        3,198.96 |  4.587 |       3,030.13 |    0.1% |     10.83 | `LogWithDebug`\r\n|              903.56 |        1,106,735.32 |    0.4% |       15,262.89 |        3,206.54 |  4.760 |       3,119.37 |    0.1% |     10.81 | `LogWithThreadNames`\r\n|                2.61 |      383,423,939.51 |    0.1% |           70.00 |           11.18 |  6.263 |          16.00 |    0.0% |     10.99 | `LogWithoutDebug`\r\n|              817.98 |        1,222,522.02 |    0.6% |       13,723.71 |        2,866.27 |  4.788 |       2,793.33 |    0.1% |     10.77 | `LogWithoutThreadNames`\r\n|               28.37 |       35,246,387.38 |    0.7% |          440.00 |          121.69 |  3.616 |         107.00 |    0.0% |     11.04 | `LogWithoutWriteToFile`\r\n\r\n#### Pre-merge master (b7e9dc8e46)\r\n\r\n|               ns/op |                op/s |    err% |          ins/op |          cyc/op |    IPC |         bra/op |   miss% |     total | benchmark\r\n|--------------------:|--------------------:|--------:|----------------:|----------------:|-------:|---------------:|--------:|----------:|:----------\r\n|              883.86 |        1,131,404.74 |    1.1% |       14,673.94 |        3,136.38 |  4.679 |       3,030.14 |    0.1% |     10.83 | `LogWithDebug`\r\n|              897.16 |        1,114,625.39 |    0.7% |       15,262.84 |        3,189.17 |  4.786 |       3,119.36 |    0.1% |     10.84 | `LogWithThreadNames`\r\n|                2.60 |      384,716,694.70 |    0.3% |           70.00 |           11.15 |  6.279 |          16.00 |    0.0% |     11.01 | `LogWithoutDebug`\r\n|              816.35 |        1,224,958.62 |    0.2% |       13,723.80 |        2,852.35 |  4.811 |       2,793.35 |    0.1% |     10.72 | `LogWithoutThreadNames`\r\n|               28.28 |       35,357,376.60 |    0.4% |          440.00 |          121.30 |  3.627 |         107.00 |    0.0% |     11.01 | `LogWithoutWriteToFile`\r\n\r\n</details>\r\n",
      "user": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3054117201",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "referenced",
      "id": 18565311001,
      "node_id": "REFE_lADOABII5864B5OdzwAAAARSlCoZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18565311001",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7c7f92e38dd85dfe60eca2fd75b09323c479fcda",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/7c7f92e38dd85dfe60eca2fd75b09323c479fcda",
      "created_at": "2025-07-10T12:46:02Z"
    },
    {
      "event": "referenced",
      "id": 18565323536,
      "node_id": "REFE_lADOABII5864B5OdzwAAAARSlFsQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18565323536",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8d2ba746d74d5f0178fe6d5535c32de90e4e98d9",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/8d2ba746d74d5f0178fe6d5535c32de90e4e98d9",
      "created_at": "2025-07-10T12:46:48Z"
    },
    {
      "event": "referenced",
      "id": 18565369957,
      "node_id": "REFE_lADOABII5864B5OdzwAAAARSlRBl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18565369957",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8a618fba553394e00dfe2eb000e75c9a0640702b",
      "commit_url": "https://api.github.com/repos/l0rinc/bitcoin/commits/8a618fba553394e00dfe2eb000e75c9a0640702b",
      "created_at": "2025-07-10T12:49:13Z"
    },
    {
      "event": "referenced",
      "id": 18713119722,
      "node_id": "REFE_lADOABII5864B5OdzwAAAARbY4vq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18713119722",
      "actor": {
        "login": "stringintech",
        "id": 157148846,
        "node_id": "U_kgDOCV3mrg",
        "avatar_url": "https://avatars.githubusercontent.com/u/157148846?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stringintech",
        "html_url": "https://github.com/stringintech",
        "followers_url": "https://api.github.com/users/stringintech/followers",
        "following_url": "https://api.github.com/users/stringintech/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stringintech/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stringintech/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stringintech/subscriptions",
        "organizations_url": "https://api.github.com/users/stringintech/orgs",
        "repos_url": "https://api.github.com/users/stringintech/repos",
        "events_url": "https://api.github.com/users/stringintech/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stringintech/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f19e7819e9a21eeb539b6d3045876ab50e0ecef2",
      "commit_url": "https://api.github.com/repos/stringintech/go-bitcoinkernel/commits/f19e7819e9a21eeb539b6d3045876ab50e0ecef2",
      "created_at": "2025-07-19T20:44:04Z"
    },
    {
      "event": "referenced",
      "id": 18815600530,
      "node_id": "REFE_lADOABII5864B5OdzwAAAARhf0eS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18815600530",
      "actor": {
        "login": "alexanderwiederin",
        "id": 37130778,
        "node_id": "MDQ6VXNlcjM3MTMwNzc4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37130778?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alexanderwiederin",
        "html_url": "https://github.com/alexanderwiederin",
        "followers_url": "https://api.github.com/users/alexanderwiederin/followers",
        "following_url": "https://api.github.com/users/alexanderwiederin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/alexanderwiederin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/alexanderwiederin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/alexanderwiederin/subscriptions",
        "organizations_url": "https://api.github.com/users/alexanderwiederin/orgs",
        "repos_url": "https://api.github.com/users/alexanderwiederin/repos",
        "events_url": "https://api.github.com/users/alexanderwiederin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/alexanderwiederin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9997c3d9933604190fb2fce86f640f95764618d9",
      "commit_url": "https://api.github.com/repos/alexanderwiederin/rust-bitcoinkernel/commits/9997c3d9933604190fb2fce86f640f95764618d9",
      "created_at": "2025-07-25T14:10:39Z"
    },
    {
      "event": "referenced",
      "id": 18848599254,
      "node_id": "REFE_lADOABII5864B5OdzwAAAARjdszW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18848599254",
      "actor": {
        "login": "alexanderwiederin",
        "id": 37130778,
        "node_id": "MDQ6VXNlcjM3MTMwNzc4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37130778?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alexanderwiederin",
        "html_url": "https://github.com/alexanderwiederin",
        "followers_url": "https://api.github.com/users/alexanderwiederin/followers",
        "following_url": "https://api.github.com/users/alexanderwiederin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/alexanderwiederin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/alexanderwiederin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/alexanderwiederin/subscriptions",
        "organizations_url": "https://api.github.com/users/alexanderwiederin/orgs",
        "repos_url": "https://api.github.com/users/alexanderwiederin/repos",
        "events_url": "https://api.github.com/users/alexanderwiederin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/alexanderwiederin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8d6ebb9c4e48e66b2b099241a25dd020d4a44a34",
      "commit_url": "https://api.github.com/repos/alexanderwiederin/rust-bitcoinkernel/commits/8d6ebb9c4e48e66b2b099241a25dd020d4a44a34",
      "created_at": "2025-07-28T07:44:58Z"
    },
    {
      "event": "referenced",
      "id": 18848601990,
      "node_id": "REFE_lADOABII5864B5OdzwAAAARjdteG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/18848601990",
      "actor": {
        "login": "alexanderwiederin",
        "id": 37130778,
        "node_id": "MDQ6VXNlcjM3MTMwNzc4",
        "avatar_url": "https://avatars.githubusercontent.com/u/37130778?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alexanderwiederin",
        "html_url": "https://github.com/alexanderwiederin",
        "followers_url": "https://api.github.com/users/alexanderwiederin/followers",
        "following_url": "https://api.github.com/users/alexanderwiederin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/alexanderwiederin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/alexanderwiederin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/alexanderwiederin/subscriptions",
        "organizations_url": "https://api.github.com/users/alexanderwiederin/orgs",
        "repos_url": "https://api.github.com/users/alexanderwiederin/repos",
        "events_url": "https://api.github.com/users/alexanderwiederin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/alexanderwiederin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "533a4585b59dc147d445540fd742d7f6aff39359",
      "commit_url": "https://api.github.com/repos/alexanderwiederin/rust-bitcoinkernel/commits/533a4585b59dc147d445540fd742d7f6aff39359",
      "created_at": "2025-07-28T07:45:06Z"
    },
    {
      "event": "referenced",
      "id": 19017249228,
      "node_id": "REFE_lADOABII5864B5OdzwAAAARthDHM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19017249228",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7bc28668cc791d28fe824476d2c1f236c5a772d0",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/7bc28668cc791d28fe824476d2c1f236c5a772d0",
      "created_at": "2025-08-06T16:36:20Z"
    },
    {
      "event": "referenced",
      "id": 19061904875,
      "node_id": "REFE_lADOABII5864B5OdzwAAAARwLZXr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19061904875",
      "actor": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f1d25abcaa6a85fec08ea760036f2c7c02945ba8",
      "commit_url": "https://api.github.com/repos/Crypt-iQ/bitcoin/commits/f1d25abcaa6a85fec08ea760036f2c7c02945ba8",
      "created_at": "2025-08-08T20:49:15Z"
    },
    {
      "event": "referenced",
      "id": 19167877287,
      "node_id": "REFE_lADOABII5864B5OdzwAAAAR2fpin",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19167877287",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "578b512bdd88be0fc69ecb5e687ddda4d1d8dcd1",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/578b512bdd88be0fc69ecb5e687ddda4d1d8dcd1",
      "created_at": "2025-08-14T22:15:40Z"
    },
    {
      "event": "referenced",
      "id": 19243541657,
      "node_id": "REFE_lADOABII5864B5OdzwAAAAR7ASSZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19243541657",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4987c035318536a76f3f5dd00beb417d8fb4b24c",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/4987c035318536a76f3f5dd00beb417d8fb4b24c",
      "created_at": "2025-08-20T11:09:49Z"
    },
    {
      "event": "referenced",
      "id": 19243541718,
      "node_id": "REFE_lADOABII5864B5OdzwAAAAR7ASTW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19243541718",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "41262cc4d53389ddadc59573e4eb246e085268ce",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/41262cc4d53389ddadc59573e4eb246e085268ce",
      "created_at": "2025-08-20T11:09:49Z"
    },
    {
      "event": "referenced",
      "id": 19243541743,
      "node_id": "REFE_lADOABII5864B5OdzwAAAAR7ASTv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19243541743",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a0992a842ed098ebcd5f955b232b9abb154d6f6e",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/a0992a842ed098ebcd5f955b232b9abb154d6f6e",
      "created_at": "2025-08-20T11:09:49Z"
    },
    {
      "event": "referenced",
      "id": 19243541776,
      "node_id": "REFE_lADOABII5864B5OdzwAAAAR7ASUQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19243541776",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0b6b096421ac9d1c7b0542ea147562269e1c5bec",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/0b6b096421ac9d1c7b0542ea147562269e1c5bec",
      "created_at": "2025-08-20T11:09:49Z"
    },
    {
      "event": "referenced",
      "id": 19243541818,
      "node_id": "REFE_lADOABII5864B5OdzwAAAAR7ASU6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19243541818",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "24c793d06c93768be88e9f8d0bb62936e199f68c",
      "commit_url": "https://api.github.com/repos/fanquake/bitcoin/commits/24c793d06c93768be88e9f8d0bb62936e199f68c",
      "created_at": "2025-08-20T11:09:49Z"
    },
    {
      "event": "commented",
      "id": 3205733317,
      "node_id": "IC_kwDOABII586_E5vF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3205733317",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-20T11:18:54Z",
      "updated_at": "2025-08-20T11:19:04Z",
      "author_association": "MEMBER",
      "body": "Backported to 29.x in #33225.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#issuecomment-3205733317",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32604"
    },
    {
      "event": "referenced",
      "id": 19246631052,
      "node_id": "REFE_lADOABII5864B5OdzwAAAAR7MEiM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19246631052",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c5196bc9c44434b7ba02c994fddb807bc18b566a",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5196bc9c44434b7ba02c994fddb807bc18b566a",
      "created_at": "2025-08-20T13:54:40Z"
    },
    {
      "event": "referenced",
      "id": 19338049834,
      "node_id": "REFE_lADOABII5864B5OdzwAAAASAozkq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19338049834",
      "actor": {
        "login": "yuvicc",
        "id": 92994932,
        "node_id": "U_kgDOBYr9dA",
        "avatar_url": "https://avatars.githubusercontent.com/u/92994932?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yuvicc",
        "html_url": "https://github.com/yuvicc",
        "followers_url": "https://api.github.com/users/yuvicc/followers",
        "following_url": "https://api.github.com/users/yuvicc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/yuvicc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/yuvicc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/yuvicc/subscriptions",
        "organizations_url": "https://api.github.com/users/yuvicc/orgs",
        "repos_url": "https://api.github.com/users/yuvicc/repos",
        "events_url": "https://api.github.com/users/yuvicc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/yuvicc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "22f55cf11d141cd73cadf932e543eaabe0e67859",
      "commit_url": "https://api.github.com/repos/yuvicc/differential-bitcoin-kernel/commits/22f55cf11d141cd73cadf932e543eaabe0e67859",
      "created_at": "2025-08-26T07:55:05Z"
    },
    {
      "event": "reviewed",
      "id": 3176024720,
      "node_id": "PRR_kwDOABII5869TkqQ",
      "url": null,
      "actor": null,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-02T10:55:06Z",
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#pullrequestreview-3176024720",
      "submitted_at": "2025-09-02T10:55:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
    },
    {
      "event": "referenced",
      "id": 19508608971,
      "node_id": "REFE_lADOABII5864B5OdzwAAAASKzb_L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19508608971",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "351f9540f595edbacbc3b883fb21ae7be2663f2a",
      "commit_url": "https://api.github.com/repos/ajtowns/bitcoin/commits/351f9540f595edbacbc3b883fb21ae7be2663f2a",
      "created_at": "2025-09-04T15:59:18Z"
    },
    {
      "event": "referenced",
      "id": 19508609018,
      "node_id": "REFE_lADOABII5864B5OdzwAAAASKzb_6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19508609018",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "37b8c5000891460897257ea5c16494d70354186f",
      "commit_url": "https://api.github.com/repos/ajtowns/bitcoin/commits/37b8c5000891460897257ea5c16494d70354186f",
      "created_at": "2025-09-04T15:59:18Z"
    },
    {
      "event": "referenced",
      "id": 19508609060,
      "node_id": "REFE_lADOABII5864B5OdzwAAAASKzcAk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19508609060",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cd39d33270141bbe5ccb268931aefef7f6027aee",
      "commit_url": "https://api.github.com/repos/ajtowns/bitcoin/commits/cd39d33270141bbe5ccb268931aefef7f6027aee",
      "created_at": "2025-09-04T15:59:18Z"
    },
    {
      "event": "referenced",
      "id": 19508609109,
      "node_id": "REFE_lADOABII5864B5OdzwAAAASKzcBV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19508609109",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ed89ed035011c5d3b049f58eb976fc9f215f4494",
      "commit_url": "https://api.github.com/repos/ajtowns/bitcoin/commits/ed89ed035011c5d3b049f58eb976fc9f215f4494",
      "created_at": "2025-09-04T15:59:18Z"
    },
    {
      "event": "referenced",
      "id": 19508609153,
      "node_id": "REFE_lADOABII5864B5OdzwAAAASKzcCB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19508609153",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "df66856a3a02694cad98618866630219ff55b882",
      "commit_url": "https://api.github.com/repos/ajtowns/bitcoin/commits/df66856a3a02694cad98618866630219ff55b882",
      "created_at": "2025-09-04T15:59:19Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107350361",
      "pull_request_review_id": 2868443828,
      "id": 2107350361,
      "node_id": "PRRC_kwDOABII5859m51Z",
      "diff_hunk": "@@ -27,10 +31,29 @@ static const bool DEFAULT_LOGTIMESTAMPS = true;\n static const bool DEFAULT_LOGTHREADNAMES = false;\n static const bool DEFAULT_LOGSOURCELOCATIONS = false;\n static constexpr bool DEFAULT_LOGLEVELALWAYS = false;",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 26,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "0bc6ed61cfab6d97e74103efd41c46faf5941ff6",
      "in_reply_to_id": null,
      "user": {
        "login": "janb84",
        "id": 608446,
        "node_id": "MDQ6VXNlcjYwODQ0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/608446?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/janb84",
        "html_url": "https://github.com/janb84",
        "followers_url": "https://api.github.com/users/janb84/followers",
        "following_url": "https://api.github.com/users/janb84/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/janb84/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/janb84/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/janb84/subscriptions",
        "organizations_url": "https://api.github.com/users/janb84/orgs",
        "repos_url": "https://api.github.com/users/janb84/repos",
        "events_url": "https://api.github.com/users/janb84/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/janb84/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: would be nice to align the other initializations to the new C++ 11 {} style in a follow up PR, to keep the code base consistent. ",
      "created_at": "2025-05-26T13:22:15Z",
      "updated_at": "2025-05-26T13:41:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2107350361",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2107350361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2114308684",
      "pull_request_review_id": 2878876682,
      "id": 2114308684,
      "node_id": "PRRC_kwDOABII585-BcpM",
      "diff_hunk": "@@ -27,10 +31,29 @@ static const bool DEFAULT_LOGTIMESTAMPS = true;\n static const bool DEFAULT_LOGTHREADNAMES = false;\n static const bool DEFAULT_LOGSOURCELOCATIONS = false;\n static constexpr bool DEFAULT_LOGLEVELALWAYS = false;",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 26,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "0bc6ed61cfab6d97e74103efd41c46faf5941ff6",
      "in_reply_to_id": 2107350361,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I can do that in a follow-up",
      "created_at": "2025-05-29T16:23:26Z",
      "updated_at": "2025-05-29T16:23:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2114308684",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2114308684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115514944",
      "pull_request_review_id": 2880741415,
      "id": 2115514944,
      "node_id": "PRRC_kwDOABII585-GDJA",
      "diff_hunk": "@@ -39,39 +62,41 @@ struct LogCategory {\n namespace BCLog {\n     using CategoryMask = uint64_t;\n     enum LogFlags : CategoryMask {\n-        NONE        = CategoryMask{0},\n-        NET         = (CategoryMask{1} <<  0),\n-        TOR         = (CategoryMask{1} <<  1),\n-        MEMPOOL     = (CategoryMask{1} <<  2),\n-        HTTP        = (CategoryMask{1} <<  3),\n-        BENCH       = (CategoryMask{1} <<  4),\n-        ZMQ         = (CategoryMask{1} <<  5),\n-        WALLETDB    = (CategoryMask{1} <<  6),\n-        RPC         = (CategoryMask{1} <<  7),\n-        ESTIMATEFEE = (CategoryMask{1} <<  8),\n-        ADDRMAN     = (CategoryMask{1} <<  9),\n-        SELECTCOINS = (CategoryMask{1} << 10),\n-        REINDEX     = (CategoryMask{1} << 11),\n-        CMPCTBLOCK  = (CategoryMask{1} << 12),\n-        RAND        = (CategoryMask{1} << 13),\n-        PRUNE       = (CategoryMask{1} << 14),\n-        PROXY       = (CategoryMask{1} << 15),\n-        MEMPOOLREJ  = (CategoryMask{1} << 16),\n-        LIBEVENT    = (CategoryMask{1} << 17),\n-        COINDB      = (CategoryMask{1} << 18),\n-        QT          = (CategoryMask{1} << 19),\n-        LEVELDB     = (CategoryMask{1} << 20),\n-        VALIDATION  = (CategoryMask{1} << 21),\n-        I2P         = (CategoryMask{1} << 22),\n-        IPC         = (CategoryMask{1} << 23),\n+        NONE                       = CategoryMask{0},\n+        NET                        = (CategoryMask{1} <<  0),\n+        TOR                        = (CategoryMask{1} <<  1),\n+        MEMPOOL                    = (CategoryMask{1} <<  2),\n+        HTTP                       = (CategoryMask{1} <<  3),\n+        BENCH                      = (CategoryMask{1} <<  4),\n+        ZMQ                        = (CategoryMask{1} <<  5),\n+        WALLETDB                   = (CategoryMask{1} <<  6),\n+        RPC                        = (CategoryMask{1} <<  7),\n+        ESTIMATEFEE                = (CategoryMask{1} <<  8),\n+        ADDRMAN                    = (CategoryMask{1} <<  9),\n+        SELECTCOINS                = (CategoryMask{1} << 10),\n+        REINDEX                    = (CategoryMask{1} << 11),\n+        CMPCTBLOCK                 = (CategoryMask{1} << 12),\n+        RAND                       = (CategoryMask{1} << 13),\n+        PRUNE                      = (CategoryMask{1} << 14),\n+        PROXY                      = (CategoryMask{1} << 15),\n+        MEMPOOLREJ                 = (CategoryMask{1} << 16),\n+        LIBEVENT                   = (CategoryMask{1} << 17),\n+        COINDB                     = (CategoryMask{1} << 18),\n+        QT                         = (CategoryMask{1} << 19),\n+        LEVELDB                    = (CategoryMask{1} << 20),\n+        VALIDATION                 = (CategoryMask{1} << 21),\n+        I2P                        = (CategoryMask{1} << 22),\n+        IPC                        = (CategoryMask{1} << 23),\n #ifdef DEBUG_LOCKCONTENTION\n-        LOCK        = (CategoryMask{1} << 24),\n+        LOCK                       = (CategoryMask{1} << 24),\n #endif\n-        BLOCKSTORAGE = (CategoryMask{1} << 25),\n-        TXRECONCILIATION = (CategoryMask{1} << 26),\n-        SCAN        = (CategoryMask{1} << 27),\n-        TXPACKAGES  = (CategoryMask{1} << 28),\n-        ALL         = ~NONE,\n+        BLOCKSTORAGE               = (CategoryMask{1} << 25),\n+        TXRECONCILIATION           = (CategoryMask{1} << 26),\n+        SCAN                       = (CategoryMask{1} << 27),\n+        TXPACKAGES                 = (CategoryMask{1} << 28),\n+        UNCONDITIONAL_RATE_LIMITED = (CategoryMask{1} << 29),\n+        UNCONDITIONAL_ALWAYS       = (CategoryMask{1} << 30),",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 121,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I think a brief docstring on their suggested usage here would be helpful here",
      "created_at": "2025-05-30T09:34:19Z",
      "updated_at": "2025-05-30T10:21:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115514944",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115514944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 97,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115526293",
      "pull_request_review_id": 2880741415,
      "id": 2115526293,
      "node_id": "PRRC_kwDOABII585-GF6V",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there a good use case for disabling rate limiting? I can't think of one. Letting the user define the amount of rate limiting is an alternative, but even then, I'm not sure. If an attacker or bug is able to reach the sane default maximum, then is the user really going to get any benefit from being to inspect the additional volume of un-ratelimited logs? I'm not sure. If so, I think it would make sense to not have this as a configurable option.\r\n\r\n",
      "created_at": "2025-05-30T09:40:06Z",
      "updated_at": "2025-05-30T10:21:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115526293",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115526293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115570067",
      "pull_request_review_id": 2880741415,
      "id": 2115570067,
      "node_id": "PRRC_kwDOABII585-GQmT",
      "diff_hunk": "@@ -113,17 +181,17 @@ namespace BCLog {\n         std::atomic<Level> m_log_level{DEFAULT_LOG_LEVEL};\n \n         /** Log categories bitfield. */\n-        std::atomic<CategoryMask> m_categories{BCLog::NONE};\n+        std::atomic<CategoryMask> m_categories{DEFAULT_LOG_FLAGS};",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 200,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, I'm feeling uneasy about using `m_categories`, when rate limiting flags fundamentally don't represent a category. I can see how it reduces the diff, but I'm not sure that's worth it. I'll think about an alternative approach - have you considered any already?\r\n\r\nSince the user doesn't have to be able to configure any of this, and we only have a single `UNCONDITIONAL_ALWAYS` use case (and likely won't have (many) more in the future), I think adding an `is_conditional=True` arg to `LogPrintLevel` and a `LogInfoAlways` macro might be an alternative?",
      "created_at": "2025-05-30T10:03:02Z",
      "updated_at": "2025-05-30T10:21:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115570067",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115570067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115756875",
      "pull_request_review_id": 2881078755,
      "id": 2115756875,
      "node_id": "PRRC_kwDOABII585-G-NL",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's a good point, I can't think of any concrete use case to disable rate limiting here.",
      "created_at": "2025-05-30T11:33:52Z",
      "updated_at": "2025-05-30T11:33:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115756875",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115756875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115778728",
      "pull_request_review_id": 2881107790,
      "id": 2115778728,
      "node_id": "PRRC_kwDOABII585-HDio",
      "diff_hunk": "@@ -113,17 +181,17 @@ namespace BCLog {\n         std::atomic<Level> m_log_level{DEFAULT_LOG_LEVEL};\n \n         /** Log categories bitfield. */\n-        std::atomic<CategoryMask> m_categories{BCLog::NONE};\n+        std::atomic<CategoryMask> m_categories{DEFAULT_LOG_FLAGS};",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 200,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115570067,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven't considered alternative approaches, but I think adding a boolean is better than adding special-cased categories.",
      "created_at": "2025-05-30T11:44:09Z",
      "updated_at": "2025-05-30T11:44:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115778728",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115778728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115826232",
      "pull_request_review_id": 2881185484,
      "id": 2115826232,
      "node_id": "PRRC_kwDOABII585-HPI4",
      "diff_hunk": "@@ -364,33 +368,71 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::FormatLogStrAndRateLimit(std::string& str, BCLog::LogFlags category, BCLog::Level level, const std::source_location& source_loc, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime)",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 64,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it's unintuitive that this function returns `true` when the operation failed. It seems like the rate limiting can be carved out pretty much as-is into a separate `bool NeedsRateLimiting()` function? There are only 2 callsites of `FormatLogStrAndRateLimit`, and the first one (`StartLogging`) doesn't look like it needs rate limiting because we already have a max buffer size?\r\n\r\nedit: this would pair fairly well with my suggestion [here](https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115841360)",
      "created_at": "2025-05-30T12:19:40Z",
      "updated_at": "2025-05-30T12:56:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115826232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115826232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115841360",
      "pull_request_review_id": 2881185484,
      "id": 2115841360,
      "node_id": "PRRC_kwDOABII585-HS1Q",
      "diff_hunk": "@@ -81,16 +106,54 @@ namespace BCLog {\n         Error,\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n+    static constexpr LogFlags DEFAULT_LOG_FLAGS{UNCONDITIONAL_RATE_LIMITED | UNCONDITIONAL_ALWAYS};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n \n+    //! Fixed window rate limiter for logging.\n+    class LogRateLimiter\n+    {\n+    private:\n+        //! Timestamp of the last window reset.\n+        std::chrono::time_point<NodeClock> m_last_reset;",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 138,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not a big issue, but since we have quite a few log source locations, this class will be instantiated a fair amount of (`N`) times. An alternative approach would be to have a single `LogRateLimiter` instance that encapsulates most of the logic in 6b54362c19ca9baf9dfa9be9281f6faeda169420, and has a single `m_last_reset` member, spawning a minimal `SourceLocationCounter` struct for each source location, containing just the `m_available_bytes` and `m_dropped_bytes` members.\r\n\r\nThis:\r\n- reduces `N` `std::chrono::time_point<NodeClock>` instances to just 1\r\n- allows `LogRateLimiter` to completely clean up memory for log locations that haven't been triggered in the last hour\r\n- improves code encapsulation\r\n\r\nOverall, this shouldn't be a big change from what you have now, mostly just moving code around into a new class?\r\n",
      "created_at": "2025-05-30T12:30:24Z",
      "updated_at": "2025-05-30T12:52:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115841360",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115841360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115859316",
      "pull_request_review_id": 2881185484,
      "id": 2115859316,
      "node_id": "PRRC_kwDOABII585-HXN0",
      "diff_hunk": "@@ -113,17 +181,17 @@ namespace BCLog {\n         std::atomic<Level> m_log_level{DEFAULT_LOG_LEVEL};\n \n         /** Log categories bitfield. */\n-        std::atomic<CategoryMask> m_categories{BCLog::NONE};\n+        std::atomic<CategoryMask> m_categories{DEFAULT_LOG_FLAGS};",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 200,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115570067,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Or perhaps even better than a boolean is a `uint64_t rate_limit=DEFAULT_RATE_LIMIT` so we can do away with the distinction between ratelimited and non-ratelimited logging entirely? We could use rate_limit=0 as a synonym for non-ratelimited logging, but I think even `UpdateTipLog()` doesn't have to be exempt from rate limiting, we could still set a sane value that allows doing entire IBD in one hour, for example.\r\n\r\nThen `UpdateTipLog()` could just use:\r\n```\r\n    LogInfo(/*rate_limit=*/100, \"%s%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\",\r\n```",
      "created_at": "2025-05-30T12:43:09Z",
      "updated_at": "2025-05-30T12:56:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115859316",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115859316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115869345",
      "pull_request_review_id": 2881185484,
      "id": 2115869345,
      "node_id": "PRRC_kwDOABII585-HZqh",
      "diff_hunk": "@@ -364,33 +368,71 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::FormatLogStrAndRateLimit(std::string& str, BCLog::LogFlags category, BCLog::Level level, const std::source_location& source_loc, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime)\n {\n     if (!str.ends_with('\\n')) str.push_back('\\n');\n \n     str.insert(0, GetLogPrefix(category, level));\n \n     if (m_log_sourcelocations) {\n-        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_file, \"./\"), source_line, logging_function));\n+        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_loc.file_name(), \"./\"), source_loc.line(), logging_function));\n     }\n \n     if (m_log_threadnames) {\n         str.insert(0, strprintf(\"[%s] \", (threadname.empty() ? \"unknown\" : threadname)));\n     }\n \n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    if (category == UNCONDITIONAL_RATE_LIMITED && m_ratelimit) {\n+        was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+        is_ratelimited = !m_ratelimiters[source_loc].Consume(str.size());\n+\n+        if (!is_ratelimited && was_ratelimited) {\n+            // Logging will restart for this source location.\n+            m_suppressed_locations.erase(source_loc);\n+\n+            uint64_t dropped_bytes = m_ratelimiters[source_loc].GetDroppedBytes();\n+\n+            str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                    \"(%d MiB) were dropped during the last hour.\\n\",\n+                                    source_loc.file_name(), source_loc.line(), logging_function,\n+                                    dropped_bytes / (1024 * 1024)));\n+        } else if (is_ratelimited && !was_ratelimited) {",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 97,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: It would be nice if we could catch this in debug builds (ideally even at a fraction, say 20% of the limit), to help inform if our default limit needs to change.  `Assume()` is an option, but that would probably break unit tests in debug builds.\r\n\r\nnit, because 1MB is small enough that it should prevent issues even on devices with little disk size (unless an attacker finds multiple log vulnerabilities), and large enough that no single unconditional logging statement should ever hit that in the foreseeable future, so I think \"driving blind\" is acceptable here.",
      "created_at": "2025-05-30T12:49:40Z",
      "updated_at": "2025-05-30T12:52:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115869345",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115869345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 404,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115877367",
      "pull_request_review_id": 2881278602,
      "id": 2115877367,
      "node_id": "PRRC_kwDOABII585-Hbn3",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@dergoegge might remember why this was added?",
      "created_at": "2025-05-30T12:54:46Z",
      "updated_at": "2025-05-30T12:54:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115877367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115877367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115895206",
      "pull_request_review_id": 2881307488,
      "id": 2115895206,
      "node_id": "PRRC_kwDOABII585-Hf-m",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fwiw: I can't find any discussion about it in https://github.com/bitcoin/bitcoin/pull/21603, and the option was present from the first version of the PR (https://github.com/bitcoin/bitcoin/commit/4648b6d207139ec0ab2994f56c0a47f81cdf516a#diff-b1e19192258d83199d8adaa5ac31f067af98f63554bfdd679bd8e8073815e69d)",
      "created_at": "2025-05-30T13:05:58Z",
      "updated_at": "2025-05-30T13:05:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115895206",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2115895206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116212200",
      "pull_request_review_id": 2881821692,
      "id": 2116212200,
      "node_id": "PRRC_kwDOABII585-ItXo",
      "diff_hunk": "@@ -81,16 +106,54 @@ namespace BCLog {\n         Error,\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n+    static constexpr LogFlags DEFAULT_LOG_FLAGS{UNCONDITIONAL_RATE_LIMITED | UNCONDITIONAL_ALWAYS};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n \n+    //! Fixed window rate limiter for logging.\n+    class LogRateLimiter\n+    {\n+    private:\n+        //! Timestamp of the last window reset.\n+        std::chrono::time_point<NodeClock> m_last_reset;",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 138,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115841360,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yup I had thought about this and wasn't sure how to evaluate the overhead. I'll change it.",
      "created_at": "2025-05-30T16:18:02Z",
      "updated_at": "2025-05-30T16:18:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2116212200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116212200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116215143",
      "pull_request_review_id": 2881825924,
      "id": 2116215143,
      "node_id": "PRRC_kwDOABII585-IuFn",
      "diff_hunk": "@@ -364,33 +368,71 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::FormatLogStrAndRateLimit(std::string& str, BCLog::LogFlags category, BCLog::Level level, const std::source_location& source_loc, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime)",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 64,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115826232,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yup, this makes sense as well. Can change.",
      "created_at": "2025-05-30T16:20:08Z",
      "updated_at": "2025-05-30T16:20:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2116215143",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116215143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116217752",
      "pull_request_review_id": 2881829603,
      "id": 2116217752,
      "node_id": "PRRC_kwDOABII585-IuuY",
      "diff_hunk": "@@ -113,17 +181,17 @@ namespace BCLog {\n         std::atomic<Level> m_log_level{DEFAULT_LOG_LEVEL};\n \n         /** Log categories bitfield. */\n-        std::atomic<CategoryMask> m_categories{BCLog::NONE};\n+        std::atomic<CategoryMask> m_categories{DEFAULT_LOG_FLAGS};",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 200,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115570067,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think callers just need to be aware that they cannot set the rate limit very high in certain cases. Maybe this change and a comment will suffice?",
      "created_at": "2025-05-30T16:21:56Z",
      "updated_at": "2025-05-30T16:21:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2116217752",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2116217752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123243686",
      "pull_request_review_id": 2891468741,
      "id": 2123243686,
      "node_id": "PRRC_kwDOABII585-jiCm",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "When I’m benchmarking IBD, I don’t want any artificial size or rate limits.\r\nSince the attack only matters when peers can influence us, could we simply disable rate-limiting for all logs during IBD/reindexes/assumeutxo?\r\n\r\n------\r\n\r\nShould the docs explicitly state the 1 MiB-per-hour cap, or could we replace the boolean flag with a numeric \"MiB per hour\" parameter (retaining 0 and 1 as the current meanings)?",
      "created_at": "2025-06-03T09:22:24Z",
      "updated_at": "2025-06-03T10:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2123243686",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123243686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123314635",
      "pull_request_review_id": 2891468741,
      "id": 2123314635,
      "node_id": "PRRC_kwDOABII585-jzXL",
      "diff_hunk": "@@ -39,39 +62,41 @@ struct LogCategory {\n namespace BCLog {\n     using CategoryMask = uint64_t;\n     enum LogFlags : CategoryMask {\n-        NONE        = CategoryMask{0},\n-        NET         = (CategoryMask{1} <<  0),\n-        TOR         = (CategoryMask{1} <<  1),\n-        MEMPOOL     = (CategoryMask{1} <<  2),\n-        HTTP        = (CategoryMask{1} <<  3),\n-        BENCH       = (CategoryMask{1} <<  4),\n-        ZMQ         = (CategoryMask{1} <<  5),\n-        WALLETDB    = (CategoryMask{1} <<  6),\n-        RPC         = (CategoryMask{1} <<  7),\n-        ESTIMATEFEE = (CategoryMask{1} <<  8),\n-        ADDRMAN     = (CategoryMask{1} <<  9),\n-        SELECTCOINS = (CategoryMask{1} << 10),\n-        REINDEX     = (CategoryMask{1} << 11),\n-        CMPCTBLOCK  = (CategoryMask{1} << 12),\n-        RAND        = (CategoryMask{1} << 13),\n-        PRUNE       = (CategoryMask{1} << 14),\n-        PROXY       = (CategoryMask{1} << 15),\n-        MEMPOOLREJ  = (CategoryMask{1} << 16),\n-        LIBEVENT    = (CategoryMask{1} << 17),\n-        COINDB      = (CategoryMask{1} << 18),\n-        QT          = (CategoryMask{1} << 19),\n-        LEVELDB     = (CategoryMask{1} << 20),\n-        VALIDATION  = (CategoryMask{1} << 21),\n-        I2P         = (CategoryMask{1} << 22),\n-        IPC         = (CategoryMask{1} << 23),\n+        NONE                       = CategoryMask{0},\n+        NET                        = (CategoryMask{1} <<  0),\n+        TOR                        = (CategoryMask{1} <<  1),\n+        MEMPOOL                    = (CategoryMask{1} <<  2),\n+        HTTP                       = (CategoryMask{1} <<  3),\n+        BENCH                      = (CategoryMask{1} <<  4),\n+        ZMQ                        = (CategoryMask{1} <<  5),\n+        WALLETDB                   = (CategoryMask{1} <<  6),\n+        RPC                        = (CategoryMask{1} <<  7),\n+        ESTIMATEFEE                = (CategoryMask{1} <<  8),\n+        ADDRMAN                    = (CategoryMask{1} <<  9),\n+        SELECTCOINS                = (CategoryMask{1} << 10),\n+        REINDEX                    = (CategoryMask{1} << 11),\n+        CMPCTBLOCK                 = (CategoryMask{1} << 12),\n+        RAND                       = (CategoryMask{1} << 13),\n+        PRUNE                      = (CategoryMask{1} << 14),\n+        PROXY                      = (CategoryMask{1} << 15),\n+        MEMPOOLREJ                 = (CategoryMask{1} << 16),\n+        LIBEVENT                   = (CategoryMask{1} << 17),\n+        COINDB                     = (CategoryMask{1} << 18),\n+        QT                         = (CategoryMask{1} << 19),\n+        LEVELDB                    = (CategoryMask{1} << 20),\n+        VALIDATION                 = (CategoryMask{1} << 21),\n+        I2P                        = (CategoryMask{1} << 22),\n+        IPC                        = (CategoryMask{1} << 23),\n #ifdef DEBUG_LOCKCONTENTION\n-        LOCK        = (CategoryMask{1} << 24),\n+        LOCK                       = (CategoryMask{1} << 24),\n #endif\n-        BLOCKSTORAGE = (CategoryMask{1} << 25),\n-        TXRECONCILIATION = (CategoryMask{1} << 26),\n-        SCAN        = (CategoryMask{1} << 27),\n-        TXPACKAGES  = (CategoryMask{1} << 28),\n-        ALL         = ~NONE,\n+        BLOCKSTORAGE               = (CategoryMask{1} << 25),\n+        TXRECONCILIATION           = (CategoryMask{1} << 26),\n+        SCAN                       = (CategoryMask{1} << 27),\n+        TXPACKAGES                 = (CategoryMask{1} << 28),\n+        UNCONDITIONAL_RATE_LIMITED = (CategoryMask{1} << 29),\n+        UNCONDITIONAL_ALWAYS       = (CategoryMask{1} << 30),",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 121,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure introducing two extra category flags is a good abstraction here - feels noisy.\r\nWouldn’t it be cleaner to decide based on exposure to the attack surface instead? For example, during IBD (or any state with zero peer connections) we could leave all logs unrestricted, and always enable rate-limiting when node is reachable by peers.",
      "created_at": "2025-06-03T09:49:44Z",
      "updated_at": "2025-06-03T10:09:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2123314635",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123314635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123334010",
      "pull_request_review_id": 2891468741,
      "id": 2123334010,
      "node_id": "PRRC_kwDOABII585-j4F6",
      "diff_hunk": "@@ -105,6 +168,11 @@ namespace BCLog {\n         size_t m_cur_buffer_memusage GUARDED_BY(m_cs){0};\n         size_t m_buffer_lines_discarded GUARDED_BY(m_cs){0};\n \n+        //! Fixed window rate limiters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogRateLimiter, SourceLocationHasher, SourceLocationEqual> m_ratelimiters GUARDED_BY(m_cs);",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 188,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do we ever clear `m_ratelimiters`, or does that map only grow over the lifetime of the process?",
      "created_at": "2025-06-03T09:57:52Z",
      "updated_at": "2025-06-03T10:09:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2123334010",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123334010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123366909",
      "pull_request_review_id": 2891662033,
      "id": 2123366909,
      "node_id": "PRRC_kwDOABII585-kAH9",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Since the attack only matters when peers can influence us, could we simply disable rate-limiting for all logs during IBD\r\n\r\n?",
      "created_at": "2025-06-03T10:14:05Z",
      "updated_at": "2025-06-03T10:14:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2123366909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123366909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123404055",
      "pull_request_review_id": 2891723668,
      "id": 2123404055,
      "node_id": "PRRC_kwDOABII585-kJMX",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you be more specific :)?",
      "created_at": "2025-06-03T10:33:06Z",
      "updated_at": "2025-06-03T10:33:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2123404055",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123404055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123418578",
      "pull_request_review_id": 2891749480,
      "id": 2123418578,
      "node_id": "PRRC_kwDOABII585-kMvS",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What do you mean by \"peers not being able to influence us during IBD\"?",
      "created_at": "2025-06-03T10:39:57Z",
      "updated_at": "2025-06-03T10:39:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2123418578",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123418578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123460031",
      "pull_request_review_id": 2891811142,
      "id": 2123460031,
      "node_id": "PRRC_kwDOABII585-kW2_",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I meant that during IBD we’re mostly replaying validated history, and my understanding is that rate-limiting is meant to protect logs caused by peer-supplied invalid data, not the deterministic IBD progress logs (e.g. `-debug=bench` or `-debug=leveldb`, which are *very* verbose (way over the 1MiB/h), but isn't related to a user-sent serialization error or similar cheap attack). \"Attacking\" a node that is still in the original IBD seems less severe to me than skipped logs. I also understand if you disagree with this and I would appreciate an explanation, I want to understand.\r\n\r\nWe can still get invalid data (thanks for triggering a clarification), but maybe the guard should added per `LogFlags` and we may want to blacklist instead of whitelisting.\r\nOr is this meant as a final catch-all for all the unknowns, e.g. maybe there's a trick to enable LevelDB logs externally and this should still guard against that?",
      "created_at": "2025-06-03T10:59:31Z",
      "updated_at": "2025-06-03T10:59:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2123460031",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123460031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123834199",
      "pull_request_review_id": 2892400480,
      "id": 2123834199,
      "node_id": "PRRC_kwDOABII585-lyNX",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I believe that if somebody is using `-debug=bench` or `-debug=leveldb`, the fact that they are using a category should bypass the rate limit if `LogDebug` is used. I think the mitigation should be in place whether or not we're in IBD -- if we have any peers (inbound or outbound), we need to be cautious. This patch _is_ meant to be the \"final catch-all\" like you said to fully eliminate this class of attack.",
      "created_at": "2025-06-03T13:32:35Z",
      "updated_at": "2025-06-03T14:14:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2123834199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123834199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123954582",
      "pull_request_review_id": 2892579303,
      "id": 2123954582,
      "node_id": "PRRC_kwDOABII585-mPmW",
      "diff_hunk": "@@ -39,39 +62,41 @@ struct LogCategory {\n namespace BCLog {\n     using CategoryMask = uint64_t;\n     enum LogFlags : CategoryMask {\n-        NONE        = CategoryMask{0},\n-        NET         = (CategoryMask{1} <<  0),\n-        TOR         = (CategoryMask{1} <<  1),\n-        MEMPOOL     = (CategoryMask{1} <<  2),\n-        HTTP        = (CategoryMask{1} <<  3),\n-        BENCH       = (CategoryMask{1} <<  4),\n-        ZMQ         = (CategoryMask{1} <<  5),\n-        WALLETDB    = (CategoryMask{1} <<  6),\n-        RPC         = (CategoryMask{1} <<  7),\n-        ESTIMATEFEE = (CategoryMask{1} <<  8),\n-        ADDRMAN     = (CategoryMask{1} <<  9),\n-        SELECTCOINS = (CategoryMask{1} << 10),\n-        REINDEX     = (CategoryMask{1} << 11),\n-        CMPCTBLOCK  = (CategoryMask{1} << 12),\n-        RAND        = (CategoryMask{1} << 13),\n-        PRUNE       = (CategoryMask{1} << 14),\n-        PROXY       = (CategoryMask{1} << 15),\n-        MEMPOOLREJ  = (CategoryMask{1} << 16),\n-        LIBEVENT    = (CategoryMask{1} << 17),\n-        COINDB      = (CategoryMask{1} << 18),\n-        QT          = (CategoryMask{1} << 19),\n-        LEVELDB     = (CategoryMask{1} << 20),\n-        VALIDATION  = (CategoryMask{1} << 21),\n-        I2P         = (CategoryMask{1} << 22),\n-        IPC         = (CategoryMask{1} << 23),\n+        NONE                       = CategoryMask{0},\n+        NET                        = (CategoryMask{1} <<  0),\n+        TOR                        = (CategoryMask{1} <<  1),\n+        MEMPOOL                    = (CategoryMask{1} <<  2),\n+        HTTP                       = (CategoryMask{1} <<  3),\n+        BENCH                      = (CategoryMask{1} <<  4),\n+        ZMQ                        = (CategoryMask{1} <<  5),\n+        WALLETDB                   = (CategoryMask{1} <<  6),\n+        RPC                        = (CategoryMask{1} <<  7),\n+        ESTIMATEFEE                = (CategoryMask{1} <<  8),\n+        ADDRMAN                    = (CategoryMask{1} <<  9),\n+        SELECTCOINS                = (CategoryMask{1} << 10),\n+        REINDEX                    = (CategoryMask{1} << 11),\n+        CMPCTBLOCK                 = (CategoryMask{1} << 12),\n+        RAND                       = (CategoryMask{1} << 13),\n+        PRUNE                      = (CategoryMask{1} << 14),\n+        PROXY                      = (CategoryMask{1} << 15),\n+        MEMPOOLREJ                 = (CategoryMask{1} << 16),\n+        LIBEVENT                   = (CategoryMask{1} << 17),\n+        COINDB                     = (CategoryMask{1} << 18),\n+        QT                         = (CategoryMask{1} << 19),\n+        LEVELDB                    = (CategoryMask{1} << 20),\n+        VALIDATION                 = (CategoryMask{1} << 21),\n+        I2P                        = (CategoryMask{1} << 22),\n+        IPC                        = (CategoryMask{1} << 23),\n #ifdef DEBUG_LOCKCONTENTION\n-        LOCK        = (CategoryMask{1} << 24),\n+        LOCK                       = (CategoryMask{1} << 24),\n #endif\n-        BLOCKSTORAGE = (CategoryMask{1} << 25),\n-        TXRECONCILIATION = (CategoryMask{1} << 26),\n-        SCAN        = (CategoryMask{1} << 27),\n-        TXPACKAGES  = (CategoryMask{1} << 28),\n-        ALL         = ~NONE,\n+        BLOCKSTORAGE               = (CategoryMask{1} << 25),\n+        TXRECONCILIATION           = (CategoryMask{1} << 26),\n+        SCAN                       = (CategoryMask{1} << 27),\n+        TXPACKAGES                 = (CategoryMask{1} << 28),\n+        UNCONDITIONAL_RATE_LIMITED = (CategoryMask{1} << 29),\n+        UNCONDITIONAL_ALWAYS       = (CategoryMask{1} << 30),",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 121,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2123314635,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115570067, will change. Imo, having to determine whether we are in IBD or have zero peer connections is heading into too much complexity. This PR shouldn't cause IBD debug logs to be rate-limited, but if it does we should fix that.",
      "created_at": "2025-06-03T14:08:33Z",
      "updated_at": "2025-06-03T14:08:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2123954582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123954582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123959106",
      "pull_request_review_id": 2892587004,
      "id": 2123959106,
      "node_id": "PRRC_kwDOABII585-mQtC",
      "diff_hunk": "@@ -105,6 +168,11 @@ namespace BCLog {\n         size_t m_cur_buffer_memusage GUARDED_BY(m_cs){0};\n         size_t m_buffer_lines_discarded GUARDED_BY(m_cs){0};\n \n+        //! Fixed window rate limiters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogRateLimiter, SourceLocationHasher, SourceLocationEqual> m_ratelimiters GUARDED_BY(m_cs);",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 188,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2123334010,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This never gets cleared. I haven't calculated the overhead of the map, but it could make sense to clear it periodically. Do you think it should just be on a timer or something? ",
      "created_at": "2025-06-03T14:09:40Z",
      "updated_at": "2025-06-03T14:11:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2123959106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123959106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123974464",
      "pull_request_review_id": 2892612128,
      "id": 2123974464,
      "node_id": "PRRC_kwDOABII585-mUdA",
      "diff_hunk": "@@ -105,6 +168,11 @@ namespace BCLog {\n         size_t m_cur_buffer_memusage GUARDED_BY(m_cs){0};\n         size_t m_buffer_lines_discarded GUARDED_BY(m_cs){0};\n \n+        //! Fixed window rate limiters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogRateLimiter, SourceLocationHasher, SourceLocationEqual> m_ratelimiters GUARDED_BY(m_cs);",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 188,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2123334010,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "note: this is part of my suggestion in https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2115841360",
      "created_at": "2025-06-03T14:13:15Z",
      "updated_at": "2025-06-03T14:13:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2123974464",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2123974464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124158984",
      "pull_request_review_id": 2892920996,
      "id": 2124158984,
      "node_id": "PRRC_kwDOABII585-nBgI",
      "diff_hunk": "@@ -105,6 +168,11 @@ namespace BCLog {\n         size_t m_cur_buffer_memusage GUARDED_BY(m_cs){0};\n         size_t m_buffer_lines_discarded GUARDED_BY(m_cs){0};\n \n+        //! Fixed window rate limiters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogRateLimiter, SourceLocationHasher, SourceLocationEqual> m_ratelimiters GUARDED_BY(m_cs);",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 188,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2123334010,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@stickies-v, my mistake, I quickly wanted to make sure this doesn't affect my IBD benchmarks, didn't have time to review it in detail yet",
      "created_at": "2025-06-03T15:03:54Z",
      "updated_at": "2025-06-03T15:03:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2124158984",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124158984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124163227",
      "pull_request_review_id": 2892927941,
      "id": 2124163227,
      "node_id": "PRRC_kwDOABII585-nCib",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for clarifying",
      "created_at": "2025-06-03T15:04:59Z",
      "updated_at": "2025-06-03T15:05:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2124163227",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124163227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124802864",
      "pull_request_review_id": 2893917022,
      "id": 2124802864,
      "node_id": "PRRC_kwDOABII585-pesw",
      "diff_hunk": "@@ -113,17 +181,17 @@ namespace BCLog {\n         std::atomic<Level> m_log_level{DEFAULT_LOG_LEVEL};\n \n         /** Log categories bitfield. */\n-        std::atomic<CategoryMask> m_categories{BCLog::NONE};\n+        std::atomic<CategoryMask> m_categories{DEFAULT_LOG_FLAGS};",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 200,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115570067,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "While implementing this, I came to the conclusion that because macros don't have default arguments, skipping the rate limiting for `UpdateTipLog` means that we need to: 1) introduce a new macro for IBD specifically for `UpdateTipLog`, or 2) modify all call-sites of whichever macro `UpdateTipLog` uses to accept a `rate_limit` argument.\r\n\r\nI am partial to introducing a new macro for `UpdateTipLog` since it gets rid of the noise in the categories logic. I think that option 2) to modify all call-sites to pass in a rate-limiting argument is cumbersome when most callers don't need to be aware of rate limiting and it should instead be done under-the-hood (i.e. `UpdateTipLog` is the exception to the rule). I think using a boolean for rate-limiting vs no-rate-limiting is better than a uint64_t because then the proposed `SourceLocationCounter` needs to also keep track of this window-scaling value (i.e. multiple of `WINDOW_MAX_BYTES`).\r\n\r\nI might be wrong here, curious to hear thoughts.",
      "created_at": "2025-06-03T19:56:07Z",
      "updated_at": "2025-06-03T20:30:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2124802864",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2124802864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126699985",
      "pull_request_review_id": 2896892503,
      "id": 2126699985,
      "node_id": "PRRC_kwDOABII585-wt3R",
      "diff_hunk": "@@ -113,17 +181,17 @@ namespace BCLog {\n         std::atomic<Level> m_log_level{DEFAULT_LOG_LEVEL};\n \n         /** Log categories bitfield. */\n-        std::atomic<CategoryMask> m_categories{BCLog::NONE};\n+        std::atomic<CategoryMask> m_categories{DEFAULT_LOG_FLAGS};",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 200,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115570067,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> 2) to modify all call-sites to pass in a rate-limiting argument is cumbersome\r\n\r\nAbsolutely agree that would not be an improvement.\r\n\r\n> I think using a boolean for rate-limiting vs no-rate-limiting is better than a uint64_t\r\n\r\nI think either will work fine, the uint64_t generalizes a bit nicer but we probably won't be needing the generalization in the future, so whichever ends up being the most elegant implementation now is what I think we should go for.\r\n\r\n> I am partial to introducing a new macro for `UpdateTipLog`\r\n\r\nThat seems sensible to me, yes.",
      "created_at": "2025-06-04T14:07:57Z",
      "updated_at": "2025-06-04T14:07:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2126699985",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2126699985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127117379",
      "pull_request_review_id": 2897579695,
      "id": 2127117379,
      "node_id": "PRRC_kwDOABII585-yTxD",
      "diff_hunk": "@@ -364,33 +368,71 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::FormatLogStrAndRateLimit(std::string& str, BCLog::LogFlags category, BCLog::Level level, const std::source_location& source_loc, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime)\n {\n     if (!str.ends_with('\\n')) str.push_back('\\n');\n \n     str.insert(0, GetLogPrefix(category, level));\n \n     if (m_log_sourcelocations) {\n-        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_file, \"./\"), source_line, logging_function));\n+        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_loc.file_name(), \"./\"), source_loc.line(), logging_function));\n     }\n \n     if (m_log_threadnames) {\n         str.insert(0, strprintf(\"[%s] \", (threadname.empty() ? \"unknown\" : threadname)));\n     }\n \n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    if (category == UNCONDITIONAL_RATE_LIMITED && m_ratelimit) {\n+        was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+        is_ratelimited = !m_ratelimiters[source_loc].Consume(str.size());\n+\n+        if (!is_ratelimited && was_ratelimited) {\n+            // Logging will restart for this source location.\n+            m_suppressed_locations.erase(source_loc);\n+\n+            uint64_t dropped_bytes = m_ratelimiters[source_loc].GetDroppedBytes();\n+\n+            str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                    \"(%d MiB) were dropped during the last hour.\\n\",\n+                                    source_loc.file_name(), source_loc.line(), logging_function,\n+                                    dropped_bytes / (1024 * 1024)));\n+        } else if (is_ratelimited && !was_ratelimited) {",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 97,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115869345,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I want to address this because I think it would be useful to catch in debug builds via `Assume` but also don't want to break tests. Do you think this should be addressed?",
      "created_at": "2025-06-04T17:39:39Z",
      "updated_at": "2025-06-04T17:58:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2127117379",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127117379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 404,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127118833",
      "pull_request_review_id": 2897579695,
      "id": 2127118833,
      "node_id": "PRRC_kwDOABII585-yUHx",
      "diff_hunk": "@@ -81,16 +106,54 @@ namespace BCLog {\n         Error,\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n+    static constexpr LogFlags DEFAULT_LOG_FLAGS{UNCONDITIONAL_RATE_LIMITED | UNCONDITIONAL_ALWAYS};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n \n+    //! Fixed window rate limiter for logging.\n+    class LogRateLimiter\n+    {\n+    private:\n+        //! Timestamp of the last window reset.\n+        std::chrono::time_point<NodeClock> m_last_reset;",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 138,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115841360,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Implemented this change, lmk what you think. I think this encapsulates code a bit better, but it probably could still be improved.",
      "created_at": "2025-06-04T17:40:40Z",
      "updated_at": "2025-06-04T17:58:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2127118833",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127118833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127126139",
      "pull_request_review_id": 2897579695,
      "id": 2127126139,
      "node_id": "PRRC_kwDOABII585-yV57",
      "diff_hunk": "@@ -113,17 +181,17 @@ namespace BCLog {\n         std::atomic<Level> m_log_level{DEFAULT_LOG_LEVEL};\n \n         /** Log categories bitfield. */\n-        std::atomic<CategoryMask> m_categories{BCLog::NONE};\n+        std::atomic<CategoryMask> m_categories{DEFAULT_LOG_FLAGS};",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 200,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115570067,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've changed this so that the logging macros eventually pass a `should_ratelimit` bool to `LogPrintStr`. Instead of introducing a new macro for `UpdateTipLog`, it now uses `LogPrintLevel` which can bypass the rate-limiting. I'm not sure how I feel about using `LogPrintLevel` as I don't want to encourage more usage of it in the codebase as it could be a potential footgun.",
      "created_at": "2025-06-04T17:45:17Z",
      "updated_at": "2025-06-04T17:58:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2127126139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127126139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127131414",
      "pull_request_review_id": 2897579695,
      "id": 2127131414,
      "node_id": "PRRC_kwDOABII585-yXMW",
      "diff_hunk": "@@ -364,33 +368,71 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::FormatLogStrAndRateLimit(std::string& str, BCLog::LogFlags category, BCLog::Level level, const std::source_location& source_loc, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime)",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 64,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115826232,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've carved this out into a `NeedsRateLimiting` function and have kept the logic of `FormatLogStrInPlace` mostly unchanged. The reason I had the original change is because `FormatLogStrInPlace` inserts a timestamp at the beginning of `str` and I wanted the prepended rate-limiting logs to occur after the timestamp. With the new change, the rate-limiting logs are first in `str` followed by the time-stamp. I think now the logs look a little wonky, but I like the code change better. I could also extract the time-stamp prepend logic so it's called after `NeedsRateLimiting`.",
      "created_at": "2025-06-04T17:48:36Z",
      "updated_at": "2025-06-04T18:00:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2127131414",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127131414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127134262",
      "pull_request_review_id": 2897579695,
      "id": 2127134262,
      "node_id": "PRRC_kwDOABII585-yX42",
      "diff_hunk": "@@ -39,39 +62,41 @@ struct LogCategory {\n namespace BCLog {\n     using CategoryMask = uint64_t;\n     enum LogFlags : CategoryMask {\n-        NONE        = CategoryMask{0},\n-        NET         = (CategoryMask{1} <<  0),\n-        TOR         = (CategoryMask{1} <<  1),\n-        MEMPOOL     = (CategoryMask{1} <<  2),\n-        HTTP        = (CategoryMask{1} <<  3),\n-        BENCH       = (CategoryMask{1} <<  4),\n-        ZMQ         = (CategoryMask{1} <<  5),\n-        WALLETDB    = (CategoryMask{1} <<  6),\n-        RPC         = (CategoryMask{1} <<  7),\n-        ESTIMATEFEE = (CategoryMask{1} <<  8),\n-        ADDRMAN     = (CategoryMask{1} <<  9),\n-        SELECTCOINS = (CategoryMask{1} << 10),\n-        REINDEX     = (CategoryMask{1} << 11),\n-        CMPCTBLOCK  = (CategoryMask{1} << 12),\n-        RAND        = (CategoryMask{1} << 13),\n-        PRUNE       = (CategoryMask{1} << 14),\n-        PROXY       = (CategoryMask{1} << 15),\n-        MEMPOOLREJ  = (CategoryMask{1} << 16),\n-        LIBEVENT    = (CategoryMask{1} << 17),\n-        COINDB      = (CategoryMask{1} << 18),\n-        QT          = (CategoryMask{1} << 19),\n-        LEVELDB     = (CategoryMask{1} << 20),\n-        VALIDATION  = (CategoryMask{1} << 21),\n-        I2P         = (CategoryMask{1} << 22),\n-        IPC         = (CategoryMask{1} << 23),\n+        NONE                       = CategoryMask{0},\n+        NET                        = (CategoryMask{1} <<  0),\n+        TOR                        = (CategoryMask{1} <<  1),\n+        MEMPOOL                    = (CategoryMask{1} <<  2),\n+        HTTP                       = (CategoryMask{1} <<  3),\n+        BENCH                      = (CategoryMask{1} <<  4),\n+        ZMQ                        = (CategoryMask{1} <<  5),\n+        WALLETDB                   = (CategoryMask{1} <<  6),\n+        RPC                        = (CategoryMask{1} <<  7),\n+        ESTIMATEFEE                = (CategoryMask{1} <<  8),\n+        ADDRMAN                    = (CategoryMask{1} <<  9),\n+        SELECTCOINS                = (CategoryMask{1} << 10),\n+        REINDEX                    = (CategoryMask{1} << 11),\n+        CMPCTBLOCK                 = (CategoryMask{1} << 12),\n+        RAND                       = (CategoryMask{1} << 13),\n+        PRUNE                      = (CategoryMask{1} << 14),\n+        PROXY                      = (CategoryMask{1} << 15),\n+        MEMPOOLREJ                 = (CategoryMask{1} << 16),\n+        LIBEVENT                   = (CategoryMask{1} << 17),\n+        COINDB                     = (CategoryMask{1} << 18),\n+        QT                         = (CategoryMask{1} << 19),\n+        LEVELDB                    = (CategoryMask{1} << 20),\n+        VALIDATION                 = (CategoryMask{1} << 21),\n+        I2P                        = (CategoryMask{1} << 22),\n+        IPC                        = (CategoryMask{1} << 23),\n #ifdef DEBUG_LOCKCONTENTION\n-        LOCK        = (CategoryMask{1} << 24),\n+        LOCK                       = (CategoryMask{1} << 24),\n #endif\n-        BLOCKSTORAGE = (CategoryMask{1} << 25),\n-        TXRECONCILIATION = (CategoryMask{1} << 26),\n-        SCAN        = (CategoryMask{1} << 27),\n-        TXPACKAGES  = (CategoryMask{1} << 28),\n-        ALL         = ~NONE,\n+        BLOCKSTORAGE               = (CategoryMask{1} << 25),\n+        TXRECONCILIATION           = (CategoryMask{1} << 26),\n+        SCAN                       = (CategoryMask{1} << 27),\n+        TXPACKAGES                 = (CategoryMask{1} << 28),\n+        UNCONDITIONAL_RATE_LIMITED = (CategoryMask{1} << 29),\n+        UNCONDITIONAL_ALWAYS       = (CategoryMask{1} << 30),",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 121,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2123314635,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Resolving as I've removed categories.",
      "created_at": "2025-06-04T17:50:27Z",
      "updated_at": "2025-06-04T17:58:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2127134262",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127134262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127135142",
      "pull_request_review_id": 2897579695,
      "id": 2127135142,
      "node_id": "PRRC_kwDOABII585-yYGm",
      "diff_hunk": "@@ -105,6 +168,11 @@ namespace BCLog {\n         size_t m_cur_buffer_memusage GUARDED_BY(m_cs){0};\n         size_t m_buffer_lines_discarded GUARDED_BY(m_cs){0};\n \n+        //! Fixed window rate limiters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogRateLimiter, SourceLocationHasher, SourceLocationEqual> m_ratelimiters GUARDED_BY(m_cs);",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 188,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2123334010,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Both the map and set are now cleared if `LogRateLimiter` determines that the logging window should be reset.",
      "created_at": "2025-06-04T17:51:01Z",
      "updated_at": "2025-06-04T17:58:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2127135142",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2127135142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128279631",
      "pull_request_review_id": 2899378420,
      "id": 2128279631,
      "node_id": "PRRC_kwDOABII585-2vhP",
      "diff_hunk": "@@ -31,6 +34,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return strcmp(lhs.file_name(), rhs.file_name()) == 0 && lhs.line() == rhs.line();",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 27,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "bec74626867abefbfc55da5aaaf8a0c030663f3a",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "in bec74626867abefbfc55da5aaaf8a0c030663f3a:\r\n\r\nnit: comparing ints is more performant than comparing strings, and is more differentiating than the filename, so would do the line comparison first\r\n\r\n```cpp\r\n        return lhs.line() == rhs.line() && strcmp(lhs.file_name(), rhs.file_name()) == 0 ;\r\n```",
      "created_at": "2025-06-05T08:38:02Z",
      "updated_at": "2025-06-05T09:54:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2128279631",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128279631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128389554",
      "pull_request_review_id": 2899378420,
      "id": 2128389554,
      "node_id": "PRRC_kwDOABII585-3KWy",
      "diff_hunk": "@@ -364,17 +373,63 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::NeedsRateLimiting(bool should_ratelimit, const std::source_location& source_loc, std::string& str, std::string_view logging_function)",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`NeedsRateLimiting` as well as the underlying maps imo belong to `LogRateLimiter` rather than `Logger`. I also don't think `should_ratelimit` is a meaningful parameter, the function should just not be called if that's `false`. I also don't understand why `logging_function` is a separate parameter - can't we just get that from `source_loc`?\r\n\r\nSuggested diff that incorporates all of those suggestions:\r\n\r\n<details>\r\n<summary>git diff on 5535df69a2</summary>\r\n\r\n```diff\r\ndiff --git a/src/logging.cpp b/src/logging.cpp\r\nindex 1e20c10368..c4ae881ffd 100644\r\n--- a/src/logging.cpp\r\n+++ b/src/logging.cpp\r\n@@ -5,6 +5,7 @@\r\n \r\n #include <logging.h>\r\n #include <memusage.h>\r\n+#include <sync.h>\r\n #include <util/check.h>\r\n #include <util/fs.h>\r\n #include <util/string.h>\r\n@@ -376,41 +377,40 @@ static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\r\n     return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\r\n }\r\n \r\n-bool BCLog::Logger::NeedsRateLimiting(bool should_ratelimit, const std::source_location& source_loc, std::string& str, std::string_view logging_function)\r\n+bool BCLog::LogRateLimiter::NeedsRateLimiting(const std::source_location& source_loc, std::string& str)\r\n {\r\n+    StdLockGuard scoped_lock(m_cs);\r\n     // Whether or not logging to disk was/is ratelimited for this source location.\r\n     bool was_ratelimited{false};\r\n     bool is_ratelimited{false};\r\n \r\n-    if (m_ratelimit && should_ratelimit) {\r\n-        // Check to see if we were rate limited before calling ResetWindow.\r\n-        was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\r\n+    // Check to see if we were rate limited before calling ResetWindow.\r\n+    was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\r\n \r\n-        // If the m_limiter window has elapsed, then we need to clear the unordered map and set.\r\n-        if (m_limiter.ResetWindow()) {\r\n-            m_source_locations.clear();\r\n-            m_suppressed_locations.clear();\r\n-        }\r\n+    // If the m_limiter window has elapsed, then we need to clear the unordered map and set.\r\n+    if (ResetWindow()) {\r\n+        m_source_locations.clear();\r\n+        m_suppressed_locations.clear();\r\n+    }\r\n \r\n-        is_ratelimited = !m_source_locations[source_loc].Consume(str.size());\r\n+    is_ratelimited = !m_source_locations[source_loc].Consume(str.size());\r\n \r\n-        if (!is_ratelimited && was_ratelimited) {\r\n-            uint64_t dropped_bytes = m_source_locations[source_loc].GetDroppedBytes();\r\n+    if (!is_ratelimited && was_ratelimited) {\r\n+        uint64_t dropped_bytes{m_source_locations[source_loc].GetDroppedBytes()};\r\n \r\n-            str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\r\n-                                    \"(%d MiB) were dropped during the last hour.\\n\",\r\n-                                    source_loc.file_name(), source_loc.line(), logging_function,\r\n-                                    dropped_bytes / (1024 * 1024)));\r\n-        } else if (is_ratelimited && !was_ratelimited) {\r\n-            // Logging from this source location will be suppressed until the current window resets.\r\n-            m_suppressed_locations.insert(source_loc);\r\n+        str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\r\n+                                \"(%d MiB) were dropped during the last hour.\\n\",\r\n+                                source_loc.file_name(), source_loc.line(), source_loc.function_name(),\r\n+                                dropped_bytes / (1024 * 1024)));\r\n+    } else if (is_ratelimited && !was_ratelimited) {\r\n+        // Logging from this source location will be suppressed until the current window resets.\r\n+        m_suppressed_locations.insert(source_loc);\r\n \r\n-            str.insert(0, strprintf(\"Excessive logging detected from %s:%d (%s): >%d MiB logged during the last hour.\"\r\n-                                    \"Suppressing logging to disk from this source location for up to one hour. \"\r\n-                                    \"Console logging unaffected. Last log entry.\",\r\n-                                    source_loc.file_name(), source_loc.line(), logging_function,\r\n-                                    LogRateLimiter::WINDOW_MAX_BYTES / (1024 * 1024)));\r\n-        }\r\n+        str.insert(0, strprintf(\"Excessive logging detected from %s:%d (%s): >%d MiB logged during the last hour.\"\r\n+                                \"Suppressing logging to disk from this source location for up to one hour. \"\r\n+                                \"Console logging unaffected. Last log entry.\",\r\n+                                source_loc.file_name(), source_loc.line(), source_loc.function_name(),\r\n+                                LogRateLimiter::WINDOW_MAX_BYTES / (1024 * 1024)));\r\n     }\r\n \r\n     // To avoid confusion caused by dropped log messages when debugging an issue,\r\n@@ -479,7 +479,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\r\n     }\r\n \r\n     FormatLogStrInPlace(str_prefixed, category, level, source_loc, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\r\n-    bool ratelimit = NeedsRateLimiting(should_ratelimit, source_loc, str_prefixed, logging_function);\r\n+    bool ratelimit = m_ratelimit && should_ratelimit && m_limiter.NeedsRateLimiting(source_loc, str_prefixed);\r\n \r\n     if (m_print_to_console) {\r\n         // print to console\r\ndiff --git a/src/logging.h b/src/logging.h\r\nindex b94b9cb495..f9441f6913 100644\r\n--- a/src/logging.h\r\n+++ b/src/logging.h\r\n@@ -48,7 +48,7 @@ struct SourceLocationHasher {\r\n     {\r\n         // Use CSipHasher(0, 0) as a simple way to get uniform distribution.\r\n         return static_cast<size_t>(CSipHasher(0, 0)\r\n-                                       .Write(std::hash<std::string>{}(s.file_name()))\r\n+                                       .Write(std::hash<std::string_view>{}(s.file_name()))\r\n                                        .Write(std::hash<int>{}(s.line()))\r\n                                        .Finalize());\r\n     }\r\n@@ -106,13 +106,18 @@ namespace BCLog {\r\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\r\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\r\n \r\n+    class SourceLocationCounter;\r\n     //! Fixed window rate limiter for logging.\r\n     class LogRateLimiter\r\n     {\r\n     private:\r\n         //! Timestamp of the last window reset.\r\n         std::chrono::time_point<NodeClock> m_last_reset;\r\n-\r\n+        //! Counters for each source location that has attempted to log something.\r\n+        std::unordered_map<std::source_location, SourceLocationCounter, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_cs);\r\n+        //! Set of source file locations that were dropped on the last log attempt.\r\n+        std::unordered_set<std::source_location, SourceLocationHasher, SourceLocationEqual> m_suppressed_locations GUARDED_BY(m_cs);\r\n+        mutable StdMutex m_cs; // TODO: does LogRateLimiter need to use Logger:m_cs instead? Didn't investigate.\r\n     public:\r\n         //! Interval after which the window is reset.\r\n         static constexpr std::chrono::hours WINDOW_SIZE{1};\r\n@@ -120,6 +125,8 @@ namespace BCLog {\r\n         static constexpr uint64_t WINDOW_MAX_BYTES{1024 * 1024};\r\n         //! Attempts to reset the window if the window interval has passed. Returns true if the window was reset.\r\n         bool ResetWindow();\r\n+        //! Check if we need to rate limit a source_location.\r\n+        bool NeedsRateLimiting(const std::source_location& source_loc, std::string& str) EXCLUSIVE_LOCKS_REQUIRED(!m_cs);\r\n \r\n         LogRateLimiter() : m_last_reset{NodeClock::now()} {}\r\n \r\n@@ -176,10 +183,6 @@ namespace BCLog {\r\n \r\n         //! Keeps track of the last time we've reset the logging window.\r\n         LogRateLimiter m_limiter GUARDED_BY(m_cs);\r\n-        //! Counters for each source location that has attempted to log something.\r\n-        std::unordered_map<std::source_location, SourceLocationCounter, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_cs);\r\n-        //! Set of source file locations that were dropped on the last log attempt.\r\n-        std::unordered_set<std::source_location, SourceLocationHasher, SourceLocationEqual> m_suppressed_locations GUARDED_BY(m_cs);\r\n \r\n         //! Category-specific log level. Overrides `m_log_level`.\r\n         std::unordered_map<LogFlags, Level> m_category_log_levels GUARDED_BY(m_cs);\r\n@@ -193,9 +196,6 @@ namespace BCLog {\r\n \r\n         void FormatLogStrInPlace(std::string& str, LogFlags category, Level level, const std::source_location& source_loc, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const;\r\n \r\n-        /** Check if we need to rate limit a source_location. */\r\n-        bool NeedsRateLimiting(bool should_ratelimit, const std::source_location& source_loc, std::string& str, std::string_view logging_function) EXCLUSIVE_LOCKS_REQUIRED(m_cs);\r\n-\r\n         std::string LogTimestampStr(SystemClock::time_point now, std::chrono::seconds mocktime) const;\r\n \r\n         /** Slots that connect to the print signal */\r\n\r\n```\r\n</details>\r\n\r\nNote: I didn't think about thread safety much yet, so I just threw in another `m_cs` to make it compile and pass tests, might be wrong/unsafe as-is.",
      "created_at": "2025-06-05T09:27:02Z",
      "updated_at": "2025-06-05T09:54:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2128389554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128389554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 379,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128390673",
      "pull_request_review_id": 2899378420,
      "id": 2128390673,
      "node_id": "PRRC_kwDOABII585-3KoR",
      "diff_hunk": "@@ -27,10 +31,29 @@ static const bool DEFAULT_LOGTIMESTAMPS = true;\n static const bool DEFAULT_LOGTHREADNAMES = false;\n static const bool DEFAULT_LOGSOURCELOCATIONS = false;\n static constexpr bool DEFAULT_LOGLEVELALWAYS = false;\n+static constexpr bool DEFAULT_RATELIMITLOGGING{true};\n extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return strcmp(lhs.file_name(), rhs.file_name()) == 0 && lhs.line() == rhs.line();\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.\n+        return static_cast<size_t>(CSipHasher(0, 0)\n+                                       .Write(std::hash<std::string>{}(s.file_name()))",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 44,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: string_view to avoid unnecessary string construction\r\n\r\n```suggestion\r\n                                       .Write(std::hash<std::string_view>{}(s.file_name()))\r\n```",
      "created_at": "2025-06-05T09:27:33Z",
      "updated_at": "2025-06-05T09:54:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2128390673",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128390673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128403151",
      "pull_request_review_id": 2899378420,
      "id": 2128403151,
      "node_id": "PRRC_kwDOABII585-3NrP",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems like this startup option is still in the latest force-push (5914a2ee6c915585b7213217047ad1644b873376), but from this discussion it doesn't seem like there are good arguments to keep it? I'm not sure if @l0rinc still needs it for IBD bench reasons, but imo that's way too much of a niche to keep it as a startup option?",
      "created_at": "2025-06-05T09:33:59Z",
      "updated_at": "2025-06-05T09:54:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2128403151",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128403151"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128424406",
      "pull_request_review_id": 2899378420,
      "id": 2128424406,
      "node_id": "PRRC_kwDOABII585-3S3W",
      "diff_hunk": "@@ -269,11 +353,14 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n // evaluating arguments when logging for the category is not enabled.\n \n // Log conditionally, prefixing the output with the passed category name and severity level.\n-#define LogPrintLevel(category, level, ...)               \\\n-    do {                                                  \\\n-        if (LogAcceptCategory((category), (level))) {     \\\n-            LogPrintLevel_(category, level, __VA_ARGS__); \\\n-        }                                                 \\\n+// Note that conditional logging is performed WITHOUT rate limiting. Users specifying\n+// -debug are assumed to be developers or power users who are aware that -debug may cause\n+// excessive disk usage due to logging.\n+#define LogPrintLevel(category, level, ...)                                           \\",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 224,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The previous docstring is misleading, `LogPrintLevel()` can also be used for unconditional logging when a `Level::Info` is passed as level, as is e.g. done in `mapport.cpp` and in a few other places. I don't think this is a robust way of deciding on rate limiting.\r\n\r\nI think I would prefer either:\r\n1. using `LogPrintLevel_` directly in `UpdateTipLog()`, with a comment on why we're using a private function and not enabling rate limiting here. A `LogInfoAlways` macro could be an alternative.\r\n2. refactoring `logging.h` replace a lot of the current macros to become regular functions using `std::source_location`, allowing easier overloads for ratelimiting. This probably makes more sense in a separate pull, so imo going with 1. in this PR and then improving with 2. separately would be nice?",
      "created_at": "2025-06-05T09:44:09Z",
      "updated_at": "2025-06-05T09:54:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2128424406",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128424406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 358,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128425813",
      "pull_request_review_id": 2899378420,
      "id": 2128425813,
      "node_id": "PRRC_kwDOABII585-3TNV",
      "diff_hunk": "@@ -81,16 +106,54 @@ namespace BCLog {\n         Error,\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n+    static constexpr LogFlags DEFAULT_LOG_FLAGS{UNCONDITIONAL_RATE_LIMITED | UNCONDITIONAL_ALWAYS};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n \n+    //! Fixed window rate limiter for logging.\n+    class LogRateLimiter\n+    {\n+    private:\n+        //! Timestamp of the last window reset.\n+        std::chrono::time_point<NodeClock> m_last_reset;",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 138,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115841360,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've left some comments for further encapsulation, but yeah I think this a step in the right direction, thanks!",
      "created_at": "2025-06-05T09:44:43Z",
      "updated_at": "2025-06-05T09:54:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2128425813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128425813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128488386",
      "pull_request_review_id": 2899720611,
      "id": 2128488386,
      "node_id": "PRRC_kwDOABII585-3ifC",
      "diff_hunk": "@@ -364,17 +373,63 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::NeedsRateLimiting(bool should_ratelimit, const std::source_location& source_loc, std::string& str, std::string_view logging_function)\n+{\n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    if (m_ratelimit && should_ratelimit) {\n+        // Check to see if we were rate limited before calling ResetWindow.\n+        was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+\n+        // If the m_limiter window has elapsed, then we need to clear the unordered map and set.\n+        if (m_limiter.ResetWindow()) {\n+            m_source_locations.clear();\n+            m_suppressed_locations.clear();\n+        }",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 61,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This logic should be encapsulated in `ResetWindow` imo, so probably this statement could just be:\r\n\r\n```suggestion\r\n        m_limiter.MaybeResetWindow();\r\n```",
      "created_at": "2025-06-05T10:15:01Z",
      "updated_at": "2025-06-05T10:15:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2128488386",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2128488386"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 390,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2130169669",
      "pull_request_review_id": 2902115854,
      "id": 2130169669,
      "node_id": "PRRC_kwDOABII585-989F",
      "diff_hunk": "@@ -269,11 +353,14 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n // evaluating arguments when logging for the category is not enabled.\n \n // Log conditionally, prefixing the output with the passed category name and severity level.\n-#define LogPrintLevel(category, level, ...)               \\\n-    do {                                                  \\\n-        if (LogAcceptCategory((category), (level))) {     \\\n-            LogPrintLevel_(category, level, __VA_ARGS__); \\\n-        }                                                 \\\n+// Note that conditional logging is performed WITHOUT rate limiting. Users specifying\n+// -debug are assumed to be developers or power users who are aware that -debug may cause\n+// excessive disk usage due to logging.\n+#define LogPrintLevel(category, level, ...)                                           \\",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 224,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": 2128424406,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've changed the misleading docstring and I've implemented suggestion 1. and I will pick up suggestion 2. as well. I think this might conflict a bit with the work in https://github.com/bitcoin/bitcoin/pull/29256.",
      "created_at": "2025-06-05T20:10:42Z",
      "updated_at": "2025-06-05T20:10:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2130169669",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2130169669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 358,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2130171764",
      "pull_request_review_id": 2902118687,
      "id": 2130171764,
      "node_id": "PRRC_kwDOABII585-99d0",
      "diff_hunk": "@@ -364,17 +373,63 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::NeedsRateLimiting(bool should_ratelimit, const std::source_location& source_loc, std::string& str, std::string_view logging_function)",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": 2128389554,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've removed `logging_function` and `__func__` usage. I think it makes the function names a little longer in the map, but I'm ok with it. I think `m_cs` is unnecessary if `m_ratelimiter` is guarded by `m_cs`?",
      "created_at": "2025-06-05T20:11:24Z",
      "updated_at": "2025-06-05T20:11:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2130171764",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2130171764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 379,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131702030",
      "pull_request_review_id": 2904095923,
      "id": 2131702030,
      "node_id": "PRRC_kwDOABII585_DzEO",
      "diff_hunk": "@@ -82,15 +104,68 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t WINDOW_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 52,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: moving it into the `BCLog` namespace seems fine, but `BCLog::WINDOW_MAX_BYTES` is not a very helpful name. `RATELIMIT_MAX_BYTES` probably better?",
      "created_at": "2025-06-06T07:53:05Z",
      "updated_at": "2025-06-06T10:07:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2131702030",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131702030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131720267",
      "pull_request_review_id": 2904095923,
      "id": 2131720267,
      "node_id": "PRRC_kwDOABII585_D3hL",
      "diff_hunk": "@@ -82,15 +104,68 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t WINDOW_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class SourceLocationCounter\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes{WINDOW_MAX_BYTES};\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether or not enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    //! Fixed window rate limiter for logging.\n+    class LogRateLimiter\n+    {\n+    private:\n+        //! Timestamp of the last window reset.\n+        std::chrono::time_point<NodeClock> m_last_reset;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, SourceLocationCounter, SourceLocationHasher, SourceLocationEqual> m_source_locations;\n+        //! Set of source file locations that were dropped on the last log attempt.\n+        std::unordered_set<std::source_location, SourceLocationHasher, SourceLocationEqual> m_suppressed_locations;\n+\n+        //! Attempts to reset the logging window if the window interval has passed. This will clear m_source_locations and m_suppressed_locations if a reset occurs.",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 92,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: line length\r\n\r\n```suggestion\r\n        //! Attempts to reset the logging window if the window interval has passed. This will clear\r\n        //! m_source_locations and m_suppressed_locations if a reset occurs.\r\n```",
      "created_at": "2025-06-06T08:04:58Z",
      "updated_at": "2025-06-06T10:07:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2131720267",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131720267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131722722",
      "pull_request_review_id": 2904095923,
      "id": 2131722722,
      "node_id": "PRRC_kwDOABII585_D4Hi",
      "diff_hunk": "@@ -82,15 +104,68 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t WINDOW_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class SourceLocationCounter\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes{WINDOW_MAX_BYTES};\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether or not enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    //! Fixed window rate limiter for logging.\n+    class LogRateLimiter\n+    {\n+    private:\n+        //! Timestamp of the last window reset.\n+        std::chrono::time_point<NodeClock> m_last_reset;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, SourceLocationCounter, SourceLocationHasher, SourceLocationEqual> m_source_locations;\n+        //! Set of source file locations that were dropped on the last log attempt.\n+        std::unordered_set<std::source_location, SourceLocationHasher, SourceLocationEqual> m_suppressed_locations;\n+\n+        //! Attempts to reset the logging window if the window interval has passed. This will clear m_source_locations and m_suppressed_locations if a reset occurs.\n+        void MaybeResetWindow();\n+\n+    public:\n+        //! Interval after which the window is reset.\n+        static constexpr std::chrono::hours WINDOW_SIZE{1};\n+        //! Check if we need to rate limit a source location.",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 98,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Docstring could be beefed up a bit to highlight that this is not a pure check but has side effects. E.g.:\r\n\r\n```\r\n        //! Consumes `source_loc`'s available bytes corresponding to the size of the (formatted)\r\n        //! `str` and returns true if it exceeds the allowance in the current time window.",
      "created_at": "2025-06-06T08:06:25Z",
      "updated_at": "2025-06-06T10:07:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2131722722",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131722722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131856132",
      "pull_request_review_id": 2904095923,
      "id": 2131856132,
      "node_id": "PRRC_kwDOABII585_EYsE",
      "diff_hunk": "@@ -364,17 +373,63 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::NeedsRateLimiting(bool should_ratelimit, const std::source_location& source_loc, std::string& str, std::string_view logging_function)",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": 2128389554,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think it makes the function names a little longer in the map, but I'm ok with it.\r\n\r\nOh interesting, I didn't realize that. On my machine, `__func__` contains just the function name, whereas `function_name()` returns the entire signature, e.g.:\r\n\r\n```\r\n__func__: AppInitParameterInteraction\r\nsource_location: bool AppInitParameterInteraction(const ArgsManager &)\r\n```\r\n\r\nI don't see how this affects any maps, though? I think it just affects the messages when we stop and restart logging?\r\n\r\n> I think m_cs is unnecessary if m_ratelimiter is guarded by m_cs?\r\n\r\nYeah nice, that seems correct. Probably good to add \"This class is not thread-safe.\" to the `LogRateLimiter` docstring, given that it is likely to be used in a multithreaded context. ",
      "created_at": "2025-06-06T09:24:57Z",
      "updated_at": "2025-06-06T10:07:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2131856132",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131856132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 379,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131861828",
      "pull_request_review_id": 2904095923,
      "id": 2131861828,
      "node_id": "PRRC_kwDOABII585_EaFE",
      "diff_hunk": "@@ -364,17 +373,58 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+}\n+\n+bool BCLog::LogRateLimiter::NeedsRateLimiting(const std::source_location& source_loc, std::string& str)\n+{\n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    // Check to see if we were rate limited before calling MaybeResetWindow.\n+    was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+\n+    // If the window has elapsed, then we need to clear the unordered map and set.\n+    MaybeResetWindow();\n+\n+    is_ratelimited = !m_source_locations[source_loc].Consume(str.size());\n+\n+    if (!is_ratelimited && was_ratelimited) {\n+        uint64_t dropped_bytes = m_source_locations[source_loc].GetDroppedBytes();\n+\n+        str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                \"(%d MiB) were dropped during the last hour.\\n\",\n+                                source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                                dropped_bytes / (1024 * 1024)));",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 66,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This will now only be shown for a single source location per time window. I think this should be moved to `MaybeResetWindow()`, where we iterate over `m_suppressed_locations` before clearing it?",
      "created_at": "2025-06-06T09:28:33Z",
      "updated_at": "2025-06-06T10:07:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2131861828",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131861828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 396,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 399,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131883418",
      "pull_request_review_id": 2904095923,
      "id": 2131883418,
      "node_id": "PRRC_kwDOABII585_EfWa",
      "diff_hunk": "@@ -364,17 +373,58 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+}\n+\n+bool BCLog::LogRateLimiter::NeedsRateLimiting(const std::source_location& source_loc, std::string& str)\n+{\n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    // Check to see if we were rate limited before calling MaybeResetWindow.\n+    was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+\n+    // If the window has elapsed, then we need to clear the unordered map and set.\n+    MaybeResetWindow();\n+\n+    is_ratelimited = !m_source_locations[source_loc].Consume(str.size());\n+\n+    if (!is_ratelimited && was_ratelimited) {\n+        uint64_t dropped_bytes = m_source_locations[source_loc].GetDroppedBytes();\n+\n+        str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                \"(%d MiB) were dropped during the last hour.\\n\",\n+                                source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                                dropped_bytes / (1024 * 1024)));\n+    } else if (is_ratelimited && !was_ratelimited) {\n+        // Logging from this source location will be suppressed until the current window resets.\n+        m_suppressed_locations.insert(source_loc);\n+\n+        str.insert(0, strprintf(\"Excessive logging detected from %s:%d (%s): >%d MiB logged during the last hour.\"\n+                                \"Suppressing logging to disk from this source location for up to one hour. \"\n+                                \"Console logging unaffected. Last log entry.\",\n+                                source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                                WINDOW_MAX_BYTES / (1024 * 1024)));\n+    }\n+\n+    // To avoid confusion caused by dropped log messages when debugging an issue,\n+    // we prefix log lines with \"[*]\" when there are any suppressed source locations.\n+    if (m_suppressed_locations.size() > 0) {\n+        str.insert(0, \"[*] \");\n+    }\n+\n+    return was_ratelimited && is_ratelimited;\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, const std::source_location& source_loc, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n {\n     if (!str.ends_with('\\n')) str.push_back('\\n');\n \n     str.insert(0, GetLogPrefix(category, level));\n \n     if (m_log_sourcelocations) {\n-        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_file, \"./\"), source_line, logging_function));\n+        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_loc.file_name(), \"./\"), source_loc.line(), source_loc.function_name()));",
      "path": "src/logging.cpp",
      "position": 69,
      "original_position": 96,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As you pointed out, this changes the logging output by now including the full function signature instead of just the function name. I think that's generally an improvement, but should probably be mentioned in the release notes (which would be good to have for the new rate limiting behaviour in general anyway) because it might break downstream log parsing. Would suggest adding commit at the top with release notes?",
      "created_at": "2025-06-06T09:43:26Z",
      "updated_at": "2025-06-06T10:07:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2131883418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131883418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 405,
      "original_line": 405,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131888118",
      "pull_request_review_id": 2904095923,
      "id": 2131888118,
      "node_id": "PRRC_kwDOABII585_Egf2",
      "diff_hunk": "@@ -400,10 +450,8 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n                 .now=SystemClock::now(),\n                 .mocktime=GetMockTime(),\n                 .str=str_prefixed,\n-                .logging_function=std::string(logging_function),\n-                .source_file=std::string(source_file),\n                 .threadname=util::ThreadGetInternalName(),\n-                .source_line=source_line,\n+                .source_loc=source_loc,",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 125,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Since `source_loc` is fairly large and this function is frequently called, I think it might make sense to optimize this a bit further and have `LogPrintStr_` (and its callsites) take a `std::source_location&&` so we can move it here and avoid the copy?\r\n\r\n<details>\r\n<summary>git diff on 911ee520c8</summary>\r\n\r\n```diff\r\ndiff --git a/src/logging.cpp b/src/logging.cpp\r\nindex e31e346549..006bac6a98 100644\r\n--- a/src/logging.cpp\r\n+++ b/src/logging.cpp\r\n@@ -74,8 +74,7 @@ bool BCLog::Logger::StartLogging()\r\n     // dump buffered messages from before we opened the log\r\n     m_buffering = false;\r\n     if (m_buffer_lines_discarded > 0) {\r\n-        const auto source_loc{std::source_location::current()};\r\n-        LogPrintStr_(strprintf(\"Early logging buffer overflowed, %d log lines discarded.\\n\", m_buffer_lines_discarded), source_loc, BCLog::ALL, Level::Info, /*should_ratelimit=*/false);\r\n+        LogPrintStr_(strprintf(\"Early logging buffer overflowed, %d log lines discarded.\\n\", m_buffer_lines_discarded), std::source_location::current(), BCLog::ALL, Level::Info, /*should_ratelimit=*/false);\r\n     }\r\n     while (!m_msgs_before_open.empty()) {\r\n         const auto& buflog = m_msgs_before_open.front();\r\n@@ -434,13 +433,13 @@ void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags catego\r\n     str.insert(0, LogTimestampStr(now, mocktime));\r\n }\r\n \r\n-void BCLog::Logger::LogPrintStr(std::string_view str, const std::source_location& source_loc, BCLog::LogFlags category, BCLog::Level level, bool should_ratelimit)\r\n+void BCLog::Logger::LogPrintStr(std::string_view str, std::source_location&& source_loc, BCLog::LogFlags category, BCLog::Level level, bool should_ratelimit)\r\n {\r\n     StdLockGuard scoped_lock(m_cs);\r\n-    return LogPrintStr_(str, source_loc, category, level, should_ratelimit);\r\n+    return LogPrintStr_(str, std::move(source_loc), category, level, should_ratelimit);\r\n }\r\n \r\n-void BCLog::Logger::LogPrintStr_(std::string_view str, const std::source_location& source_loc, BCLog::LogFlags category, BCLog::Level level, bool should_ratelimit)\r\n+void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& source_loc, BCLog::LogFlags category, BCLog::Level level, bool should_ratelimit)\r\n {\r\n     std::string str_prefixed = LogEscapeMessage(str);\r\n \r\n@@ -451,7 +450,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, const std::source_locatio\r\n                 .mocktime=GetMockTime(),\r\n                 .str=str_prefixed,\r\n                 .threadname=util::ThreadGetInternalName(),\r\n-                .source_loc=source_loc,\r\n+                .source_loc=std::move(source_loc),\r\n                 .category=category,\r\n                 .level=level,\r\n             };\r\ndiff --git a/src/logging.h b/src/logging.h\r\nindex d588ef86dc..edef5c074f 100644\r\n--- a/src/logging.h\r\n+++ b/src/logging.h\r\n@@ -201,7 +201,7 @@ namespace BCLog {\r\n         std::list<std::function<void(const std::string&)>> m_print_callbacks GUARDED_BY(m_cs) {};\r\n \r\n         /** Send a string to the log output (internal) */\r\n-        void LogPrintStr_(std::string_view str, const std::source_location& source_loc, BCLog::LogFlags category, BCLog::Level level, bool should_ratelimit)\r\n+        void LogPrintStr_(std::string_view str, std::source_location&& source_loc, BCLog::LogFlags category, BCLog::Level level, bool should_ratelimit)\r\n             EXCLUSIVE_LOCKS_REQUIRED(m_cs);\r\n \r\n         std::string GetLogPrefix(LogFlags category, Level level) const;\r\n@@ -220,7 +220,7 @@ namespace BCLog {\r\n         std::atomic<bool> m_reopen_file{false};\r\n \r\n         /** Send a string to the log output */\r\n-        void LogPrintStr(std::string_view str, const std::source_location& source_loc, BCLog::LogFlags category, BCLog::Level level, bool should_ratelimit)\r\n+        void LogPrintStr(std::string_view str, std::source_location&& source_loc, BCLog::LogFlags category, BCLog::Level level, bool should_ratelimit)\r\n             EXCLUSIVE_LOCKS_REQUIRED(!m_cs);\r\n \r\n         /** Returns whether logs will be written to any output */\r\n@@ -320,7 +320,7 @@ static inline bool LogAcceptCategory(BCLog::LogFlags category, BCLog::Level leve\r\n bool GetLogCategory(BCLog::LogFlags& flag, std::string_view str);\r\n \r\n template <typename... Args>\r\n-inline void LogPrintFormatInternal(const std::source_location& source_loc, const BCLog::LogFlags flag, const BCLog::Level level, const bool should_ratelimit, util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)\r\n+inline void LogPrintFormatInternal(std::source_location&& source_loc, const BCLog::LogFlags flag, const BCLog::Level level, const bool should_ratelimit, util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)\r\n {\r\n     if (LogInstance().Enabled()) {\r\n         std::string log_msg;\r\n@@ -329,7 +329,7 @@ inline void LogPrintFormatInternal(const std::source_location& source_loc, const\r\n         } catch (tinyformat::format_error& fmterr) {\r\n             log_msg = \"Error \\\"\" + std::string{fmterr.what()} + \"\\\" while formatting log message: \" + fmt.fmt;\r\n         }\r\n-        LogInstance().LogPrintStr(log_msg, source_loc, flag, level, should_ratelimit);\r\n+        LogInstance().LogPrintStr(log_msg, std::move(source_loc), flag, level, should_ratelimit);\r\n     }\r\n }\r\n \r\ndiff --git a/src/test/logging_tests.cpp b/src/test/logging_tests.cpp\r\nindex 0043df182e..f5ce17aa23 100644\r\n--- a/src/test/logging_tests.cpp\r\n+++ b/src/test/logging_tests.cpp\r\n@@ -97,12 +97,12 @@ BOOST_FIXTURE_TEST_CASE(logging_LogPrintStr, LogSetup)\r\n         std::source_location::current(),\r\n         std::source_location::current(),\r\n     };\r\n-    LogInstance().LogPrintStr(\"foo1: bar1\", source_locs[0], BCLog::LogFlags::NET, BCLog::Level::Debug, /*should_ratelimit=*/false);\r\n-    LogInstance().LogPrintStr(\"foo2: bar2\", source_locs[1], BCLog::LogFlags::NET, BCLog::Level::Info, /*should_ratelimit=*/false);\r\n-    LogInstance().LogPrintStr(\"foo3: bar3\", source_locs[2], BCLog::LogFlags::ALL, BCLog::Level::Debug, /*should_ratelimit=*/false);\r\n-    LogInstance().LogPrintStr(\"foo4: bar4\", source_locs[3], BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false);\r\n-    LogInstance().LogPrintStr(\"foo5: bar5\", source_locs[4], BCLog::LogFlags::NONE, BCLog::Level::Debug, /*should_ratelimit=*/false);\r\n-    LogInstance().LogPrintStr(\"foo6: bar6\", source_locs[5], BCLog::LogFlags::NONE, BCLog::Level::Info, /*should_ratelimit=*/false);\r\n+    LogInstance().LogPrintStr(\"foo1: bar1\", std::move(source_locs[0]), BCLog::LogFlags::NET, BCLog::Level::Debug, /*should_ratelimit=*/false);\r\n+    LogInstance().LogPrintStr(\"foo2: bar2\", std::move(source_locs[1]), BCLog::LogFlags::NET, BCLog::Level::Info, /*should_ratelimit=*/false);\r\n+    LogInstance().LogPrintStr(\"foo3: bar3\", std::move(source_locs[2]), BCLog::LogFlags::ALL, BCLog::Level::Debug, /*should_ratelimit=*/false);\r\n+    LogInstance().LogPrintStr(\"foo4: bar4\", std::move(source_locs[3]), BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false);\r\n+    LogInstance().LogPrintStr(\"foo5: bar5\", std::move(source_locs[4]), BCLog::LogFlags::NONE, BCLog::Level::Debug, /*should_ratelimit=*/false);\r\n+    LogInstance().LogPrintStr(\"foo6: bar6\", std::move(source_locs[5]), BCLog::LogFlags::NONE, BCLog::Level::Info, /*should_ratelimit=*/false);\r\n     std::ifstream file{tmp_log_path};\r\n     std::vector<std::string> log_lines;\r\n     for (std::string log; std::getline(file, log);) {\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2025-06-06T09:46:36Z",
      "updated_at": "2025-06-06T10:07:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2131888118",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131888118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131914811",
      "pull_request_review_id": 2904095923,
      "id": 2131914811,
      "node_id": "PRRC_kwDOABII585_EnA7",
      "diff_hunk": "@@ -269,11 +353,14 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n // evaluating arguments when logging for the category is not enabled.\n \n // Log conditionally, prefixing the output with the passed category name and severity level.\n-#define LogPrintLevel(category, level, ...)               \\\n-    do {                                                  \\\n-        if (LogAcceptCategory((category), (level))) {     \\\n-            LogPrintLevel_(category, level, __VA_ARGS__); \\\n-        }                                                 \\\n+// Note that conditional logging is performed WITHOUT rate limiting. Users specifying\n+// -debug are assumed to be developers or power users who are aware that -debug may cause\n+// excessive disk usage due to logging.\n+#define LogPrintLevel(category, level, ...)                                           \\",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 224,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": 2128424406,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice. Since af86b55f996cf06e8e9179d5c1fe7ce3d94fa3c6 now uses `LogPrintLevel_` directly, I think the changes to `LogPrintLevel` in ed3c0a592b60a565ec5dade7c3af62e7f4cf75a1 can now be reverted and rate limiting applied consistently to all \"public\" macros? (would also require an update to the `UpdateTipLog` docstring)",
      "created_at": "2025-06-06T10:04:33Z",
      "updated_at": "2025-06-06T10:07:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2131914811",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2131914811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 358,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2132459455",
      "pull_request_review_id": 2905363922,
      "id": 2132459455,
      "node_id": "PRRC_kwDOABII585_Gr-_",
      "diff_hunk": "@@ -364,17 +373,63 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::NeedsRateLimiting(bool should_ratelimit, const std::source_location& source_loc, std::string& str, std::string_view logging_function)",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": 2128389554,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't see how this affects any maps, though? I think it just affects the messages when we stop and restart logging?\r\n\r\nOh, I think I mistakenly thought that `function_name` was included in the map somehow or used when hashing `std::source_location`, but I see that's not actually the case.",
      "created_at": "2025-06-06T16:00:21Z",
      "updated_at": "2025-06-06T16:00:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2132459455",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2132459455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 379,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2132510030",
      "pull_request_review_id": 2905446634,
      "id": 2132510030,
      "node_id": "PRRC_kwDOABII585_G4VO",
      "diff_hunk": "@@ -269,11 +353,14 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n // evaluating arguments when logging for the category is not enabled.\n \n // Log conditionally, prefixing the output with the passed category name and severity level.\n-#define LogPrintLevel(category, level, ...)               \\\n-    do {                                                  \\\n-        if (LogAcceptCategory((category), (level))) {     \\\n-            LogPrintLevel_(category, level, __VA_ARGS__); \\\n-        }                                                 \\\n+// Note that conditional logging is performed WITHOUT rate limiting. Users specifying\n+// -debug are assumed to be developers or power users who are aware that -debug may cause\n+// excessive disk usage due to logging.\n+#define LogPrintLevel(category, level, ...)                                           \\",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 224,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": 2128424406,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm a little unsure about adding rate-limiting to `LogPrintLevel` as then if a user runs with -debug, they could potentially hit the rate-limit via `LogDebug` or by some of the existing `LogPrintLevel` calls. I think it is in the user's best interest to have rate-limiting applied to all public macros like you suggested, but I also don't want to potentially confuse users as to why their debug.log is incomplete due to rate-limiting when they are just running with `-debug`.",
      "created_at": "2025-06-06T16:35:35Z",
      "updated_at": "2025-06-06T16:35:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2132510030",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2132510030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 358,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2135540635",
      "pull_request_review_id": 2909762814,
      "id": 2135540635,
      "node_id": "PRRC_kwDOABII585_ScOb",
      "diff_hunk": "@@ -269,11 +353,14 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n // evaluating arguments when logging for the category is not enabled.\n \n // Log conditionally, prefixing the output with the passed category name and severity level.\n-#define LogPrintLevel(category, level, ...)               \\\n-    do {                                                  \\\n-        if (LogAcceptCategory((category), (level))) {     \\\n-            LogPrintLevel_(category, level, __VA_ARGS__); \\\n-        }                                                 \\\n+// Note that conditional logging is performed WITHOUT rate limiting. Users specifying\n+// -debug are assumed to be developers or power users who are aware that -debug may cause\n+// excessive disk usage due to logging.\n+#define LogPrintLevel(category, level, ...)                                           \\",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 224,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": 2128424406,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh no I agree, debug logs should be exempt from ratelimiting. My point is just that I think it's bad to have different logging behaviour depending on whether `LogInfo()` or `LogPrintLevel(..., BCLog::Info)` is used, so I think something like the below would work well?\r\n\r\n<details>\r\n<summary>git diff on 911ee520c8</summary>\r\n\r\n```diff\r\ndiff --git a/src/logging.h b/src/logging.h\r\nindex d588ef86dc..5f298405e7 100644\r\n--- a/src/logging.h\r\n+++ b/src/logging.h\r\n@@ -349,17 +349,13 @@ inline void LogPrintFormatInternal(const std::source_location& source_loc, const\r\n // Use a macro instead of a function for conditional logging to prevent\r\n // evaluating arguments when logging for the category is not enabled.\r\n \r\n-// Log by prefixing the output with the passed category name and severity level. This can either\r\n-// log conditionally if the category is allowed or unconditionally if level >= BCLog::Level::Info\r\n-// is passed. Note that this function bypasses rate limiting. Callers need to take care to ensure\r\n-// that an attacker cannot trigger a disk-fill vulnerability if level >= Info is used. Additionally,\r\n-// users specifying -debug are assumed to be developers or power users who are aware that -debug\r\n-// may cause excessive disk usage due to logging.\r\n-#define LogPrintLevel(category, level, ...)                                           \\\r\n-    do {                                                                              \\\r\n-        if (LogAcceptCategory((category), (level))) {                                 \\\r\n-            LogPrintLevel_(category, level, /*should_ratelimit=*/false, __VA_ARGS__); \\\r\n-        }                                                                             \\\r\n+// Log conditionally, prefixing the output with the passed category name and severity level.\r\n+#define LogPrintLevel(category, level, ...)                             \\\r\n+    do {                                                                \\\r\n+        if (LogAcceptCategory((category), (level))) {                   \\\r\n+            bool rate_limit{level >= BCLog::Info};                      \\\r\n+            LogPrintLevel_(category, level, rate_limit, __VA_ARGS__);   \\\r\n+        }                                                               \\\r\n     } while (0)\r\n \r\n // Log conditionally, prefixing the output with the passed category name.\r\n\r\n```\r\n</details>\r\n\r\n",
      "created_at": "2025-06-09T11:18:36Z",
      "updated_at": "2025-06-09T11:18:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2135540635",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2135540635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 358,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2135685134",
      "pull_request_review_id": 2910011000,
      "id": 2135685134,
      "node_id": "PRRC_kwDOABII585_S_gO",
      "diff_hunk": "@@ -269,11 +353,14 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n // evaluating arguments when logging for the category is not enabled.\n \n // Log conditionally, prefixing the output with the passed category name and severity level.\n-#define LogPrintLevel(category, level, ...)               \\\n-    do {                                                  \\\n-        if (LogAcceptCategory((category), (level))) {     \\\n-            LogPrintLevel_(category, level, __VA_ARGS__); \\\n-        }                                                 \\\n+// Note that conditional logging is performed WITHOUT rate limiting. Users specifying\n+// -debug are assumed to be developers or power users who are aware that -debug may cause\n+// excessive disk usage due to logging.\n+#define LogPrintLevel(category, level, ...)                                           \\",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 224,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": 2128424406,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Oh I completely misunderstood! I like this suggestion a lot and I think it plugs the hole. I am not sure the future plans for `LogPrintLevel` but I wonder if eventually all instances of `LogPrintLevel` with level >= `BCLog::Info` could instead be converted to `LogInfo` or the equivalent?",
      "created_at": "2025-06-09T13:04:05Z",
      "updated_at": "2025-06-09T13:04:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2135685134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2135685134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 358,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2135787497",
      "pull_request_review_id": 2910178523,
      "id": 2135787497,
      "node_id": "PRRC_kwDOABII585_TYfp",
      "diff_hunk": "@@ -269,11 +353,14 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n // evaluating arguments when logging for the category is not enabled.\n \n // Log conditionally, prefixing the output with the passed category name and severity level.\n-#define LogPrintLevel(category, level, ...)               \\\n-    do {                                                  \\\n-        if (LogAcceptCategory((category), (level))) {     \\\n-            LogPrintLevel_(category, level, __VA_ARGS__); \\\n-        }                                                 \\\n+// Note that conditional logging is performed WITHOUT rate limiting. Users specifying\n+// -debug are assumed to be developers or power users who are aware that -debug may cause\n+// excessive disk usage due to logging.\n+#define LogPrintLevel(category, level, ...)                                           \\",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 224,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": 2128424406,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In a general sense, having a generalized logging function is helpful when the loglevel isn't known in advance, as is e.g. the case here: https://github.com/bitcoin/bitcoin/blob/f3bbc746647d1fd23bf5cfe357e32f38c5f6319c/src/httpserver.cpp#L440\r\n\r\nIt seems like we currently don't really need it in our codebase, but I would keep that discussion for a separate PR because it would lead us astray a bit much here?",
      "created_at": "2025-06-09T14:03:45Z",
      "updated_at": "2025-06-09T14:03:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2135787497",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2135787497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 358,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2140490847",
      "pull_request_review_id": 2917722133,
      "id": 2140490847,
      "node_id": "PRRC_kwDOABII585_lUxf",
      "diff_hunk": "@@ -269,11 +353,14 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n // evaluating arguments when logging for the category is not enabled.\n \n // Log conditionally, prefixing the output with the passed category name and severity level.\n-#define LogPrintLevel(category, level, ...)               \\\n-    do {                                                  \\\n-        if (LogAcceptCategory((category), (level))) {     \\\n-            LogPrintLevel_(category, level, __VA_ARGS__); \\\n-        }                                                 \\\n+// Note that conditional logging is performed WITHOUT rate limiting. Users specifying\n+// -debug are assumed to be developers or power users who are aware that -debug may cause\n+// excessive disk usage due to logging.\n+#define LogPrintLevel(category, level, ...)                                           \\",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 224,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "5535df69a2a7f198e48656912522d531d3867346",
      "in_reply_to_id": 2128424406,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Resolving as it's now addressed.",
      "created_at": "2025-06-11T15:27:52Z",
      "updated_at": "2025-06-11T15:27:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2140490847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2140490847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 358,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2140498525",
      "pull_request_review_id": 2917735157,
      "id": 2140498525,
      "node_id": "PRRC_kwDOABII585_lWpd",
      "diff_hunk": "@@ -364,17 +373,58 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+}\n+\n+bool BCLog::LogRateLimiter::NeedsRateLimiting(const std::source_location& source_loc, std::string& str)\n+{\n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    // Check to see if we were rate limited before calling MaybeResetWindow.\n+    was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+\n+    // If the window has elapsed, then we need to clear the unordered map and set.\n+    MaybeResetWindow();\n+\n+    is_ratelimited = !m_source_locations[source_loc].Consume(str.size());\n+\n+    if (!is_ratelimited && was_ratelimited) {\n+        uint64_t dropped_bytes = m_source_locations[source_loc].GetDroppedBytes();\n+\n+        str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                \"(%d MiB) were dropped during the last hour.\\n\",\n+                                source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                                dropped_bytes / (1024 * 1024)));",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 66,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": 2131861828,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've made this change, lmk what you think. `MaybeResetWindow()` now uses `str.insert(0, ...)` per `m_suppressed_locations`.",
      "created_at": "2025-06-11T15:31:28Z",
      "updated_at": "2025-06-11T15:31:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2140498525",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2140498525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 396,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 399,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2140510216",
      "pull_request_review_id": 2917754300,
      "id": 2140510216,
      "node_id": "PRRC_kwDOABII585_lZgI",
      "diff_hunk": "@@ -400,10 +450,8 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n                 .now=SystemClock::now(),\n                 .mocktime=GetMockTime(),\n                 .str=str_prefixed,\n-                .logging_function=std::string(logging_function),\n-                .source_file=std::string(source_file),\n                 .threadname=util::ThreadGetInternalName(),\n-                .source_line=source_line,\n+                .source_loc=source_loc,",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 125,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": 2131888118,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've sort of implemented this. I wasn't able to use `std::source_location&&` in `LogPrintStr_` because it's passed to two functions (`FormatLogStrInPlace` and `NeedsRateLimiting`) and implicit invalidation might occur. Instead, I pass `std::source_location&` and call `std::move` only when needed to invoke the move constructor. ",
      "created_at": "2025-06-11T15:37:19Z",
      "updated_at": "2025-06-11T15:37:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2140510216",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2140510216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2143286465",
      "pull_request_review_id": 2922072029,
      "id": 2143286465,
      "node_id": "PRRC_kwDOABII585_v_TB",
      "diff_hunk": "@@ -400,10 +450,8 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n                 .now=SystemClock::now(),\n                 .mocktime=GetMockTime(),\n                 .str=str_prefixed,\n-                .logging_function=std::string(logging_function),\n-                .source_file=std::string(source_file),\n                 .threadname=util::ThreadGetInternalName(),\n-                .source_line=source_line,\n+                .source_loc=source_loc,",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 125,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": 2131888118,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I am not sure how I feel about my approach here because the caller of `LogPrintStr_` now needs to be aware that `std::source_location&` can be moved-from?",
      "created_at": "2025-06-12T17:33:35Z",
      "updated_at": "2025-06-12T17:33:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2143286465",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2143286465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2143805528",
      "pull_request_review_id": 2922873091,
      "id": 2143805528,
      "node_id": "PRRC_kwDOABII585_x-BY",
      "diff_hunk": "@@ -400,10 +450,8 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n                 .now=SystemClock::now(),\n                 .mocktime=GetMockTime(),\n                 .str=str_prefixed,\n-                .logging_function=std::string(logging_function),\n-                .source_file=std::string(source_file),\n                 .threadname=util::ThreadGetInternalName(),\n-                .source_line=source_line,\n+                .source_loc=source_loc,",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 125,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": 2131888118,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I misunderstood the original suggestion and have now implemented it in ca0c1a7a9ce9198c950e123d36c9e4bb13db13da",
      "created_at": "2025-06-12T23:18:18Z",
      "updated_at": "2025-06-12T23:18:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2143805528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2143805528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 454,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2144628244",
      "pull_request_review_id": 2924083057,
      "id": 2144628244,
      "node_id": "PRRC_kwDOABII585_1G4U",
      "diff_hunk": "@@ -364,17 +374,51 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::LogRateLimiter::NeedsRateLimiting(const std::source_location& source_loc, std::string& str)\n+{\n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    // Check to see if we were rate limited before calling MaybeResetWindow.\n+    was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+\n+    // If the window has elapsed, then we need to clear the unordered map and set.\n+    MaybeResetWindow(str);\n+\n+    is_ratelimited = !m_source_locations[source_loc].Consume(str.size());\n+\n+    if (is_ratelimited && !was_ratelimited) {\n+        // Logging from this source location will be suppressed until the current window resets.\n+        m_suppressed_locations.insert(source_loc);\n+\n+        str.insert(0, strprintf(\"Excessive logging detected from %s:%d (%s): >%d MiB logged during the last hour.\"\n+                                \"Suppressing logging to disk from this source location for up to one hour. \"",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 67,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "in_reply_to_id": null,
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In the two-part string literal in NeedsRateLimiting:\r\n“…during the last hour.”\"Suppressing logging…” -> “…during the last hour. Suppressing logging…”\r\n[missing space between sentences due to C++ literal concatenation]",
      "created_at": "2025-06-13T09:40:08Z",
      "updated_at": "2025-06-13T09:40:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2144628244",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2144628244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 398,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156708724",
      "pull_request_review_id": 2942493812,
      "id": 2156708724,
      "node_id": "PRRC_kwDOABII586AjMN0",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && strcmp(lhs.file_name(), rhs.file_name()) == 0;\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.\n+        return static_cast<size_t>(CSipHasher(0, 0)\n+                                       .Write(std::hash<std::string_view>{}(s.file_name()))\n+                                       .Write(std::hash<int>{}(s.line()))",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 40,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I don't think hashing the line is necessary?\r\n```suggestion\r\n                                       .Write(s.line())\r\n```",
      "created_at": "2025-06-19T10:47:32Z",
      "updated_at": "2025-06-19T12:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156708724",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156708724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156739229",
      "pull_request_review_id": 2942493812,
      "id": 2156739229,
      "node_id": "PRRC_kwDOABII586AjTqd",
      "diff_hunk": "@@ -364,17 +374,51 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::LogRateLimiter::NeedsRateLimiting(const std::source_location& source_loc, std::string& str)\n+{\n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    // Check to see if we were rate limited before calling MaybeResetWindow.\n+    was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+\n+    // If the window has elapsed, then we need to clear the unordered map and set.\n+    MaybeResetWindow(str);\n+\n+    is_ratelimited = !m_source_locations[source_loc].Consume(str.size());",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 60,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I think this can be simplified a bit:\r\n\r\n<details>\r\n<summary>git diff on b7d9c669ca</summary>\r\n\r\n```diff\r\ndiff --git a/src/logging.cpp b/src/logging.cpp\r\nindex 827d1bad10..fec8e5ec58 100644\r\n--- a/src/logging.cpp\r\n+++ b/src/logging.cpp\r\n@@ -379,17 +379,13 @@ static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\r\n \r\n bool BCLog::LogRateLimiter::NeedsRateLimiting(const std::source_location& source_loc, std::string& str)\r\n {\r\n-    // Whether or not logging to disk was/is ratelimited for this source location.\r\n-    bool was_ratelimited{false};\r\n-    bool is_ratelimited{false};\r\n-\r\n     // Check to see if we were rate limited before calling MaybeResetWindow.\r\n-    was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\r\n+    bool was_ratelimited{m_suppressed_locations.contains(source_loc)};\r\n \r\n     // If the window has elapsed, then we need to clear the unordered map and set.\r\n     MaybeResetWindow(str);\r\n \r\n-    is_ratelimited = !m_source_locations[source_loc].Consume(str.size());\r\n+    bool is_ratelimited{!m_source_locations[source_loc].Consume(str.size())};\r\n \r\n     if (is_ratelimited && !was_ratelimited) {\r\n         // Logging from this source location will be suppressed until the current window resets.\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2025-06-19T11:07:23Z",
      "updated_at": "2025-06-19T12:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156739229",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156739229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 383,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156745293",
      "pull_request_review_id": 2942493812,
      "id": 2156745293,
      "node_id": "PRRC_kwDOABII586AjVJN",
      "diff_hunk": "@@ -196,15 +196,15 @@ namespace BCLog {\n         /** Log categories bitfield. */\n         std::atomic<CategoryMask> m_categories{BCLog::NONE};\n \n-        void FormatLogStrInPlace(std::string& str, LogFlags category, Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const;\n+        void FormatLogStrInPlace(std::string& str, LogFlags category, Level level, const std::source_location& source_loc, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const;",
      "path": "src/logging.h",
      "position": 154,
      "original_position": 16,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "ca0c1a7a9ce9198c950e123d36c9e4bb13db13da",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: updating the ca0c1a7a9ce9198c950e123d36c9e4bb13db13da commit message with a brief mention of the behaviour change for `-logsourcelocations` would be helpful for both review and historical documentation purposes.",
      "created_at": "2025-06-19T11:10:05Z",
      "updated_at": "2025-06-19T12:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156745293",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156745293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 216,
      "original_line": 216,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156776849",
      "pull_request_review_id": 2942493812,
      "id": 2156776849,
      "node_id": "PRRC_kwDOABII586Ajc2R",
      "diff_hunk": "@@ -364,7 +365,7 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "ca0c1a7a9ce9198c950e123d36c9e4bb13db13da",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I don't think it's crucial to be super precise here, since it's only used briefly during startup, but I think this underestimating the `std::source_location` size a bit. It's not accounting the 2*4 bytes for `line` and `column`, nor the pointers (3 on [gcc](https://github.com/gcc-mirror/gcc/blob/4c80062d7b8c272e2e193b8074a8440dbb4fe588/libstdc%2B%2B-v3/include/std/source_location#L43-L88)) used to implement `std::source_location`. If people think it's crucial to get this (more) right, probably adding a separate `MemUsage(const std::source_location&)` could make sense.",
      "created_at": "2025-06-19T11:30:44Z",
      "updated_at": "2025-06-19T12:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156776849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156776849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 368,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156780094",
      "pull_request_review_id": 2942493812,
      "id": 2156780094,
      "node_id": "PRRC_kwDOABII586Ajdo-",
      "diff_hunk": "@@ -418,13 +419,13 @@ void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags catego\n     str.insert(0, LogTimestampStr(now, mocktime));\n }\n \n-void BCLog::Logger::LogPrintStr(std::string_view str, std::string_view logging_function, std::string_view source_file, int source_line, BCLog::LogFlags category, BCLog::Level level)\n+void BCLog::Logger::LogPrintStr(std::string_view str, std::source_location&& source_loc, BCLog::LogFlags category, BCLog::Level level)\n {\n     StdLockGuard scoped_lock(m_cs);\n-    return LogPrintStr_(str, logging_function, source_file, source_line, category, level);\n+    return LogPrintStr_(str, std::move(source_loc), category, level);",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 58,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "ca0c1a7a9ce9198c950e123d36c9e4bb13db13da",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: requires `#include <utility>`",
      "created_at": "2025-06-19T11:32:42Z",
      "updated_at": "2025-06-19T12:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156780094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156780094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 425,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156819515",
      "pull_request_review_id": 2942493812,
      "id": 2156819515,
      "node_id": "PRRC_kwDOABII586AjnQ7",
      "diff_hunk": "@@ -86,24 +95,34 @@ BOOST_AUTO_TEST_CASE(logging_timer)\n BOOST_FIXTURE_TEST_CASE(logging_LogPrintStr, LogSetup)\n {\n     LogInstance().m_log_sourcelocations = true;\n-    LogInstance().LogPrintStr(\"foo1: bar1\", \"fn1\", \"src1\", 1, BCLog::LogFlags::NET, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo2: bar2\", \"fn2\", \"src2\", 2, BCLog::LogFlags::NET, BCLog::Level::Info);\n-    LogInstance().LogPrintStr(\"foo3: bar3\", \"fn3\", \"src3\", 3, BCLog::LogFlags::ALL, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo4: bar4\", \"fn4\", \"src4\", 4, BCLog::LogFlags::ALL, BCLog::Level::Info);\n-    LogInstance().LogPrintStr(\"foo5: bar5\", \"fn5\", \"src5\", 5, BCLog::LogFlags::NONE, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo6: bar6\", \"fn6\", \"src6\", 6, BCLog::LogFlags::NONE, BCLog::Level::Info);\n+    std::vector<std::source_location> source_locs = {\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+    };\n+    LogInstance().LogPrintStr(\"foo1: bar1\", std::move(source_locs[0]), BCLog::LogFlags::NET, BCLog::Level::Debug, /*should_ratelimit=*/false);\n+    LogInstance().LogPrintStr(\"foo2: bar2\", std::move(source_locs[1]), BCLog::LogFlags::NET, BCLog::Level::Info, /*should_ratelimit=*/false);\n+    LogInstance().LogPrintStr(\"foo3: bar3\", std::move(source_locs[2]), BCLog::LogFlags::ALL, BCLog::Level::Debug, /*should_ratelimit=*/false);\n+    LogInstance().LogPrintStr(\"foo4: bar4\", std::move(source_locs[3]), BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false);\n+    LogInstance().LogPrintStr(\"foo5: bar5\", std::move(source_locs[4]), BCLog::LogFlags::NONE, BCLog::Level::Debug, /*should_ratelimit=*/false);\n+    LogInstance().LogPrintStr(\"foo6: bar6\", std::move(source_locs[5]), BCLog::LogFlags::NONE, BCLog::Level::Info, /*should_ratelimit=*/false);\n     std::ifstream file{tmp_log_path};\n     std::vector<std::string> log_lines;\n     for (std::string log; std::getline(file, log);) {\n         log_lines.push_back(log);\n     }\n+    std::string file_name = util::RemovePrefix(source_locs[0].file_name(), \"./\");\n+    std::string function_name{source_locs[0].function_name()};\n     std::vector<std::string> expected = {\n-        \"[src1:1] [fn1] [net] foo1: bar1\",\n-        \"[src2:2] [fn2] [net:info] foo2: bar2\",\n-        \"[src3:3] [fn3] [debug] foo3: bar3\",\n-        \"[src4:4] [fn4] foo4: bar4\",\n-        \"[src5:5] [fn5] [debug] foo5: bar5\",\n-        \"[src6:6] [fn6] foo6: bar6\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[0].line()) + \"] [\" + function_name + \"] [net] foo1: bar1\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[1].line()) + \"] [\" + function_name + \"] [net:info] foo2: bar2\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[2].line()) + \"] [\" + function_name + \"] [debug] foo3: bar3\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[3].line()) + \"] [\" + function_name + \"] foo4: bar4\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[4].line()) + \"] [\" + function_name + \"] [debug] foo5: bar5\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[5].line()) + \"] [\" + function_name + \"] foo6: bar6\",",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 72,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: can be cleaned up a bit:\r\n\r\n<details>\r\n<summary>git diff on b7d9c669ca</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/logging_tests.cpp b/src/test/logging_tests.cpp\r\nindex c9b7913ee4..d673792ab6 100644\r\n--- a/src/test/logging_tests.cpp\r\n+++ b/src/test/logging_tests.cpp\r\n@@ -114,15 +114,16 @@ BOOST_FIXTURE_TEST_CASE(logging_LogPrintStr, LogSetup)\r\n     for (std::string log; std::getline(file, log);) {\r\n         log_lines.push_back(log);\r\n     }\r\n-    std::string file_name = util::RemovePrefix(source_locs[0].file_name(), \"./\");\r\n-    std::string function_name{source_locs[0].function_name()};\r\n+    auto format_source_location = [](const std::source_location& loc) {\r\n+        return tfm::format(\"[%s:%s] [%s]\", util::RemovePrefixView(loc.file_name(), \"./\"), loc.line(), loc.function_name());\r\n+    };\r\n     std::vector<std::string> expected = {\r\n-        \"[\" + file_name + \":\" + util::ToString(source_locs[0].line()) + \"] [\" + function_name + \"] [net] foo1: bar1\",\r\n-        \"[\" + file_name + \":\" + util::ToString(source_locs[1].line()) + \"] [\" + function_name + \"] [net:info] foo2: bar2\",\r\n-        \"[\" + file_name + \":\" + util::ToString(source_locs[2].line()) + \"] [\" + function_name + \"] [debug] foo3: bar3\",\r\n-        \"[\" + file_name + \":\" + util::ToString(source_locs[3].line()) + \"] [\" + function_name + \"] foo4: bar4\",\r\n-        \"[\" + file_name + \":\" + util::ToString(source_locs[4].line()) + \"] [\" + function_name + \"] [debug] foo5: bar5\",\r\n-        \"[\" + file_name + \":\" + util::ToString(source_locs[5].line()) + \"] [\" + function_name + \"] foo6: bar6\",\r\n+        format_source_location(source_locs[0]) + \" [net] foo1: bar1\",\r\n+        format_source_location(source_locs[1]) + \" [net:info] foo2: bar2\",\r\n+        format_source_location(source_locs[2]) + \" [debug] foo3: bar3\",\r\n+        format_source_location(source_locs[3]) + \" foo4: bar4\",\r\n+        format_source_location(source_locs[4]) + \" [debug] foo5: bar5\",\r\n+        format_source_location(source_locs[5]) + \" foo6: bar6\",\r\n     };\r\n     BOOST_CHECK_EQUAL_COLLECTIONS(log_lines.begin(), log_lines.end(), expected.begin(), expected.end());\r\n }\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2025-06-19T11:50:24Z",
      "updated_at": "2025-06-19T12:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156819515",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156819515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 117,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156846978",
      "pull_request_review_id": 2942493812,
      "id": 2156846978,
      "node_id": "PRRC_kwDOABII586Ajt-C",
      "diff_hunk": "@@ -2976,15 +2976,19 @@ static void UpdateTipLog(\n {\n \n     AssertLockHeld(::cs_main);\n-    LogPrintf(\"%s%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\",\n-        prefix, func_name,\n-        tip->GetBlockHash().ToString(), tip->nHeight, tip->nVersion,\n-        log(tip->nChainWork.getdouble()) / log(2.0), tip->m_chain_tx_count,\n-        FormatISO8601DateTime(tip->GetBlockTime()),\n-        chainman.GuessVerificationProgress(tip),\n-        coins_tip.DynamicMemoryUsage() * (1.0 / (1 << 20)),\n-        coins_tip.GetCacheSize(),\n-        !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages) : \"\");\n+\n+    // We use the private LogPrintLevel_ macro here because we want to disable rate limiting from this location. This code\n+    // could use LogPrintLevel with the Info level to bypass rate-limiting, but it is more opaque. Using LogPrintLevel_",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> This code could use LogPrintLevel with the Info level to bypass rate-limiting\r\n\r\nI don't think that's correct? I'm not sure a long docstring is required here anyway, we already have decent documentation for the macros and functions involved. A brief \"don't rate limit because this can be hit frequently during IBD\" seems sufficient to me without overloading the reader with information.",
      "created_at": "2025-06-19T12:02:35Z",
      "updated_at": "2025-06-19T12:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156846978",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156846978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 2980,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2981,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156851022",
      "pull_request_review_id": 2942493812,
      "id": 2156851022,
      "node_id": "PRRC_kwDOABII586Aju9O",
      "diff_hunk": "@@ -33,7 +33,7 @@ class DebugLogHelper\n \n public:\n     explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    ~DebugLogHelper() noexcept(false) { check_found(); }",
      "path": "src/test/util/logging.h",
      "position": 7,
      "original_position": 5,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: (a brief version of) the commit message in 32615bffa6424625078e5bd9f6d79c7e99c9a322 would probably be helpful here as a docstring too?",
      "created_at": "2025-06-19T12:05:04Z",
      "updated_at": "2025-06-19T12:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156851022",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156851022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156881867",
      "pull_request_review_id": 2942493812,
      "id": 2156881867,
      "node_id": "PRRC_kwDOABII586Aj2fL",
      "diff_hunk": "@@ -364,17 +374,51 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::LogRateLimiter::NeedsRateLimiting(const std::source_location& source_loc, std::string& str)\n+{\n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    // Check to see if we were rate limited before calling MaybeResetWindow.\n+    was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+\n+    // If the window has elapsed, then we need to clear the unordered map and set.\n+    MaybeResetWindow(str);\n+\n+    is_ratelimited = !m_source_locations[source_loc].Consume(str.size());\n+\n+    if (is_ratelimited && !was_ratelimited) {\n+        // Logging from this source location will be suppressed until the current window resets.\n+        m_suppressed_locations.insert(source_loc);\n+\n+        str.insert(0, strprintf(\"Excessive logging detected from %s:%d (%s): >%d MiB logged during the last hour.\"\n+                                \"Suppressing logging to disk from this source location for up to one hour. \"\n+                                \"Console logging unaffected. Last log entry.\",",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 68,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should probably terminate with `\\n`?",
      "created_at": "2025-06-19T12:18:34Z",
      "updated_at": "2025-06-19T12:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156881867",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156881867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 400,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156895366",
      "pull_request_review_id": 2942493812,
      "id": 2156895366,
      "node_id": "PRRC_kwDOABII586Aj5yG",
      "diff_hunk": "@@ -364,17 +373,58 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+}\n+\n+bool BCLog::LogRateLimiter::NeedsRateLimiting(const std::source_location& source_loc, std::string& str)\n+{\n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    // Check to see if we were rate limited before calling MaybeResetWindow.\n+    was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+\n+    // If the window has elapsed, then we need to clear the unordered map and set.\n+    MaybeResetWindow();\n+\n+    is_ratelimited = !m_source_locations[source_loc].Consume(str.size());\n+\n+    if (!is_ratelimited && was_ratelimited) {\n+        uint64_t dropped_bytes = m_source_locations[source_loc].GetDroppedBytes();\n+\n+        str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                \"(%d MiB) were dropped during the last hour.\\n\",\n+                                source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                                dropped_bytes / (1024 * 1024)));",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 66,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": 2131861828,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, that looks good, thanks. It's unfortunate that these message are counted in `is_ratelimited = !m_source_locations[source_loc].Consume(str.size());`, but suppressions should be extremely rare, so triggering enough of them to cause a meaningful difference here seems impractical. A solution with not too much change could be to change to `MaybeResetWindow(const std::string& str, std::string& resume_msg)`, so we can keep separate accounting, but yeah not sure that's worth it/important.",
      "created_at": "2025-06-19T12:24:39Z",
      "updated_at": "2025-06-19T12:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156895366",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156895366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 396,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 399,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156949932",
      "pull_request_review_id": 2942900508,
      "id": 2156949932,
      "node_id": "PRRC_kwDOABII586AkHGs",
      "diff_hunk": "@@ -2976,15 +2976,19 @@ static void UpdateTipLog(\n {\n \n     AssertLockHeld(::cs_main);\n-    LogPrintf(\"%s%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\",\n-        prefix, func_name,\n-        tip->GetBlockHash().ToString(), tip->nHeight, tip->nVersion,\n-        log(tip->nChainWork.getdouble()) / log(2.0), tip->m_chain_tx_count,\n-        FormatISO8601DateTime(tip->GetBlockTime()),\n-        chainman.GuessVerificationProgress(tip),\n-        coins_tip.DynamicMemoryUsage() * (1.0 / (1 << 20)),\n-        coins_tip.GetCacheSize(),\n-        !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages) : \"\");\n+\n+    // We use the private LogPrintLevel_ macro here because we want to disable rate limiting from this location. This code\n+    // could use LogPrintLevel with the Info level to bypass rate-limiting, but it is more opaque. Using LogPrintLevel_",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 15,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "in_reply_to_id": 2156846978,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is an old comment, will change.",
      "created_at": "2025-06-19T12:48:29Z",
      "updated_at": "2025-06-19T12:48:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156949932",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156949932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 2980,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 2981,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156951199",
      "pull_request_review_id": 2942902702,
      "id": 2156951199,
      "node_id": "PRRC_kwDOABII586AkHaf",
      "diff_hunk": "@@ -364,7 +365,7 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "ca0c1a7a9ce9198c950e123d36c9e4bb13db13da",
      "in_reply_to_id": 2156776849,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I also noticed this and wasn't sure if it was worth bringing up.",
      "created_at": "2025-06-19T12:49:03Z",
      "updated_at": "2025-06-19T12:49:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2156951199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2156951199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 368,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2157303508",
      "pull_request_review_id": 2943499037,
      "id": 2157303508,
      "node_id": "PRRC_kwDOABII586AldbU",
      "diff_hunk": "@@ -364,7 +365,7 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "ca0c1a7a9ce9198c950e123d36c9e4bb13db13da",
      "in_reply_to_id": 2156776849,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was long overdue for my biannual confusion about (dynamic) memory usage, but luckily here it is. It seems like I got it entirely backwards in my previous comment. The memory pointed to by `std::source_location` is static, so I don't think we need to account for any of it beyond what the `memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>))` statement is already doing.\r\n\r\nOrthogonal, but since we're touching the line anyway: dynamic memory usage of `std::string` should be measured with `.capacity()` instead of `.size()`.  Or even better, use the [`DynamicUsage(const std::string&)`](https://github.com/bitcoin/bitcoin/blob/154b98a7aaae248f5d40ca567d1ec51410d09bae/src/memusage.h#L94) function we already have to also account for small string optimization, which, of course, is totally a thing.\r\n\r\nSo the function could become:\r\n\r\n```cpp\r\nstatic size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\r\n{\r\n    return memusage::DynamicUsage(buflog.str) +\r\n           memusage::DynamicUsage(buflog.threadname) +\r\n           memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\r\n}\r\n```\r\n\r\nAll in all, this should mean that thanks to ca0c1a7a9ce9198c950e123d36c9e4bb13db13da we can now buffer quite a bit more messages within our 1MB limit. Obviously not going to change anything meaningful, but wouldn't hurt to add a line to commit msg to highlight that.",
      "created_at": "2025-06-19T15:46:37Z",
      "updated_at": "2025-06-19T15:46:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2157303508",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2157303508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 368,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162510522",
      "pull_request_review_id": 2951505240,
      "id": 2162510522,
      "node_id": "PRRC_kwDOABII586A5Uq6",
      "diff_hunk": "@@ -364,17 +373,58 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+}\n+\n+bool BCLog::LogRateLimiter::NeedsRateLimiting(const std::source_location& source_loc, std::string& str)\n+{\n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    // Check to see if we were rate limited before calling MaybeResetWindow.\n+    was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+\n+    // If the window has elapsed, then we need to clear the unordered map and set.\n+    MaybeResetWindow();\n+\n+    is_ratelimited = !m_source_locations[source_loc].Consume(str.size());\n+\n+    if (!is_ratelimited && was_ratelimited) {\n+        uint64_t dropped_bytes = m_source_locations[source_loc].GetDroppedBytes();\n+\n+        str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                \"(%d MiB) were dropped during the last hour.\\n\",\n+                                source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                                dropped_bytes / (1024 * 1024)));",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 66,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": 2131861828,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Deciding to keep as-is",
      "created_at": "2025-06-23T20:50:35Z",
      "updated_at": "2025-06-23T20:50:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2162510522",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162510522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 396,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 399,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162510738",
      "pull_request_review_id": 2951505581,
      "id": 2162510738,
      "node_id": "PRRC_kwDOABII586A5UuS",
      "diff_hunk": "@@ -364,17 +373,58 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+}\n+\n+bool BCLog::LogRateLimiter::NeedsRateLimiting(const std::source_location& source_loc, std::string& str)\n+{\n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    // Check to see if we were rate limited before calling MaybeResetWindow.\n+    was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+\n+    // If the window has elapsed, then we need to clear the unordered map and set.\n+    MaybeResetWindow();\n+\n+    is_ratelimited = !m_source_locations[source_loc].Consume(str.size());\n+\n+    if (!is_ratelimited && was_ratelimited) {\n+        uint64_t dropped_bytes = m_source_locations[source_loc].GetDroppedBytes();\n+\n+        str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                \"(%d MiB) were dropped during the last hour.\\n\",\n+                                source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                                dropped_bytes / (1024 * 1024)));\n+    } else if (is_ratelimited && !was_ratelimited) {\n+        // Logging from this source location will be suppressed until the current window resets.\n+        m_suppressed_locations.insert(source_loc);\n+\n+        str.insert(0, strprintf(\"Excessive logging detected from %s:%d (%s): >%d MiB logged during the last hour.\"\n+                                \"Suppressing logging to disk from this source location for up to one hour. \"\n+                                \"Console logging unaffected. Last log entry.\",\n+                                source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                                WINDOW_MAX_BYTES / (1024 * 1024)));\n+    }\n+\n+    // To avoid confusion caused by dropped log messages when debugging an issue,\n+    // we prefix log lines with \"[*]\" when there are any suppressed source locations.\n+    if (m_suppressed_locations.size() > 0) {\n+        str.insert(0, \"[*] \");\n+    }\n+\n+    return was_ratelimited && is_ratelimited;\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, const std::source_location& source_loc, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n {\n     if (!str.ends_with('\\n')) str.push_back('\\n');\n \n     str.insert(0, GetLogPrefix(category, level));\n \n     if (m_log_sourcelocations) {\n-        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_file, \"./\"), source_line, logging_function));\n+        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_loc.file_name(), \"./\"), source_loc.line(), source_loc.function_name()));",
      "path": "src/logging.cpp",
      "position": 69,
      "original_position": 96,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "911ee520c843b885a2ac01c88b4da15d2136fbc1",
      "in_reply_to_id": 2131883418,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-06-23T20:50:45Z",
      "updated_at": "2025-06-23T20:50:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2162510738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162510738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 405,
      "original_line": 405,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162511290",
      "pull_request_review_id": 2951506333,
      "id": 2162511290,
      "node_id": "PRRC_kwDOABII586A5U26",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && strcmp(lhs.file_name(), rhs.file_name()) == 0;\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.\n+        return static_cast<size_t>(CSipHasher(0, 0)\n+                                       .Write(std::hash<std::string_view>{}(s.file_name()))\n+                                       .Write(std::hash<int>{}(s.line()))",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 40,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "in_reply_to_id": 2156708724,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yup good catch",
      "created_at": "2025-06-23T20:51:04Z",
      "updated_at": "2025-06-23T20:51:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2162511290",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162511290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162512264",
      "pull_request_review_id": 2951508140,
      "id": 2162512264,
      "node_id": "PRRC_kwDOABII586A5VGI",
      "diff_hunk": "@@ -364,7 +365,7 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "ca0c1a7a9ce9198c950e123d36c9e4bb13db13da",
      "in_reply_to_id": 2156776849,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nice catch, I missed that `std::source_location` was part of `BufferedLog` and therefore included in the `MallocUsage` call.",
      "created_at": "2025-06-23T20:51:49Z",
      "updated_at": "2025-06-23T20:51:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2162512264",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162512264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 368,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162512398",
      "pull_request_review_id": 2951508366,
      "id": 2162512398,
      "node_id": "PRRC_kwDOABII586A5VIO",
      "diff_hunk": "@@ -86,24 +95,34 @@ BOOST_AUTO_TEST_CASE(logging_timer)\n BOOST_FIXTURE_TEST_CASE(logging_LogPrintStr, LogSetup)\n {\n     LogInstance().m_log_sourcelocations = true;\n-    LogInstance().LogPrintStr(\"foo1: bar1\", \"fn1\", \"src1\", 1, BCLog::LogFlags::NET, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo2: bar2\", \"fn2\", \"src2\", 2, BCLog::LogFlags::NET, BCLog::Level::Info);\n-    LogInstance().LogPrintStr(\"foo3: bar3\", \"fn3\", \"src3\", 3, BCLog::LogFlags::ALL, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo4: bar4\", \"fn4\", \"src4\", 4, BCLog::LogFlags::ALL, BCLog::Level::Info);\n-    LogInstance().LogPrintStr(\"foo5: bar5\", \"fn5\", \"src5\", 5, BCLog::LogFlags::NONE, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo6: bar6\", \"fn6\", \"src6\", 6, BCLog::LogFlags::NONE, BCLog::Level::Info);\n+    std::vector<std::source_location> source_locs = {\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+    };\n+    LogInstance().LogPrintStr(\"foo1: bar1\", std::move(source_locs[0]), BCLog::LogFlags::NET, BCLog::Level::Debug, /*should_ratelimit=*/false);\n+    LogInstance().LogPrintStr(\"foo2: bar2\", std::move(source_locs[1]), BCLog::LogFlags::NET, BCLog::Level::Info, /*should_ratelimit=*/false);\n+    LogInstance().LogPrintStr(\"foo3: bar3\", std::move(source_locs[2]), BCLog::LogFlags::ALL, BCLog::Level::Debug, /*should_ratelimit=*/false);\n+    LogInstance().LogPrintStr(\"foo4: bar4\", std::move(source_locs[3]), BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false);\n+    LogInstance().LogPrintStr(\"foo5: bar5\", std::move(source_locs[4]), BCLog::LogFlags::NONE, BCLog::Level::Debug, /*should_ratelimit=*/false);\n+    LogInstance().LogPrintStr(\"foo6: bar6\", std::move(source_locs[5]), BCLog::LogFlags::NONE, BCLog::Level::Info, /*should_ratelimit=*/false);\n     std::ifstream file{tmp_log_path};\n     std::vector<std::string> log_lines;\n     for (std::string log; std::getline(file, log);) {\n         log_lines.push_back(log);\n     }\n+    std::string file_name = util::RemovePrefix(source_locs[0].file_name(), \"./\");\n+    std::string function_name{source_locs[0].function_name()};\n     std::vector<std::string> expected = {\n-        \"[src1:1] [fn1] [net] foo1: bar1\",\n-        \"[src2:2] [fn2] [net:info] foo2: bar2\",\n-        \"[src3:3] [fn3] [debug] foo3: bar3\",\n-        \"[src4:4] [fn4] foo4: bar4\",\n-        \"[src5:5] [fn5] [debug] foo5: bar5\",\n-        \"[src6:6] [fn6] foo6: bar6\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[0].line()) + \"] [\" + function_name + \"] [net] foo1: bar1\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[1].line()) + \"] [\" + function_name + \"] [net:info] foo2: bar2\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[2].line()) + \"] [\" + function_name + \"] [debug] foo3: bar3\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[3].line()) + \"] [\" + function_name + \"] foo4: bar4\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[4].line()) + \"] [\" + function_name + \"] [debug] foo5: bar5\",\n+        \"[\" + file_name + \":\" + util::ToString(source_locs[5].line()) + \"] [\" + function_name + \"] foo6: bar6\",",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 72,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "in_reply_to_id": 2156819515,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "done",
      "created_at": "2025-06-23T20:51:55Z",
      "updated_at": "2025-06-23T20:51:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2162512398",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2162512398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 117,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163176717",
      "pull_request_review_id": 2952512677,
      "id": 2163176717,
      "node_id": "PRRC_kwDOABII586A73UN",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && strcmp(lhs.file_name(), rhs.file_name()) == 0;",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 30,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I find mixing C++20 code with C API a bit clunky, if you touch again, consider either comparing their `std::string_view` wrappers or maybe even adding such a helper to `string.h` for `const char*` values.\r\n\r\nedit: also note that equality check may be easier to optimize internally than a comparison",
      "created_at": "2025-06-24T07:32:24Z",
      "updated_at": "2025-06-24T12:36:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163176717",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163176717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163179624",
      "pull_request_review_id": 2952512677,
      "id": 2163179624,
      "node_id": "PRRC_kwDOABII586A74Bo",
      "diff_hunk": "@@ -106,6 +108,15 @@ void BCLog::Logger::DisconnectTestLogger()\n     m_msgs_before_open.clear();\n }\n \n+void BCLog::Logger::ResetLimiter()\n+{\n+    StdLockGuard scoped_lock(m_cs);\n+    const auto now{NodeClock::now()};\n+    m_limiter.m_last_reset = now;",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 34,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I understand when the time is split off from the measured code to make sure it's accurate - but I don't see how that's the case here, consider inlining it:\r\n```suggestion\r\n    m_limiter.m_last_reset = NodeClock::now();\r\n```",
      "created_at": "2025-06-24T07:34:01Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163179624",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163179624"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 114,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163198581",
      "pull_request_review_id": 2952512677,
      "id": 2163198581,
      "node_id": "PRRC_kwDOABII586A78p1",
      "diff_hunk": "@@ -248,32 +335,38 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n         } catch (tinyformat::format_error& fmterr) {\n             log_msg = \"Error \\\"\" + std::string{fmterr.what()} + \"\\\" while formatting log message: \" + fmt.fmt;\n         }\n-        LogInstance().LogPrintStr(log_msg, logging_function, source_file, source_line, flag, level);\n+        LogInstance().LogPrintStr(log_msg, std::move(source_loc), flag, level, should_ratelimit);\n     }\n }\n \n-#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(__func__, __FILE__, __LINE__, category, level, __VA_ARGS__)\n+#define LogPrintLevel_(category, level, should_ratelimit, ...) LogPrintFormatInternal(std::source_location::current(), category, level, should_ratelimit, __VA_ARGS__)\n \n-// Log unconditionally.\n+// Log unconditionally. Uses basic rate limiting to mitigate disk filling attacks.",
      "path": "src/logging.h",
      "position": 211,
      "original_position": 194,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Seems to me the first two sentences contradict each other now: \"log unconditionally, unless it doesn't fulfill the rate limiting condition\"",
      "created_at": "2025-06-24T07:44:10Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163198581",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163198581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163209427",
      "pull_request_review_id": 2952512677,
      "id": 2163209427,
      "node_id": "PRRC_kwDOABII586A7_TT",
      "diff_hunk": "@@ -248,32 +335,38 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n         } catch (tinyformat::format_error& fmterr) {\n             log_msg = \"Error \\\"\" + std::string{fmterr.what()} + \"\\\" while formatting log message: \" + fmt.fmt;\n         }\n-        LogInstance().LogPrintStr(log_msg, logging_function, source_file, source_line, flag, level);\n+        LogInstance().LogPrintStr(log_msg, std::move(source_loc), flag, level, should_ratelimit);\n     }\n }\n \n-#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(__func__, __FILE__, __LINE__, category, level, __VA_ARGS__)\n+#define LogPrintLevel_(category, level, should_ratelimit, ...) LogPrintFormatInternal(std::source_location::current(), category, level, should_ratelimit, __VA_ARGS__)\n \n-// Log unconditionally.\n+// Log unconditionally. Uses basic rate limiting to mitigate disk filling attacks.\n // Be conservative when using functions that unconditionally log to debug.log!\n // It should not be the case that an inbound peer can fill up a user's storage\n // with debug.log entries.\n-#define LogInfo(...) LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, __VA_ARGS__)\n-#define LogWarning(...) LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Warning, __VA_ARGS__)\n-#define LogError(...) LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Error, __VA_ARGS__)\n+#define LogInfo(...) LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/true, __VA_ARGS__)\n+#define LogWarning(...) LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Warning, /*should_ratelimit=*/true, __VA_ARGS__)\n+#define LogError(...) LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Error, /*should_ratelimit=*/true, __VA_ARGS__)\n \n // Deprecated unconditional logging.\n #define LogPrintf(...) LogInfo(__VA_ARGS__)\n \n // Use a macro instead of a function for conditional logging to prevent\n // evaluating arguments when logging for the category is not enabled.\n \n-// Log conditionally, prefixing the output with the passed category name and severity level.\n-#define LogPrintLevel(category, level, ...)               \\\n-    do {                                                  \\\n-        if (LogAcceptCategory((category), (level))) {     \\\n-            LogPrintLevel_(category, level, __VA_ARGS__); \\\n-        }                                                 \\\n+// Log by prefixing the output with the passed category name and severity level. This can either\n+// log conditionally if the category is allowed or unconditionally if level >= BCLog::Level::Info\n+// is passed. If this function logs unconditionally, logging to disk is rate-limited. This is\n+// important so that callers don't need to worry about accidentally introducing a disk-fill\n+// vulnerability if level >= Info is used. Additionally, users specifying -debug are assumed to be\n+// developers or power users who are aware that -debug may cause excessive disk usage due to logging.",
      "path": "src/logging.h",
      "position": 239,
      "original_position": 222,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That's a reasonable assumption - if a bug could trigger debug logging, we'd likely have bigger problems I guess",
      "created_at": "2025-06-24T07:49:01Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163209427",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163209427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163211212",
      "pull_request_review_id": 2952512677,
      "id": 2163211212,
      "node_id": "PRRC_kwDOABII586A7_vM",
      "diff_hunk": "@@ -60,6 +67,9 @@ struct LogSetup : public BasicTestingSetup {\n \n         LogInstance().SetLogLevel(BCLog::Level::Debug);\n         LogInstance().SetCategoryLogLevel({});\n+\n+        // Prevent tests from getting rate-limited.",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does this \"prevent\" rate limiting or just allows one more megabyte?",
      "created_at": "2025-06-24T07:50:00Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163211212",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163211212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163230657",
      "pull_request_review_id": 2952512677,
      "id": 2163230657,
      "node_id": "PRRC_kwDOABII586A8EfB",
      "diff_hunk": "@@ -86,24 +96,35 @@ BOOST_AUTO_TEST_CASE(logging_timer)\n BOOST_FIXTURE_TEST_CASE(logging_LogPrintStr, LogSetup)\n {\n     LogInstance().m_log_sourcelocations = true;\n-    LogInstance().LogPrintStr(\"foo1: bar1\", \"fn1\", \"src1\", 1, BCLog::LogFlags::NET, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo2: bar2\", \"fn2\", \"src2\", 2, BCLog::LogFlags::NET, BCLog::Level::Info);\n-    LogInstance().LogPrintStr(\"foo3: bar3\", \"fn3\", \"src3\", 3, BCLog::LogFlags::ALL, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo4: bar4\", \"fn4\", \"src4\", 4, BCLog::LogFlags::ALL, BCLog::Level::Info);\n-    LogInstance().LogPrintStr(\"foo5: bar5\", \"fn5\", \"src5\", 5, BCLog::LogFlags::NONE, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo6: bar6\", \"fn6\", \"src6\", 6, BCLog::LogFlags::NONE, BCLog::Level::Info);\n+    std::vector<std::source_location> source_locs = {\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+    };",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this seems a bit hacky to me - this is basically a parameterized test where we implicitly verify the inputs produce the desired outputs, line-by-line. It could make sense to store it in a way that indicates more clearly which outputs we're expecting for which inputs.\r\n\r\nWe do need separate `::current()` calls to capture that the lines are assigned properly, we could add those to the parameterized test values as well.\r\n\r\nI also find it a bit awkward that we're concatenating the result of a `tfm::format` with strings instead of having a final formatter.\r\n\r\nLastly, do we really need the `RemovePrefix` here, given that we know the exact file structiure?\r\n\r\nPlease consider something like this for clarity:\r\n```C++\r\nBOOST_FIXTURE_TEST_CASE(logging_LogPrintStr, LogSetup)\r\n{\r\n    LogInstance().m_log_sourcelocations = true;\r\n\r\n    struct Case {\r\n        std::string msg;\r\n        BCLog::LogFlags cat;\r\n        BCLog::Level level;\r\n        std::string prefix;\r\n        std::source_location loc;\r\n    };\r\n\r\n    std::vector<Case> cases = {\r\n        {\"foo1: bar1\", BCLog::NET,  BCLog::Level::Debug, \"[net] \",      std::source_location::current()},\r\n        {\"foo2: bar2\", BCLog::NET,  BCLog::Level::Info,  \"[net:info] \", std::source_location::current()},\r\n        {\"foo3: bar3\", BCLog::ALL,  BCLog::Level::Debug, \"[debug] \",    std::source_location::current()},\r\n        {\"foo4: bar4\", BCLog::ALL,  BCLog::Level::Info,  \"\",            std::source_location::current()},\r\n        {\"foo5: bar5\", BCLog::NONE, BCLog::Level::Debug, \"[debug] \",    std::source_location::current()},\r\n        {\"foo6: bar6\", BCLog::NONE, BCLog::Level::Info,  \"\",            std::source_location::current()},\r\n    };\r\n\r\n    std::vector<std::string> expected;\r\n    for (auto& [msg, cat, level, prefix, loc] : cases) {\r\n        expected.push_back(tfm::format(\"[%s:%s] [%s] %s%s\", loc.file_name(), loc.line(), loc.function_name(), prefix, msg));\r\n        LogInstance().LogPrintStr(msg, std::move(loc), cat, level, /*should_ratelimit=*/false);\r\n    }\r\n    std::ifstream file{tmp_log_path};\r\n    std::string line;\r\n    for (const auto& exp : expected) {\r\n        BOOST_REQUIRE(std::getline(file, line));\r\n        BOOST_CHECK_EQUAL(line, exp);\r\n    }\r\n    BOOST_CHECK(!std::getline(file, line));\r\n}\r\n```",
      "created_at": "2025-06-24T07:59:22Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163230657",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163230657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163285496",
      "pull_request_review_id": 2952512677,
      "id": 2163285496,
      "node_id": "PRRC_kwDOABII586A8R34",
      "diff_hunk": "@@ -276,4 +297,126 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(logging_sourcelocation_counter)",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 82,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 nice and clear test",
      "created_at": "2025-06-24T08:26:06Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163285496",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163285496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 300,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163309586",
      "pull_request_review_id": 2952512677,
      "id": 2163309586,
      "node_id": "PRRC_kwDOABII586A8XwS",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && strcmp(lhs.file_name(), rhs.file_name()) == 0;\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.",
      "path": "src/logging.h",
      "position": 37,
      "original_position": 37,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not a fan of dead comments, could we rather extract it to a named variable, something like `CSipHasher uniform(0, 0)` instead of explaining code with text?\r\n\r\n----\r\n\r\n\r\nnit: Maybe my formatter is off, but do we really need to push the formatted lines so far out? ",
      "created_at": "2025-06-24T08:35:36Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163309586",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163309586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163313166",
      "pull_request_review_id": 2952512677,
      "id": 2163313166,
      "node_id": "PRRC_kwDOABII586A8YoO",
      "diff_hunk": "@@ -82,15 +104,74 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};",
      "path": "src/logging.h",
      "position": 50,
      "original_position": 50,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find this confusing (either the name or the value), by default debug logs aren't displayed...",
      "created_at": "2025-06-24T08:37:18Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163313166",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163313166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163325418",
      "pull_request_review_id": 2952512677,
      "id": 2163325418,
      "node_id": "PRRC_kwDOABII586A8bnq",
      "diff_hunk": "@@ -82,15 +104,74 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class SourceLocationCounter",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 55,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "naming nit again: we're not counting the source locations, rather assigning the statistics we collect here to a `std::source_location` later - we're mixing abstraction levels this way, we're naming something based on how we're planning on using it later (instead of what it is or what it does), such as `LogLimitStats` or something similar.",
      "created_at": "2025-06-24T08:43:07Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163325418",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163325418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163341392",
      "pull_request_review_id": 2952512677,
      "id": 2163341392,
      "node_id": "PRRC_kwDOABII586A8fhQ",
      "diff_hunk": "@@ -276,4 +297,126 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(logging_sourcelocation_counter)\n+{\n+    BCLog::SourceLocationCounter counter;\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;",
      "path": "src/test/logging_tests.cpp",
      "position": 158,
      "original_position": 113,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "These two cases are basically the same and they depend on a magic int that I will have to tie to some other integers somewhere else to understand what it means. \r\nCould we make this a parameterized test as well, maybe with a `std::function` and more type safety instead of an `int` with only **4** allowed values ",
      "created_at": "2025-06-24T08:50:37Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163341392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163341392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 375,
      "original_start_line": 326,
      "start_side": "RIGHT",
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163349298",
      "pull_request_review_id": 2952512677,
      "id": 2163349298,
      "node_id": "PRRC_kwDOABII586A8hcy",
      "diff_hunk": "@@ -276,4 +297,126 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(logging_sourcelocation_counter)\n+{\n+    BCLog::SourceLocationCounter counter;\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(rate_limiting, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    SetMockTime(std::chrono::hours{1});\n+\n+    // Reset m_limiter so that it uses the above mock time for m_last_reset.\n+    LogInstance().ResetLimiter();\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.",
      "path": "src/test/logging_tests.cpp",
      "position": 198,
      "original_position": 152,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can we make this value parameterizable instead of referencing a value in a comment?\r\nIt's not trivial that the `1024` (or 512 + 512 in other places) has to coincide with the `1_MiB` in another place.",
      "created_at": "2025-06-24T08:53:57Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163349298",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163349298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 420,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163352258",
      "pull_request_review_id": 2952512677,
      "id": 2163352258,
      "node_id": "PRRC_kwDOABII586A8iLC",
      "diff_hunk": "@@ -2976,15 +2976,17 @@ static void UpdateTipLog(\n {\n \n     AssertLockHeld(::cs_main);\n-    LogPrintf(\"%s%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\",\n-        prefix, func_name,\n-        tip->GetBlockHash().ToString(), tip->nHeight, tip->nVersion,\n-        log(tip->nChainWork.getdouble()) / log(2.0), tip->m_chain_tx_count,\n-        FormatISO8601DateTime(tip->GetBlockTime()),\n-        chainman.GuessVerificationProgress(tip),\n-        coins_tip.DynamicMemoryUsage() * (1.0 / (1 << 20)),\n-        coins_tip.GetCacheSize(),\n-        !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages) : \"\");\n+\n+    // Disable rate limiting in LogPrintLevel_ so that this location is not rate limited during IBD.",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "the code already states `/*should_ratelimit=*/false`, there's no point in repeating that a few more times in a comment",
      "created_at": "2025-06-24T08:55:12Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163352258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163352258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163363232",
      "pull_request_review_id": 2952512677,
      "id": 2163363232,
      "node_id": "PRRC_kwDOABII586A8k2g",
      "diff_hunk": "@@ -82,6 +104,65 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class SourceLocationCounter\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes{RATELIMIT_MAX_BYTES};\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether or not enough bytes were available.",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 66,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "40298a86d21a4a47cb297a96d3cbaa2714acc7fd",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n        //! Returns whether enough bytes were available.\r\n```",
      "created_at": "2025-06-24T08:59:41Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163363232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163363232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163370546",
      "pull_request_review_id": 2952512677,
      "id": 2163370546,
      "node_id": "PRRC_kwDOABII586A8moy",
      "diff_hunk": "@@ -492,6 +522,40 @@ void BCLog::Logger::ShrinkDebugFile()\n         fclose(file);\n }\n \n+void BCLog::LogRateLimiter::MaybeResetWindow(std::string& str)\n+{\n+    const auto now{NodeClock::now()};\n+    if ((now - m_last_reset) >= WINDOW_SIZE) {\n+        m_last_reset = now;\n+\n+        // Iterate through m_suppressed_locations and log that we're resetting the window for each\n+        // suppressed location.",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 48,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "40298a86d21a4a47cb297a96d3cbaa2714acc7fd",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The comment duplicates the code, this is already clear from the method name and from what follows.",
      "created_at": "2025-06-24T09:03:09Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163370546",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163370546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 531,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 532,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163389932",
      "pull_request_review_id": 2952512677,
      "id": 2163389932,
      "node_id": "PRRC_kwDOABII586A8rXs",
      "diff_hunk": "@@ -82,6 +104,65 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window",
      "path": "src/logging.h",
      "position": 52,
      "original_position": 52,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "40298a86d21a4a47cb297a96d3cbaa2714acc7fd",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "do we need to mix the two system here, base 1000 with base 1024?",
      "created_at": "2025-06-24T09:10:15Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163389932",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163389932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 106,
      "original_start_line": 106,
      "start_side": "RIGHT",
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163415514",
      "pull_request_review_id": 2952512677,
      "id": 2163415514,
      "node_id": "PRRC_kwDOABII586A8xna",
      "diff_hunk": "@@ -364,7 +366,9 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return memusage::DynamicUsage(buflog.str) +",
      "path": "src/logging.cpp",
      "position": 31,
      "original_position": 31,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "d41a39e43c219eb0b06b8df2c2c5d24baaf015c4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this memory usage change needs a commit message explanation in d41a39e43c219eb0b06b8df2c2c5d24baaf015c4 (it explains why `logging_function` counting was removed, but not why `source_file` was as far as I can tell)\r\n\r\n----\r\n\r\nDid you validate in any way that this is indeed representative of the memory consumption? Or it's just a guess anyway, so it's not important?",
      "created_at": "2025-06-24T09:16:05Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163415514",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163415514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 369,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163433402",
      "pull_request_review_id": 2952512677,
      "id": 2163433402,
      "node_id": "PRRC_kwDOABII586A81-6",
      "diff_hunk": "@@ -414,13 +418,13 @@ void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags catego\n     str.insert(0, LogTimestampStr(now, mocktime));",
      "path": "src/logging.cpp",
      "position": 74,
      "original_position": 55,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "d41a39e43c219eb0b06b8df2c2c5d24baaf015c4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "isn't it expensive to insert so often in front of the string?",
      "created_at": "2025-06-24T09:22:48Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163433402",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163433402"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 412,
      "original_line": 412,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163441070",
      "pull_request_review_id": 2952512677,
      "id": 2163441070,
      "node_id": "PRRC_kwDOABII586A832u",
      "diff_hunk": "@@ -82,7 +82,7 @@ def test_negated_config(self):\n \n         self.log.debug('Verifying that disabling of the config file means garbage inside of it does ' \\\n             'not prevent the node from starting, and message about existing config file is logged')\n-        ignored_file_message = [f'[InitConfig] Data directory \"{self.nodes[0].datadir_path}\" contains a \"bitcoin.conf\" file which is explicitly ignored using -noconf.']\n+        ignored_file_message = [f'Data directory \"{self.nodes[0].datadir_path}\" contains a \"bitcoin.conf\" file which is explicitly ignored using -noconf.']",
      "path": "test/functional/feature_config_args.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "d41a39e43c219eb0b06b8df2c2c5d24baaf015c4",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you please explain in the commit message which change caused the removal of `[InitConfig]` here?",
      "created_at": "2025-06-24T09:26:26Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163441070",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163441070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163453570",
      "pull_request_review_id": 2952512677,
      "id": 2163453570,
      "node_id": "PRRC_kwDOABII586A866C",
      "diff_hunk": "",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Commit message claims `a source location can log up to 1MiB of data`, but code states `constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging` - I'm confused why we have this discrepancy ",
      "created_at": "2025-06-24T09:32:41Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163453570",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163453570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163455426",
      "pull_request_review_id": 2952512677,
      "id": 2163455426,
      "node_id": "PRRC_kwDOABII586A87XC",
      "diff_hunk": "@@ -457,6 +466,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& so\n     }\n \n     FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit = should_ratelimit && m_limiter.NeedsRateLimiting(source_loc, str_prefixed);",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can we move this closer to its usage?",
      "created_at": "2025-06-24T09:33:35Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163455426",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163455426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163470452",
      "pull_request_review_id": 2952512677,
      "id": 2163470452,
      "node_id": "PRRC_kwDOABII586A8_B0",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm doing a reindex benchmark to check if the current implementation has any performance burden\r\n\r\nEdit: reindexing until 900k indicates there's no slowdown caused by this change\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```bash\r\nCOMMITS=\"e95bfc1d537e06d223dfcaec510181aa3d3f8386 f29b081b9277332523b7025394cad15b02cc53d2\"; \\\r\nSTOP=900000; DBCACHE=2500; \\\r\nCC=gcc; CXX=g++; \\\r\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\r\n(echo \"\"; for c in $COMMITS; do git fetch -q origin $c && git log -1 --pretty='%h %s' $c || exit 1; done; echo \"\") && \\\r\nhyperfine \\\r\n  --sort command \\\r\n  --runs 1 \\\r\n  --export-json \"$BASE_DIR/rdx-$(sed -E 's/(\\w{8})\\w+ ?/\\1-/g;s/-$//'<<<\"$COMMITS\")-$STOP-$DBCACHE-$CC.json\" \\\r\n  --parameter-list COMMIT ${COMMITS// /,} \\\r\n  --prepare \"killall bitcoind; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard && \\\r\n    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release && ninja -C build bitcoind && \\\r\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=1000 -printtoconsole=0; sleep 10\" \\\r\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log\" \\\r\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP -dbcache=$DBCACHE -reindex -blocksonly -connect=0 -printtoconsole=0\"\r\n```\r\n\r\n> e95bfc1d53 Merge bitcoin/bitcoin#32797: doc: archive 28.2 release notes\r\n> f29b081b92 doc: add release notes for new rate limiting logging behavior\r\n\r\n```python\r\nBenchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=900000 -dbcache=2500 -reindex -blocksonly -connect=0 -printtoconsole=0 (COMMIT = e95bfc1d537e06d223dfcaec510181aa3d3f8386)\r\n  Time (abs ≡):        29033.291 s               [User: 43597.672 s, System: 1644.619 s]\r\n \r\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=900000 -dbcache=2500 -reindex -blocksonly -connect=0 -printtoconsole=0 (COMMIT = f29b081b9277332523b7025394cad15b02cc53d2)\r\n  Time (abs ≡):        28875.472 s               [User: 43552.019 s, System: 1541.380 s]\r\n```\r\n \r\n```python\r\nRelative speed comparison\r\n        1.01          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=900000 -dbcache=2500 -reindex -blocksonly -connect=0 -printtoconsole=0 (COMMIT = e95bfc1d537e06d223dfcaec510181aa3d3f8386)\r\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=900000 -dbcache=2500 -reindex -blocksonly -connect=0 -printtoconsole=0 (COMMIT = f29b081b9277332523b7025394cad15b02cc53d2)\r\n```\r\n\r\n</details>",
      "created_at": "2025-06-24T09:41:15Z",
      "updated_at": "2025-06-25T08:07:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163470452",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163470452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163481929",
      "pull_request_review_id": 2952512677,
      "id": 2163481929,
      "node_id": "PRRC_kwDOABII586A9B1J",
      "diff_hunk": "@@ -364,7 +365,7 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + strlen(buflog.source_loc.function_name()) + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 28,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "ca0c1a7a9ce9198c950e123d36c9e4bb13db13da",
      "in_reply_to_id": 2156776849,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 ",
      "created_at": "2025-06-24T09:47:03Z",
      "updated_at": "2025-06-24T09:49:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163481929",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163481929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 368,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163614334",
      "pull_request_review_id": 2953239598,
      "id": 2163614334,
      "node_id": "PRRC_kwDOABII586A9iJ-",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && strcmp(lhs.file_name(), rhs.file_name()) == 0;\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.",
      "path": "src/logging.h",
      "position": 37,
      "original_position": 37,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163309586,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think this is a dead comment, the choice for using siphash over e.g. std::hash is not obvious (to me), and just naming the variable `uniform` would not have been clear to me. Would prefer keeping this as is.",
      "created_at": "2025-06-24T10:49:39Z",
      "updated_at": "2025-06-24T10:49:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163614334",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163614334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163620350",
      "pull_request_review_id": 2953249883,
      "id": 2163620350,
      "node_id": "PRRC_kwDOABII586A9jn-",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && strcmp(lhs.file_name(), rhs.file_name()) == 0;\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.",
      "path": "src/logging.h",
      "position": 37,
      "original_position": 37,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163309586,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we name the variable such that the choice is obvious instead of adding extra comments?",
      "created_at": "2025-06-24T10:51:19Z",
      "updated_at": "2025-06-24T10:51:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163620350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163620350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163626313",
      "pull_request_review_id": 2953259153,
      "id": 2163626313,
      "node_id": "PRRC_kwDOABII586A9lFJ",
      "diff_hunk": "",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": 2163453570,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "They could be the same value, but they're unrelated things, and I don't think it's relevant in this PR. `DEFAULT_MAX_LOG_BUFFER` represents the max size of the buffer that holds log messages (across all locations) that are produced before we start writing them to file. ",
      "created_at": "2025-06-24T10:53:00Z",
      "updated_at": "2025-06-24T10:53:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163626313",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163626313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163635733",
      "pull_request_review_id": 2953273176,
      "id": 2163635733,
      "node_id": "PRRC_kwDOABII586A9nYV",
      "diff_hunk": "",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": 2163453570,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Misunderstood that part, thanks. The different base part still applies (though I know this isn't uncommon in the code base)",
      "created_at": "2025-06-24T10:55:59Z",
      "updated_at": "2025-06-24T10:56:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163635733",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163635733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163644659",
      "pull_request_review_id": 2953285110,
      "id": 2163644659,
      "node_id": "PRRC_kwDOABII586A9pjz",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && strcmp(lhs.file_name(), rhs.file_name()) == 0;\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.",
      "path": "src/logging.h",
      "position": 37,
      "original_position": 37,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163309586,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "By \"dead\" I meant that it doesn't bite back (like code does), it can state absolutely anything and the compiler won't help us. Comments usually seem to me like we've given up on trying to express our design within the boundaries of the language. In a few cases here I think the code can be slightly improved to eliminate the need for extra comments.",
      "created_at": "2025-06-24T10:58:33Z",
      "updated_at": "2025-06-24T10:58:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163644659",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163644659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163778896",
      "pull_request_review_id": 2953502925,
      "id": 2163778896,
      "node_id": "PRRC_kwDOABII586A-KVQ",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && strcmp(lhs.file_name(), rhs.file_name()) == 0;\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.",
      "path": "src/logging.h",
      "position": 37,
      "original_position": 37,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163309586,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The choice of a hashing algorithm has many dimensions (distribution, performance, collision resistance, ...). Capturing that rationale in a variable name seems an unrealistic expectation. I'm all for removing dead comments but this seems not the place to me.",
      "created_at": "2025-06-24T12:03:20Z",
      "updated_at": "2025-06-24T12:03:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163778896",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163778896"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163787286",
      "pull_request_review_id": 2953515067,
      "id": 2163787286,
      "node_id": "PRRC_kwDOABII586A-MYW",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && strcmp(lhs.file_name(), rhs.file_name()) == 0;\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.",
      "path": "src/logging.h",
      "position": 37,
      "original_position": 37,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163309586,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's possible that this isn't the place, but it doesn't currently explain performance or collision resistance either - but if those are importance, maybe we could explain them in the commit message instead.",
      "created_at": "2025-06-24T12:06:10Z",
      "updated_at": "2025-06-24T12:06:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163787286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163787286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163788183",
      "pull_request_review_id": 2953516226,
      "id": 2163788183,
      "node_id": "PRRC_kwDOABII586A-MmX",
      "diff_hunk": "@@ -82,6 +104,65 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window",
      "path": "src/logging.h",
      "position": 52,
      "original_position": 52,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "40298a86d21a4a47cb297a96d3cbaa2714acc7fd",
      "in_reply_to_id": 2163389932,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Both are frequently used throughout the codebase. `RATELIMIT_MAX_BYTES` and `DEFAULT_MAX_LOG_BUFFER` are not related to eachother beyond both being used in logging. I don't see any footgun potential between using one or the other, so this seems like an either-is-fine option that can be left to the author to decide, and very quickly becomes bikeshedding otherwise.",
      "created_at": "2025-06-24T12:06:25Z",
      "updated_at": "2025-06-24T12:06:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163788183",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163788183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 106,
      "original_start_line": 106,
      "start_side": "RIGHT",
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163792560",
      "pull_request_review_id": 2953522901,
      "id": 2163792560,
      "node_id": "PRRC_kwDOABII586A-Nqw",
      "diff_hunk": "@@ -82,15 +104,74 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};",
      "path": "src/logging.h",
      "position": 50,
      "original_position": 50,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163313166,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This variable is not used or changed in this PR.",
      "created_at": "2025-06-24T12:08:23Z",
      "updated_at": "2025-06-24T12:08:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163792560",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163792560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163798705",
      "pull_request_review_id": 2953531267,
      "id": 2163798705,
      "node_id": "PRRC_kwDOABII586A-PKx",
      "diff_hunk": "@@ -60,6 +67,9 @@ struct LogSetup : public BasicTestingSetup {\n \n         LogInstance().SetLogLevel(BCLog::Level::Debug);\n         LogInstance().SetCategoryLogLevel({});\n+\n+        // Prevent tests from getting rate-limited.",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 25,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163211212,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The latter. \"Ensure tests don't use each other's rate limiting budget\" could be an alternative?",
      "created_at": "2025-06-24T12:10:20Z",
      "updated_at": "2025-06-24T12:10:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163798705",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163798705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163814997",
      "pull_request_review_id": 2953552405,
      "id": 2163814997,
      "node_id": "PRRC_kwDOABII586A-TJV",
      "diff_hunk": "@@ -82,15 +104,74 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};",
      "path": "src/logging.h",
      "position": 50,
      "original_position": 50,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163313166,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~This argument may not be, but the test is validating the changed code, dead parameter names don't increase my confidence in the correctness of the PR. It may have an obvious explanation, but it seemed related to me, given that we're touching surrounding code~ ",
      "created_at": "2025-06-24T12:14:23Z",
      "updated_at": "2025-06-24T12:29:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163814997",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163814997"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163818101",
      "pull_request_review_id": 2953556475,
      "id": 2163818101,
      "node_id": "PRRC_kwDOABII586A-T51",
      "diff_hunk": "@@ -248,32 +335,38 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n         } catch (tinyformat::format_error& fmterr) {\n             log_msg = \"Error \\\"\" + std::string{fmterr.what()} + \"\\\" while formatting log message: \" + fmt.fmt;\n         }\n-        LogInstance().LogPrintStr(log_msg, logging_function, source_file, source_line, flag, level);\n+        LogInstance().LogPrintStr(log_msg, std::move(source_loc), flag, level, should_ratelimit);\n     }\n }\n \n-#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(__func__, __FILE__, __LINE__, category, level, __VA_ARGS__)\n+#define LogPrintLevel_(category, level, should_ratelimit, ...) LogPrintFormatInternal(std::source_location::current(), category, level, should_ratelimit, __VA_ARGS__)\n \n-// Log unconditionally.\n+// Log unconditionally. Uses basic rate limiting to mitigate disk filling attacks.",
      "path": "src/logging.h",
      "position": 211,
      "original_position": 194,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163198581,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Semantically, I agree. But practically, I think it's fine as is. Conditional vs unconditional are at this point fairly established concepts in our logging code in that they indicate whether or not logging categories need to be enabled or not. Rate limiting should in practice never occur, so for all intents and purposes, it is indeed unconditional.\r\n\r\nHow would you suggest to improve this? I can't think of an improvement.",
      "created_at": "2025-06-24T12:15:07Z",
      "updated_at": "2025-06-24T12:15:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163818101",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163818101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163825735",
      "pull_request_review_id": 2953565935,
      "id": 2163825735,
      "node_id": "PRRC_kwDOABII586A-VxH",
      "diff_hunk": "@@ -457,6 +466,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& so\n     }\n \n     FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit = should_ratelimit && m_limiter.NeedsRateLimiting(source_loc, str_prefixed);",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": 2163455426,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That would mean the rate limiting warnings are no longer logged to console and callbacks (`NeedsRateLimiting` has side effects), so I think keeping this as-is is better.",
      "created_at": "2025-06-24T12:17:18Z",
      "updated_at": "2025-06-24T12:17:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163825735",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163825735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163837664",
      "pull_request_review_id": 2953582405,
      "id": 2163837664,
      "node_id": "PRRC_kwDOABII586A-Yrg",
      "diff_hunk": "@@ -248,32 +335,38 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n         } catch (tinyformat::format_error& fmterr) {\n             log_msg = \"Error \\\"\" + std::string{fmterr.what()} + \"\\\" while formatting log message: \" + fmt.fmt;\n         }\n-        LogInstance().LogPrintStr(log_msg, logging_function, source_file, source_line, flag, level);\n+        LogInstance().LogPrintStr(log_msg, std::move(source_loc), flag, level, should_ratelimit);\n     }\n }\n \n-#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(__func__, __FILE__, __LINE__, category, level, __VA_ARGS__)\n+#define LogPrintLevel_(category, level, should_ratelimit, ...) LogPrintFormatInternal(std::source_location::current(), category, level, should_ratelimit, __VA_ARGS__)\n \n-// Log unconditionally.\n+// Log unconditionally. Uses basic rate limiting to mitigate disk filling attacks.",
      "path": "src/logging.h",
      "position": 211,
      "original_position": 194,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163198581,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't consider \"established\" a relevant argument in this case - it just prevents new contributors from understanding the codebase. But if you think this isn't confusing, I don't mind resolving the comment, I did eventually understand it, just got sidetracked by the contradiction and wanted to simplify it to the next person. If we do correct it, we could be more specific instead of overly generalizing it (ie specify the restrictions instead of claiming there are none).",
      "created_at": "2025-06-24T12:20:55Z",
      "updated_at": "2025-06-24T12:20:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163837664",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163837664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163843028",
      "pull_request_review_id": 2953589062,
      "id": 2163843028,
      "node_id": "PRRC_kwDOABII586A-Z_U",
      "diff_hunk": "@@ -82,15 +104,74 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};",
      "path": "src/logging.h",
      "position": 50,
      "original_position": 50,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163313166,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What do you mean with \"dead parameter names\"? This variable defines the default log level, which indeed is debug level. If you run `bitcoind -debug=net`, you'll start seeing net debug logs, you don't have to set `-loglevel=debug`.",
      "created_at": "2025-06-24T12:22:18Z",
      "updated_at": "2025-06-24T12:22:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163843028",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163843028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163843866",
      "pull_request_review_id": 2953590108,
      "id": 2163843866,
      "node_id": "PRRC_kwDOABII586A-aMa",
      "diff_hunk": "@@ -457,6 +466,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& so\n     }\n \n     FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit = should_ratelimit && m_limiter.NeedsRateLimiting(source_loc, str_prefixed);",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": 2163455426,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, so there's a side-effect here that wasn't obvious to me, thanks for clarifying.\r\n\r\nEdit: this seems like a code smell, doesn't this indicate that `NeedsRateLimiting` does too many things and should be split out to smaller, more focused methods? If we can't give it a proper name that reflects what it does, that's usually a good sign that it's not as simple as it could be",
      "created_at": "2025-06-24T12:22:38Z",
      "updated_at": "2025-06-24T12:35:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163843866",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163843866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163853656",
      "pull_request_review_id": 2953603690,
      "id": 2163853656,
      "node_id": "PRRC_kwDOABII586A-clY",
      "diff_hunk": "@@ -2976,15 +2976,17 @@ static void UpdateTipLog(\n {\n \n     AssertLockHeld(::cs_main);\n-    LogPrintf(\"%s%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\",\n-        prefix, func_name,\n-        tip->GetBlockHash().ToString(), tip->nHeight, tip->nVersion,\n-        log(tip->nChainWork.getdouble()) / log(2.0), tip->m_chain_tx_count,\n-        FormatISO8601DateTime(tip->GetBlockTime()),\n-        chainman.GuessVerificationProgress(tip),\n-        coins_tip.DynamicMemoryUsage() * (1.0 / (1 << 20)),\n-        coins_tip.GetCacheSize(),\n-        !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages) : \"\");\n+\n+    // Disable rate limiting in LogPrintLevel_ so that this location is not rate limited during IBD.",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163352258,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The point of the docstring is to explain _why_ we don't ratelimit, which is because we don't want IBD tip logs to be suppressed. Documenting that absolutely seems helpful to me.",
      "created_at": "2025-06-24T12:26:19Z",
      "updated_at": "2025-06-24T12:26:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163853656",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163853656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163859080",
      "pull_request_review_id": 2953611784,
      "id": 2163859080,
      "node_id": "PRRC_kwDOABII586A-d6I",
      "diff_hunk": "@@ -2976,15 +2976,17 @@ static void UpdateTipLog(\n {\n \n     AssertLockHeld(::cs_main);\n-    LogPrintf(\"%s%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\",\n-        prefix, func_name,\n-        tip->GetBlockHash().ToString(), tip->nHeight, tip->nVersion,\n-        log(tip->nChainWork.getdouble()) / log(2.0), tip->m_chain_tx_count,\n-        FormatISO8601DateTime(tip->GetBlockTime()),\n-        chainman.GuessVerificationProgress(tip),\n-        coins_tip.DynamicMemoryUsage() * (1.0 / (1 << 20)),\n-        coins_tip.GetCacheSize(),\n-        !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages) : \"\");\n+\n+    // Disable rate limiting in LogPrintLevel_ so that this location is not rate limited during IBD.",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163352258,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, that part does seem helpful and we can't express it with code, we should keep that part!",
      "created_at": "2025-06-24T12:28:47Z",
      "updated_at": "2025-06-24T12:28:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163859080",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163859080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163862219",
      "pull_request_review_id": 2953616408,
      "id": 2163862219,
      "node_id": "PRRC_kwDOABII586A-erL",
      "diff_hunk": "@@ -82,15 +104,74 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};",
      "path": "src/logging.h",
      "position": 50,
      "original_position": 50,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163313166,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I replied to the wrong thread here, thanks for the explanation, please resolve it.",
      "created_at": "2025-06-24T12:30:13Z",
      "updated_at": "2025-06-24T12:30:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2163862219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2163862219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164992810",
      "pull_request_review_id": 2955485971,
      "id": 2164992810,
      "node_id": "PRRC_kwDOABII586BCysq",
      "diff_hunk": "@@ -457,6 +466,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& so\n     }\n \n     FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit = should_ratelimit && m_limiter.NeedsRateLimiting(source_loc, str_prefixed);",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": 2163455426,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree `NeedsRateLimiting` has too many responsibilities. I think it's okay as-is, but your comment nerdsniped me into revisiting this. I'm working on a branch that removes the side effects from `NeedsRateLimiting` and a couple of other improvements. I'm not sure yet if it'll be too much of a detour for this PR, but at least it'll be interesting to be able to compare. Should have it ready tomorrow.",
      "created_at": "2025-06-24T21:58:57Z",
      "updated_at": "2025-06-24T21:58:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2164992810",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2164992810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168960313",
      "pull_request_review_id": 2961939879,
      "id": 2168960313,
      "node_id": "PRRC_kwDOABII586BR7U5",
      "diff_hunk": "@@ -364,7 +366,9 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return memusage::DynamicUsage(buflog.str) +",
      "path": "src/logging.cpp",
      "position": 31,
      "original_position": 31,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "d41a39e43c219eb0b06b8df2c2c5d24baaf015c4",
      "in_reply_to_id": 2163415514,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I didn't validate it, but I can. I think it is important that the new and old versions of `MemUsage` are roughly the same.",
      "created_at": "2025-06-26T12:33:41Z",
      "updated_at": "2025-06-26T12:33:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2168960313",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168960313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 369,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168974305",
      "pull_request_review_id": 2961962202,
      "id": 2168974305,
      "node_id": "PRRC_kwDOABII586BR-vh",
      "diff_hunk": "@@ -40,6 +40,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-loglevelalways\", strprintf(\"Always prepend a category and level (default: %u)\", DEFAULT_LOGLEVELALWAYS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-ratelimitlogging\", strprintf(\"Rate limit unconditional logging to disk (default: %u)\", DEFAULT_RATELIMITLOGGING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
      "path": "src/init/common.cpp",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115526293,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sweet, thanks for doing this! I was curious about any performance hits.",
      "created_at": "2025-06-26T12:40:18Z",
      "updated_at": "2025-06-26T12:40:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2168974305",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2168974305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169804538",
      "pull_request_review_id": 2963302664,
      "id": 2169804538,
      "node_id": "PRRC_kwDOABII586BVJb6",
      "diff_hunk": "@@ -248,32 +335,38 @@ inline void LogPrintFormatInternal(std::string_view logging_function, std::strin\n         } catch (tinyformat::format_error& fmterr) {\n             log_msg = \"Error \\\"\" + std::string{fmterr.what()} + \"\\\" while formatting log message: \" + fmt.fmt;\n         }\n-        LogInstance().LogPrintStr(log_msg, logging_function, source_file, source_line, flag, level);\n+        LogInstance().LogPrintStr(log_msg, std::move(source_loc), flag, level, should_ratelimit);\n     }\n }\n \n-#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(__func__, __FILE__, __LINE__, category, level, __VA_ARGS__)\n+#define LogPrintLevel_(category, level, should_ratelimit, ...) LogPrintFormatInternal(std::source_location::current(), category, level, should_ratelimit, __VA_ARGS__)\n \n-// Log unconditionally.\n+// Log unconditionally. Uses basic rate limiting to mitigate disk filling attacks.",
      "path": "src/logging.h",
      "position": 211,
      "original_position": 194,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163198581,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think this is confusing because of prior context. I can understand the point about newer contributors. I've come across other places in the codebase where I've had to learn the context by combing through IRC, PRs, commit messages, blogs, etc. I think it's similar to adding the information in the commit message rather than including a comment since a user must search for the commit message info.\r\n\r\nEDIT: That said, I'm open to suggestions, but I thought the context was pretty clear for me because I went through the code and the original PR.",
      "created_at": "2025-06-26T19:22:54Z",
      "updated_at": "2025-06-26T19:27:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2169804538",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2169804538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 361,
      "original_line": 361,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172385738",
      "pull_request_review_id": 2958036547,
      "id": 2172385738,
      "node_id": "PRRC_kwDOABII586Be_nK",
      "diff_hunk": "@@ -457,6 +466,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& so\n     }\n \n     FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit = should_ratelimit && m_limiter.NeedsRateLimiting(source_loc, str_prefixed);",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": 2163455426,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry for the wait, branch is ready: https://github.com/stickies-v/bitcoin/commits/2025-06/schedule-ratelimit-reset/ . I added the \"fixup\" comments as commits that should be squashable into the current branch as-is (requiring rebase for the commits above, though). Hopefully the isolation of the changes makes this easier to review and potentially adopt into this PR.\r\n\r\nThe main change is that I've carved out scheduling from `LogRateLimiter` (leaving that to `CScheduler`), which allows quite a bit of subsequent improvements. Specifically for this thread, I've [refactored](https://github.com/stickies-v/bitcoin/commit/c466e7b8ef11d0feb762c2b2ed41db695cd21602) `NeedsRateLimiting` into `Consume` that does not have any side-effects (except update internal accounting, as expected by the Consume name).\r\n\r\nThe other changes (see [diff](https://github.com/Crypt-iQ/bitcoin/compare/2ac8696b53e455dd27c8341828404a23b5cb68a9..9fb36ba46bccad079b4aea6062f7d187b7ef7775)) I've implemented in this branch include:\r\n- change `Logger::m_limiter` to a pointer so it can more easily be (re)set, allowing for easier testing.\r\n- add unit tests specifically for the `LogRateLimiter` interface that I find quite a bit easier to understand than the existing `rate_limit` tests, but there may be merit in keeping both (I've updated the latter so they don't break, but they should probably be deduplicated at least somewhat)\r\n- made `LogRateLimiter` thread-safe since it is now used in multiple threads\r\n- various cleanups, including removing the unnecessary `m_suppressed_locations` (now a `m_suppression_active` boolean), parameterizing the max_bytes and reset_window, ...\r\n- removes the need for the test-only `BCLog::Logger::ResetLimiter()` function\r\n\r\nI think the PR is in a good enough shape as it is, and I don't want to block progress. I like the new interface of my suggestion quite a bit better than the old one, and I think it is worth the time and effort to overhaul this (I spent a lot of time carving everything out in separate commits to make rebasing easy), but I understand this PR has had a lot of back-and-forth already. I'll leave it up to the author if he wants to change the approach here, of if I'll do it in a follow-up (which unfortunately would be a lot of churn). In either case, I'll shortly do a full re-review. \r\n",
      "created_at": "2025-06-27T16:23:57Z",
      "updated_at": "2025-06-27T16:33:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2172385738",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2172385738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175129044",
      "pull_request_review_id": 2971317445,
      "id": 2175129044,
      "node_id": "PRRC_kwDOABII586BpdXU",
      "diff_hunk": "@@ -492,6 +534,40 @@ void BCLog::Logger::ShrinkDebugFile()\n         fclose(file);\n }\n \n+void BCLog::LogRateLimiter::MaybeResetWindow(std::string& str)\n+{\n+    const auto now{NodeClock::now()};\n+    if ((now - m_last_reset) >= WINDOW_SIZE) {\n+        m_last_reset = now;\n+\n+        // Iterate through m_suppressed_locations and log that we're resetting the window for each\n+        // suppressed location.\n+        for (const auto& source_loc : m_suppressed_locations) {\n+            uint64_t dropped_bytes = m_source_locations[source_loc].GetDroppedBytes();\n+\n+            str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                    \"(%d MiB) were dropped during the last hour.\\n\",\n+                                    source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                                    dropped_bytes / (1024 * 1024)));",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 161,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\n\r\nlog strings currently look like:\r\n\r\n> Restarting logging from ../../src/rpc/request.cpp:140 (GenerateAuthCookieResult GenerateAuthCookie(const std::optional<fs::perms> &, std::string &, std::string &)): **(0 MiB)** were dropped during the last hour.\r\n\r\nWould suggest printing this as bytes and removing the parentheses.\r\n\r\n```suggestion\r\n                                    \"%d bytes were dropped during the last hour.\\n\",\r\n                                    source_loc.file_name(), source_loc.line(), source_loc.function_name(),\r\n                                    dropped_bytes));\r\n```",
      "created_at": "2025-06-30T13:48:41Z",
      "updated_at": "2025-06-30T14:36:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2175129044",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175129044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 549,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 551,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175159834",
      "pull_request_review_id": 2971317445,
      "id": 2175159834,
      "node_id": "PRRC_kwDOABII586Bpk4a",
      "diff_hunk": "@@ -82,15 +104,74 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class SourceLocationCounter\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes{RATELIMIT_MAX_BYTES};\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether or not enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     *\n+     * This class is not thread-safe.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        //! Timestamp of the last window reset.\n+        std::chrono::time_point<NodeClock> m_last_reset;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, SourceLocationCounter, SourceLocationHasher, SourceLocationEqual> m_source_locations;\n+        //! Set of source file locations that were dropped on the last log attempt.\n+        std::unordered_set<std::source_location, SourceLocationHasher, SourceLocationEqual> m_suppressed_locations;\n+\n+        //! Attempts to reset the logging window if the window interval has passed. This will clear\n+        //! m_source_locations and m_suppressed_locations if a reset occurs.\n+        void MaybeResetWindow(std::string&);\n+\n+    public:\n+        //! Interval after which the window is reset.\n+        static constexpr std::chrono::hours WINDOW_SIZE{1};\n+        //! Consumes `source_loc`'s available bytes corresponding to the size of the (formatted)\n+        //! `str` and returns true if it exceeds the rate limit allowance in the current time window.\n+        bool NeedsRateLimiting(const std::source_location& source_loc, std::string& str);\n+\n+        LogRateLimiter() : m_last_reset{NodeClock::now()} {}\n+\n+        friend class Logger;\n+    };\n \n     class Logger\n     {\n     public:\n         struct BufferedLog {\n             SystemClock::time_point now;\n             std::chrono::seconds mocktime;\n-            std::string str, logging_function, source_file, threadname;\n-            int source_line;\n+            std::string str, threadname;",
      "path": "src/logging.h",
      "position": 134,
      "original_position": 120,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit\r\n```suggestion\r\n            std::string str threadname;\r\n```",
      "created_at": "2025-06-30T14:02:15Z",
      "updated_at": "2025-06-30T14:36:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2175159834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175159834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175213743",
      "pull_request_review_id": 2971317445,
      "id": 2175213743,
      "node_id": "PRRC_kwDOABII586BpyCv",
      "diff_hunk": "@@ -0,0 +1,6 @@\n+Logging\n+-------\n+Unconditional logging to disk via LogPrintf, LogInfo, LogWarning, LogError, and\n+LogPrintLevel is now rate limited by giving each source location a logging quota of\n+1MiB per hour. This affects -logsourcelocation as the entire function signature is\n+logged rather than only the name.",
      "path": "doc/release-notes-32604.md",
      "position": 1,
      "original_position": 6,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: the `-logsourcelocation` behaviour change is unrelated to the rate limiting, so I think this phrasing is a bit confusing. Would put it in a separate paragraph:\r\n\r\n```\r\nUnconditional logging to disk via LogPrintf, LogInfo, LogWarning, LogError, and\r\nLogPrintLevel is now rate limited by giving each source location a logging quota of\r\n1MiB per hour. (#32604)\r\n\r\nWhen `-logsourcelocation` is enabled, the log output now contains the entire function signature\r\ninstead of just the function name. (#32604)\r\n```",
      "created_at": "2025-06-30T14:27:19Z",
      "updated_at": "2025-06-30T14:36:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2175213743",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175213743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 5,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175338142",
      "pull_request_review_id": 2971663658,
      "id": 2175338142,
      "node_id": "PRRC_kwDOABII586BqQae",
      "diff_hunk": "@@ -457,6 +466,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& so\n     }\n \n     FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit = should_ratelimit && m_limiter.NeedsRateLimiting(source_loc, str_prefixed);",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": 2163455426,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Leaving a note that I am going to implement these changes and plan to push up either later today or tomorrow.",
      "created_at": "2025-06-30T15:19:51Z",
      "updated_at": "2025-06-30T15:19:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2175338142",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175338142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175440506",
      "pull_request_review_id": 2971863332,
      "id": 2175440506,
      "node_id": "PRRC_kwDOABII586BqpZ6",
      "diff_hunk": "@@ -457,6 +466,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& so\n     }\n \n     FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit = should_ratelimit && m_limiter.NeedsRateLimiting(source_loc, str_prefixed);",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": 2163455426,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sweet, I'm planning on reviewing it this week!",
      "created_at": "2025-06-30T16:09:09Z",
      "updated_at": "2025-06-30T16:09:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2175440506",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2175440506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181013847",
      "pull_request_review_id": 2980700653,
      "id": 2181013847,
      "node_id": "PRRC_kwDOABII586B_6FX",
      "diff_hunk": "@@ -86,24 +96,35 @@ BOOST_AUTO_TEST_CASE(logging_timer)\n BOOST_FIXTURE_TEST_CASE(logging_LogPrintStr, LogSetup)\n {\n     LogInstance().m_log_sourcelocations = true;\n-    LogInstance().LogPrintStr(\"foo1: bar1\", \"fn1\", \"src1\", 1, BCLog::LogFlags::NET, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo2: bar2\", \"fn2\", \"src2\", 2, BCLog::LogFlags::NET, BCLog::Level::Info);\n-    LogInstance().LogPrintStr(\"foo3: bar3\", \"fn3\", \"src3\", 3, BCLog::LogFlags::ALL, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo4: bar4\", \"fn4\", \"src4\", 4, BCLog::LogFlags::ALL, BCLog::Level::Info);\n-    LogInstance().LogPrintStr(\"foo5: bar5\", \"fn5\", \"src5\", 5, BCLog::LogFlags::NONE, BCLog::Level::Debug);\n-    LogInstance().LogPrintStr(\"foo6: bar6\", \"fn6\", \"src6\", 6, BCLog::LogFlags::NONE, BCLog::Level::Info);\n+    std::vector<std::source_location> source_locs = {\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+        std::source_location::current(),\n+    };",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 47,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163230657,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Lastly, do we really need the RemovePrefix here, given that we know the exact file structiure?\r\n\r\nYup, the file name may differ across platforms and the test will fail on some platforms otherwise. Necessary because it's done here: https://github.com/bitcoin/bitcoin/blob/68ca13e1f96a9dae997558a1d7a873b10056091b/src/logging.cpp#L377\r\n\r\nI have implemented your suggestion other than that.",
      "created_at": "2025-07-02T21:33:30Z",
      "updated_at": "2025-07-02T21:34:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181013847",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181013847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 99,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181018846",
      "pull_request_review_id": 2980708753,
      "id": 2181018846,
      "node_id": "PRRC_kwDOABII586B_7Te",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && strcmp(lhs.file_name(), rhs.file_name()) == 0;\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.",
      "path": "src/logging.h",
      "position": 37,
      "original_position": 37,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163309586,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have kept the comment -- I made a note in the commit message about the change.",
      "created_at": "2025-07-02T21:35:57Z",
      "updated_at": "2025-07-02T21:35:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181018846",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181018846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181022825",
      "pull_request_review_id": 2980715325,
      "id": 2181022825,
      "node_id": "PRRC_kwDOABII586B_8Rp",
      "diff_hunk": "@@ -276,4 +297,126 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(logging_sourcelocation_counter)\n+{\n+    BCLog::SourceLocationCounter counter;\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(rate_limiting, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    SetMockTime(std::chrono::hours{1});\n+\n+    // Reset m_limiter so that it uses the above mock time for m_last_reset.\n+    LogInstance().ResetLimiter();\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.",
      "path": "src/test/logging_tests.cpp",
      "position": 198,
      "original_position": 152,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163349298,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Now uses a parameter, but I have kept the comment. I think it is clear as is? I think a follow-up could address this?",
      "created_at": "2025-07-02T21:39:28Z",
      "updated_at": "2025-07-02T21:39:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181022825",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181022825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 420,
      "original_line": 420,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181023549",
      "pull_request_review_id": 2980716211,
      "id": 2181023549,
      "node_id": "PRRC_kwDOABII586B_8c9",
      "diff_hunk": "@@ -276,4 +297,126 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(logging_sourcelocation_counter)\n+{\n+    BCLog::SourceLocationCounter counter;\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;",
      "path": "src/test/logging_tests.cpp",
      "position": 158,
      "original_position": 113,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163341392,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven't implemented this, could this be left for a follow-up?",
      "created_at": "2025-07-02T21:40:03Z",
      "updated_at": "2025-07-02T21:40:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181023549",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181023549"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 375,
      "original_start_line": 326,
      "start_side": "RIGHT",
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181024709",
      "pull_request_review_id": 2980718286,
      "id": 2181024709,
      "node_id": "PRRC_kwDOABII586B_8vF",
      "diff_hunk": "@@ -2976,15 +2976,17 @@ static void UpdateTipLog(\n {\n \n     AssertLockHeld(::cs_main);\n-    LogPrintf(\"%s%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\",\n-        prefix, func_name,\n-        tip->GetBlockHash().ToString(), tip->nHeight, tip->nVersion,\n-        log(tip->nChainWork.getdouble()) / log(2.0), tip->m_chain_tx_count,\n-        FormatISO8601DateTime(tip->GetBlockTime()),\n-        chainman.GuessVerificationProgress(tip),\n-        coins_tip.DynamicMemoryUsage() * (1.0 / (1 << 20)),\n-        coins_tip.GetCacheSize(),\n-        !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages) : \"\");\n+\n+    // Disable rate limiting in LogPrintLevel_ so that this location is not rate limited during IBD.",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163352258,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've modified the comment so it doesn't repeat the phrase \"rate limit\" twice.",
      "created_at": "2025-07-02T21:40:46Z",
      "updated_at": "2025-07-02T21:40:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181024709",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181024709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181026104",
      "pull_request_review_id": 2980720043,
      "id": 2181026104,
      "node_id": "PRRC_kwDOABII586B_9E4",
      "diff_hunk": "@@ -364,7 +366,9 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return memusage::DynamicUsage(buflog.str) +",
      "path": "src/logging.cpp",
      "position": 31,
      "original_position": 31,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "d41a39e43c219eb0b06b8df2c2c5d24baaf015c4",
      "in_reply_to_id": 2163415514,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Modified the commit message and have checked that `MemUsage` returns an accurate accounting of the memory used. Thanks for this comment, it encouraged me to verify this.",
      "created_at": "2025-07-02T21:41:36Z",
      "updated_at": "2025-07-02T21:41:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181026104",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181026104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 369,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181027949",
      "pull_request_review_id": 2980722741,
      "id": 2181027949,
      "node_id": "PRRC_kwDOABII586B_9ht",
      "diff_hunk": "@@ -414,13 +418,13 @@ void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags catego\n     str.insert(0, LogTimestampStr(now, mocktime));",
      "path": "src/logging.cpp",
      "position": 74,
      "original_position": 55,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "d41a39e43c219eb0b06b8df2c2c5d24baaf015c4",
      "in_reply_to_id": 2163433402,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have not run benchmarks, though this `insert` is pre-existing so will resolve. It would be nicer if there was a better way to format the string other than the insert-at-beginning logic in `FormatLogStrInPlace`.",
      "created_at": "2025-07-02T21:43:00Z",
      "updated_at": "2025-07-02T21:43:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181027949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181027949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 412,
      "original_line": 412,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181028316",
      "pull_request_review_id": 2980723187,
      "id": 2181028316,
      "node_id": "PRRC_kwDOABII586B_9nc",
      "diff_hunk": "@@ -82,7 +82,7 @@ def test_negated_config(self):\n \n         self.log.debug('Verifying that disabling of the config file means garbage inside of it does ' \\\n             'not prevent the node from starting, and message about existing config file is logged')\n-        ignored_file_message = [f'[InitConfig] Data directory \"{self.nodes[0].datadir_path}\" contains a \"bitcoin.conf\" file which is explicitly ignored using -noconf.']\n+        ignored_file_message = [f'Data directory \"{self.nodes[0].datadir_path}\" contains a \"bitcoin.conf\" file which is explicitly ignored using -noconf.']",
      "path": "test/functional/feature_config_args.py",
      "position": 5,
      "original_position": 5,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "d41a39e43c219eb0b06b8df2c2c5d24baaf015c4",
      "in_reply_to_id": 2163441070,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Modified the commit message 👍 ",
      "created_at": "2025-07-02T21:43:18Z",
      "updated_at": "2025-07-02T21:43:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181028316",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181028316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181029394",
      "pull_request_review_id": 2980724942,
      "id": 2181029394,
      "node_id": "PRRC_kwDOABII586B_94S",
      "diff_hunk": "",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 1,
      "commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": 2163453570,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree this is confusing and threw me. The different base part is pre-existing so will resolve. I think another PR could eliminate the different bases unless there's a compelling \"historical\" reason to keep both?",
      "created_at": "2025-07-02T21:44:18Z",
      "updated_at": "2025-07-02T21:44:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181029394",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181029394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181029843",
      "pull_request_review_id": 2980725654,
      "id": 2181029843,
      "node_id": "PRRC_kwDOABII586B_9_T",
      "diff_hunk": "@@ -457,6 +466,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& so\n     }\n \n     FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit = should_ratelimit && m_limiter.NeedsRateLimiting(source_loc, str_prefixed);",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 46,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b44d31455ad46ca3ed95690dfc0a913445b9c1c9",
      "in_reply_to_id": 2163455426,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Latest change addresses this.",
      "created_at": "2025-07-02T21:44:41Z",
      "updated_at": "2025-07-02T21:44:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181029843",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181029843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 469,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181030545",
      "pull_request_review_id": 2980726770,
      "id": 2181030545,
      "node_id": "PRRC_kwDOABII586B_-KR",
      "diff_hunk": "@@ -276,4 +297,126 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(logging_sourcelocation_counter)\n+{\n+    BCLog::SourceLocationCounter counter;\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;",
      "path": "src/test/logging_tests.cpp",
      "position": 158,
      "original_position": 113,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163341392,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I doubt anyone will review it if we push it separately - but I think we could make these tests less awkward. Not a blocker from my side, just a preference",
      "created_at": "2025-07-02T21:45:23Z",
      "updated_at": "2025-07-02T21:45:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181030545",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181030545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 375,
      "original_start_line": 326,
      "start_side": "RIGHT",
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181030565",
      "pull_request_review_id": 2980726801,
      "id": 2181030565,
      "node_id": "PRRC_kwDOABII586B_-Kl",
      "diff_hunk": "@@ -492,6 +534,40 @@ void BCLog::Logger::ShrinkDebugFile()\n         fclose(file);\n }\n \n+void BCLog::LogRateLimiter::MaybeResetWindow(std::string& str)\n+{\n+    const auto now{NodeClock::now()};\n+    if ((now - m_last_reset) >= WINDOW_SIZE) {\n+        m_last_reset = now;\n+\n+        // Iterate through m_suppressed_locations and log that we're resetting the window for each\n+        // suppressed location.\n+        for (const auto& source_loc : m_suppressed_locations) {\n+            uint64_t dropped_bytes = m_source_locations[source_loc].GetDroppedBytes();\n+\n+            str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                    \"(%d MiB) were dropped during the last hour.\\n\",\n+                                    source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                                    dropped_bytes / (1024 * 1024)));",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 161,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2175129044,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed, I think tracking bytes is better.",
      "created_at": "2025-07-02T21:45:24Z",
      "updated_at": "2025-07-02T21:45:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181030565",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181030565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 549,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 551,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181030928",
      "pull_request_review_id": 2980727390,
      "id": 2181030928,
      "node_id": "PRRC_kwDOABII586B_-QQ",
      "diff_hunk": "@@ -82,15 +104,74 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class SourceLocationCounter\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes{RATELIMIT_MAX_BYTES};\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether or not enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     *\n+     * This class is not thread-safe.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        //! Timestamp of the last window reset.\n+        std::chrono::time_point<NodeClock> m_last_reset;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, SourceLocationCounter, SourceLocationHasher, SourceLocationEqual> m_source_locations;\n+        //! Set of source file locations that were dropped on the last log attempt.\n+        std::unordered_set<std::source_location, SourceLocationHasher, SourceLocationEqual> m_suppressed_locations;\n+\n+        //! Attempts to reset the logging window if the window interval has passed. This will clear\n+        //! m_source_locations and m_suppressed_locations if a reset occurs.\n+        void MaybeResetWindow(std::string&);\n+\n+    public:\n+        //! Interval after which the window is reset.\n+        static constexpr std::chrono::hours WINDOW_SIZE{1};\n+        //! Consumes `source_loc`'s available bytes corresponding to the size of the (formatted)\n+        //! `str` and returns true if it exceeds the rate limit allowance in the current time window.\n+        bool NeedsRateLimiting(const std::source_location& source_loc, std::string& str);\n+\n+        LogRateLimiter() : m_last_reset{NodeClock::now()} {}\n+\n+        friend class Logger;\n+    };\n \n     class Logger\n     {\n     public:\n         struct BufferedLog {\n             SystemClock::time_point now;\n             std::chrono::seconds mocktime;\n-            std::string str, logging_function, source_file, threadname;\n-            int source_line;\n+            std::string str, threadname;",
      "path": "src/logging.h",
      "position": 134,
      "original_position": 120,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2175159834,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Did not implement as this gave me a compilation error?",
      "created_at": "2025-07-02T21:45:44Z",
      "updated_at": "2025-07-02T21:45:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181030928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181030928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181031427",
      "pull_request_review_id": 2980728060,
      "id": 2181031427,
      "node_id": "PRRC_kwDOABII586B_-YD",
      "diff_hunk": "@@ -0,0 +1,6 @@\n+Logging\n+-------\n+Unconditional logging to disk via LogPrintf, LogInfo, LogWarning, LogError, and\n+LogPrintLevel is now rate limited by giving each source location a logging quota of\n+1MiB per hour. This affects -logsourcelocation as the entire function signature is\n+logged rather than only the name.",
      "path": "doc/release-notes-32604.md",
      "position": 1,
      "original_position": 6,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2175213743,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree phrasing was confusing, have changed.",
      "created_at": "2025-07-02T21:46:02Z",
      "updated_at": "2025-07-02T21:46:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181031427",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181031427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 5,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181033230",
      "pull_request_review_id": 2980730842,
      "id": 2181033230,
      "node_id": "PRRC_kwDOABII586B_-0O",
      "diff_hunk": "@@ -364,7 +366,9 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return memusage::DynamicUsage(buflog.str) +",
      "path": "src/logging.cpp",
      "position": 31,
      "original_position": 31,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "d41a39e43c219eb0b06b8df2c2c5d24baaf015c4",
      "in_reply_to_id": 2163415514,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you show us the raw measurements?",
      "created_at": "2025-07-02T21:47:40Z",
      "updated_at": "2025-07-02T21:47:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181033230",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181033230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 369,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181049800",
      "pull_request_review_id": 2980758183,
      "id": 2181049800,
      "node_id": "PRRC_kwDOABII586CAC3I",
      "diff_hunk": "@@ -276,4 +297,126 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(logging_sourcelocation_counter)\n+{\n+    BCLog::SourceLocationCounter counter;\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;",
      "path": "src/test/logging_tests.cpp",
      "position": 158,
      "original_position": 113,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163341392,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree with you that the tests are awkward, but I do want to limit churn as this PR has been through a few iterations. I would definitely review a follow-up if you wanted to make the PR. This could also be a good candidate for https://www.bitcoin-followups.info/",
      "created_at": "2025-07-02T22:01:05Z",
      "updated_at": "2025-07-02T22:01:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2181049800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2181049800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 375,
      "original_start_line": 326,
      "start_side": "RIGHT",
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182461594",
      "pull_request_review_id": 2982672891,
      "id": 2182461594,
      "node_id": "PRRC_kwDOABII586CFbia",
      "diff_hunk": "@@ -105,6 +200,9 @@ namespace BCLog {\n         size_t m_cur_buffer_memusage GUARDED_BY(m_cs){0};\n         size_t m_buffer_lines_discarded GUARDED_BY(m_cs){0};\n \n+        //! Manages the rate limiting of each log location.\n+        std::unique_ptr<LogRateLimiter> m_limiter;",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 144,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "34fc54d5476af464407c8de64c58897a35dce5cb",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is causing a [TSan issue](https://cirrus-ci.com/task/6014464291504128?logs=ci#L2383):\r\n\r\n<details>\r\n<summary> logs </summary>\r\n\r\n```\r\n[18:53:46.472] WARNING: ThreadSanitizer: data race (pid=9715)\r\n[18:53:46.472]   Read of size 8 at 0x723c00000068 by thread T1 (mutexes: write M0):\r\n[18:53:46.472]     #0 std::__1::unique_ptr<BCLog::LogRateLimiter, std::__1::default_delete<BCLog::LogRateLimiter>>::operator bool[abi:ne200100]() const /usr/lib/llvm-20/bin/../include/c++/v1/__memory/unique_ptr.h:287:12 (bitcoind+0xc87f7a) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #1 BCLog::Logger::LogPrintStr_(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::source_location&&, BCLog::LogFlags, BCLog::Level, bool) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/util/./logging.cpp:455:29 (bitcoind+0xc87f7a)\r\n[18:53:46.472]     #2 BCLog::Logger::LogPrintStr(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::source_location&&, BCLog::LogFlags, BCLog::Level, bool) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/util/./logging.cpp:418:12 (bitcoind+0xc8bc32) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #3 void LogPrintFormatInternal<std::__1::basic_string_view<char, std::__1::char_traits<char>>>(std::__1::source_location&&, BCLog::LogFlags, BCLog::Level, bool, util::ConstevalFormatString<sizeof...(std::__1::basic_string_view<char, std::__1::char_traits<char>>)>, std::__1::basic_string_view<char, std::__1::char_traits<char>> const&) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./logging.h:354:23 (bitcoind+0x6e776d) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #4 util::TraceThread(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/util/./util/thread.cpp:20:9 (bitcoind+0xc84c3b) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #5 decltype(std::declval<void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>)>()(std::declval<char const*>(), std::declval<AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::$_7>())) std::__1::__invoke[abi:ne200100]<void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), char const*, AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::$_7>(void (*&&)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), char const*&&, AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::$_7&&) /usr/lib/llvm-20/bin/../include/c++/v1/__type_traits/invoke.h:179:25 (bitcoind+0x1c6a5c) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #6 void std::__1::__thread_execute[abi:ne200100]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), char const*, AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::$_7, 2ul, 3ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), char const*, AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::$_7>&, std::__1::__tuple_indices<2ul, 3ul>) /usr/lib/llvm-20/bin/../include/c++/v1/__thread/thread.h:199:3 (bitcoind+0x1c6a5c)\r\n[18:53:46.472]     #7 void* std::__1::__thread_proxy[abi:ne200100]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), char const*, AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::$_7>>(void*) /usr/lib/llvm-20/bin/../include/c++/v1/__thread/thread.h:208:3 (bitcoind+0x1c6a5c)\r\n[18:53:46.472] \r\n[18:53:46.472]   Previous write of size 8 at 0x723c00000068 by main thread:\r\n[18:53:46.472]     #0 std::__1::unique_ptr<BCLog::LogRateLimiter, std::__1::default_delete<BCLog::LogRateLimiter>>::reset[abi:ne200100](BCLog::LogRateLimiter*) /usr/lib/llvm-20/bin/../include/c++/v1/__memory/unique_ptr.h:298:19 (bitcoind+0x1b779a) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #1 std::__1::unique_ptr<BCLog::LogRateLimiter, std::__1::default_delete<BCLog::LogRateLimiter>>::operator=[abi:ne200100](std::__1::unique_ptr<BCLog::LogRateLimiter, std::__1::default_delete<BCLog::LogRateLimiter>>&&) /usr/lib/llvm-20/bin/../include/c++/v1/__memory/unique_ptr.h:240:5 (bitcoind+0x1b779a)\r\n[18:53:46.472]     #2 BCLog::Logger::SetRateLimiting(std::__1::unique_ptr<BCLog::LogRateLimiter, std::__1::default_delete<BCLog::LogRateLimiter>>&&) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./logging.h:275:23 (bitcoind+0x1b779a)\r\n[18:53:46.472]     #3 AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./init.cpp:1381:19 (bitcoind+0x1b779a)\r\n[18:53:46.472]     #4 AppInit(node::NodeContext&) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./bitcoind.cpp:237:43 (bitcoind+0x199892) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #5 main /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./bitcoind.cpp:283:10 (bitcoind+0x199892)\r\n[18:53:46.472] \r\n[18:53:46.472]   Location is heap block of size 232 at 0x723c00000000 allocated by main thread:\r\n[18:53:46.472]     #0 operator new(unsigned long) <null> (bitcoind+0x1977f6) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #1 LogInstance() /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/util/./logging.cpp:43:36 (bitcoind+0xc8756b) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #2 init::AddLoggingArgs(ArgsManager&) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./init/common.cpp:31:209 (bitcoind+0xb0a2c7) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #3 SetupServerArgs(ArgsManager&, bool) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./init.cpp:446:5 (bitcoind+0x1a0e07) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #4 ParseArgs(node::NodeContext&, int, char**) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./bitcoind.cpp:116:5 (bitcoind+0x198e34) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #5 main /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./bitcoind.cpp:278:10 (bitcoind+0x198e34)\r\n[18:53:46.472] \r\n[18:53:46.472]   Mutex M0 (0x723c00000000) created at:\r\n[18:53:46.472]     #0 pthread_mutex_lock <null> (bitcoind+0x11559b) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #1 std::__1::mutex::lock() <null> (libc++.so.1.0.20+0x713cc) (BuildId: 30ef7da36db6fb0c014ee96603f7649f755cb793)\r\n[18:53:46.472]     #2 init::LogPackageVersion() /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./init/common.cpp:151:5 (bitcoind+0xb0dc4e) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.472]     #3 InitLogging(ArgsManager const&) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./init.cpp:818:5 (bitcoind+0x1b0390) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.475]     #4 AppInit(node::NodeContext&) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./bitcoind.cpp:181:9 (bitcoind+0x199572) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.475]     #5 main /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./bitcoind.cpp:283:10 (bitcoind+0x199572)\r\n[18:53:46.475] \r\n[18:53:46.475]   Thread T1 'b-scheduler' (tid=9717, running) created by main thread at:\r\n[18:53:46.475]     #0 pthread_create <null> (bitcoind+0x11388e) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.475]     #1 std::__1::__libcpp_thread_create[abi:ne200100](unsigned long*, void* (*)(void*), void*) /usr/lib/llvm-20/bin/../include/c++/v1/__thread/support/pthread.h:182:10 (bitcoind+0x1b75c1) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.475]     #2 std::__1::thread::thread<void (&)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), char const (&) [10], AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::$_7, 0>(void (&)(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::function<void ()>), char const (&) [10], AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::$_7&&) /usr/lib/llvm-20/bin/../include/c++/v1/__thread/thread.h:218:14 (bitcoind+0x1b75c1)\r\n[18:53:46.475]     #3 AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./init.cpp:1363:34 (bitcoind+0x1b75c1)\r\n[18:53:46.475]     #4 AppInit(node::NodeContext&) /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./bitcoind.cpp:237:43 (bitcoind+0x199892) (BuildId: 2b13e1fe2bba2fe47e258c908d3d80d2947d2486)\r\n[18:53:46.475]     #5 main /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/./bitcoind.cpp:283:10 (bitcoind+0x199892)\r\n[18:53:46.475] \r\n[18:53:46.475] SUMMARY: ThreadSanitizer: data race /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/util/./logging.cpp:455:29 in BCLog::Logger::LogPrintStr_(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::source_location&&, BCLog::LogFlags, BCLog::Level, bool)\r\n[18:53:46.475] ==================\r\n```\r\n</details>\r\n\r\nIn my [suggestion](https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2172385738), I removed the mutex guard for `m_limiter` because the class is now thread-safe, but of course that doesn't prevent race conditions on the setting of `m_limiter`, e.g. when one thread calls [`SetRateLimiting()`](https://github.com/bitcoin/bitcoin/pull/32604/files#diff-21abb6b14af1e9330a6f0c89a87231035a439248c556ef5e110eb0617b88a1f4R275) and another inspects [if `m_limiter` is set](https://github.com/bitcoin/bitcoin/pull/32604/files#diff-44fd50b51e8fc6799d38f193237fb921ec9d34306c448f64837524a17bac06eeR455), which is what TSan caught here.\r\n\r\nCan be fixed by re-introducing the `m_cs` guard:\r\n\r\n<details>\r\n<summary>git diff on 34fc54d547</summary>\r\n\r\n```diff\r\ndiff --git a/src/logging.h b/src/logging.h\r\nindex f81f4947af..c801e94e28 100644\r\n--- a/src/logging.h\r\n+++ b/src/logging.h\r\n@@ -201,7 +201,7 @@ namespace BCLog {\r\n         size_t m_buffer_lines_discarded GUARDED_BY(m_cs){0};\r\n \r\n         //! Manages the rate limiting of each log location.\r\n-        std::unique_ptr<LogRateLimiter> m_limiter;\r\n+        std::unique_ptr<LogRateLimiter> m_limiter GUARDED_BY(m_cs);\r\n \r\n         //! Category-specific log level. Overrides `m_log_level`.\r\n         std::unordered_map<LogFlags, Level> m_category_log_levels GUARDED_BY(m_cs);\r\n@@ -270,8 +270,9 @@ namespace BCLog {\r\n         /** Only for testing */\r\n         void DisconnectTestLogger() EXCLUSIVE_LOCKS_REQUIRED(!m_cs);\r\n \r\n-        void SetRateLimiting(std::unique_ptr<LogRateLimiter>&& limiter)\r\n+        void SetRateLimiting(std::unique_ptr<LogRateLimiter>&& limiter) EXCLUSIVE_LOCKS_REQUIRED(!m_cs)\r\n         {\r\n+            StdLockGuard scoped_lock(m_cs);\r\n             m_limiter = std::move(limiter);\r\n         }\r\n \r\n\r\n```\r\n</details>\r\n\r\nSorry about the oversight.",
      "created_at": "2025-07-03T10:41:33Z",
      "updated_at": "2025-07-03T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2182461594",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182461594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182544165",
      "pull_request_review_id": 2982672891,
      "id": 2182544165,
      "node_id": "PRRC_kwDOABII586CFvsl",
      "diff_hunk": "@@ -424,7 +450,28 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            LogPrintStr_(strprintf(",
      "path": "src/logging.cpp",
      "position": 124,
      "original_position": 122,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "34fc54d5476af464407c8de64c58897a35dce5cb",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I added this recursive `LogPrintStr_` because I think it's better to have separate log statements than inserting into the existing string, and added the `should_ratelimit=false` which makes it safe for infinite recursion. I forgot to add the clang-tidy suppression though, [causing this CI failure](https://github.com/bitcoin/bitcoin/pull/32604/checks?check_run_id=45248600899). It seems like we can only suppress this by marking all of `LogPrintStr_` as `NOLINT`, instead of just this single source, which is not ideal.\r\n\r\n<details>\r\n<summary>git diff on 34fc54d547</summary>\r\n\r\n```diff\r\ndiff --git a/src/logging.cpp b/src/logging.cpp\r\nindex 5c7d7fc57d..1fdbceff5f 100644\r\n--- a/src/logging.cpp\r\n+++ b/src/logging.cpp\r\n@@ -418,6 +418,7 @@ void BCLog::Logger::LogPrintStr(std::string_view str, std::source_location&& sou\r\n     return LogPrintStr_(str, std::move(source_loc), category, level, should_ratelimit);\r\n }\r\n \r\n+// NOLINTNEXTLINE(misc-no-recursion)\r\n void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& source_loc, BCLog::LogFlags category, BCLog::Level level, bool should_ratelimit)\r\n {\r\n     std::string str_prefixed = LogEscapeMessage(str);\r\n@@ -455,6 +456,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& so\r\n     if (should_ratelimit && m_limiter) {\r\n         auto status{m_limiter->Consume(source_loc, str_prefixed)};\r\n         if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\r\n+            // NOLINTNEXTLINE(misc-no-recursion)\r\n             LogPrintStr_(strprintf(\r\n                              \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\r\n                              \"the last time window of %is. Suppressing logging to disk from this \"\r\n@@ -463,7 +465,7 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& so\r\n                              source_loc.file_name(), source_loc.line(), source_loc.function_name(),\r\n                              m_limiter->m_max_bytes,\r\n                              Ticks<std::chrono::seconds>(m_limiter->m_reset_window)),\r\n-                         std::source_location::current(), LogFlags::ALL, Level::Warning, /*should_ratelimit=*/false);\r\n+                         std::source_location::current(), LogFlags::ALL, Level::Warning, /*should_ratelimit=*/false);  // with should_ratelimit=false, this cannot lead to infinite recursion\r\n         }\r\n         ratelimit = status == BCLog::LogRateLimiter::Status::STILL_SUPPRESSED;\r\n         // To avoid confusion caused by dropped log messages when debugging an issue,\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2025-07-03T11:27:26Z",
      "updated_at": "2025-07-03T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2182544165",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182544165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 460,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182549098",
      "pull_request_review_id": 2982672891,
      "id": 2182549098,
      "node_id": "PRRC_kwDOABII586CFw5q",
      "diff_hunk": "@@ -82,15 +104,74 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class SourceLocationCounter\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes{RATELIMIT_MAX_BYTES};\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether or not enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     *\n+     * This class is not thread-safe.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        //! Timestamp of the last window reset.\n+        std::chrono::time_point<NodeClock> m_last_reset;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, SourceLocationCounter, SourceLocationHasher, SourceLocationEqual> m_source_locations;\n+        //! Set of source file locations that were dropped on the last log attempt.\n+        std::unordered_set<std::source_location, SourceLocationHasher, SourceLocationEqual> m_suppressed_locations;\n+\n+        //! Attempts to reset the logging window if the window interval has passed. This will clear\n+        //! m_source_locations and m_suppressed_locations if a reset occurs.\n+        void MaybeResetWindow(std::string&);\n+\n+    public:\n+        //! Interval after which the window is reset.\n+        static constexpr std::chrono::hours WINDOW_SIZE{1};\n+        //! Consumes `source_loc`'s available bytes corresponding to the size of the (formatted)\n+        //! `str` and returns true if it exceeds the rate limit allowance in the current time window.\n+        bool NeedsRateLimiting(const std::source_location& source_loc, std::string& str);\n+\n+        LogRateLimiter() : m_last_reset{NodeClock::now()} {}\n+\n+        friend class Logger;\n+    };\n \n     class Logger\n     {\n     public:\n         struct BufferedLog {\n             SystemClock::time_point now;\n             std::chrono::seconds mocktime;\n-            std::string str, logging_function, source_file, threadname;\n-            int source_line;\n+            std::string str, threadname;",
      "path": "src/logging.h",
      "position": 134,
      "original_position": 120,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2175159834,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, please disregard. I think I misread this as `std::string, threadname` and probably didn't even try compiling the suggestion.",
      "created_at": "2025-07-03T11:30:05Z",
      "updated_at": "2025-07-03T11:30:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2182549098",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182549098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 187,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182576679",
      "pull_request_review_id": 2982853307,
      "id": 2182576679,
      "node_id": "PRRC_kwDOABII586CF3on",
      "diff_hunk": "@@ -105,6 +200,9 @@ namespace BCLog {\n         size_t m_cur_buffer_memusage GUARDED_BY(m_cs){0};\n         size_t m_buffer_lines_discarded GUARDED_BY(m_cs){0};\n \n+        //! Manages the rate limiting of each log location.\n+        std::unique_ptr<LogRateLimiter> m_limiter;",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 144,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "34fc54d5476af464407c8de64c58897a35dce5cb",
      "in_reply_to_id": 2182461594,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will implement. I should have caught this as well -- I am glad we have TSAN in CI. I will test the branch locally under TSAN.",
      "created_at": "2025-07-03T11:45:21Z",
      "updated_at": "2025-07-03T11:45:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2182576679",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182576679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182726209",
      "pull_request_review_id": 2983078117,
      "id": 2182726209,
      "node_id": "PRRC_kwDOABII586CGcJB",
      "diff_hunk": "@@ -424,7 +450,28 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            LogPrintStr_(strprintf(",
      "path": "src/logging.cpp",
      "position": 124,
      "original_position": 122,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "34fc54d5476af464407c8de64c58897a35dce5cb",
      "in_reply_to_id": 2182544165,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Unfortunate that it can only be resolved by marking the function as `NOLINT`. Addressed.",
      "created_at": "2025-07-03T13:00:06Z",
      "updated_at": "2025-07-03T13:00:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2182726209",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182726209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 460,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182919153",
      "pull_request_review_id": 2983245277,
      "id": 2182919153,
      "node_id": "PRRC_kwDOABII586CHLPx",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats",
      "path": "src/logging.h",
      "position": 55,
      "original_position": 55,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: making this a simple `struct LogRateLimiter::Stats` would clean things up a bit more.\r\n\r\nDiff that does that + updates naming to reflect the phasing out of `LogLocationCounter` naming and updates documentation to not mention concepts it's not aware of (e.g. `Stats` does not know anything about time windows).\r\n\r\n<details>\r\n<summary>git diff on 6a7147358c</summary>\r\n\r\n```diff\r\ndiff --git a/src/logging.cpp b/src/logging.cpp\r\nindex a090803652..7dc81928f2 100644\r\n--- a/src/logging.cpp\r\n+++ b/src/logging.cpp\r\n@@ -384,10 +384,10 @@ BCLog::LogRateLimiter::Status BCLog::LogRateLimiter::Consume(\r\n     const std::string& str)\r\n {\r\n     StdLockGuard scoped_lock(m_mutex);\r\n-    auto& counter{m_source_locations.try_emplace(source_loc, m_max_bytes).first->second};\r\n-    Status status{counter.GetDroppedBytes() > 0 ? Status::STILL_SUPPRESSED : Status::UNSUPPRESSED};\r\n+    auto& stats{m_source_locations.try_emplace(source_loc, m_max_bytes).first->second};\r\n+    Status status{stats.dropped_bytes > 0 ? Status::STILL_SUPPRESSED : Status::UNSUPPRESSED};\r\n \r\n-    if (!counter.Consume(str.size()) && status == Status::UNSUPPRESSED) {\r\n+    if (!stats.Consume(str.size()) && status == Status::UNSUPPRESSED) {\r\n         status = Status::NEWLY_SUPPRESSED;\r\n         m_suppression_active = true;\r\n     }\r\n@@ -549,8 +549,8 @@ void BCLog::LogRateLimiter::Reset()\r\n         source_locations.swap(m_source_locations);\r\n         m_suppression_active = false;\r\n     }\r\n-    for (const auto& [source_loc, counter] : source_locations) {\r\n-        uint64_t dropped_bytes{counter.GetDroppedBytes()};\r\n+    for (const auto& [source_loc, stats] : source_locations) {\r\n+        uint64_t dropped_bytes{stats.dropped_bytes};\r\n         if (dropped_bytes == 0) continue;\r\n         LogPrintLevel_(\r\n             LogFlags::ALL, Level::Info, /*should_ratelimit=*/false,\r\n@@ -560,15 +560,15 @@ void BCLog::LogRateLimiter::Reset()\r\n     }\r\n }\r\n \r\n-bool BCLog::LogLimitStats::Consume(uint64_t bytes)\r\n+bool BCLog::LogRateLimiter::Stats::Consume(uint64_t bytes)\r\n {\r\n-    if (bytes > m_available_bytes) {\r\n-        m_dropped_bytes += bytes;\r\n-        m_available_bytes = 0;\r\n+    if (bytes > available_bytes) {\r\n+        dropped_bytes += bytes;\r\n+        available_bytes = 0;\r\n         return false;\r\n     }\r\n \r\n-    m_available_bytes -= bytes;\r\n+    available_bytes -= bytes;\r\n     return true;\r\n }\r\n \r\ndiff --git a/src/logging.h b/src/logging.h\r\nindex c801e94e28..3253bdf910 100644\r\n--- a/src/logging.h\r\n+++ b/src/logging.h\r\n@@ -106,43 +106,18 @@ namespace BCLog {\r\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\r\n     constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\r\n \r\n-    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\r\n-    class LogLimitStats\r\n-    {\r\n-    private:\r\n-        //! Remaining bytes in the current window interval.\r\n-        uint64_t m_available_bytes;\r\n-        //! Number of bytes that were not consumed within the current window.\r\n-        uint64_t m_dropped_bytes{0};\r\n-\r\n-    public:\r\n-        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\r\n-        //! Consume bytes from the window if enough bytes are available.\r\n-        //!\r\n-        //! Returns whether enough bytes were available.\r\n-        bool Consume(uint64_t bytes);\r\n-\r\n-        uint64_t GetAvailableBytes() const\r\n-        {\r\n-            return m_available_bytes;\r\n-        }\r\n-\r\n-        uint64_t GetDroppedBytes() const\r\n-        {\r\n-            return m_dropped_bytes;\r\n-        }\r\n-    };\r\n-\r\n     /**\r\n      * Fixed window rate limiter for logging.\r\n      */\r\n     class LogRateLimiter\r\n     {\r\n+    public:\r\n+        struct Stats;\r\n     private:\r\n         mutable StdMutex m_mutex;\r\n \r\n-        //! Counters for each source location that has attempted to log something.\r\n-        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\r\n+        //! Stats for each source location that has attempted to log something.\r\n+        std::unordered_map<std::source_location, Stats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\r\n         //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.\r\n         std::atomic<bool> m_suppression_active{false};\r\n \r\n@@ -154,7 +129,7 @@ namespace BCLog {\r\n          *                          reset_window interval.\r\n          * @param max_bytes         Maximum number of bytes that can be logged for each source\r\n          *                          location.\r\n-         * @param reset_window      Time window after which the byte counters are reset.\r\n+         * @param reset_window      Time window after which the stats are reset.\r\n          */\r\n         LogRateLimiter(SchedulerFunction scheduler_func, uint64_t max_bytes, std::chrono::seconds reset_window);\r\n         //! Maximum number of bytes logged per location per window.\r\n@@ -178,6 +153,19 @@ namespace BCLog {\r\n         bool SuppressionsActive() const { return m_suppression_active; }\r\n     };\r\n \r\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\r\n+    struct LogRateLimiter::Stats\r\n+    {\r\n+        //! Remaining bytes\r\n+        uint64_t available_bytes;\r\n+        //! Number of bytes that were consumed but didn't fit in the available bytes\r\n+        uint64_t dropped_bytes{0};\r\n+\r\n+            Stats(uint64_t max_bytes) : available_bytes{max_bytes} {}\r\n+            //! Updates internal accounting and returns true if enough available_bytes were remaining\r\n+            bool Consume(uint64_t bytes);\r\n+        };\r\n+\r\n     class Logger\r\n     {\r\n     public:\r\ndiff --git a/src/test/logging_tests.cpp b/src/test/logging_tests.cpp\r\nindex 00fb44eaa3..0b21aed588 100644\r\n--- a/src/test/logging_tests.cpp\r\n+++ b/src/test/logging_tests.cpp\r\n@@ -348,25 +348,25 @@ BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\r\n \r\n BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\r\n {\r\n-    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\r\n+    BCLog::LogRateLimiter::Stats stats{BCLog::RATELIMIT_MAX_BYTES};\r\n \r\n-    // Check that counter gets initialized correctly.\r\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\r\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\r\n+    // Check that stats gets initialized correctly.\r\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES);\r\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, 0ull);\r\n \r\n     const uint64_t MESSAGE_SIZE{512 * 1024};\r\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\r\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\r\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\r\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\r\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\r\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, 0ull);\r\n \r\n-    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\r\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\r\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\r\n+    BOOST_CHECK(stats.Consume(MESSAGE_SIZE));\r\n+    BOOST_CHECK_EQUAL(stats.available_bytes, BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\r\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, 0ull);\r\n \r\n     // Consuming more bytes after already having consumed 1MB should fail.\r\n-    BOOST_CHECK(!counter.Consume(500));\r\n-    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\r\n-    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\r\n+    BOOST_CHECK(!stats.Consume(500));\r\n+    BOOST_CHECK_EQUAL(stats.available_bytes, 0ull);\r\n+    BOOST_CHECK_EQUAL(stats.dropped_bytes, 500ull);\r\n }\r\n \r\n void LogFromLocation(int location, std::string message)\r\n\r\n```\r\n</details>\r\n\r\n",
      "created_at": "2025-07-03T14:19:06Z",
      "updated_at": "2025-07-04T13:12:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2182919153",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2182919153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2185218652",
      "pull_request_review_id": 2983245277,
      "id": 2185218652,
      "node_id": "PRRC_kwDOABII586CP8pc",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());",
      "path": "src/logging.h",
      "position": 30,
      "original_position": 30,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "review note: if a single line contains two log statements, they will be sharing the same stats. I can't find any current such instances in the code, and the only realistic scenario in which I could see something like that happen is:\r\n\r\n```cpp\r\nwarn ? LogWarning(msg) : LogInfo(msg)\r\n```\r\n\r\nwhich would logically be equivalent to the same log location (e.g. using `LogPrintLevel`) anyway.\r\n\r\nThis behaviour can be verified with:\r\n\r\n<details>\r\n<summary>git diff on 6a7147358c</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/logging_tests.cpp b/src/test/logging_tests.cpp\r\nindex 00fb44eaa3..0632dcd438 100644\r\n--- a/src/test/logging_tests.cpp\r\n+++ b/src/test/logging_tests.cpp\r\n@@ -369,7 +369,7 @@ BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\r\n     BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\r\n }\r\n \r\n-void LogFromLocation(int location, std::string message)\r\n+void LogFromLocation(int location, std::string message, bool warn = true)\r\n {\r\n     switch (location) {\r\n     case 0:\r\n@@ -384,13 +384,16 @@ void LogFromLocation(int location, std::string message)\r\n     case 3:\r\n         LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\r\n         break;\r\n+    case 4:\r\n+        warn ? LogInfo(\"%s\\n\", message) : LogInfo(\"%s\\n\", message);\r\n+        break;\r\n     }\r\n }\r\n \r\n-void LogFromLocationAndExpect(int location, std::string message, std::string expect)\r\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect, bool warn = true)\r\n {\r\n     ASSERT_DEBUG_LOG(expect);\r\n-    LogFromLocation(location, message);\r\n+    LogFromLocation(location, message, warn);\r\n }\r\n \r\n BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\r\n@@ -465,6 +468,13 @@ BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\r\n \r\n     BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 3 should be exempt from rate limiting\");\r\n \r\n+    // log from warn \"sublocation\" until limit is reached\r\n+    for (int i = 0; i < 1024; ++i) {\r\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(4, log_message, \"Excessive logging detected\", /*warn=*/true), std::runtime_error);\r\n+    }\r\n+    // we haven't yet logged from the non-warn \"sublocation\", yet it is ratelimited right away\r\n+    LogFromLocationAndExpect(4, log_message, \"Excessive logging detected\", /*warn=*/false);\r\n+\r\n     LogInstance().m_log_timestamps = prev_log_timestamps;\r\n     LogInstance().m_log_sourcelocations = prev_log_sourcelocations;\r\n     LogInstance().m_log_threadnames = prev_log_threadnames;\r\n\r\n```\r\n</details>\r\n",
      "created_at": "2025-07-04T12:18:10Z",
      "updated_at": "2025-07-04T13:12:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2185218652",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2185218652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2185313756",
      "pull_request_review_id": 2983245277,
      "id": 2185313756,
      "node_id": "PRRC_kwDOABII586CQT3c",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+\n+    log_file_size = GetFileSize(log_path);\n+\n+    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    {\n+        ASSERT_DEBUG_LOG(\"Restarting logging\");\n+        MockForwardAndSync(scheduler, 1min);\n+    }\n+\n+    // BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Restarting logging\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the end of the suppression period should be logged\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Restarting logging\"), std::runtime_error);\n+\n+    // Attempt to log 1MiB from location 2 and 1MiB from location 3. These exempt locations should be allowed to log\n+    // without limit.\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(2, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 2 should be exempt from rate limiting\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(3, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 3 should be exempt from rate limiting\");",
      "path": "src/test/logging_tests.cpp",
      "position": 243,
      "original_position": 244,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think there are a number of issues with this part of the test:\r\n- the docstring states locations 2 and 3 are exempt, but I don't see why they would be\r\n- it tests that the location can log **up to** the ratelimit amount, which is true in any case\r\n- it tests that the filesize increases, which would also happen if ratelimiting were to have happened, so it doesn't really catch anything\r\n\r\nI think the `logging_filesize_rate_limit` test can be improved and cleaned up in a follow-up (to e.g. address the very confusing `BOOST_CHECK_THROW(LogFromLocationAndExpect())` pattern), so perhaps this can all be done together, but with a minimal diff I would suggest to change this to:\r\n\r\n<details>\r\n<summary>git diff on 6a7147358c</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/logging_tests.cpp b/src/test/logging_tests.cpp\r\nindex 00fb44eaa3..847279ad4d 100644\r\n--- a/src/test/logging_tests.cpp\r\n+++ b/src/test/logging_tests.cpp\r\n@@ -379,10 +379,10 @@ void LogFromLocation(int location, std::string message)\r\n         LogInfo(\"%s\\n\", message);\r\n         break;\r\n     case 2:\r\n-        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\r\n+        LogDebug(BCLog::LogFlags::HTTP, \"%s\\n\", message);\r\n         break;\r\n     case 3:\r\n-        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\r\n+        LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, /*should_ratelimit=*/false, \"%s\\n\", message);\r\n         break;\r\n     }\r\n }\r\n@@ -449,20 +449,21 @@ BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\r\n \r\n     BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Restarting logging\"), std::runtime_error);\r\n \r\n-    // Attempt to log 1MiB from location 2 and 1MiB from location 3. These exempt locations should be allowed to log\r\n-    // without limit.\r\n-    log_file_size = GetFileSize(log_path);\r\n-    for (int i = 0; i < 1024; ++i) {\r\n-        BOOST_CHECK_THROW(LogFromLocationAndExpect(2, log_message, \"Excessive logging detected\"), std::runtime_error);\r\n+    // Fill up locations 2 and 3 to the ratelimit amount\r\n+    for (size_t loc : {2, 3}) {\r\n+        for (int i = 0; i < 1024; ++i) {\r\n+            LogFromLocation(loc, log_message);\r\n+        }\r\n     }\r\n \r\n+    // Ensure location 2 (debug logging) can go beyond the ratelimiting, it is exempt.\r\n+    log_file_size = GetFileSize(log_path);\r\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(2, log_message, \"Excessive logging detected\"), std::runtime_error);\r\n     BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 2 should be exempt from rate limiting\");\r\n \r\n+    // Ensure location 3 (with explicit should_ratelimit=false) can go beyond the ratelimiting, it is exempt.\r\n     log_file_size = GetFileSize(log_path);\r\n-    for (int i = 0; i < 1024; ++i) {\r\n-        BOOST_CHECK_THROW(LogFromLocationAndExpect(3, log_message, \"Excessive logging detected\"), std::runtime_error);\r\n-    }\r\n-\r\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(3, log_message, \"Excessive logging detected\"), std::runtime_error);\r\n     BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 3 should be exempt from rate limiting\");\r\n \r\n     LogInstance().m_log_timestamps = prev_log_timestamps;\r\n\r\n```\r\n</details>\r\n\r\n",
      "created_at": "2025-07-04T12:59:25Z",
      "updated_at": "2025-07-04T13:12:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2185313756",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2185313756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 451,
      "original_start_line": 452,
      "start_side": "RIGHT",
      "line": 465,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2185605781",
      "pull_request_review_id": 2987602937,
      "id": 2185605781,
      "node_id": "PRRC_kwDOABII586CRbKV",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());",
      "path": "src/logging.h",
      "position": 30,
      "original_position": 30,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2185218652,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I had thought about that as well. I looked for patterns like this, but I did not look very hard. Do you think this deserves a comment in a follow-up to warn against behavior like this?",
      "created_at": "2025-07-04T15:09:11Z",
      "updated_at": "2025-07-04T15:09:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2185605781",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2185605781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2185609148",
      "pull_request_review_id": 2987607108,
      "id": 2185609148,
      "node_id": "PRRC_kwDOABII586CRb-8",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+\n+    log_file_size = GetFileSize(log_path);\n+\n+    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    {\n+        ASSERT_DEBUG_LOG(\"Restarting logging\");\n+        MockForwardAndSync(scheduler, 1min);\n+    }\n+\n+    // BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Restarting logging\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the end of the suppression period should be logged\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Restarting logging\"), std::runtime_error);\n+\n+    // Attempt to log 1MiB from location 2 and 1MiB from location 3. These exempt locations should be allowed to log\n+    // without limit.\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(2, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 2 should be exempt from rate limiting\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(3, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 3 should be exempt from rate limiting\");",
      "path": "src/test/logging_tests.cpp",
      "position": 243,
      "original_position": 244,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2185313756,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will address in a follow-up, I think this is from an older version of the PR where the functions used in location 2/3 were not caught by the rate limit.",
      "created_at": "2025-07-04T15:10:01Z",
      "updated_at": "2025-07-04T15:10:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2185609148",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2185609148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 451,
      "original_start_line": 452,
      "start_side": "RIGHT",
      "line": 465,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2185611861",
      "pull_request_review_id": 2987611661,
      "id": 2185611861,
      "node_id": "PRRC_kwDOABII586CRcpV",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats",
      "path": "src/logging.h",
      "position": 55,
      "original_position": 55,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2182919153,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`Stats` is a better name, `LogRateLimiter::LogLimitStats` is a bit verbose / stutter-y. Will address in a follow-up, I am not so good with naming. ",
      "created_at": "2025-07-04T15:10:54Z",
      "updated_at": "2025-07-04T15:10:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2185611861",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2185611861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188155450",
      "pull_request_review_id": 2991145098,
      "id": 2188155450,
      "node_id": "PRRC_kwDOABII586CbJo6",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */",
      "path": "src/logging.h",
      "position": 83,
      "original_position": 83,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: so many comment styles used here, most in new code. Now that this is a one-liner, we can unify it with the rest of the comments here:\r\n```suggestion\r\n    //! Fixed window rate limiter for logging.\r\n```\r\n\r\nIf you apply this, please see other similar ones as well.\r\n\r\nThe problem with these inconsistencies is not just cosmetic, these differences are distracting us from being able to treat inconsistencies as code smells.",
      "created_at": "2025-07-06T10:27:50Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188155450",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188155450"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 136,
      "original_start_line": 136,
      "start_side": "RIGHT",
      "line": 138,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188156156",
      "pull_request_review_id": 2991145098,
      "id": 2188156156,
      "node_id": "PRRC_kwDOABII586CbJz8",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.",
      "path": "src/logging.h",
      "position": 91,
      "original_position": 91,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\n\n```suggestion\n        //! Whether any log locations are suppressed. Cached view on m_source_locations for performance reasons.\n```",
      "created_at": "2025-07-06T10:29:24Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188156156",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188156156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188157982",
      "pull_request_review_id": 2991145098,
      "id": 2188157982,
      "node_id": "PRRC_kwDOABII586CbKQe",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+\n+    log_file_size = GetFileSize(log_path);\n+\n+    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    {\n+        ASSERT_DEBUG_LOG(\"Restarting logging\");\n+        MockForwardAndSync(scheduler, 1min);\n+    }\n+\n+    // BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Restarting logging\"));",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 225,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "what's the reason for commented out code? Is this PR still in draft mode or is it ready for review?",
      "created_at": "2025-07-06T10:37:53Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188157982",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188157982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188158176",
      "pull_request_review_id": 2991145098,
      "id": 2188158176,
      "node_id": "PRRC_kwDOABII586CbKTg",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+\n+    log_file_size = GetFileSize(log_path);\n+\n+    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");",
      "path": "src/test/logging_tests.cpp",
      "position": 214,
      "original_position": 214,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this way we're not seeing the unequal values, just the message. Why not `BOOST_CHECK_EQUAL`?",
      "created_at": "2025-07-06T10:38:36Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188158176",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188158176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 436,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188158709",
      "pull_request_review_id": 2991145098,
      "id": 2188158709,
      "node_id": "PRRC_kwDOABII586CbKb1",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.",
      "path": "src/test/logging_tests.cpp",
      "position": 189,
      "original_position": 189,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given that we had problems with Windows so far, it might not be immediately obvious if this newline is a single char on Windows as well - can we generalize the test so that it doesn't matter?",
      "created_at": "2025-07-06T10:40:36Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188158709",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188158709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 411,
      "original_line": 411,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188159134",
      "pull_request_review_id": 2991145098,
      "id": 2188159134,
      "node_id": "PRRC_kwDOABII586CbKie",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)",
      "path": "src/test/logging_tests.cpp",
      "position": 150,
      "original_position": 150,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is there a reason to copy the large message on each invocation?\n```suggestion\nvoid LogFromLocation(int location, const std::string& message)\n```",
      "created_at": "2025-07-06T10:42:16Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188159134",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188159134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 372,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188160472",
      "pull_request_review_id": 2991145098,
      "id": 2188160472,
      "node_id": "PRRC_kwDOABII586CbK3Y",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.\n+        std::atomic<bool> m_suppression_active{false};\n+\n+    public:\n+        using SchedulerFunction = std::function<void(std::function<void()>, std::chrono::milliseconds)>;\n+        /**\n+         * @param scheduler_func    Callable object used to schedule resetting the window. The first\n+         *                          parameter is the function to be executed, and the second is the\n+         *                          reset_window interval.\n+         * @param max_bytes         Maximum number of bytes that can be logged for each source\n+         *                          location.\n+         * @param reset_window      Time window after which the byte counters are reset.\n+         */\n+        LogRateLimiter(SchedulerFunction scheduler_func, uint64_t max_bytes, std::chrono::seconds reset_window);\n+        //! Maximum number of bytes logged per location per window.\n+        const uint64_t m_max_bytes;\n+        //! Interval after which the window is reset.\n+        const std::chrono::seconds m_reset_window;\n+        //! Suppression status of a source log location.\n+        enum class Status {\n+            UNSUPPRESSED,     // string fits within the limit\n+            NEWLY_SUPPRESSED, // suppression has started since this string\n+            STILL_SUPPRESSED, // suppression is still ongoing\n+        };",
      "path": "src/logging.h",
      "position": 114,
      "original_position": 114,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I haven't spent time trying to come up with an alternative yet, so I might be completely wrong, but I'm not sure I fully understand yet why we need these states.\r\nIf the role of the extra `NEWLY_SUPPRESSED` state is just to signal that we need to log a warning message now, maybe we can simplify a bit since it seems to me some work might be duplicated here (i.e. that we should be able to get rid of this enum completely).\r\nLet me know if you need me to create a prototype to (dis)prove my hunch.\r\n\r\n---\r\n\r\nAlso, this change is meant to avoid an attack, we don't have to be *that* precise with the calculations, just a rough accounting should suffice as far as I can tell - especially if it makes the code simpler.\r\n\r\nIt's what we're doing in https://github.com/bitcoin/bitcoin/blob/e419b0e17f8acfe577c35c62a8a71a19aad249f3/src/txdb.cpp#L132 as well - we just call it an approximate size and keep adding values to it until the limit is exceeded. Would that not suffice here?",
      "created_at": "2025-07-06T10:48:06Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188160472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188160472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 165,
      "original_start_line": 165,
      "start_side": "RIGHT",
      "line": 169,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188161507",
      "pull_request_review_id": 2991145098,
      "id": 2188161507,
      "node_id": "PRRC_kwDOABII586CbLHj",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.\n+        std::atomic<bool> m_suppression_active{false};\n+\n+    public:\n+        using SchedulerFunction = std::function<void(std::function<void()>, std::chrono::milliseconds)>;\n+        /**\n+         * @param scheduler_func    Callable object used to schedule resetting the window. The first",
      "path": "src/logging.h",
      "position": 97,
      "original_position": 97,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I passionately dislike these huge comments, they're usually distracting from the actual code (the ultimate source of truth) and over-explain something that - if indeed hard to understand - should be refactored instead.\r\n* why is the outer function called a `Callable object`, but the internal one a `function to be executed`\r\n* why are we even explaining `SchedulerFunction` here - the code already clearly states the same, the comment just duplicates exactly the same information in a place that should explain `LogRateLimiter`. If`SchedulerFunction` is complicated, we could extract it to a dedicated type and explain it there if it's hard to understand.",
      "created_at": "2025-07-06T10:51:57Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188161507",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188161507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188161714",
      "pull_request_review_id": 2991145098,
      "id": 2188161714,
      "node_id": "PRRC_kwDOABII586CbLKy",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */",
      "path": "src/logging.h",
      "position": 83,
      "original_position": 83,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we seem to have a lot of (comment) styles here, now that it's this short, let's simplify and unify this:\r\n\r\n```suggestion\r\n    //! Fixed window rate limiter for logging.\r\n```",
      "created_at": "2025-07-06T10:52:53Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188161714",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188161714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 136,
      "original_start_line": 136,
      "start_side": "RIGHT",
      "line": 138,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188215958",
      "pull_request_review_id": 2991145098,
      "id": 2188215958,
      "node_id": "PRRC_kwDOABII586CbYaW",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.\n+        std::atomic<bool> m_suppression_active{false};",
      "path": "src/logging.h",
      "position": 92,
      "original_position": 92,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we document somewhere the expected behavior for when the node is restarted?",
      "created_at": "2025-07-06T11:58:05Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188215958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188215958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 147,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188219092",
      "pull_request_review_id": 2991145098,
      "id": 2188219092,
      "node_id": "PRRC_kwDOABII586CbZLU",
      "diff_hunk": "@@ -0,0 +1,8 @@\n+Logging\n+-------\n+Unconditional logging to disk via LogPrintf, LogInfo, LogWarning, LogError, and\n+LogPrintLevel is now rate limited by giving each source location a logging quota of\n+1MiB per hour. (#32604)\n+\n+When `-logsourcelocation` is enabled, the log output now contains the entire",
      "path": "doc/release-notes-32604.md",
      "position": 1,
      "original_position": 7,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should be [plural](https://github.com/bitcoin/bitcoin/blob/d05668922a28e4e2c78dab2d4737433cd52d6302/src/init/common.cpp#L38):\r\n```suggestion\r\nWhen `-logsourcelocations` is enabled, the log output now contains the entire\r\n```",
      "created_at": "2025-07-06T12:05:59Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188219092",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188219092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188221041",
      "pull_request_review_id": 2991145098,
      "id": 2188221041,
      "node_id": "PRRC_kwDOABII586CbZpx",
      "diff_hunk": "@@ -0,0 +1,8 @@\n+Logging\n+-------\n+Unconditional logging to disk via LogPrintf, LogInfo, LogWarning, LogError, and\n+LogPrintLevel is now rate limited by giving each source location a logging quota of\n+1MiB per hour. (#32604)",
      "path": "doc/release-notes-32604.md",
      "position": 1,
      "original_position": 5,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`LogPrintLevel` can be debug as well which won't be rate limited - so this generalization seems inaccurate to me.\r\nAnd the important part of our message (i.e. that we're hiding some logs now) is mentioned too late:\r\n```suggestion\r\nUnconditional logging to disk is now rate limited via `LogPrintf`, `LogInfo`, `LogWarning`, `LogError`,\r\nand the corresponding `LogPrintLevel` calls by giving each source location a quota of\r\n1MiB per hour. (#32604)\r\n```",
      "created_at": "2025-07-06T12:10:20Z",
      "updated_at": "2025-07-06T22:12:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188221041",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188221041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 3,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188222610",
      "pull_request_review_id": 2991145098,
      "id": 2188222610,
      "node_id": "PRRC_kwDOABII586CbaCS",
      "diff_hunk": "@@ -1378,6 +1378,11 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         }\n     }, std::chrono::minutes{5});\n \n+    LogInstance().SetRateLimiting(std::make_unique<BCLog::LogRateLimiter>(",
      "path": "src/init.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "👍 for removing the config option, this is simpler",
      "created_at": "2025-07-06T12:11:50Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188222610",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188222610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1381,
      "original_line": 1381,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188225329",
      "pull_request_review_id": 2991145098,
      "id": 2188225329,
      "node_id": "PRRC_kwDOABII586Cbasx",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            // NOLINTNEXTLINE(misc-no-recursion)\n+            LogPrintStr_(strprintf(\n+                             \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\n+                             \"the last time window of %is. Suppressing logging to disk from this \"\n+                             \"source location until time window resets. Console logging \"",
      "path": "src/logging.cpp",
      "position": 127,
      "original_position": 127,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "but console logging *is* affected, we'll prefix them with `*` (which we're not explaining anywhere as far as I can tell)",
      "created_at": "2025-07-06T12:15:02Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188225329",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188225329"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 463,
      "original_line": 463,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188225785",
      "pull_request_review_id": 2991145098,
      "id": 2188225785,
      "node_id": "PRRC_kwDOABII586Cbaz5",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            // NOLINTNEXTLINE(misc-no-recursion)\n+            LogPrintStr_(strprintf(\n+                             \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\n+                             \"the last time window of %is. Suppressing logging to disk from this \"\n+                             \"source location until time window resets. Console logging \"\n+                             \"unaffected. Last log entry.\\n\",\n+                             source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                             m_limiter->m_max_bytes,\n+                             Ticks<std::chrono::seconds>(m_limiter->m_reset_window)),\n+                         std::source_location::current(), LogFlags::ALL, Level::Warning, /*should_ratelimit=*/false); // with should_ratelimit=false, this cannot lead to infinite recursion",
      "path": "src/logging.cpp",
      "position": 132,
      "original_position": 132,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find this concerning, it's very unintuitive that logging announcement would even pose such a threat",
      "created_at": "2025-07-06T12:16:28Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188225785",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188225785"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 468,
      "original_line": 468,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188226741",
      "pull_request_review_id": 2991145098,
      "id": 2188226741,
      "node_id": "PRRC_kwDOABII586CbbC1",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            // NOLINTNEXTLINE(misc-no-recursion)\n+            LogPrintStr_(strprintf(\n+                             \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\n+                             \"the last time window of %is. Suppressing logging to disk from this \"\n+                             \"source location until time window resets. Console logging \"\n+                             \"unaffected. Last log entry.\\n\",\n+                             source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                             m_limiter->m_max_bytes,\n+                             Ticks<std::chrono::seconds>(m_limiter->m_reset_window)),\n+                         std::source_location::current(), LogFlags::ALL, Level::Warning, /*should_ratelimit=*/false); // with should_ratelimit=false, this cannot lead to infinite recursion\n+        }\n+        ratelimit = status == BCLog::LogRateLimiter::Status::STILL_SUPPRESSED;\n+        // To avoid confusion caused by dropped log messages when debugging an issue,\n+        // we prefix log lines with \"[*]\" when there are any suppressed source locations.\n+        if (m_limiter->SuppressionsActive()) {",
      "path": "src/logging.cpp",
      "position": 137,
      "original_position": 137,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should we guard this by `m_print_to_console`?\r\nAnd as explained before, I think it would make more sense to only prefix dropped lines.",
      "created_at": "2025-07-06T12:17:24Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188226741",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188226741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 473,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188231409",
      "pull_request_review_id": 2991145098,
      "id": 2188231409,
      "node_id": "PRRC_kwDOABII586CbcLx",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window",
      "path": "src/logging.h",
      "position": 52,
      "original_position": 52,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we may want to mention here whether this is the *total* (or per line) and that it's only counting a subset of logged bytes (reading the comment somebody would rightfully wonder \"but I'm sure we're logging more during IBD\")\r\n```\r\n// maximum number of bytes that can be logged from a given source location within the specified time-window\r\n```",
      "created_at": "2025-07-06T12:25:36Z",
      "updated_at": "2025-07-06T22:13:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188231409",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188231409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188237233",
      "pull_request_review_id": 2991145098,
      "id": 2188237233,
      "node_id": "PRRC_kwDOABII586Cbdmx",
      "diff_hunk": "@@ -384,28 +412,27 @@ void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags catego\n     str.insert(0, LogTimestampStr(now, mocktime));\n }\n \n-void BCLog::Logger::LogPrintStr(std::string_view str, std::string_view logging_function, std::string_view source_file, int source_line, BCLog::LogFlags category, BCLog::Level level)\n+void BCLog::Logger::LogPrintStr(std::string_view str, std::source_location&& source_loc, BCLog::LogFlags category, BCLog::Level level, bool should_ratelimit)\n {\n     StdLockGuard scoped_lock(m_cs);\n-    return LogPrintStr_(str, logging_function, source_file, source_line, category, level);\n+    return LogPrintStr_(str, std::move(source_loc), category, level, should_ratelimit);\n }\n \n-void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_function, std::string_view source_file, int source_line, BCLog::LogFlags category, BCLog::Level level)\n+// NOLINTNEXTLINE(misc-no-recursion)\n+void BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& source_loc, BCLog::LogFlags category, BCLog::Level level, bool should_ratelimit)",
      "path": "src/logging.cpp",
      "position": 87,
      "original_position": 87,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "given that we will have to quote the boolean's name in every usage, consider a shorter parameter name than `should_ratelimit`:\r\n```suggestion\r\nvoid BCLog::Logger::LogPrintStr_(std::string_view str, std::source_location&& source_loc, BCLog::LogFlags category, BCLog::Level level, bool rate_limited)\r\n```\r\n(note that *ratelimit* doesn't seem to be an accepted single word, in other cases we're delimiting the two, e.g. `bool rate_limit{level >= BCLog::Level::Info};` a few lines below or https://github.com/bitcoin/bitcoin/blob/46f79dde67e46cd0f86db9406c43cf602394c049/src/qt/rpcconsole.cpp#L1260)",
      "created_at": "2025-07-06T12:38:14Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188237233",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188237233"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 422,
      "original_line": 422,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188237463",
      "pull_request_review_id": 2991145098,
      "id": 2188237463,
      "node_id": "PRRC_kwDOABII586CbdqX",
      "diff_hunk": "@@ -424,7 +450,28 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            LogPrintStr_(strprintf(",
      "path": "src/logging.cpp",
      "position": 124,
      "original_position": 122,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "34fc54d5476af464407c8de64c58897a35dce5cb",
      "in_reply_to_id": 2182544165,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As mentioned before, I'm not comfortable with this, can we find a safer way?",
      "created_at": "2025-07-06T12:39:14Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188237463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188237463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 460,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188246172",
      "pull_request_review_id": 2991145098,
      "id": 2188246172,
      "node_id": "PRRC_kwDOABII586Cbfyc",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());",
      "path": "src/logging.h",
      "position": 30,
      "original_position": 30,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2185218652,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was also worried about that, especially when the logging is called via some dedicated method which hijacks the location, even though the call sites should probably not be bundled together.\r\nOr if macros are messing up the lines in any way.\r\n\r\n-----\r\n\r\nOn the other hand, is it really necessary to do the accounting per line, aren't we over-complicating a hypothetical scenario? \r\n\r\nThe original PR stated:\r\n> The main point against global rate limiting is that it opens another attack vector where an attacker could trigger rate limiting and then execute a 2. attack which would then not be document in the logs at all\r\n\r\nMaybe, but this could apply currently as well, you just have to make sure you exhaust the target logger before the second attack. And as far as I can tell currently any hack which would enable all logs to be written would allow `log-locations * 1MiB additional` lines to be added. That kinda' seems worse to me, maybe we should investigate a simpler solution first.\r\n\r\nBut if we stay with the per-line logging-quota, I think this should at least be explained in the PR description.",
      "created_at": "2025-07-06T12:46:52Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188246172",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188246172"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188247526",
      "pull_request_review_id": 2991145098,
      "id": 2188247526,
      "node_id": "PRRC_kwDOABII586CbgHm",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats",
      "path": "src/logging.h",
      "position": 55,
      "original_position": 55,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2182919153,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think we're at the \"follow-up\" stage yet, let's fix whatever we can in this PR, we're not in any hurry as far as I can tell. The nits left by @stickies-v are reasonable, he's willing to re-review, same for me, let's spend a bit more time wit this, it's not ready just yet...",
      "created_at": "2025-07-06T12:49:20Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188247526",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188247526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188250757",
      "pull_request_review_id": 2991145098,
      "id": 2188250757,
      "node_id": "PRRC_kwDOABII586Cbg6F",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            // NOLINTNEXTLINE(misc-no-recursion)\n+            LogPrintStr_(strprintf(\n+                             \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\n+                             \"the last time window of %is. Suppressing logging to disk from this \"\n+                             \"source location until time window resets. Console logging \"\n+                             \"unaffected. Last log entry.\\n\",\n+                             source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                             m_limiter->m_max_bytes,\n+                             Ticks<std::chrono::seconds>(m_limiter->m_reset_window)),\n+                         std::source_location::current(), LogFlags::ALL, Level::Warning, /*should_ratelimit=*/false); // with should_ratelimit=false, this cannot lead to infinite recursion\n+        }\n+        ratelimit = status == BCLog::LogRateLimiter::Status::STILL_SUPPRESSED;\n+        // To avoid confusion caused by dropped log messages when debugging an issue,\n+        // we prefix log lines with \"[*]\" when there are any suppressed source locations.\n+        if (m_limiter->SuppressionsActive()) {\n+            str_prefixed.insert(0, \"[*] \");\n+        }\n+    }\n \n     if (m_print_to_console) {\n         // print to console",
      "path": "src/logging.cpp",
      "position": 143,
      "original_position": 143,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: redundant comment",
      "created_at": "2025-07-06T12:52:54Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188250757",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188250757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 479,
      "original_line": 479,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188252582",
      "pull_request_review_id": 2991145098,
      "id": 2188252582,
      "node_id": "PRRC_kwDOABII586CbhWm",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.\n+        std::atomic<bool> m_suppression_active{false};\n+\n+    public:\n+        using SchedulerFunction = std::function<void(std::function<void()>, std::chrono::milliseconds)>;\n+        /**\n+         * @param scheduler_func    Callable object used to schedule resetting the window. The first\n+         *                          parameter is the function to be executed, and the second is the\n+         *                          reset_window interval.\n+         * @param max_bytes         Maximum number of bytes that can be logged for each source\n+         *                          location.\n+         * @param reset_window      Time window after which the byte counters are reset.\n+         */\n+        LogRateLimiter(SchedulerFunction scheduler_func, uint64_t max_bytes, std::chrono::seconds reset_window);\n+        //! Maximum number of bytes logged per location per window.\n+        const uint64_t m_max_bytes;\n+        //! Interval after which the window is reset.\n+        const std::chrono::seconds m_reset_window;\n+        //! Suppression status of a source log location.\n+        enum class Status {\n+            UNSUPPRESSED,     // string fits within the limit\n+            NEWLY_SUPPRESSED, // suppression has started since this string\n+            STILL_SUPPRESSED, // suppression is still ongoing\n+        };\n+        //! Consumes `source_loc`'s available bytes corresponding to the size of the (formatted)\n+        //! `str` and returns its status.\n+        [[nodiscard]] Status Consume(",
      "path": "src/logging.h",
      "position": 117,
      "original_position": 117,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "maybe it's a code smell that we're afraid that people will forget to check the return value...",
      "created_at": "2025-07-06T12:55:53Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188252582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188252582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188253463",
      "pull_request_review_id": 2991145098,
      "id": 2188253463,
      "node_id": "PRRC_kwDOABII586CbhkX",
      "diff_hunk": "@@ -276,4 +297,126 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(logging_sourcelocation_counter)\n+{\n+    BCLog::SourceLocationCounter counter;\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;",
      "path": "src/test/logging_tests.cpp",
      "position": 158,
      "original_position": 113,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163341392,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I share the eagerness to get this merged, but I don't think this PR is ready yet.\r\nIt still feels like a draft, not polished yet, contains multiple styles because we don't want to touch a previous author's work. As far as I can tell there's no rush, let's do it properly and minimize having to touch the same code in multiple PRs.\r\n\r\n----\r\n\r\nAnf if you insist on keeping this logic here, at least merge the two identical cases:\r\n```suggestion\r\n    case 0:\r\n    case 1:\r\n        LogInfo(\"%s\\n\", message);\r\n        break;\r\n```",
      "created_at": "2025-07-06T12:58:06Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188253463",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188253463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 375,
      "original_start_line": 326,
      "start_side": "RIGHT",
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188256330",
      "pull_request_review_id": 2991145098,
      "id": 2188256330,
      "node_id": "PRRC_kwDOABII586CbiRK",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};",
      "path": "src/test/logging_tests.cpp",
      "position": 192,
      "original_position": 192,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "there's a lot of inconsistency in these tests, can you please unify the styles so that it doesn't look like it was written by multiple people? (auto vs types, brace init vs `=`, 20s vs 1024 * 1024, BOOST_CHECK_MESSAGE(=) vs BOOST_CHECK_EQUAL, etc)",
      "created_at": "2025-07-06T13:02:33Z",
      "updated_at": "2025-07-06T22:10:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188256330",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188256330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 414,
      "original_line": 414,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188265461",
      "pull_request_review_id": 2991145098,
      "id": 2188265461,
      "node_id": "PRRC_kwDOABII586Cbkf1",
      "diff_hunk": "@@ -367,6 +367,30 @@ static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n     return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n+BCLog::LogRateLimiter::LogRateLimiter(\n+    SchedulerFunction scheduler_func,\n+    uint64_t max_bytes,\n+    std::chrono::seconds reset_window) : m_max_bytes{max_bytes}, m_reset_window{reset_window}\n+{\n+    scheduler_func([this] { Reset(); }, reset_window);\n+}\n+\n+BCLog::LogRateLimiter::Status BCLog::LogRateLimiter::Consume(\n+    const std::source_location& source_loc,\n+    const std::string& str)\n+{\n+    StdLockGuard scoped_lock(m_mutex);\n+    auto& counter{m_source_locations.try_emplace(source_loc, m_max_bytes).first->second};\n+    Status status{counter.GetDroppedBytes() > 0 ? Status::STILL_SUPPRESSED : Status::UNSUPPRESSED};\n+\n+    if (!counter.Consume(str.size()) && status == Status::UNSUPPRESSED) {",
      "path": "src/logging.cpp",
      "position": 53,
      "original_position": 20,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "f608adf241810c3c7d577f97a076b5eb83b95b72",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "if the only production usage is inverted, we should likely invert the method's return value to make it more intuitive.\r\n\r\n> does not have any side-effects (except update internal accounting, as expected by the Consume name).\r\n\r\nOr even better, having both a side-effect *and* returning a value is quite confusing (e.g. we can't invert the `&&` here to `if (status == Status::UNSUPPRESSED && !counter.Consume(str.size()))`, so maybe the `Consume` could change the state of `counter` instead and we could query that state here instead.",
      "created_at": "2025-07-06T13:10:51Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188265461",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188265461"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 390,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188268199",
      "pull_request_review_id": 2991145098,
      "id": 2188268199,
      "node_id": "PRRC_kwDOABII586CblKn",
      "diff_hunk": "@@ -82,6 +104,79 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};",
      "path": "src/logging.h",
      "position": 61,
      "original_position": 61,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "f608adf241810c3c7d577f97a076b5eb83b95b72",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is that really useful to the user? I'd be more interested in the number of log lines that were dropped instead of the bytes. \"1234 bytes dropped\" -> \"5 log lines dropped\"",
      "created_at": "2025-07-06T13:16:37Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188268199",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188268199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188268854",
      "pull_request_review_id": 2991145098,
      "id": 2188268854,
      "node_id": "PRRC_kwDOABII586CblU2",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.",
      "path": "src/logging.h",
      "position": 91,
      "original_position": 91,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188156156,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Cached view on m_source_locations for performance reasons\r\n\r\nCan you explain these performance reasons? Is it to avoid iterating the values of the map to find a `0`?\r\nBut shouldn't we only prefix the *dropped* lines by `*` anyway (why prefix the lines that aren't dropped in the first place?), so why do we care about a global suppression state, i.e.\r\n```C++\r\n// To avoid confusion caused by dropped log messages when debugging an issue,\r\n// we prefix log lines with \"[*]\" when there are any suppressed source locations.\r\nif (m_limiter->SuppressionsActive()) {\r\n    str_prefixed.insert(0, \"[*] \");\r\n}\r\n```\r\n\r\nI think this is more confusing than only prefixing the dropped lines, i.e. something like:\r\n```C++\r\nif (m_print_to_console && ratelimit) {\r\n    str_prefixed.insert(0, \"[*] \");\r\n}\r\n```\r\n\r\nWhich would eliminate the need for `m_suppression_active` as far as I can tell.",
      "created_at": "2025-07-06T13:17:25Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188268854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188268854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188285962",
      "pull_request_review_id": 2991145098,
      "id": 2188285962,
      "node_id": "PRRC_kwDOABII586CbpgK",
      "diff_hunk": "@@ -239,7 +343,7 @@ static inline bool LogAcceptCategory(BCLog::LogFlags category, BCLog::Level leve\n bool GetLogCategory(BCLog::LogFlags& flag, std::string_view str);\n \n template <typename... Args>\n-inline void LogPrintFormatInternal(std::string_view logging_function, std::string_view source_file, const int source_line, const BCLog::LogFlags flag, const BCLog::Level level, util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)\n+inline void LogPrintFormatInternal(std::source_location&& source_loc, const BCLog::LogFlags flag, const BCLog::Level level, const bool should_ratelimit, util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)",
      "path": "src/logging.h",
      "position": 194,
      "original_position": 194,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: we probably don't have to keep the consts here:\r\n```suggestion\r\ninline void LogPrintFormatInternal(std::source_location&& source_loc, BCLog::LogFlags flag, BCLog::Level level, bool should_ratelimit, util::ConstevalFormatString<sizeof...(Args)> fmt, const Args&... args)\r\n```",
      "created_at": "2025-07-06T13:36:52Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188285962",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188285962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 346,
      "original_line": 346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188526077",
      "pull_request_review_id": 2991145098,
      "id": 2188526077,
      "node_id": "PRRC_kwDOABII586CckH9",
      "diff_hunk": "@@ -364,33 +368,71 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::FormatLogStrAndRateLimit(std::string& str, BCLog::LogFlags category, BCLog::Level level, const std::source_location& source_loc, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime)\n {\n     if (!str.ends_with('\\n')) str.push_back('\\n');\n \n     str.insert(0, GetLogPrefix(category, level));\n \n     if (m_log_sourcelocations) {\n-        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_file, \"./\"), source_line, logging_function));\n+        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_loc.file_name(), \"./\"), source_loc.line(), logging_function));\n     }\n \n     if (m_log_threadnames) {\n         str.insert(0, strprintf(\"[%s] \", (threadname.empty() ? \"unknown\" : threadname)));\n     }\n \n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    if (category == UNCONDITIONAL_RATE_LIMITED && m_ratelimit) {\n+        was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+        is_ratelimited = !m_ratelimiters[source_loc].Consume(str.size());\n+\n+        if (!is_ratelimited && was_ratelimited) {\n+            // Logging will restart for this source location.\n+            m_suppressed_locations.erase(source_loc);\n+\n+            uint64_t dropped_bytes = m_ratelimiters[source_loc].GetDroppedBytes();\n+\n+            str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                    \"(%d MiB) were dropped during the last hour.\\n\",\n+                                    source_loc.file_name(), source_loc.line(), logging_function,\n+                                    dropped_bytes / (1024 * 1024)));\n+        } else if (is_ratelimited && !was_ratelimited) {",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 97,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115869345,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure we would catch that with our test suite. But if it's meant to draw the users' attention early for false positives, maybe we could log a warning at least. (theoretically the tests could also fail for unregistered extra log warnings)",
      "created_at": "2025-07-06T19:30:25Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188526077",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188526077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 404,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188529752",
      "pull_request_review_id": 2991145098,
      "id": 2188529752,
      "node_id": "PRRC_kwDOABII586CclBY",
      "diff_hunk": "@@ -33,7 +33,7 @@ class DebugLogHelper\n \n public:\n     explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+    ~DebugLogHelper() noexcept(false) { check_found(); }",
      "path": "src/test/util/logging.h",
      "position": 7,
      "original_position": 5,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b7d9c669cadf666f595a3e20ee3726a9ede88acd",
      "in_reply_to_id": 2156851022,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The resulting comment just repeats what the code already does:\r\n> //! Mark as noexcept(false) to catch any thrown exceptions.\r\n\r\nWe don't comment every `noexcept(false)` since it's self-explanatory. What else could `noexcept(false)` mean?\r\n\r\nis just repeating what the [doc states](https://en.cppreference.com/w/cpp/language/noexcept.html):\r\n\r\n> expression is specified to be non-throwing(since C++17), and false otherwise.\r\n",
      "created_at": "2025-07-06T19:36:20Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188529752",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188529752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188542196",
      "pull_request_review_id": 2991145098,
      "id": 2188542196,
      "node_id": "PRRC_kwDOABII586CcoD0",
      "diff_hunk": "@@ -2976,15 +2976,17 @@ static void UpdateTipLog(\n {\n \n     AssertLockHeld(::cs_main);\n-    LogPrintf(\"%s%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\",\n-        prefix, func_name,\n-        tip->GetBlockHash().ToString(), tip->nHeight, tip->nVersion,\n-        log(tip->nChainWork.getdouble()) / log(2.0), tip->m_chain_tx_count,\n-        FormatISO8601DateTime(tip->GetBlockTime()),\n-        chainman.GuessVerificationProgress(tip),\n-        coins_tip.DynamicMemoryUsage() * (1.0 / (1 << 20)),\n-        coins_tip.GetCacheSize(),\n-        !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages) : \"\");\n+\n+    // Disable rate limiting in LogPrintLevel_ so that this location is not rate limited during IBD.",
      "path": "src/validation.cpp",
      "position": 1,
      "original_position": 14,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163352258,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's still a bit noisy, but adding IBD as context could be helpful for some.",
      "created_at": "2025-07-06T19:50:47Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188542196",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188542196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2980,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188544998",
      "pull_request_review_id": 2991145098,
      "id": 2188544998,
      "node_id": "PRRC_kwDOABII586Ccovm",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {",
      "path": "src/logging.cpp",
      "position": 122,
      "original_position": 122,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: We're already inside `BCLog`:\r\n```suggestion\r\n        if (status == LogRateLimiter::Status::NEWLY_SUPPRESSED) {\r\n```",
      "created_at": "2025-07-06T19:53:50Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188544998",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188544998"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 458,
      "original_line": 458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188548959",
      "pull_request_review_id": 2991145098,
      "id": 2188548959,
      "node_id": "PRRC_kwDOABII586Ccptf",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            // NOLINTNEXTLINE(misc-no-recursion)\n+            LogPrintStr_(strprintf(\n+                             \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\n+                             \"the last time window of %is. Suppressing logging to disk from this \"\n+                             \"source location until time window resets. Console logging \"\n+                             \"unaffected. Last log entry.\\n\",\n+                             source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                             m_limiter->m_max_bytes,\n+                             Ticks<std::chrono::seconds>(m_limiter->m_reset_window)),\n+                         std::source_location::current(), LogFlags::ALL, Level::Warning, /*should_ratelimit=*/false); // with should_ratelimit=false, this cannot lead to infinite recursion\n+        }\n+        ratelimit = status == BCLog::LogRateLimiter::Status::STILL_SUPPRESSED;",
      "path": "src/logging.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "seems we just checked the value of this a few lines before, we could probably put this in an else (or even switch-case):\r\n```suggestion\r\n        } else if (status == LogRateLimiter::Status::STILL_SUPPRESSED) {\r\n            ratelimit = true;\r\n        }\r\n```",
      "created_at": "2025-07-06T19:58:31Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188548959",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188548959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 470,
      "original_line": 470,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188569092",
      "pull_request_review_id": 2991145098,
      "id": 2188569092,
      "node_id": "PRRC_kwDOABII586CcuoE",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+\n+    log_file_size = GetFileSize(log_path);\n+\n+    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    {\n+        ASSERT_DEBUG_LOG(\"Restarting logging\");\n+        MockForwardAndSync(scheduler, 1min);\n+    }\n+\n+    // BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Restarting logging\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the end of the suppression period should be logged\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Restarting logging\"), std::runtime_error);\n+\n+    // Attempt to log 1MiB from location 2 and 1MiB from location 3. These exempt locations should be allowed to log\n+    // without limit.\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(2, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 2 should be exempt from rate limiting\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(3, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 3 should be exempt from rate limiting\");",
      "path": "src/test/logging_tests.cpp",
      "position": 243,
      "original_position": 244,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2185313756,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Let's do these here, I don't think we're in a rush.",
      "created_at": "2025-07-06T20:18:52Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188569092",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188569092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 451,
      "original_start_line": 452,
      "start_side": "RIGHT",
      "line": 465,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188612962",
      "pull_request_review_id": 2991145098,
      "id": 2188612962,
      "node_id": "PRRC_kwDOABII586Cc5Vi",
      "diff_hunk": "@@ -73,12 +75,12 @@ bool BCLog::Logger::StartLogging()\n     // dump buffered messages from before we opened the log\n     m_buffering = false;\n     if (m_buffer_lines_discarded > 0) {\n-        LogPrintStr_(strprintf(\"Early logging buffer overflowed, %d log lines discarded.\\n\", m_buffer_lines_discarded), __func__, __FILE__, __LINE__, BCLog::ALL, Level::Info);\n+        LogPrintStr_(strprintf(\"Early logging buffer overflowed, %d log lines discarded.\\n\", m_buffer_lines_discarded), std::source_location::current(), BCLog::ALL, Level::Info, /*should_ratelimit=*/false);",
      "path": "src/logging.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is indeed a lot nicer. 👍 ",
      "created_at": "2025-07-06T21:13:23Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188612962",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188612962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188643445",
      "pull_request_review_id": 2991145098,
      "id": 2188643445,
      "node_id": "PRRC_kwDOABII586CdAx1",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.\n+        return static_cast<size_t>(CSipHasher(0, 0)\n+                                       .Write(std::hash<std::string_view>{}(s.file_name()))\n+                                       .Write(s.line())",
      "path": "src/logging.h",
      "position": 40,
      "original_position": 40,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "maybe we could add the column here as well for the mentioned cases where we have multiple on the same line\r\n```C++\r\n.Write(s.column())\r\n.Write(s.line())\r\n```",
      "created_at": "2025-07-06T21:35:01Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188643445",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188643445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188644325",
      "pull_request_review_id": 2991145098,
      "id": 2188644325,
      "node_id": "PRRC_kwDOABII586CdA_l",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.\n+        return static_cast<size_t>(CSipHasher(0, 0)\n+                                       .Write(std::hash<std::string_view>{}(s.file_name()))",
      "path": "src/logging.h",
      "position": 39,
      "original_position": 39,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do we need to double-hash the filename or can we just feed the chars directly to siphash?\r\n```C++\r\n.Write(MakeUCharSpan(std::string_view{s.file_name()}))\r\n```",
      "created_at": "2025-07-06T21:35:32Z",
      "updated_at": "2025-07-06T22:15:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188644325",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188644325"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188649336",
      "pull_request_review_id": 2991145098,
      "id": 2188649336,
      "node_id": "PRRC_kwDOABII586CdCN4",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            // NOLINTNEXTLINE(misc-no-recursion)\n+            LogPrintStr_(strprintf(\n+                             \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\n+                             \"the last time window of %is. Suppressing logging to disk from this \"\n+                             \"source location until time window resets. Console logging \"\n+                             \"unaffected. Last log entry.\\n\",\n+                             source_loc.file_name(), source_loc.line(), source_loc.function_name(),",
      "path": "src/logging.cpp",
      "position": 129,
      "original_position": 129,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we could log the `.column()` as well, now that we have it for free",
      "created_at": "2025-07-06T21:39:42Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188649336",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188649336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 465,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188649754",
      "pull_request_review_id": 2991145098,
      "id": 2188649754,
      "node_id": "PRRC_kwDOABII586CdCUa",
      "diff_hunk": "@@ -364,17 +366,43 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return memusage::DynamicUsage(buflog.str) +\n+           memusage::DynamicUsage(buflog.threadname) +\n+           memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+BCLog::LogRateLimiter::LogRateLimiter(\n+    SchedulerFunction scheduler_func,\n+    uint64_t max_bytes,\n+    std::chrono::seconds reset_window) : m_max_bytes{max_bytes}, m_reset_window{reset_window}\n+{\n+    scheduler_func([this] { Reset(); }, reset_window);\n+}\n+\n+BCLog::LogRateLimiter::Status BCLog::LogRateLimiter::Consume(\n+    const std::source_location& source_loc,\n+    const std::string& str)\n+{\n+    StdLockGuard scoped_lock(m_mutex);\n+    auto& counter{m_source_locations.try_emplace(source_loc, m_max_bytes).first->second};\n+    Status status{counter.GetDroppedBytes() > 0 ? Status::STILL_SUPPRESSED : Status::UNSUPPRESSED};\n+\n+    if (!counter.Consume(str.size()) && status == Status::UNSUPPRESSED) {\n+        status = Status::NEWLY_SUPPRESSED;\n+        m_suppression_active = true;\n+    }\n+\n+    return status;\n+}\n+\n+void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, const std::source_location& source_loc, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n {\n     if (!str.ends_with('\\n')) str.push_back('\\n');\n \n     str.insert(0, GetLogPrefix(category, level));\n \n     if (m_log_sourcelocations) {\n-        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_file, \"./\"), source_line, logging_function));\n+        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_loc.file_name(), \"./\"), source_loc.line(), source_loc.function_name()));",
      "path": "src/logging.cpp",
      "position": 69,
      "original_position": 69,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I understand that this is outside the scope of the change, but let the record show that we have the column available here as well, now that we've switched to `std::source_location`",
      "created_at": "2025-07-06T21:40:49Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188649754",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188649754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 405,
      "original_line": 405,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188651877",
      "pull_request_review_id": 2991145098,
      "id": 2188651877,
      "node_id": "PRRC_kwDOABII586CdC1l",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);",
      "path": "src/logging.h",
      "position": 90,
      "original_position": 90,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "not necessarily recommending it, just thought I'll mention that adding an `std::map` here instead could theoretically be simpler *and* faster.\r\nWe wouldn't need expensive (double) hashing or a separate `SourceLocationEqual`, just a friendly:\r\n```C++\r\nstruct SourceLocationLess\r\n{\r\n    constexpr bool operator()(const std::source_location& a, const std::source_location& b) const noexcept\r\n    {\r\n        return std::tuple{std::string_view{a.file_name()}, a.line(), a.column()} < std::tuple{std::string_view{b.file_name()}, b.line(), b.column()};\r\n    }\r\n};\r\n```",
      "created_at": "2025-07-06T21:47:48Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188651877",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188651877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188652258",
      "pull_request_review_id": 2991145098,
      "id": 2188652258,
      "node_id": "PRRC_kwDOABII586CdC7i",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {",
      "path": "src/logging.h",
      "position": 27,
      "original_position": 27,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can be constexpr:\r\n```C++\r\nstruct SourceLocationEqual\r\n{\r\n    constexpr bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\r\n    {\r\n        return lhs.line() == rhs.line()\r\n               && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());\r\n    }\r\n};\r\n```",
      "created_at": "2025-07-06T21:48:40Z",
      "updated_at": "2025-07-06T22:10:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2188652258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2188652258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189866340",
      "pull_request_review_id": 2993531256,
      "id": 2189866340,
      "node_id": "PRRC_kwDOABII586ChrVk",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.",
      "path": "src/logging.h",
      "position": 91,
      "original_position": 91,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188156156,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Can you explain these performance reasons?\r\n\r\nNot having to acquire a lock and iterate over an entire map.\r\n\r\n> But shouldn't we only prefix the dropped lines by `*` anyway\r\n\r\nNo, the point is to continue making it visible to users that log lines are being suppressed, because they might have missed the initial announcement.",
      "created_at": "2025-07-07T12:07:19Z",
      "updated_at": "2025-07-07T12:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2189866340",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189866340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189872916",
      "pull_request_review_id": 2993531256,
      "id": 2189872916,
      "node_id": "PRRC_kwDOABII586Chs8U",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.\n+        std::atomic<bool> m_suppression_active{false};\n+\n+    public:\n+        using SchedulerFunction = std::function<void(std::function<void()>, std::chrono::milliseconds)>;\n+        /**\n+         * @param scheduler_func    Callable object used to schedule resetting the window. The first",
      "path": "src/logging.h",
      "position": 97,
      "original_position": 97,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188161507,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is a public class, explaining the parameters and interface seems very desirable to me. `scheduler_func` could mean many things, when I review code I like to be able to quickly see what something's intent is. This seems like a pretty obvious best practice?",
      "created_at": "2025-07-07T12:10:33Z",
      "updated_at": "2025-07-07T12:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2189872916",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189872916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189884875",
      "pull_request_review_id": 2993531256,
      "id": 2189884875,
      "node_id": "PRRC_kwDOABII586Chv3L",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.\n+        std::atomic<bool> m_suppression_active{false};\n+\n+    public:\n+        using SchedulerFunction = std::function<void(std::function<void()>, std::chrono::milliseconds)>;\n+        /**\n+         * @param scheduler_func    Callable object used to schedule resetting the window. The first\n+         *                          parameter is the function to be executed, and the second is the\n+         *                          reset_window interval.\n+         * @param max_bytes         Maximum number of bytes that can be logged for each source\n+         *                          location.\n+         * @param reset_window      Time window after which the byte counters are reset.\n+         */\n+        LogRateLimiter(SchedulerFunction scheduler_func, uint64_t max_bytes, std::chrono::seconds reset_window);\n+        //! Maximum number of bytes logged per location per window.\n+        const uint64_t m_max_bytes;\n+        //! Interval after which the window is reset.\n+        const std::chrono::seconds m_reset_window;\n+        //! Suppression status of a source log location.\n+        enum class Status {\n+            UNSUPPRESSED,     // string fits within the limit\n+            NEWLY_SUPPRESSED, // suppression has started since this string\n+            STILL_SUPPRESSED, // suppression is still ongoing\n+        };",
      "path": "src/logging.h",
      "position": 114,
      "original_position": 114,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188160472,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I'm not sure I fully understand yet why we need these states\r\n\r\nIt's because the callsites behave differently whether a log line is un, newly or still suppressed. Previously, we encapsulated all that logic inside the `Consume()` function (then called `NeedsRateLimiting()`, but that gave the function too many responsibilities (as I believe you also pointed out), so this cleans that up. It think perhaps working out the code you'd prefer would be helpful.",
      "created_at": "2025-07-07T12:13:21Z",
      "updated_at": "2025-07-07T12:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2189884875",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189884875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 165,
      "original_start_line": 165,
      "start_side": "RIGHT",
      "line": 169,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189886155",
      "pull_request_review_id": 2993531256,
      "id": 2189886155,
      "node_id": "PRRC_kwDOABII586ChwLL",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.\n+        std::atomic<bool> m_suppression_active{false};\n+\n+    public:\n+        using SchedulerFunction = std::function<void(std::function<void()>, std::chrono::milliseconds)>;\n+        /**\n+         * @param scheduler_func    Callable object used to schedule resetting the window. The first\n+         *                          parameter is the function to be executed, and the second is the\n+         *                          reset_window interval.\n+         * @param max_bytes         Maximum number of bytes that can be logged for each source\n+         *                          location.\n+         * @param reset_window      Time window after which the byte counters are reset.\n+         */\n+        LogRateLimiter(SchedulerFunction scheduler_func, uint64_t max_bytes, std::chrono::seconds reset_window);\n+        //! Maximum number of bytes logged per location per window.\n+        const uint64_t m_max_bytes;\n+        //! Interval after which the window is reset.\n+        const std::chrono::seconds m_reset_window;\n+        //! Suppression status of a source log location.\n+        enum class Status {\n+            UNSUPPRESSED,     // string fits within the limit\n+            NEWLY_SUPPRESSED, // suppression has started since this string\n+            STILL_SUPPRESSED, // suppression is still ongoing\n+        };\n+        //! Consumes `source_loc`'s available bytes corresponding to the size of the (formatted)\n+        //! `str` and returns its status.\n+        [[nodiscard]] Status Consume(",
      "path": "src/logging.h",
      "position": 117,
      "original_position": 117,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188252582,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> maybe it's a code smell\r\n\r\nPerhaps you can implement an alternative and share it here?",
      "created_at": "2025-07-07T12:13:39Z",
      "updated_at": "2025-07-07T12:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2189886155",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189886155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189897739",
      "pull_request_review_id": 2993531256,
      "id": 2189897739,
      "node_id": "PRRC_kwDOABII586ChzAL",
      "diff_hunk": "@@ -276,4 +297,126 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(logging_sourcelocation_counter)\n+{\n+    BCLog::SourceLocationCounter counter;\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;",
      "path": "src/test/logging_tests.cpp",
      "position": 158,
      "original_position": 113,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ac8696b53e455dd27c8341828404a23b5cb68a9",
      "in_reply_to_id": 2163341392,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> contains multiple styles\r\n\r\nI don't think that's a good reason to hold up a useful and important PR that already has gone several iterations (in this and a previous PR) when nitting about documentation styles can block progress entirely as eventually reviewers lose interest and dilligence in re-reviewing. Follow-ups are entirely appropriate places for this to happen.",
      "created_at": "2025-07-07T12:16:52Z",
      "updated_at": "2025-07-07T12:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2189897739",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189897739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 375,
      "original_start_line": 326,
      "start_side": "RIGHT",
      "line": 380,
      "original_line": 380,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189903925",
      "pull_request_review_id": 2993531256,
      "id": 2189903925,
      "node_id": "PRRC_kwDOABII586Ch0g1",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+\n+    log_file_size = GetFileSize(log_path);\n+\n+    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    {\n+        ASSERT_DEBUG_LOG(\"Restarting logging\");\n+        MockForwardAndSync(scheduler, 1min);\n+    }\n+\n+    // BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Restarting logging\"));",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 225,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188157982,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This line should have been removed indeed, as it was replaced by `ASSERT_DEBUG_LOG(\"Restarting logging\");`.",
      "created_at": "2025-07-07T12:18:58Z",
      "updated_at": "2025-07-07T12:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2189903925",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189903925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189920730",
      "pull_request_review_id": 2993531256,
      "id": 2189920730,
      "node_id": "PRRC_kwDOABII586Ch4na",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            // NOLINTNEXTLINE(misc-no-recursion)\n+            LogPrintStr_(strprintf(\n+                             \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\n+                             \"the last time window of %is. Suppressing logging to disk from this \"\n+                             \"source location until time window resets. Console logging \"\n+                             \"unaffected. Last log entry.\\n\",\n+                             source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                             m_limiter->m_max_bytes,\n+                             Ticks<std::chrono::seconds>(m_limiter->m_reset_window)),\n+                         std::source_location::current(), LogFlags::ALL, Level::Warning, /*should_ratelimit=*/false); // with should_ratelimit=false, this cannot lead to infinite recursion",
      "path": "src/logging.cpp",
      "position": 132,
      "original_position": 132,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188225785,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you elaborate? Recursion is not inherently bad. It can lead to bugs, which is why we need to mindful about when we use it, but to me this looks like the best alternative. What do you suggest?",
      "created_at": "2025-07-07T12:24:01Z",
      "updated_at": "2025-07-07T12:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2189920730",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189920730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 468,
      "original_line": 468,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189923992",
      "pull_request_review_id": 2993531256,
      "id": 2189923992,
      "node_id": "PRRC_kwDOABII586Ch5aY",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            // NOLINTNEXTLINE(misc-no-recursion)\n+            LogPrintStr_(strprintf(\n+                             \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\n+                             \"the last time window of %is. Suppressing logging to disk from this \"\n+                             \"source location until time window resets. Console logging \"\n+                             \"unaffected. Last log entry.\\n\",\n+                             source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                             m_limiter->m_max_bytes,\n+                             Ticks<std::chrono::seconds>(m_limiter->m_reset_window)),\n+                         std::source_location::current(), LogFlags::ALL, Level::Warning, /*should_ratelimit=*/false); // with should_ratelimit=false, this cannot lead to infinite recursion\n+        }\n+        ratelimit = status == BCLog::LogRateLimiter::Status::STILL_SUPPRESSED;\n+        // To avoid confusion caused by dropped log messages when debugging an issue,\n+        // we prefix log lines with \"[*]\" when there are any suppressed source locations.\n+        if (m_limiter->SuppressionsActive()) {",
      "path": "src/logging.cpp",
      "position": 137,
      "original_position": 137,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188226741,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> should we guard this by m_print_to_console?\r\n\r\nWhy? It seems useful to also indicate on disk when logs are suppressed. debug.log is an important source of information for many.\r\n\r\n>  I think it would make more sense to only prefix dropped lines.\r\n\r\nI disagree, having a visual cue on debug.log seems very valuable.",
      "created_at": "2025-07-07T12:25:36Z",
      "updated_at": "2025-07-07T12:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2189923992",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189923992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 473,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189948409",
      "pull_request_review_id": 2993531256,
      "id": 2189948409,
      "node_id": "PRRC_kwDOABII586Ch_X5",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());",
      "path": "src/logging.h",
      "position": 30,
      "original_position": 30,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2185218652,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> when the logging is called via some dedicated method which hijacks the location\r\n\r\nI don't think we can reasonably protect against malicious modifications to the binary?\r\n\r\n> Or if macros are messing up the lines in any way.\r\n\r\nThat seems both unlikely and just something that should be, and is, tested.\r\n\r\n> you just have to make sure you exhaust the target logger\r\n\r\n\"just\" seems inappropriate, unconditional logging _should_ always take care that it can never be used to exhaust resources, but with this PR we add another layer of defence in case of an oversight.",
      "created_at": "2025-07-07T12:35:36Z",
      "updated_at": "2025-07-07T12:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2189948409",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189948409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189951621",
      "pull_request_review_id": 2993531256,
      "id": 2189951621,
      "node_id": "PRRC_kwDOABII586CiAKF",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+\n+    log_file_size = GetFileSize(log_path);\n+\n+    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    {\n+        ASSERT_DEBUG_LOG(\"Restarting logging\");\n+        MockForwardAndSync(scheduler, 1min);\n+    }\n+\n+    // BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Restarting logging\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the end of the suppression period should be logged\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Restarting logging\"), std::runtime_error);\n+\n+    // Attempt to log 1MiB from location 2 and 1MiB from location 3. These exempt locations should be allowed to log\n+    // without limit.\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(2, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 2 should be exempt from rate limiting\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(3, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 3 should be exempt from rate limiting\");",
      "path": "src/test/logging_tests.cpp",
      "position": 243,
      "original_position": 244,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2185313756,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're trying to get this in for 30.0. We shouldn't rush it in if we have concerns about the stability or effectiveness of this code, but blocking it for stylistic or test improvement purposes seems counter-productive when they can be done in a follow-up, ensuring progress on the important bits.",
      "created_at": "2025-07-07T12:36:26Z",
      "updated_at": "2025-07-07T12:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2189951621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189951621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 451,
      "original_start_line": 452,
      "start_side": "RIGHT",
      "line": 465,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189960116",
      "pull_request_review_id": 2993531256,
      "id": 2189960116,
      "node_id": "PRRC_kwDOABII586CiCO0",
      "diff_hunk": "@@ -367,6 +367,30 @@ static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n     return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n+BCLog::LogRateLimiter::LogRateLimiter(\n+    SchedulerFunction scheduler_func,\n+    uint64_t max_bytes,\n+    std::chrono::seconds reset_window) : m_max_bytes{max_bytes}, m_reset_window{reset_window}\n+{\n+    scheduler_func([this] { Reset(); }, reset_window);\n+}\n+\n+BCLog::LogRateLimiter::Status BCLog::LogRateLimiter::Consume(\n+    const std::source_location& source_loc,\n+    const std::string& str)\n+{\n+    StdLockGuard scoped_lock(m_mutex);\n+    auto& counter{m_source_locations.try_emplace(source_loc, m_max_bytes).first->second};\n+    Status status{counter.GetDroppedBytes() > 0 ? Status::STILL_SUPPRESSED : Status::UNSUPPRESSED};\n+\n+    if (!counter.Consume(str.size()) && status == Status::UNSUPPRESSED) {",
      "path": "src/logging.cpp",
      "position": 53,
      "original_position": 20,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "f608adf241810c3c7d577f97a076b5eb83b95b72",
      "in_reply_to_id": 2188265461,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> if the only production usage is inverted, we should likely invert the method's return value to make it more intuitive.\r\n\r\nI disagree. Returning `true` on successful operation is intuitive to me.",
      "created_at": "2025-07-07T12:39:43Z",
      "updated_at": "2025-07-07T12:50:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2189960116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2189960116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 390,
      "original_line": 390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190465915",
      "pull_request_review_id": 2994435906,
      "id": 2190465915,
      "node_id": "PRRC_kwDOABII586Cj9t7",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            // NOLINTNEXTLINE(misc-no-recursion)\n+            LogPrintStr_(strprintf(\n+                             \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\n+                             \"the last time window of %is. Suppressing logging to disk from this \"\n+                             \"source location until time window resets. Console logging \"",
      "path": "src/logging.cpp",
      "position": 127,
      "original_position": 127,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188225329,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is mentioned in the PR description and also in the commit message of b5d0cc29ac378f360424472f637f6d6af74660a5.",
      "created_at": "2025-07-07T15:53:08Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190465915",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190465915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 463,
      "original_line": 463,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190472363",
      "pull_request_review_id": 2994435906,
      "id": 2190472363,
      "node_id": "PRRC_kwDOABII586Cj_Sr",
      "diff_hunk": "@@ -364,7 +366,9 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return memusage::DynamicUsage(buflog.str) +",
      "path": "src/logging.cpp",
      "position": 31,
      "original_position": 31,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "d41a39e43c219eb0b06b8df2c2c5d24baaf015c4",
      "in_reply_to_id": 2163415514,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "IIRC, logging a 1024-byte line in my test had a memory overhead of ~1140 bytes. Prior to the change it was ~1200 bytes or so.",
      "created_at": "2025-07-07T15:55:47Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190472363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190472363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 369,
      "original_line": 369,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190479251",
      "pull_request_review_id": 2994435906,
      "id": 2190479251,
      "node_id": "PRRC_kwDOABII586CkA-T",
      "diff_hunk": "@@ -424,7 +450,28 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            LogPrintStr_(strprintf(",
      "path": "src/logging.cpp",
      "position": 124,
      "original_position": 122,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "34fc54d5476af464407c8de64c58897a35dce5cb",
      "in_reply_to_id": 2182544165,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is safe. I understand the concern, but the `NOLINT` and the comment next to the recursion should be a bright red flag to anybody modifying the code in the future.",
      "created_at": "2025-07-07T15:59:03Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190479251",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190479251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 460,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190500196",
      "pull_request_review_id": 2994435906,
      "id": 2190500196,
      "node_id": "PRRC_kwDOABII586CkGFk",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());",
      "path": "src/logging.h",
      "position": 30,
      "original_position": 30,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2185218652,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> On the other hand, is it really necessary to do the accounting per line, aren't we over-complicating a hypothetical scenario?\r\n\r\nI don't think this is hypothetical -- security vulnerabilities these days are increasingly multi-layered and complex and it is not unheard of for attackers to chain together exploits. I have personally had to use logs to piece together what happened after-the-fact when somebody's machine was compromised. The concern brought up in the earlier PRs was about an attacker finding two vulnerabilities if there is a global limit:\r\n- a logging vulnerability that triggers the global rate limit\r\n- a separate vulnerability which goes undetected because all logs to disk are now suppressed\r\n\r\n> Maybe, but this could apply currently as well, you just have to make sure you exhaust the target logger before the second attack.\r\n\r\nI don't think this applies currently -- because the rate limiting is done per source-code location, an attacker will leave a trail of evidence.\r\n\r\n> And as far as I can tell currently any hack which would enable all logs to be written would allow log-locations * 1MiB additional lines to be added.\r\n\r\nI can't find a bug in the current version of the code that allows this to happen. If there is some way to bypass the rate limiting logic, that would be severe. However, the same issue would also exist in the global rate limiting case.\r\n\r\n> But if we stay with the per-line logging-quota, I think this should at least be explained in the PR description.\r\n\r\nThis is explained in the PR description under the \"Approach\" section -- it mentions source code locations.",
      "created_at": "2025-07-07T16:09:38Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190500196",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190500196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190506106",
      "pull_request_review_id": 2994435906,
      "id": 2190506106,
      "node_id": "PRRC_kwDOABII586CkHh6",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.",
      "path": "src/logging.h",
      "position": 91,
      "original_position": 91,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188156156,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> But shouldn't we only prefix the dropped lines by * anyway (why prefix the lines that aren't dropped in the first place?), so why do we care about a global suppression state, i.e.\r\n\r\nTo build on @stickies-v comment, terminals may have a history limit and so if the prefix was only for dropped lines, an attack (which should now be thwarted!) could go undetected.",
      "created_at": "2025-07-07T16:12:40Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190506106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190506106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190508458",
      "pull_request_review_id": 2994435906,
      "id": 2190508458,
      "node_id": "PRRC_kwDOABII586CkIGq",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+\n+    log_file_size = GetFileSize(log_path);\n+\n+    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    {\n+        ASSERT_DEBUG_LOG(\"Restarting logging\");\n+        MockForwardAndSync(scheduler, 1min);\n+    }\n+\n+    // BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Restarting logging\"));",
      "path": "src/test/logging_tests.cpp",
      "position": 1,
      "original_position": 225,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188157982,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My mistake, addressed. This might have been a rebase artifact, I was pretty sure that I removed it.",
      "created_at": "2025-07-07T16:13:16Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190508458",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190508458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 447,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190580292",
      "pull_request_review_id": 2994435906,
      "id": 2190580292,
      "node_id": "PRRC_kwDOABII586CkZpE",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.\n+        std::atomic<bool> m_suppression_active{false};\n+\n+    public:\n+        using SchedulerFunction = std::function<void(std::function<void()>, std::chrono::milliseconds)>;\n+        /**\n+         * @param scheduler_func    Callable object used to schedule resetting the window. The first\n+         *                          parameter is the function to be executed, and the second is the\n+         *                          reset_window interval.\n+         * @param max_bytes         Maximum number of bytes that can be logged for each source\n+         *                          location.\n+         * @param reset_window      Time window after which the byte counters are reset.\n+         */\n+        LogRateLimiter(SchedulerFunction scheduler_func, uint64_t max_bytes, std::chrono::seconds reset_window);\n+        //! Maximum number of bytes logged per location per window.\n+        const uint64_t m_max_bytes;\n+        //! Interval after which the window is reset.\n+        const std::chrono::seconds m_reset_window;\n+        //! Suppression status of a source log location.\n+        enum class Status {\n+            UNSUPPRESSED,     // string fits within the limit\n+            NEWLY_SUPPRESSED, // suppression has started since this string\n+            STILL_SUPPRESSED, // suppression is still ongoing\n+        };",
      "path": "src/logging.h",
      "position": 114,
      "original_position": 114,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188160472,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Also, this change is meant to avoid an attack, we don't have to be that precise with the calculations, just a rough accounting should suffice as far as I can tell - especially if it makes the code simpler.\r\n\r\nThe accounting could be less precise, I had not considered that. I like that this PR is precise and I can account for the bytes.",
      "created_at": "2025-07-07T16:31:45Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190580292",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190580292"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 165,
      "original_start_line": 165,
      "start_side": "RIGHT",
      "line": 169,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190596839",
      "pull_request_review_id": 2994435906,
      "id": 2190596839,
      "node_id": "PRRC_kwDOABII586Ckdrn",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.\n+        std::atomic<bool> m_suppression_active{false};\n+\n+    public:\n+        using SchedulerFunction = std::function<void(std::function<void()>, std::chrono::milliseconds)>;\n+        /**\n+         * @param scheduler_func    Callable object used to schedule resetting the window. The first",
      "path": "src/logging.h",
      "position": 97,
      "original_position": 97,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188161507,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I like comments because it gives you an overview of the code to come. I can understand the aversion to comments, but I personally find them pretty helpful especially here. Sure, the code is the real source of truth, but comments have their use and I think usage here is reasonable.",
      "created_at": "2025-07-07T16:35:54Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190596839",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190596839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 152,
      "original_line": 152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190599408",
      "pull_request_review_id": 2994435906,
      "id": 2190599408,
      "node_id": "PRRC_kwDOABII586CkeTw",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.\n+        std::atomic<bool> m_suppression_active{false};",
      "path": "src/logging.h",
      "position": 92,
      "original_position": 92,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188215958,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Have documented this in the commit message of 6e47dad25c5a167cd171e5c11d51a7bee7c8d3c6",
      "created_at": "2025-07-07T16:37:11Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190599408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190599408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 147,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190599727",
      "pull_request_review_id": 2994435906,
      "id": 2190599727,
      "node_id": "PRRC_kwDOABII586CkeYv",
      "diff_hunk": "@@ -0,0 +1,8 @@\n+Logging\n+-------\n+Unconditional logging to disk via LogPrintf, LogInfo, LogWarning, LogError, and\n+LogPrintLevel is now rate limited by giving each source location a logging quota of\n+1MiB per hour. (#32604)\n+\n+When `-logsourcelocation` is enabled, the log output now contains the entire",
      "path": "doc/release-notes-32604.md",
      "position": 1,
      "original_position": 7,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188219092,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, my bad. Fixed.",
      "created_at": "2025-07-07T16:37:24Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190599727",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190599727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 7,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190602344",
      "pull_request_review_id": 2994435906,
      "id": 2190602344,
      "node_id": "PRRC_kwDOABII586CkfBo",
      "diff_hunk": "@@ -0,0 +1,8 @@\n+Logging\n+-------\n+Unconditional logging to disk via LogPrintf, LogInfo, LogWarning, LogError, and\n+LogPrintLevel is now rate limited by giving each source location a logging quota of\n+1MiB per hour. (#32604)",
      "path": "doc/release-notes-32604.md",
      "position": 1,
      "original_position": 5,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188221041,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is better -- I've implemented this to make it clear. I was attempting to walk a line between being verbose and being succinct.",
      "created_at": "2025-07-07T16:38:56Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190602344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190602344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": 3,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190615792",
      "pull_request_review_id": 2994435906,
      "id": 2190615792,
      "node_id": "PRRC_kwDOABII586CkiTw",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window",
      "path": "src/logging.h",
      "position": 52,
      "original_position": 52,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188231409,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this is clear because there is no global rate limit in the code and only a source location rate limit.",
      "created_at": "2025-07-07T16:44:40Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190615792",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190615792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190619813",
      "pull_request_review_id": 2994435906,
      "id": 2190619813,
      "node_id": "PRRC_kwDOABII586CkjSl",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            // NOLINTNEXTLINE(misc-no-recursion)\n+            LogPrintStr_(strprintf(\n+                             \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\n+                             \"the last time window of %is. Suppressing logging to disk from this \"\n+                             \"source location until time window resets. Console logging \"\n+                             \"unaffected. Last log entry.\\n\",\n+                             source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                             m_limiter->m_max_bytes,\n+                             Ticks<std::chrono::seconds>(m_limiter->m_reset_window)),\n+                         std::source_location::current(), LogFlags::ALL, Level::Warning, /*should_ratelimit=*/false); // with should_ratelimit=false, this cannot lead to infinite recursion\n+        }\n+        ratelimit = status == BCLog::LogRateLimiter::Status::STILL_SUPPRESSED;\n+        // To avoid confusion caused by dropped log messages when debugging an issue,\n+        // we prefix log lines with \"[*]\" when there are any suppressed source locations.\n+        if (m_limiter->SuppressionsActive()) {\n+            str_prefixed.insert(0, \"[*] \");\n+        }\n+    }\n \n     if (m_print_to_console) {\n         // print to console",
      "path": "src/logging.cpp",
      "position": 143,
      "original_position": 143,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188250757,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is pre-existing so this can be left as-is IMO.",
      "created_at": "2025-07-07T16:47:06Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190619813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190619813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 479,
      "original_line": 479,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190630001",
      "pull_request_review_id": 2994435906,
      "id": 2190630001,
      "node_id": "PRRC_kwDOABII586Cklxx",
      "diff_hunk": "@@ -82,6 +104,79 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};",
      "path": "src/logging.h",
      "position": 61,
      "original_position": 61,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "f608adf241810c3c7d577f97a076b5eb83b95b72",
      "in_reply_to_id": 2188268199,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is a fair point, I could see this going either way. In the presence of disk fill attacks, my personal preference would be to know how many bytes did not make it to disk rather than log lines (which does not convey the number of bytes).",
      "created_at": "2025-07-07T16:52:42Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190630001",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190630001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190636889",
      "pull_request_review_id": 2994435906,
      "id": 2190636889,
      "node_id": "PRRC_kwDOABII586CkndZ",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.\n+        return static_cast<size_t>(CSipHasher(0, 0)\n+                                       .Write(std::hash<std::string_view>{}(s.file_name()))\n+                                       .Write(s.line())",
      "path": "src/logging.h",
      "position": 40,
      "original_position": 40,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188643445,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Holding off on implementing in this PR. I have thought about using `column()`, but I wanted to keep behavior as close as possible to the original PR. This can be implemented in a future PR to not rate limit a source location accidentally if they are on the same line. For this to matter for practical purposes, there would need to be a log line that can hit the rate limit and also exists on the same line as another log line that should not be rate limited.",
      "created_at": "2025-07-07T16:56:20Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190636889",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190636889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190642977",
      "pull_request_review_id": 2994435906,
      "id": 2190642977,
      "node_id": "PRRC_kwDOABII586Cko8h",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.\n+        return static_cast<size_t>(CSipHasher(0, 0)\n+                                       .Write(std::hash<std::string_view>{}(s.file_name()))",
      "path": "src/logging.h",
      "position": 39,
      "original_position": 39,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188644325,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Hmm, I did not think about that. The `std::hash` might not be necessary then.",
      "created_at": "2025-07-07T17:00:07Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190642977",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190642977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190651102",
      "pull_request_review_id": 2994435906,
      "id": 2190651102,
      "node_id": "PRRC_kwDOABII586Ckq7e",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);",
      "path": "src/logging.h",
      "position": 90,
      "original_position": 90,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188651877,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I had considered it, but did not implement or bench the difference. Replacing `SourceLocationEqual` & `SourceLocationHasher` with `SourceLocationLess` could be a good future improvement.",
      "created_at": "2025-07-07T17:05:20Z",
      "updated_at": "2025-07-07T17:20:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190651102",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190651102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190812498",
      "pull_request_review_id": 2994964128,
      "id": 2190812498,
      "node_id": "PRRC_kwDOABII586ClSVS",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());",
      "path": "src/logging.h",
      "position": 30,
      "original_position": 30,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2185218652,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The PR description still states:\r\n> Both the quota and time window are configurable\r\n\r\nAs far as I can tell that's not the case anymore.\r\n\r\n> When logging is restarted a tally of how many messages/bytes were dropped is printed\r\n\r\nDo we also print the message count?\r\n\r\n----\r\n\r\n> But if we stay with the per-line logging-quota, I think this should at least be explained in the PR description\r\n\r\nI meant the reason for choosing to restrict based on source lines and not globally. I'm still not fully convinced that it's more dangerous to restrict all logging, but I can accept if others think it is - I'm probably just not up-to-date with these attacks.",
      "created_at": "2025-07-07T18:48:03Z",
      "updated_at": "2025-07-07T18:48:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190812498",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190812498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190813991",
      "pull_request_review_id": 2994966446,
      "id": 2190813991,
      "node_id": "PRRC_kwDOABII586ClSsn",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+\n+    log_file_size = GetFileSize(log_path);\n+\n+    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    {\n+        ASSERT_DEBUG_LOG(\"Restarting logging\");\n+        MockForwardAndSync(scheduler, 1min);\n+    }\n+\n+    // BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Restarting logging\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the end of the suppression period should be logged\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Restarting logging\"), std::runtime_error);\n+\n+    // Attempt to log 1MiB from location 2 and 1MiB from location 3. These exempt locations should be allowed to log\n+    // without limit.\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(2, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 2 should be exempt from rate limiting\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(3, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 3 should be exempt from rate limiting\");",
      "path": "src/test/logging_tests.cpp",
      "position": 243,
      "original_position": 244,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2185313756,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, if you're fine with that, I'm fine with that, let's do the remaining ones in follow-ups.",
      "created_at": "2025-07-07T18:49:09Z",
      "updated_at": "2025-07-07T18:49:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190813991",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190813991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 451,
      "original_start_line": 452,
      "start_side": "RIGHT",
      "line": 465,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190816506",
      "pull_request_review_id": 2994969900,
      "id": 2190816506,
      "node_id": "PRRC_kwDOABII586ClTT6",
      "diff_hunk": "@@ -82,15 +104,88 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window\n+\n+    //! Keeps track of an individual source location and how many available bytes are left for logging from it.\n+    class LogLimitStats\n+    {\n+    private:\n+        //! Remaining bytes in the current window interval.\n+        uint64_t m_available_bytes;\n+        //! Number of bytes that were not consumed within the current window.\n+        uint64_t m_dropped_bytes{0};\n+\n+    public:\n+        LogLimitStats(uint64_t max_bytes) : m_available_bytes{max_bytes} {}\n+        //! Consume bytes from the window if enough bytes are available.\n+        //!\n+        //! Returns whether enough bytes were available.\n+        bool Consume(uint64_t bytes);\n+\n+        uint64_t GetAvailableBytes() const\n+        {\n+            return m_available_bytes;\n+        }\n+\n+        uint64_t GetDroppedBytes() const\n+        {\n+            return m_dropped_bytes;\n+        }\n+    };\n+\n+    /**\n+     * Fixed window rate limiter for logging.\n+     */\n+    class LogRateLimiter\n+    {\n+    private:\n+        mutable StdMutex m_mutex;\n+\n+        //! Counters for each source location that has attempted to log something.\n+        std::unordered_map<std::source_location, LogLimitStats, SourceLocationHasher, SourceLocationEqual> m_source_locations GUARDED_BY(m_mutex);\n+        //! True if at least one log location is suppressed. Cached view on m_source_locations for performance reasons.",
      "path": "src/logging.h",
      "position": 91,
      "original_position": 91,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188156156,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fair points, maybe we could hint at that in the first message which announces that some logs are being suppressed (explaining what the new `*` prefix indicates).",
      "created_at": "2025-07-07T18:50:43Z",
      "updated_at": "2025-07-07T18:50:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190816506",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190816506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 146,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190822287",
      "pull_request_review_id": 2994978227,
      "id": 2190822287,
      "node_id": "PRRC_kwDOABII586ClUuP",
      "diff_hunk": "@@ -424,7 +451,29 @@ void BCLog::Logger::LogPrintStr_(std::string_view str, std::string_view logging_\n         return;\n     }\n \n-    FormatLogStrInPlace(str_prefixed, category, level, source_file, source_line, logging_function, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());\n+    bool ratelimit{false};\n+    if (should_ratelimit && m_limiter) {\n+        auto status{m_limiter->Consume(source_loc, str_prefixed)};\n+        if (status == BCLog::LogRateLimiter::Status::NEWLY_SUPPRESSED) {\n+            // NOLINTNEXTLINE(misc-no-recursion)\n+            LogPrintStr_(strprintf(\n+                             \"Excessive logging detected from %s:%d (%s): >%d bytes logged during \"\n+                             \"the last time window of %is. Suppressing logging to disk from this \"\n+                             \"source location until time window resets. Console logging \"\n+                             \"unaffected. Last log entry.\\n\",\n+                             source_loc.file_name(), source_loc.line(), source_loc.function_name(),\n+                             m_limiter->m_max_bytes,\n+                             Ticks<std::chrono::seconds>(m_limiter->m_reset_window)),\n+                         std::source_location::current(), LogFlags::ALL, Level::Warning, /*should_ratelimit=*/false); // with should_ratelimit=false, this cannot lead to infinite recursion",
      "path": "src/logging.cpp",
      "position": 132,
      "original_position": 132,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188225785,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Recursion is not inherently bad\r\n\r\nWhen the stopping condition isn't rock solit, it kinda' is. Maybe it is solid in this case - but given that we had to add a comment to reassure the readers, it may not be. I'd sleep better knowing that we haven't just introduced a new attack vector...\r\n\r\n> What do you suggest?\r\n\r\nIn other cases we've switched recursive methods to iterative ones, e.g. https://github.com/bitcoin/bitcoin/pull/32351. I haven't investigated what that would imply here, got already tired at the end of reviewing the rest of the code.",
      "created_at": "2025-07-07T18:54:33Z",
      "updated_at": "2025-07-07T18:58:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190822287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190822287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 468,
      "original_line": 468,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190863515",
      "pull_request_review_id": 2995044009,
      "id": 2190863515,
      "node_id": "PRRC_kwDOABII586Cleyb",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());",
      "path": "src/logging.h",
      "position": 30,
      "original_position": 30,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2185218652,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> As far as I can tell that's not the case anymore.\r\n\r\nAh, this was confusing. I meant to say that `LogRateLimiter` is parameterized, but it reads like a node operator is able to configure the quote and time window without modifying the source code. I've removed this line since it's confusing.\r\n\r\n> Do we also print the message count?\r\n\r\nRemoved mention of \"messages\".",
      "created_at": "2025-07-07T19:22:23Z",
      "updated_at": "2025-07-07T19:22:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2190863515",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2190863515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193405519",
      "pull_request_review_id": 2999048711,
      "id": 2193405519,
      "node_id": "PRRC_kwDOABII586CvLZP",
      "diff_hunk": "@@ -0,0 +1,8 @@\n+Logging\n+-------\n+Unconditional logging to disk is now rate limited via `LogPrintf`, `LogInfo`,\n+`LogWarning, `LogError`, and the corresponding `LogPrintLevel` calls by giving\n+each source location a quota of 1MiB per hour. (#32604)",
      "path": "doc/release-notes-32604.md",
      "position": 1,
      "original_position": 5,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe worth adding that \"All logs will be prefixed with `[*]` if there is at least one source location that is currently being suppressed.\" Somebody who sees a `[*]` may wonder what that means, and hopefully find that in the release notes.",
      "created_at": "2025-07-08T20:40:12Z",
      "updated_at": "2025-07-08T20:42:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2193405519",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2193405519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194189826",
      "pull_request_review_id": 3000242855,
      "id": 2194189826,
      "node_id": "PRRC_kwDOABII586CyK4C",
      "diff_hunk": "@@ -0,0 +1,8 @@\n+Logging\n+-------\n+Unconditional logging to disk is now rate limited via `LogPrintf`, `LogInfo`,\n+`LogWarning, `LogError`, and the corresponding `LogPrintLevel` calls by giving",
      "path": "doc/release-notes-32604.md",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "from the llm linter:\n\n*  +LogWarning, LogError, → LogWarning, LogError` [missing backtick before comma makes the inline code span invalid]\n\n\nHowever, all of those are implementation details anyway, and it could make sense to remove those. End-users probably wonder what those mean for them, so it could make sense to instead mention the name of the setting that affects them:\n\n\"Unconditional logging to disk is now rate limited by giving each source location a quota of 1MiB per hour. Unconditional logging is any logging with a log level higher than debug, that is `info`, `warning` and `error`.\"",
      "created_at": "2025-07-09T06:43:50Z",
      "updated_at": "2025-07-09T10:11:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2194189826",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194189826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194249282",
      "pull_request_review_id": 3000242855,
      "id": 2194249282,
      "node_id": "PRRC_kwDOABII586CyZZC",
      "diff_hunk": "@@ -33,7 +33,9 @@ class DebugLogHelper\n \n public:\n     explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+\n+    //! Mark as noexcept(false) to catch any thrown exceptions.",
      "path": "src/test/util/logging.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ce8a4f59a93478fe24744e2bb3ec77b3d5dd468",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Probably wanted to say \"... *to be able* to catch ...\" or \"to throw any exceptions.\" Otherwise this reads a bit as if `noexcept(false)` were to catch any thrown exceptions. Could also just remove the comment, but just a nit.",
      "created_at": "2025-07-09T07:15:19Z",
      "updated_at": "2025-07-09T10:11:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2194249282",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194249282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194330070",
      "pull_request_review_id": 3000242855,
      "id": 2194330070,
      "node_id": "PRRC_kwDOABII586CytHW",
      "diff_hunk": "@@ -492,6 +516,37 @@ void BCLog::Logger::ShrinkDebugFile()\n         fclose(file);\n }\n \n+void BCLog::LogRateLimiter::Reset()\n+{\n+    decltype(m_source_locations) source_locations;\n+    {\n+        StdLockGuard scoped_lock(m_mutex);\n+        source_locations.swap(m_source_locations);\n+        m_suppression_active = false;\n+    }\n+    for (const auto& [source_loc, counter] : source_locations) {\n+        uint64_t dropped_bytes{counter.GetDroppedBytes()};\n+        if (dropped_bytes == 0) continue;\n+        LogPrintLevel_(\n+            LogFlags::ALL, Level::Info,\n+            \"Restarting logging from %s:%d (%s): %d bytes were dropped during the last %ss.\\n\",",
      "path": "src/logging.cpp",
      "position": 170,
      "original_position": 48,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b5d0cc29ac378f360424472f637f6d6af74660a5",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in b5d0cc29ac378f360424472f637f6d6af74660a5: Can remove the trailing `\\n` (it is added by logging). \r\n\r\nAlso, could use the Warning log level instead, because rate-limiting should never happen in practise and if it does, it seems like something that should be fixed by adjusting the logging at that location?",
      "created_at": "2025-07-09T07:54:47Z",
      "updated_at": "2025-07-09T10:11:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2194330070",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194330070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 557,
      "original_line": 557,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194354583",
      "pull_request_review_id": 3000242855,
      "id": 2194354583,
      "node_id": "PRRC_kwDOABII586CyzGX",
      "diff_hunk": "@@ -82,6 +104,79 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window",
      "path": "src/logging.h",
      "position": 52,
      "original_position": 52,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b5d0cc29ac378f360424472f637f6d6af74660a5",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in https://github.com/bitcoin/bitcoin/commit/b5d0cc29ac378f360424472f637f6d6af74660a5: Could clarify in the comment \"... of bytes *per source location* ...\", but just a nit.",
      "created_at": "2025-07-09T08:07:08Z",
      "updated_at": "2025-07-09T10:11:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2194354583",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194354583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194367325",
      "pull_request_review_id": 3000242855,
      "id": 2194367325,
      "node_id": "PRRC_kwDOABII586Cy2Nd",
      "diff_hunk": "@@ -276,4 +278,79 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);",
      "path": "src/test/logging_tests.cpp",
      "position": 138,
      "original_position": 81,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b5d0cc29ac378f360424472f637f6d6af74660a5",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in https://github.com/bitcoin/bitcoin/commit/b5d0cc29ac378f360424472f637f6d6af74660a5: I don't think the `ll` is needed to silence the w-sign-compare warning. I'd go with just `0u`, or if you want to fully specify the type `uint64_t{0}`.",
      "created_at": "2025-07-09T08:13:39Z",
      "updated_at": "2025-07-09T10:11:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2194367325",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194367325"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 360,
      "original_line": 360,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194621936",
      "pull_request_review_id": 3000242855,
      "id": 2194621936,
      "node_id": "PRRC_kwDOABII586Cz0Xw",
      "diff_hunk": "@@ -366,4 +369,106 @@ BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n     BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n }\n \n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+\n+    log_file_size = GetFileSize(log_path);\n+\n+    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    {\n+        ASSERT_DEBUG_LOG(\"Restarting logging\");\n+        MockForwardAndSync(scheduler, 1min);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the end of the suppression period should be logged\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Restarting logging\"), std::runtime_error);\n+\n+    // Attempt to log 1MiB from location 2 and 1MiB from location 3. These exempt locations should be allowed to log\n+    // without limit.\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(2, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 2 should be exempt from rate limiting\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(3, log_message, \"Excessive logging detected\"), std::runtime_error);",
      "path": "src/test/logging_tests.cpp",
      "position": 240,
      "original_position": 122,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6e47dad25c5a167cd171e5c11d51a7bee7c8d3c6",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in 6e47dad25c5a167cd171e5c11d51a7bee7c8d3c6: Could use the `HasReason` helper, but up to you.",
      "created_at": "2025-07-09T10:10:14Z",
      "updated_at": "2025-07-09T10:11:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2194621936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2194621936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 462,
      "original_line": 462,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195027425",
      "pull_request_review_id": 3001553984,
      "id": 2195027425,
      "node_id": "PRRC_kwDOABII586C1XXh",
      "diff_hunk": "@@ -0,0 +1,8 @@\n+Logging\n+-------\n+Unconditional logging to disk is now rate limited via `LogPrintf`, `LogInfo`,\n+`LogWarning, `LogError`, and the corresponding `LogPrintLevel` calls by giving\n+each source location a quota of 1MiB per hour. (#32604)",
      "path": "doc/release-notes-32604.md",
      "position": 1,
      "original_position": 5,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "in_reply_to_id": 2193405519,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added in 4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "created_at": "2025-07-09T13:23:48Z",
      "updated_at": "2025-07-09T13:23:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2195027425",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195027425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195027732",
      "pull_request_review_id": 3001554449,
      "id": 2195027732,
      "node_id": "PRRC_kwDOABII586C1XcU",
      "diff_hunk": "@@ -0,0 +1,8 @@\n+Logging\n+-------\n+Unconditional logging to disk is now rate limited via `LogPrintf`, `LogInfo`,\n+`LogWarning, `LogError`, and the corresponding `LogPrintLevel` calls by giving",
      "path": "doc/release-notes-32604.md",
      "position": 1,
      "original_position": 4,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "in_reply_to_id": 2194189826,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed in 4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "created_at": "2025-07-09T13:23:56Z",
      "updated_at": "2025-07-09T13:23:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2195027732",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195027732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195085089",
      "pull_request_review_id": 3001649238,
      "id": 2195085089,
      "node_id": "PRRC_kwDOABII586C1lch",
      "diff_hunk": "@@ -33,7 +33,9 @@ class DebugLogHelper\n \n public:\n     explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+\n+    //! Mark as noexcept(false) to catch any thrown exceptions.",
      "path": "src/test/util/logging.h",
      "position": 6,
      "original_position": 6,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "2ce8a4f59a93478fe24744e2bb3ec77b3d5dd468",
      "in_reply_to_id": 2194249282,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will address in follow-up",
      "created_at": "2025-07-09T13:47:14Z",
      "updated_at": "2025-07-09T13:47:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2195085089",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195085089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195085647",
      "pull_request_review_id": 3001650116,
      "id": 2195085647,
      "node_id": "PRRC_kwDOABII586C1llP",
      "diff_hunk": "@@ -492,6 +516,37 @@ void BCLog::Logger::ShrinkDebugFile()\n         fclose(file);\n }\n \n+void BCLog::LogRateLimiter::Reset()\n+{\n+    decltype(m_source_locations) source_locations;\n+    {\n+        StdLockGuard scoped_lock(m_mutex);\n+        source_locations.swap(m_source_locations);\n+        m_suppression_active = false;\n+    }\n+    for (const auto& [source_loc, counter] : source_locations) {\n+        uint64_t dropped_bytes{counter.GetDroppedBytes()};\n+        if (dropped_bytes == 0) continue;\n+        LogPrintLevel_(\n+            LogFlags::ALL, Level::Info,\n+            \"Restarting logging from %s:%d (%s): %d bytes were dropped during the last %ss.\\n\",",
      "path": "src/logging.cpp",
      "position": 170,
      "original_position": 48,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b5d0cc29ac378f360424472f637f6d6af74660a5",
      "in_reply_to_id": 2194330070,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will address in follow-up to remove `\\n` and use `Warning`",
      "created_at": "2025-07-09T13:47:28Z",
      "updated_at": "2025-07-09T13:47:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2195085647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195085647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 557,
      "original_line": 557,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195086835",
      "pull_request_review_id": 3001652005,
      "id": 2195086835,
      "node_id": "PRRC_kwDOABII586C1l3z",
      "diff_hunk": "@@ -82,6 +104,79 @@ namespace BCLog {\n     };\n     constexpr auto DEFAULT_LOG_LEVEL{Level::Debug};\n     constexpr size_t DEFAULT_MAX_LOG_BUFFER{1'000'000}; // buffer up to 1MB of log data prior to StartLogging\n+    constexpr uint64_t RATELIMIT_MAX_BYTES{1024 * 1024}; // maximum number of bytes that can be logged within one window",
      "path": "src/logging.h",
      "position": 52,
      "original_position": 52,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b5d0cc29ac378f360424472f637f6d6af74660a5",
      "in_reply_to_id": 2194354583,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will address in follow-up, the comment is confusing as pointed out by @l0rinc ",
      "created_at": "2025-07-09T13:48:01Z",
      "updated_at": "2025-07-09T13:48:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2195086835",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195086835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 107,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195087287",
      "pull_request_review_id": 3001652644,
      "id": 2195087287,
      "node_id": "PRRC_kwDOABII586C1l-3",
      "diff_hunk": "@@ -276,4 +278,79 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);",
      "path": "src/test/logging_tests.cpp",
      "position": 138,
      "original_position": 81,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "b5d0cc29ac378f360424472f637f6d6af74660a5",
      "in_reply_to_id": 2194367325,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will address in follow-up",
      "created_at": "2025-07-09T13:48:11Z",
      "updated_at": "2025-07-09T13:48:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2195087287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195087287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 360,
      "original_line": 360,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195710943",
      "pull_request_review_id": 3002650511,
      "id": 2195710943,
      "node_id": "PRRC_kwDOABII586C3-Pf",
      "diff_hunk": "@@ -0,0 +1,10 @@\n+Logging\n+-------\n+Unconditional logging to disk is now rate limited by giving each source location\n+a quota of 1MiB per hour. Unconditional logging is any logging with a log level\n+higher than debug, that is `info`, `warning`, and `error`. All logs will be",
      "path": "doc/release-notes-32604.md",
      "position": 5,
      "original_position": 5,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Conditional logs (or rather, everything with `should_ratelimit=false`) don't get the prefix. Perhaps the better/easier UX is to just apply it to all logs?\r\n\r\n```suggestion\r\nhigher than debug, that is `info`, `warning`, and `error`. All unconditional logs will be\r\n```",
      "created_at": "2025-07-09T18:25:35Z",
      "updated_at": "2025-07-09T18:26:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2195710943",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195710943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 5,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195734934",
      "pull_request_review_id": 3002685658,
      "id": 2195734934,
      "node_id": "PRRC_kwDOABII586C4EGW",
      "diff_hunk": "@@ -0,0 +1,8 @@\n+Logging\n+-------\n+Unconditional logging to disk is now rate limited via `LogPrintf`, `LogInfo`,\n+`LogWarning, `LogError`, and the corresponding `LogPrintLevel` calls by giving\n+each source location a quota of 1MiB per hour. (#32604)",
      "path": "doc/release-notes-32604.md",
      "position": 1,
      "original_position": 5,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "f47e2ea9137c3a832e07d6dd845c55d35d533fa9",
      "in_reply_to_id": 2193405519,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fwiw I didn't mean for this to hold up the PR, but thanks for taking the suggestion!",
      "created_at": "2025-07-09T18:39:41Z",
      "updated_at": "2025-07-09T18:39:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2195734934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2195734934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2196962104",
      "pull_request_review_id": 3004503833,
      "id": 2196962104,
      "node_id": "PRRC_kwDOABII586C8vs4",
      "diff_hunk": "@@ -276,4 +294,182 @@ BOOST_FIXTURE_TEST_CASE(logging_Conf, LogSetup)\n     }\n }\n \n+void MockForwardAndSync(CScheduler& scheduler, std::chrono::seconds duration)\n+{\n+    scheduler.MockForward(duration);\n+    std::promise<void> promise;\n+    scheduler.scheduleFromNow([&promise] { promise.set_value(); }, 0ms);\n+    promise.get_future().wait();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_rate_limiter)\n+{\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&scheduler] { scheduler.serviceQueue(); });\n+    uint64_t max_bytes{1024};\n+    auto reset_window{1min};\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    BCLog::LogRateLimiter limiter{sched_func, max_bytes, reset_window};\n+\n+    using Status = BCLog::LogRateLimiter::Status;\n+    auto source_loc_1{std::source_location::current()};\n+    auto source_loc_2{std::source_location::current()};\n+\n+    // A fresh limiter should not have any suppressions\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // Resetting an unused limiter is fine\n+    limiter.Reset();\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+\n+    // No suppression should happen until more than max_bytes have been consumed\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes - 1, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::UNSUPPRESSED);\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, \"a\"), Status::STILL_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // Location 2  should not be affected by location 1's suppression\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, \"a\"), Status::NEWLY_SUPPRESSED);\n+    BOOST_CHECK(limiter.SuppressionsActive());\n+\n+    // After reset_window time has passed, all suppressions should be cleared.\n+    MockForwardAndSync(scheduler, reset_window);\n+\n+    BOOST_CHECK(!limiter.SuppressionsActive());\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_1, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+    BOOST_CHECK_EQUAL(limiter.Consume(source_loc_2, std::string(max_bytes, 'a')), Status::UNSUPPRESSED);\n+\n+    scheduler.stop();\n+}\n+\n+BOOST_AUTO_TEST_CASE(logging_log_limit_stats)\n+{\n+    BCLog::LogLimitStats counter{BCLog::RATELIMIT_MAX_BYTES};\n+\n+    // Check that counter gets initialized correctly.\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    const uint64_t MESSAGE_SIZE{512 * 1024};\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    BOOST_CHECK(counter.Consume(MESSAGE_SIZE));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), BCLog::RATELIMIT_MAX_BYTES - MESSAGE_SIZE * 2);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 0ull);\n+\n+    // Consuming more bytes after already having consumed 1MB should fail.\n+    BOOST_CHECK(!counter.Consume(500));\n+    BOOST_CHECK_EQUAL(counter.GetAvailableBytes(), 0ull);\n+    BOOST_CHECK_EQUAL(counter.GetDroppedBytes(), 500ull);\n+}\n+\n+void LogFromLocation(int location, std::string message)\n+{\n+    switch (location) {\n+    case 0:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 1:\n+        LogInfo(\"%s\\n\", message);\n+        break;\n+    case 2:\n+        LogPrintLevel(BCLog::LogFlags::NONE, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    case 3:\n+        LogPrintLevel(BCLog::LogFlags::ALL, BCLog::Level::Info, \"%s\\n\", message);\n+        break;\n+    }\n+}\n+\n+void LogFromLocationAndExpect(int location, std::string message, std::string expect)\n+{\n+    ASSERT_DEBUG_LOG(expect);\n+    LogFromLocation(location, message);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(logging_filesize_rate_limit, LogSetup)\n+{\n+    bool prev_log_timestamps = LogInstance().m_log_timestamps;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    CScheduler scheduler{};\n+    scheduler.m_service_thread = std::thread([&] { scheduler.serviceQueue(); });\n+    auto sched_func = [&scheduler](auto func, auto window) { scheduler.scheduleEvery(std::move(func), window); };\n+    auto limiter = std::make_unique<BCLog::LogRateLimiter>(sched_func, 1024 * 1024, 20s);\n+    LogInstance().SetRateLimiting(std::move(limiter));\n+\n+    // Log 1024-character lines (1023 plus newline) to make the math simple.\n+    std::string log_message(1023, 'a');\n+\n+    std::string utf8_path{LogInstance().m_file_path.utf8string()};\n+    const char* log_path{utf8_path.c_str()};\n+\n+    // Use GetFileSize because fs::file_size may require a flush to be accurate.\n+    std::streamsize log_file_size{static_cast<std::streamsize>(GetFileSize(log_path))};\n+\n+    // Logging 1 MiB should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"should be able to log 1 MiB from location 0\");\n+\n+    log_file_size = GetFileSize(log_path);\n+\n+    BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Excessive logging detected\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the start of the suppression period should be logged\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromLocation(0, log_message);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size == GetFileSize(log_path), \"all further logs from location 0 should be dropped\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 1 should be unaffected by other locations\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    {\n+        ASSERT_DEBUG_LOG(\"Restarting logging\");\n+        MockForwardAndSync(scheduler, 1min);\n+    }\n+\n+    // BOOST_CHECK_NO_THROW(LogFromLocationAndExpect(0, log_message, \"Restarting logging\"));\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"the end of the suppression period should be logged\");\n+\n+    BOOST_CHECK_THROW(LogFromLocationAndExpect(1, log_message, \"Restarting logging\"), std::runtime_error);\n+\n+    // Attempt to log 1MiB from location 2 and 1MiB from location 3. These exempt locations should be allowed to log\n+    // without limit.\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(2, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 2 should be exempt from rate limiting\");\n+\n+    log_file_size = GetFileSize(log_path);\n+    for (int i = 0; i < 1024; ++i) {\n+        BOOST_CHECK_THROW(LogFromLocationAndExpect(3, log_message, \"Excessive logging detected\"), std::runtime_error);\n+    }\n+\n+    BOOST_CHECK_MESSAGE(log_file_size < GetFileSize(log_path), \"location 3 should be exempt from rate limiting\");",
      "path": "src/test/logging_tests.cpp",
      "position": 243,
      "original_position": 244,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2185313756,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think there are a number of issues with this part of the test:\r\n\r\nI also noticed those in my review, but also noticed you mentioned it already.",
      "created_at": "2025-07-10T08:21:02Z",
      "updated_at": "2025-07-10T08:21:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2196962104",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2196962104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": 451,
      "original_start_line": 452,
      "start_side": "RIGHT",
      "line": 465,
      "original_line": 465,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2196975759",
      "pull_request_review_id": 3004524459,
      "id": 2196975759,
      "node_id": "PRRC_kwDOABII586C8zCP",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.\n+        return static_cast<size_t>(CSipHasher(0, 0)\n+                                       .Write(std::hash<std::string_view>{}(s.file_name()))",
      "path": "src/logging.h",
      "position": 39,
      "original_position": 39,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188644325,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yeah, i think the `std::hash` can be dropped here",
      "created_at": "2025-07-10T08:27:25Z",
      "updated_at": "2025-07-10T08:27:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2196975759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2196975759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2197642575",
      "pull_request_review_id": 3005547471,
      "id": 2197642575,
      "node_id": "PRRC_kwDOABII586C_V1P",
      "diff_hunk": "@@ -31,6 +35,24 @@ extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n \n+struct SourceLocationEqual {\n+    bool operator()(const std::source_location& lhs, const std::source_location& rhs) const noexcept\n+    {\n+        return lhs.line() == rhs.line() && std::string_view(lhs.file_name()) == std::string_view(rhs.file_name());\n+    }\n+};\n+\n+struct SourceLocationHasher {\n+    size_t operator()(const std::source_location& s) const noexcept\n+    {\n+        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.\n+        return static_cast<size_t>(CSipHasher(0, 0)\n+                                       .Write(std::hash<std::string_view>{}(s.file_name()))",
      "path": "src/logging.h",
      "position": 39,
      "original_position": 39,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6a7147358c9d6e3883dcdbbee9fb2c1cb4baf5ff",
      "in_reply_to_id": 2188644325,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed it in https://github.com/bitcoin/bitcoin/pull/32939",
      "created_at": "2025-07-10T12:47:23Z",
      "updated_at": "2025-07-10T12:47:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2197642575",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2197642575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2216025047",
      "pull_request_review_id": 3033520586,
      "id": 2216025047,
      "node_id": "PRRC_kwDOABII586EFdvX",
      "diff_hunk": "@@ -27,10 +31,29 @@ static const bool DEFAULT_LOGTIMESTAMPS = true;\n static const bool DEFAULT_LOGTHREADNAMES = false;\n static const bool DEFAULT_LOGSOURCELOCATIONS = false;\n static constexpr bool DEFAULT_LOGLEVELALWAYS = false;",
      "path": "src/logging.h",
      "position": 1,
      "original_position": 26,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "0bc6ed61cfab6d97e74103efd41c46faf5941ff6",
      "in_reply_to_id": 2107350361,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I have opted not to do this in the follow-up PR.",
      "created_at": "2025-07-18T13:16:43Z",
      "updated_at": "2025-07-18T13:16:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2216025047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2216025047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262551801",
      "pull_request_review_id": 3100255608,
      "id": 2262551801,
      "node_id": "PRRC_kwDOABII586G28z5",
      "diff_hunk": "@@ -364,33 +368,71 @@ std::string BCLog::Logger::GetLogPrefix(BCLog::LogFlags category, BCLog::Level l\n \n static size_t MemUsage(const BCLog::Logger::BufferedLog& buflog)\n {\n-    return buflog.str.size() + buflog.logging_function.size() + buflog.source_file.size() + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n+    return buflog.str.size() + buflog.logging_function.size() + strlen(buflog.source_loc.file_name()) + buflog.threadname.size() + memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));\n }\n \n-void BCLog::Logger::FormatLogStrInPlace(std::string& str, BCLog::LogFlags category, BCLog::Level level, std::string_view source_file, int source_line, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime) const\n+bool BCLog::Logger::FormatLogStrAndRateLimit(std::string& str, BCLog::LogFlags category, BCLog::Level level, const std::source_location& source_loc, std::string_view logging_function, std::string_view threadname, SystemClock::time_point now, std::chrono::seconds mocktime)\n {\n     if (!str.ends_with('\\n')) str.push_back('\\n');\n \n     str.insert(0, GetLogPrefix(category, level));\n \n     if (m_log_sourcelocations) {\n-        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_file, \"./\"), source_line, logging_function));\n+        str.insert(0, strprintf(\"[%s:%d] [%s] \", RemovePrefixView(source_loc.file_name(), \"./\"), source_loc.line(), logging_function));\n     }\n \n     if (m_log_threadnames) {\n         str.insert(0, strprintf(\"[%s] \", (threadname.empty() ? \"unknown\" : threadname)));\n     }\n \n+    // Whether or not logging to disk was/is ratelimited for this source location.\n+    bool was_ratelimited{false};\n+    bool is_ratelimited{false};\n+\n+    if (category == UNCONDITIONAL_RATE_LIMITED && m_ratelimit) {\n+        was_ratelimited = m_suppressed_locations.find(source_loc) != m_suppressed_locations.end();\n+        is_ratelimited = !m_ratelimiters[source_loc].Consume(str.size());\n+\n+        if (!is_ratelimited && was_ratelimited) {\n+            // Logging will restart for this source location.\n+            m_suppressed_locations.erase(source_loc);\n+\n+            uint64_t dropped_bytes = m_ratelimiters[source_loc].GetDroppedBytes();\n+\n+            str.insert(0, strprintf(\"Restarting logging from %s:%d (%s): \"\n+                                    \"(%d MiB) were dropped during the last hour.\\n\",\n+                                    source_loc.file_name(), source_loc.line(), logging_function,\n+                                    dropped_bytes / (1024 * 1024)));\n+        } else if (is_ratelimited && !was_ratelimited) {",
      "path": "src/logging.cpp",
      "position": 1,
      "original_position": 97,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "6dece0553ca4ba39e54e80e840c7cad93fbe1f96",
      "in_reply_to_id": 2115869345,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just checking in to say it would be possible to add (and test) after  https://github.com/bitcoin/bitcoin/pull/32588 by using `test_only_CheckFailuresAreExceptionsNotAborts` in the unit tests.",
      "created_at": "2025-08-08T10:16:48Z",
      "updated_at": "2025-08-08T10:16:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2262551801",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2262551801"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 404,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2315723150",
      "pull_request_review_id": 3176024720,
      "id": 2315723150,
      "node_id": "PRRC_kwDOABII586KByGO",
      "diff_hunk": "@@ -33,7 +33,9 @@ class DebugLogHelper\n \n public:\n     explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+\n+    //! Mark as noexcept(false) to catch any thrown exceptions.\n+    ~DebugLogHelper() noexcept(false) { check_found(); }",
      "path": "src/test/util/logging.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "in_reply_to_id": null,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Note that exception-inside-another-exception will still terminate the program, regardless of the added `noexcept(false)`. Or this:\r\n\r\n```cpp\r\nclass A\r\n{\r\npublic:\r\n    ~A() noexcept(false)\r\n    {\r\n        throw 5;\r\n    }\r\n};\r\n\r\nint main(int, char**)\r\n{\r\n    try {\r\n        std::vector<A> a{4};\r\n    } catch (...) {\r\n        std::cout << \"catch\\n\";\r\n    }\r\n\r\n    return 0;\r\n}\r\n```",
      "created_at": "2025-09-02T10:55:06Z",
      "updated_at": "2025-09-02T10:58:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2315723150",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2315723150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325948813",
      "pull_request_review_id": 3190649182,
      "id": 2325948813,
      "node_id": "PRRC_kwDOABII586KoymN",
      "diff_hunk": "@@ -33,7 +33,9 @@ class DebugLogHelper\n \n public:\n     explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+\n+    //! Mark as noexcept(false) to catch any thrown exceptions.\n+    ~DebugLogHelper() noexcept(false) { check_found(); }",
      "path": "src/test/util/logging.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "in_reply_to_id": 2315723150,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this can be removed now, it was added to be used with `BOOST_CHECK_THROW` / `BOOST_CHECK_NO_THROW` which are no longer used after https://github.com/bitcoin/bitcoin/pull/33011.",
      "created_at": "2025-09-05T20:08:31Z",
      "updated_at": "2025-09-05T20:08:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2325948813",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2325948813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2344214394",
      "pull_request_review_id": 3216632261,
      "id": 2344214394,
      "node_id": "PRRC_kwDOABII586Lud96",
      "diff_hunk": "@@ -33,7 +33,9 @@ class DebugLogHelper\n \n public:\n     explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+\n+    //! Mark as noexcept(false) to catch any thrown exceptions.\n+    ~DebugLogHelper() noexcept(false) { check_found(); }",
      "path": "src/test/util/logging.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "in_reply_to_id": 2315723150,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What can be removed? The `noexcept` or the entire destructor?",
      "created_at": "2025-09-12T13:09:26Z",
      "updated_at": "2025-09-12T13:09:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2344214394",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2344214394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2344501621",
      "pull_request_review_id": 3217087674,
      "id": 2344501621,
      "node_id": "PRRC_kwDOABII586LvkF1",
      "diff_hunk": "@@ -33,7 +33,9 @@ class DebugLogHelper\n \n public:\n     explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+\n+    //! Mark as noexcept(false) to catch any thrown exceptions.\n+    ~DebugLogHelper() noexcept(false) { check_found(); }",
      "path": "src/test/util/logging.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "in_reply_to_id": 2315723150,
      "user": {
        "login": "Crypt-iQ",
        "id": 15145615,
        "node_id": "MDQ6VXNlcjE1MTQ1NjE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/15145615?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Crypt-iQ",
        "html_url": "https://github.com/Crypt-iQ",
        "followers_url": "https://api.github.com/users/Crypt-iQ/followers",
        "following_url": "https://api.github.com/users/Crypt-iQ/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Crypt-iQ/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Crypt-iQ/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Crypt-iQ/subscriptions",
        "organizations_url": "https://api.github.com/users/Crypt-iQ/orgs",
        "repos_url": "https://api.github.com/users/Crypt-iQ/repos",
        "events_url": "https://api.github.com/users/Crypt-iQ/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Crypt-iQ/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `noexcept` can be removed, the destructor is still used in other tests.",
      "created_at": "2025-09-12T14:54:49Z",
      "updated_at": "2025-09-12T14:54:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2344501621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2344501621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2345042637",
      "pull_request_review_id": 3218085476,
      "id": 2345042637,
      "node_id": "PRRC_kwDOABII586LxoLN",
      "diff_hunk": "@@ -33,7 +33,9 @@ class DebugLogHelper\n \n public:\n     explicit DebugLogHelper(std::string message, MatchFn match = [](const std::string*){ return true; });\n-    ~DebugLogHelper() { check_found(); }\n+\n+    //! Mark as noexcept(false) to catch any thrown exceptions.\n+    ~DebugLogHelper() noexcept(false) { check_found(); }",
      "path": "src/test/util/logging.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "original_commit_id": "4c772cbd83e502a1339e8993d192ea6416ecd45c",
      "in_reply_to_id": 2315723150,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see. Commit `test: don't throw from the destructor of DebugLogHelper` from https://github.com/bitcoin/bitcoin/pull/26812 changes the destructor to not throw exceptions. It has been staying in that PR for a looong time. Maybe it deserves its own PR?",
      "created_at": "2025-09-12T17:52:11Z",
      "updated_at": "2025-09-12T17:52:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/32604#discussion_r2345042637",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2345042637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/32604"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    }
  ]
}