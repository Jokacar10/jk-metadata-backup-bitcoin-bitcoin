{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500",
    "id": 2871349366,
    "node_id": "PR_kwDOABII586rJVB2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/33500",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/33500.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/33500.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33500",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33500/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/4ec9d9230ee02c758d588be5afd56b07691c24ed",
    "number": 33500,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "p2p: implement sender-initiated package relay",
    "user": {
      "login": "ishaanam",
      "id": 75942586,
      "node_id": "MDQ6VXNlcjc1OTQyNTg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ishaanam",
      "html_url": "https://github.com/ishaanam",
      "followers_url": "https://api.github.com/users/ishaanam/followers",
      "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
      "organizations_url": "https://api.github.com/users/ishaanam/orgs",
      "repos_url": "https://api.github.com/users/ishaanam/repos",
      "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ishaanam/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "[BIP 331](https://github.com/bitcoin/bips/blob/master/bip-0331.mediawiki) implements receiver-initiated package relay, where receivers can request missing information about packages. However, this requires excessive round trips. If the sender knows that it is giving the receiver a transaction for which it doesn't have the ancestors, it should be able to just send a package (containing the transaction and the unknown ancestor(s)) instead. \r\n\r\nThis PR could potentially reduce some bandwidth, and could also reduce the number of transactions in the orphanage. However, if a node is sending packages that the receiver already knows about, this could increase significant bandwidth. As a result, this PR needs more testing. I did some initial testing between two nodes with `sendpackages` enabled, and it showed that no redundant packages were sent, which indicates that this may be a useful feature. \r\n\r\nThis PR implements the following:\r\n- signaling support for `sendpackages` and the corresponding negotiation logic\r\n- a node will send a `pkgtxns` message to the receiver node if the ancestor of a transaction that has been requested is not in the receiver node's `m_tx_inventory_known_filter`\r\n- nodes can process `pkgtxns` messages\r\n- the maximum number of transactions that can be sent through sender-initialized package relay has been set to 2, although this can be changed in the future\r\n- adds logging, functional tests, and fuzzing (for `ReceivedPackage`)\r\n\r\nThank you to glozow for her help with this PR! ",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2025-09-29T16:47:55Z",
    "updated_at": "2025-09-30T08:27:52Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merged": false,
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "ishaanam:sender_init_package_relay_final",
      "ref": "sender_init_package_relay_final",
      "sha": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "user": {
        "login": "ishaanam",
        "id": 75942586,
        "node_id": "MDQ6VXNlcjc1OTQyNTg2",
        "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ishaanam",
        "html_url": "https://github.com/ishaanam",
        "followers_url": "https://api.github.com/users/ishaanam/followers",
        "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
        "organizations_url": "https://api.github.com/users/ishaanam/orgs",
        "repos_url": "https://api.github.com/users/ishaanam/repos",
        "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ishaanam/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 462046293,
        "node_id": "R_kgDOG4pEVQ",
        "name": "bitcoin",
        "full_name": "ishaanam/bitcoin",
        "owner": {
          "login": "ishaanam",
          "id": 75942586,
          "node_id": "MDQ6VXNlcjc1OTQyNTg2",
          "avatar_url": "https://avatars.githubusercontent.com/u/75942586?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ishaanam",
          "html_url": "https://github.com/ishaanam",
          "followers_url": "https://api.github.com/users/ishaanam/followers",
          "following_url": "https://api.github.com/users/ishaanam/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ishaanam/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ishaanam/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ishaanam/subscriptions",
          "organizations_url": "https://api.github.com/users/ishaanam/orgs",
          "repos_url": "https://api.github.com/users/ishaanam/repos",
          "events_url": "https://api.github.com/users/ishaanam/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ishaanam/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/ishaanam/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ishaanam/bitcoin",
        "archive_url": "https://api.github.com/repos/ishaanam/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ishaanam/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ishaanam/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ishaanam/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ishaanam/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ishaanam/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ishaanam/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ishaanam/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ishaanam/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ishaanam/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ishaanam/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ishaanam/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ishaanam/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ishaanam/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ishaanam/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ishaanam/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ishaanam/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ishaanam/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ishaanam/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ishaanam/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ishaanam/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ishaanam/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ishaanam/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ishaanam/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ishaanam/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ishaanam/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ishaanam/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ishaanam/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ishaanam/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ishaanam/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ishaanam/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ishaanam/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ishaanam/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ishaanam/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ishaanam/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ishaanam/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ishaanam/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ishaanam/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ishaanam/bitcoin/hooks",
        "svn_url": "https://github.com/ishaanam/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 280576,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-12T21:46:01Z",
        "created_at": "2022-02-21T22:03:42Z",
        "updated_at": "2025-08-01T17:43:07Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d8fe258cd6105704bf4427eda048dd7085ca516d",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37900,
        "stargazers_count": 85767,
        "watchers_count": 85767,
        "size": 294230,
        "default_branch": "master",
        "open_issues_count": 807,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-30T07:17:43Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-09-30T08:20:50Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": true,
    "additions": 917,
    "deletions": 2,
    "changed_files": 18,
    "commits": 12,
    "review_comments": 54,
    "comments": 2
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDYzY2YyYjI4YjBmZjIyMDRjYzM5NjdjYjk3Y2E3OGJmMTY3ZWIwZTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63cf2b28b0ff2204cc3967cb97ca78bf167eb0e1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/63cf2b28b0ff2204cc3967cb97ca78bf167eb0e1",
      "tree": {
        "sha": "9c3cc9c4d584e20125d2e72491a17aed44605ac2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c3cc9c4d584e20125d2e72491a17aed44605ac2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75ed673193c5b53b1f4b734e38237f6875bb30b2",
          "sha": "75ed673193c5b53b1f4b734e38237f6875bb30b2",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/75ed673193c5b53b1f4b734e38237f6875bb30b2"
        }
      ],
      "message": "[p2p] sendpackages negotiation logic\n\nCo-authored-by: glozow <gloriajzhao@gmail.com>",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-14T19:46:19Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-16T14:52:39Z"
      },
      "sha": "63cf2b28b0ff2204cc3967cb97ca78bf167eb0e1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE2YjVhNTg2ZTkxY2FiMTk3OGU5N2QyMGE2MWJmNDE1ZmFhMDg4Yjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16b5a586e91cab1978e97d20a61bf415faa088b9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/16b5a586e91cab1978e97d20a61bf415faa088b9",
      "tree": {
        "sha": "41a682169cd588c6db579813a7b86bd8ea720fa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41a682169cd588c6db579813a7b86bd8ea720fa0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63cf2b28b0ff2204cc3967cb97ca78bf167eb0e1",
          "sha": "63cf2b28b0ff2204cc3967cb97ca78bf167eb0e1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/63cf2b28b0ff2204cc3967cb97ca78bf167eb0e1"
        }
      ],
      "message": "[p2p] signal support for package relay\n\nCo-authored-by: glozow <gloriajzhao@gmail.com>",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-15T17:22:08Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-16T14:53:05Z"
      },
      "sha": "16b5a586e91cab1978e97d20a61bf415faa088b9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIxMmNjMGJjOTY2MmQzYWJkZjk1ODc2ZTE2MWViMjJhNTk2MjA0NDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b12cc0bc9662d3abdf95876e161eb22a59620441",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b12cc0bc9662d3abdf95876e161eb22a59620441",
      "tree": {
        "sha": "6dfe9f973b4d58d4982fca9410a9868617929fd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dfe9f973b4d58d4982fca9410a9868617929fd2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16b5a586e91cab1978e97d20a61bf415faa088b9",
          "sha": "16b5a586e91cab1978e97d20a61bf415faa088b9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/16b5a586e91cab1978e97d20a61bf415faa088b9"
        }
      ],
      "message": "[rpc] expose package relay on rpc",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-15T17:22:13Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-09-06T11:33:13Z"
      },
      "sha": "b12cc0bc9662d3abdf95876e161eb22a59620441"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDNjZDM1ZWY1ZDFhYTBmMzBjNTExODlhZmRjOGE4ZGUwYmFiZjAyODU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cd35ef5d1aa0f30c51189afdc8a8de0babf0285",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd35ef5d1aa0f30c51189afdc8a8de0babf0285",
      "tree": {
        "sha": "4f9f1868ce4b8e6ce74e7e9a840c5c531782bad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f9f1868ce4b8e6ce74e7e9a840c5c531782bad7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b12cc0bc9662d3abdf95876e161eb22a59620441",
          "sha": "b12cc0bc9662d3abdf95876e161eb22a59620441",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b12cc0bc9662d3abdf95876e161eb22a59620441"
        }
      ],
      "message": "[functional test] test package relay messages\n\nCo-authored-by: glozow <gloriajzhao@gmail.com>",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-15T17:22:15Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-16T15:50:22Z"
      },
      "sha": "3cd35ef5d1aa0f30c51189afdc8a8de0babf0285"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZjNjQzYmNiYWJmMGE0OTUzYTAwOTQ3YjYxZWU4MzBhZjJlZGZjZTc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c643bcbabf0a4953a00947b61ee830af2edfce7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6c643bcbabf0a4953a00947b61ee830af2edfce7",
      "tree": {
        "sha": "33a899f21bcf40b96bd6ee5571bb1feffd17e45b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33a899f21bcf40b96bd6ee5571bb1feffd17e45b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cd35ef5d1aa0f30c51189afdc8a8de0babf0285",
          "sha": "3cd35ef5d1aa0f30c51189afdc8a8de0babf0285",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd35ef5d1aa0f30c51189afdc8a8de0babf0285"
        }
      ],
      "message": "[p2p] add constants for PKGTXNS message",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-15T17:22:15Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T19:51:58Z"
      },
      "sha": "6c643bcbabf0a4953a00947b61ee830af2edfce7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM5OGJkYWIzYzFiYmJkYTgwNDM5MzA2ZWE5OWI4MWVhMjM0MGIyOWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c98bdab3c1bbbda80439306ea99b81ea2340b29f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c98bdab3c1bbbda80439306ea99b81ea2340b29f",
      "tree": {
        "sha": "09b09ccc99ac433116a379473c032d7a70557fd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09b09ccc99ac433116a379473c032d7a70557fd2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c643bcbabf0a4953a00947b61ee830af2edfce7",
          "sha": "6c643bcbabf0a4953a00947b61ee830af2edfce7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6c643bcbabf0a4953a00947b61ee830af2edfce7"
        }
      ],
      "message": "[p2p] allow using PackageToValidate for sender-init package relay",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-15T17:22:15Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T19:48:58Z"
      },
      "sha": "c98bdab3c1bbbda80439306ea99b81ea2340b29f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDJkMjMzNWU3YjU0ZWJkNzdhYmRlZDA3NDc4MmQ1N2M5NTY3MTE1OTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d2335e7b54ebd77abded074782d57c956711592",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2d2335e7b54ebd77abded074782d57c956711592",
      "tree": {
        "sha": "9f576c81cc3f31ad1d50f006e599750944d6861e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f576c81cc3f31ad1d50f006e599750944d6861e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c98bdab3c1bbbda80439306ea99b81ea2340b29f",
          "sha": "c98bdab3c1bbbda80439306ea99b81ea2340b29f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c98bdab3c1bbbda80439306ea99b81ea2340b29f"
        }
      ],
      "message": "[p2p] add `ReceivedPackage` functions for pkgtxns",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-15T17:22:15Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-22T20:08:11Z"
      },
      "sha": "2d2335e7b54ebd77abded074782d57c956711592"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFkMjk5YjI5NzllZWFlOWVkMDZlZDE4YmZkMTJhNjU2MWZhZWE1ODE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d299b2979eeae9ed06ed18bfd12a6561faea581",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1d299b2979eeae9ed06ed18bfd12a6561faea581",
      "tree": {
        "sha": "5e21cfe74d1d03e98d7d37b550dab85671476639",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e21cfe74d1d03e98d7d37b550dab85671476639"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d2335e7b54ebd77abded074782d57c956711592",
          "sha": "2d2335e7b54ebd77abded074782d57c956711592",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2d2335e7b54ebd77abded074782d57c956711592"
        }
      ],
      "message": "[p2p] process PGTXNS message",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-15T17:22:15Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-18T21:26:30Z"
      },
      "sha": "1d299b2979eeae9ed06ed18bfd12a6561faea581"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI3MzI1YmY5ZDM3NWNlNjBhMTcxNGI2MzdmMmY0OGUzNjMyZmRmMjE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27325bf9d375ce60a1714b637f2f48e3632fdf21",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/27325bf9d375ce60a1714b637f2f48e3632fdf21",
      "tree": {
        "sha": "2144130ed1d99a587b618b6bc9581499555f4ceb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2144130ed1d99a587b618b6bc9581499555f4ceb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d299b2979eeae9ed06ed18bfd12a6561faea581",
          "sha": "1d299b2979eeae9ed06ed18bfd12a6561faea581",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1d299b2979eeae9ed06ed18bfd12a6561faea581"
        }
      ],
      "message": "[p2p] send a package instead of a tx when needed",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-25T20:51:14Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-21T19:53:32Z"
      },
      "sha": "27325bf9d375ce60a1714b637f2f48e3632fdf21"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDhjMjNmNzY1YmVjNmZmZTU1NzE4YzUxNTY5YTZlOTdhMWIyY2M4MmQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c23f765bec6ffe55718c51569a6e97a1b2cc82d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8c23f765bec6ffe55718c51569a6e97a1b2cc82d",
      "tree": {
        "sha": "f27dd804302274ae33167ddeb40a47deb02afbde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f27dd804302274ae33167ddeb40a47deb02afbde"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27325bf9d375ce60a1714b637f2f48e3632fdf21",
          "sha": "27325bf9d375ce60a1714b637f2f48e3632fdf21",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/27325bf9d375ce60a1714b637f2f48e3632fdf21"
        }
      ],
      "message": "[functional test] test sender init package relay",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-25T20:51:18Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-24T14:14:54Z"
      },
      "sha": "8c23f765bec6ffe55718c51569a6e97a1b2cc82d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM1MjIzZjIwODQyZTdkYWQ2YjkwNjY1YWE1NzRhYjUwY2JiZGZkMmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5223f20842e7dad6b90665aa574ab50cbbdfd2c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c5223f20842e7dad6b90665aa574ab50cbbdfd2c",
      "tree": {
        "sha": "c540f10276836ca132e49ae365cfda9a567567f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c540f10276836ca132e49ae365cfda9a567567f2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c23f765bec6ffe55718c51569a6e97a1b2cc82d",
          "sha": "8c23f765bec6ffe55718c51569a6e97a1b2cc82d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8c23f765bec6ffe55718c51569a6e97a1b2cc82d"
        }
      ],
      "message": "[logging] add logging for pkgtxns",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-26T13:45:36Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-07-30T19:48:04Z"
      },
      "sha": "c5223f20842e7dad6b90665aa574ab50cbbdfd2c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRlYzlkOTIzMGVlMDJjNzU4ZDU4OGJlNWFmZDU2YjA3NjkxYzI0ZWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "tree": {
        "sha": "58cc0a28913ed6cbeb784c0ebd4888df7b1a85e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58cc0a28913ed6cbeb784c0ebd4888df7b1a85e2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5223f20842e7dad6b90665aa574ab50cbbdfd2c",
          "sha": "c5223f20842e7dad6b90665aa574ab50cbbdfd2c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c5223f20842e7dad6b90665aa574ab50cbbdfd2c"
        }
      ],
      "message": "[fuzz] add fuzzing for ReceivedPackage",
      "committer": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-26T14:18:11Z"
      },
      "author": {
        "name": "ishaanam",
        "email": "ishaana.misra@gmail.com",
        "date": "2025-08-08T18:03:33Z"
      },
      "sha": "4ec9d9230ee02c758d588be5afd56b07691c24ed"
    },
    {
      "event": "labeled",
      "id": 19989003182,
      "node_id": "LE_lADOABII587OlAmQzwAAAASnb_uu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19989003182",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-29T16:47:59Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "commented",
      "id": 3348035335,
      "node_id": "IC_kwDOABII587HjvcH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3348035335",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-29T16:48:01Z",
      "updated_at": "2025-09-29T16:48:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/33500.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->\n### LLM Linter (✨ experimental)\n\nPossible typos and grammar issues:\n\n- \"Whether this node enable package relay and enforces package-related protocol\" -> \"Whether this node enables package relay and enforces package-related protocol\" [subject-verb agreement: \"node\" -> \"enables\"]\n- \"sender-initalized\" -> \"sender-initialized\" [spelling: \"initalized\" -> \"initialized\"] (occurs in comments above MAX_SENDER_INIT_PKG_SIZE and elsewhere) \n- \"sender-inital\" -> \"sender-initial\" [spelling: \"inital\" -> \"initial\"] (in the comment line that begins \"Maximum number of transactions that can be in a sender-inital...\")\n- \"We may remove certain transaction from the package that we already\" -> \"We may remove certain transactions from the package that we already\" [number agreement: \"transaction\" -> \"transactions\"]\n- \"List versions of each sendpackages received\" -> \"List of versions of each sendpackages message received\" [clarity: make it a proper noun phrase and clarify \"sendpackages\" refers to messages]\n\nIf you want, I can produce a patch with these exact comment/text replacements.\n\n<sup>drahtbot_id_5_m</sup>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#issuecomment-3348035335",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33500"
    },
    {
      "event": "labeled",
      "id": 19991259170,
      "node_id": "LE_lADOABII587OlAmQzwAAAASnkmgi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19991259170",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-29T18:55:05Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 3348614406,
      "node_id": "IC_kwDOABII587Hl80G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3348614406",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-29T18:55:06Z",
      "updated_at": "2025-09-29T18:55:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#issuecomment-3348614406",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33500"
    },
    {
      "event": "reviewed",
      "id": 3283190939,
      "node_id": "PRR_kwDOABII587DsYSb",
      "url": null,
      "actor": null,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-09-30T08:27:52Z",
      "author_association": "NONE",
      "body": "This is a significant refactoring and feature addition focused on implementing transaction package relay, a new mechanism for more efficient transaction propagation in Bitcoin. The changes introduce new message types, update network protocol handling, and integrate with existing transaction management systems. Extensive modifications are present in network-related files and test cases, indicating a substantial effort to enable and test this new functionality.\r\n\r\n**Key Changes:**\r\n- Introduction of transaction package relay functionality.\r\n- Addition of new P2P message types: SENDPACKAGES and PKGTXNS.\r\n- Modification of network message handling to support package relay.\r\n- Integration of package relay logic into transaction download and relay mechanisms.\r\n- Updates to peer management to track package relay support.\r\n- Introduction of a new experimental command-line argument '-packagerelay'.\r\n- Implementation of new test cases for package relay functionality.\r\n- Refactoring of transaction relay logic to conditionally send packages or individual transactions.\r\n\r\n",
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#pullrequestreview-3283190939",
      "submitted_at": "2025-09-30T08:20:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290209",
      "pull_request_review_id": 3283190939,
      "id": 2390290209,
      "node_id": "PRRC_kwDOABII586OeO8h",
      "diff_hunk": "@@ -544,6 +545,7 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n     argsman.AddArg(\"-i2pacceptincoming\", strprintf(\"Whether to accept inbound I2P connections (default: %i). Ignored if -i2psam is not set. Listening for inbound I2P connections is done through the SAM proxy, not by binding to a local address and port.\", DEFAULT_I2P_ACCEPT_INCOMING), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onlynet=<net>\", \"Make automatic outbound connections only to network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Inbound and manual connections are not affected by this option. It can be specified multiple times to allow multiple networks.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-v2transport\", strprintf(\"Support v2 transport (default: %u)\", DEFAULT_V2_TRANSPORT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-packagerelay\", strprintf(\"[EXPERIMENTAL] Support relaying transaction packages (default: %u)\", node::DEFAULT_ENABLE_PACKAGE_RELAY), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);",
      "path": "src/init.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 548\r\n\r\nThe description for the '-packagerelay' argument mentions it is '[EXPERIMENTAL]'. Consider if this flag should be exposed as a user-facing option or if it should be an internal feature controlled by other means, given its experimental nature.",
      "created_at": "2025-09-30T08:18:53Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390290209",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 548,
      "original_line": 548,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290335",
      "pull_request_review_id": 3283190939,
      "id": 2390290335,
      "node_id": "PRRC_kwDOABII586OeO-f",
      "diff_hunk": "@@ -910,7 +910,7 @@ namespace {\n  * Only message types that are actually implemented in this codebase need to be listed, as other\n  * messages get ignored anyway - whether we know how to decode them or not.\n  */\n-const std::array<std::string, 33> V2_MESSAGE_IDS = {\n+const std::array<std::string, 35> V2_MESSAGE_IDS = {",
      "path": "src/net.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 913\r\n\r\nThe array size has been increased from 33 to 35. The comment at line 910 states that only implemented message types need to be listed. If `NetMsgType::SENDPACKAGES` and `NetMsgType::PKGTXNS` (added on lines 943-944) are not implemented, they should not be added to this list. If they are implemented, the comment should be updated to reflect this.",
      "created_at": "2025-09-30T08:18:55Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390290335",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 913,
      "original_line": 913,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290413",
      "pull_request_review_id": 3283190939,
      "id": 2390290413,
      "node_id": "PRRC_kwDOABII586OeO_t",
      "diff_hunk": "@@ -940,6 +940,8 @@ const std::array<std::string, 33> V2_MESSAGE_IDS = {\n     NetMsgType::GETCFCHECKPT,\n     NetMsgType::CFCHECKPT,\n     NetMsgType::ADDRV2,\n+    NetMsgType::SENDPACKAGES,\n+    NetMsgType::PKGTXNS,\n     // Unimplemented message types that are assigned in BIP324:",
      "path": "src/net.cpp",
      "position": 15,
      "original_position": 15,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Lines:** 945-947\r\n\r\nThe comment \"Unimplemented message types that are assigned in BIP324:\" is followed by two empty strings. If these empty strings represent specific unimplemented message types, it would be more maintainable to explicitly name them. If they are not intended to be placeholders for future implementation, they should be removed to avoid confusion.",
      "created_at": "2025-09-30T08:18:57Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390290413",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290413"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 945,
      "original_line": 945,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290505",
      "pull_request_review_id": 3283190939,
      "id": 2390290505,
      "node_id": "PRRC_kwDOABII586OePBJ",
      "diff_hunk": "@@ -316,6 +318,14 @@ struct Peer {\n \n         /** Minimum fee rate with which to filter transaction announcements to this node. See BIP133. */\n         std::atomic<CAmount> m_fee_filter_received{0};\n+\n+        /** What package versions we agreed to relay. */\n+        std::atomic<node::PackageRelayVersions> m_package_versions_supported;\n+\n+        /** Whether or not the peer supports this version of package relay. */\n+        bool SupportsVersion(node::PackageRelayVersions version) {",
      "path": "src/net_processing.cpp",
      "position": 18,
      "original_position": 18,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Code Issue\r\n\r\n**Lines:** 326-328\r\n\r\n```typescript\r\nbool SupportsVersion(node::PackageRelayVersions version) {\r\n    return m_package_versions_supported & version;\r\n}\r\n```\r\n\r\nThe `SupportsVersion` method's return statement `m_package_versions_supported & version` might not be as clear as it could be. It relies on the caller understanding that a non-zero result implies the version is supported. A more explicit check, such as `(m_package_versions_supported & version) == version`, would make the intent clearer and reduce potential confusion.",
      "created_at": "2025-09-30T08:18:58Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390290505",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 326,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290650",
      "pull_request_review_id": 3283190939,
      "id": 2390290650,
      "node_id": "PRRC_kwDOABII586OePDa",
      "diff_hunk": "@@ -2486,6 +2523,37 @@ void PeerManagerImpl::ProcessGetData(CNode& pfrom, Peer& peer, const std::atomic\n     }\n }\n \n+std::optional<PackageToSend> PeerManagerImpl::GetSenderInitPackage(const Peer::TxRelay* tx_relay, const CTransactionRef tx) {\n+    PackageToSend package_to_send;\n+\n+    if (auto entry = WITH_LOCK(m_mempool.cs, return m_mempool.GetEntry(tx->GetHash()))) {\n+        // look for any ancestors this tx has in the mempool\n+        auto ancestors{WITH_LOCK(m_mempool.cs, return m_mempool.AssumeCalculateMemPoolAncestors(__func__, *entry, CTxMemPool::Limits::NoLimits(), /*fSearchForParents=*/false))};",
      "path": "src/net_processing.cpp",
      "position": 97,
      "original_position": 97,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Code Issue\r\n\r\n**Lines:** 2531-2531\r\n\r\n```typescript\r\nauto ancestors{WITH_LOCK(m_mempool.cs, return m_mempool.AssumeCalculateMemPoolAncestors(__func__, *entry, CTxMemPool::Limits::NoLimits(), /*fSearchForParents=*/false))};\r\n```\r\n\r\nThe `AssumeCalculateMemPoolAncestors` function is called with `fSearchForParents` set to `false`. This parameter controls whether the function should search for parent transactions that are not currently in the mempool. By setting it to `false`, the function will only consider ancestors that are already present in the mempool. If a transaction's parent is not in the mempool, it will not be included in the `ancestors` set, which can lead to incomplete packages being constructed and sent.",
      "created_at": "2025-09-30T08:19:00Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390290650",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2531,
      "original_line": 2531,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290761",
      "pull_request_review_id": 3283190939,
      "id": 2390290761,
      "node_id": "PRRC_kwDOABII586OePFJ",
      "diff_hunk": "@@ -4754,6 +4870,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    if (msg_type == NetMsgType::PKGTXNS && m_opts.m_enable_package_relay) {\n+        if (RejectIncomingTxs(pfrom)) {\n+            LogDebug(BCLog::NET, \"pkgtxns sent in violation of protocol, %s\", pfrom.DisconnectMsg(fLogIPs));\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (WITH_LOCK(m_tx_download_mutex, return !m_txdownloadman.NodeSupportsVersion(pfrom.GetId(), node::PKG_RELAY_PKGTXNS))) {\n+            LogDebug(BCLog::NET, \"\\npkgtxns not negotiated, disconnecting peer=%d\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        unsigned int num_txns = ReadCompactSize(vRecv);\n+        if (num_txns == 0) return;\n+        if (num_txns > node::MAX_SENDER_INIT_PKG_SIZE) {\n+            LogDebug(BCLog::NET, \"\\npkgtxns exceeds allowed size, disconnecting peer=%d\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+        std::vector<CTransactionRef> package;\n+        package.resize(num_txns);\n+        for (unsigned int n = 0; n < num_txns; n++) {\n+            vRecv >> TX_WITH_WITNESS(package[n]);\n+        }\n+\n+        const auto package_to_validate(WITH_LOCK(m_tx_download_mutex, return m_txdownloadman.ReceivedPackage(pfrom.GetId(), package)));\n+\n+        if (package_to_validate) {\n+            const auto package_result{WITH_LOCK(cs_main, return ProcessNewPackage(m_chainman.ActiveChainstate(), m_mempool, package_to_validate.value().m_txns, /*test_accept=*/false, /*client_maxfeerate=*/std::nullopt))};",
      "path": "src/net_processing.cpp",
      "position": 235,
      "original_position": 235,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Code Issue\r\n\r\n**Lines:** 4902-4902\r\n\r\n```typescript\r\nconst auto package_result{WITH_LOCK(cs_main, return ProcessNewPackage(m_chainman.ActiveChainstate(), m_mempool, package_to_validate.value().m_txns, /*test_accept=*/false, /*client_maxfeerate=*/std::nullopt))};\r\n```\r\n\r\nThe `ProcessNewPackage` function is invoked to validate the received package. However, the current implementation might not sufficiently validate the dependency chain of transactions within the package. An attacker could potentially craft a `PKGTXNS` message containing transactions whose parents are not in the mempool and are not themselves part of the package, or whose dependencies are otherwise invalid. This could lead to mempool pollution or other security vulnerabilities. A more robust validation of the transaction dependency graph within the package is recommended before accepting and processing it.",
      "created_at": "2025-09-30T08:19:02Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390290761",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4902,
      "original_line": 4902,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290899",
      "pull_request_review_id": 3283190939,
      "id": 2390290899,
      "node_id": "PRRC_kwDOABII586OePHT",
      "diff_hunk": "@@ -81,6 +82,8 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n         uint32_t max_extra_txs{DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN};\n         //! Whether all P2P messages are captured to disk\n         bool capture_messages{false};\n+        //! Whether this node enable package relay and enforces package-related protocol",
      "path": "src/net_processing.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 85\r\n\r\nThe comment `//! Whether this node enable package relay and enforces package-related protocol` is slightly redundant. The variable name `m_enable_package_relay` already indicates that it enables package relay. Consider making the comment more concise by focusing on the enforcement aspect, e.g., `//! Whether this node enforces package-related protocol`.",
      "created_at": "2025-09-30T08:19:04Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390290899",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390290899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291044",
      "pull_request_review_id": 3283190939,
      "id": 2390291044,
      "node_id": "PRRC_kwDOABII586OePJk",
      "diff_hunk": "@@ -23,6 +24,8 @@ void ApplyArgsManOptions(const ArgsManager& argsman, PeerManager::Options& optio\n     if (auto value{argsman.GetBoolArg(\"-capturemessages\")}) options.capture_messages = *value;\n \n     if (auto value{argsman.GetBoolArg(\"-blocksonly\")}) options.ignore_incoming_txs = *value;\n+\n+    if (auto value{argsman.GetBoolArg(\"-packagerelay\", DEFAULT_ENABLE_PACKAGE_RELAY)}) options.m_enable_package_relay = value;",
      "path": "src/node/peerman_args.cpp",
      "position": 13,
      "original_position": 13,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Code Issue\r\n\r\n**Lines:** 28-28\r\n\r\n```cpp\r\nif (auto value{argsman.GetBoolArg(\"-packagerelay\", DEFAULT_ENABLE_PACKAGE_RELAY)}) options.m_enable_package_relay = value;\r\n```\r\n\r\nThis code dereferences the `std::optional<bool>` returned by `GetBoolArg` without checking if it contains a value. If the argument is not provided, `value` will be `std::nullopt`, and dereferencing it (`*value`) will result in undefined behavior.",
      "created_at": "2025-09-30T08:19:05Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390291044",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 28,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291182",
      "pull_request_review_id": 3283190939,
      "id": 2390291182,
      "node_id": "PRRC_kwDOABII586OePLu",
      "diff_hunk": "@@ -17,9 +17,23 @@ class CRollingBloomFilter;\n class CTxMemPool;\n class GenTxid;\n class TxRequestTracker;\n+\n namespace node {\n class TxDownloadManagerImpl;\n \n+enum PackageRelayVersions : uint64_t {",
      "path": "src/node/txdownloadman.h",
      "position": 8,
      "original_position": 8,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 24-27\r\n\r\nThe `PackageRelayVersions` enum uses `uint64_t` as its underlying type. If the number of package relay versions is expected to remain small, consider using a smaller integer type (e.g., `uint32_t` or `uint16_t`) to potentially save memory.",
      "created_at": "2025-09-30T08:19:07Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390291182",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291305",
      "pull_request_review_id": 3283190939,
      "id": 2390291305,
      "node_id": "PRRC_kwDOABII586OePNp",
      "diff_hunk": "@@ -17,9 +17,23 @@ class CRollingBloomFilter;\n class CTxMemPool;\n class GenTxid;\n class TxRequestTracker;\n+\n namespace node {\n class TxDownloadManagerImpl;\n \n+enum PackageRelayVersions : uint64_t {\n+    PKG_RELAY_NONE = 0,\n+    PKG_RELAY_PKGTXNS = (1 << 0),\n+};\n+\n+static constexpr bool DEFAULT_ENABLE_PACKAGE_RELAY{false};\n+/** Maximum number of transactions that can be in a sender-initalized\n+ * package. Sender-initalized packages are packages that were not requested\n+ * by the receiver, but sent because the sender recognized that we were\n+ * missing certain transactions required to accept a previously requested\n+ * transaction into the mempool. */\n+static constexpr size_t MAX_SENDER_INIT_PKG_SIZE{2};",
      "path": "src/node/txdownloadman.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 35\r\n\r\nAdd a comment explaining the rationale behind the specific value of `MAX_SENDER_INIT_PKG_SIZE` (currently 2). This will help future developers understand the reasoning for this limit and assist in potential future adjustments.",
      "created_at": "2025-09-30T08:19:09Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390291305",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 35,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291404",
      "pull_request_review_id": 3283190939,
      "id": 2390291404,
      "node_id": "PRRC_kwDOABII586OePPM",
      "diff_hunk": "@@ -157,6 +180,8 @@ class TxDownloadManager {\n      * PackageToValidate. */\n     std::pair<bool, std::optional<PackageToValidate>> ReceivedTx(NodeId nodeid, const CTransactionRef& ptx);\n \n+    std::optional<PackageToValidate> ReceivedPackage(NodeId nodeid, Package& package);",
      "path": "src/node/txdownloadman.h",
      "position": 44,
      "original_position": 44,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 183\r\n\r\nThe `ReceivedPackage` method is declared in the header but its definition is not provided in this snippet. Ensure that a corresponding definition exists in the implementation file or that its absence is intentional and documented.",
      "created_at": "2025-09-30T08:19:10Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390291404",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 183,
      "original_line": 183,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291499",
      "pull_request_review_id": 3283190939,
      "id": 2390291499,
      "node_id": "PRRC_kwDOABII586OePQr",
      "diff_hunk": "@@ -171,6 +196,16 @@ class TxDownloadManager {\n \n     /** Wrapper for TxOrphanage::GetOrphanTransactions */\n     std::vector<TxOrphanage::OrphanTxBase> GetOrphanTransactions() const;\n+\n+    /**Which package relay versions we support*/\n+    PackageRelayVersions GetSupportedVersions() const;\n+    /**Whether the node supports the given versions*/\n+    bool NodeSupportsVersion(const NodeId& nodeid, const PackageRelayVersions& versions);\n+\n+    // The following are used for package relay negotiation\n+    void ReceivedVersion(NodeId nodeid);",
      "path": "src/node/txdownloadman.h",
      "position": 60,
      "original_position": 60,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 206-208\r\n\r\nThe methods related to package relay negotiation are grouped together. If the complexity of package relay negotiation increases significantly in the future, consider organizing these methods into a dedicated nested namespace or a separate class for better maintainability.",
      "created_at": "2025-09-30T08:19:12Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390291499",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 206,
      "original_line": 206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291584",
      "pull_request_review_id": 3283190939,
      "id": 2390291584,
      "node_id": "PRRC_kwDOABII586OePSA",
      "diff_hunk": "@@ -558,6 +584,56 @@ std::pair<bool, std::optional<PackageToValidate>> TxDownloadManagerImpl::Receive\n     return {true, std::nullopt};\n }\n \n+std::optional<PackageToValidate> TxDownloadManagerImpl::ReceivedPackage(NodeId nodeid, Package& mutable_package)\n+{\n+    // Don't validate a package that is too large\n+    if (mutable_package.size() > MAX_SENDER_INIT_PKG_SIZE) return std::nullopt;\n+\n+    std::string package_string = strprintf(\"package hash: %s, parent (txid=%s, wtxid=%s) + child (txid=%s, wtxid=%s)\",\n+            GetPackageHash(mutable_package).ToString(),\n+            mutable_package.front()->GetHash().ToString(),\n+            mutable_package.front()->GetWitnessHash().ToString(),\n+            mutable_package.back()->GetHash().ToString(),\n+            mutable_package.back()->GetWitnessHash().ToString()\n+            );\n+\n+    // If we recently rejected this package, don't validate it again\n+    if (RecentRejectsReconsiderableFilter().contains(GetPackageHash(mutable_package))) {\n+        LogDebug(BCLog::TXPACKAGES, \"ignoring package we previously rejected: %s\\n\", package_string);\n+        return std::nullopt;\n+    }\n+\n+    // We may remove certain transaction from the package that we already\n+    // know about or that were recently rejected\n+    for (size_t i = 0; i < mutable_package.size(); i++) {",
      "path": "src/node/txdownloadman_impl.cpp",
      "position": 72,
      "original_position": 72,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Issue\r\n\r\n**Type:** Bug\r\n**Severity:** High\r\n\r\n**Line:** 620\r\n\r\nThe loop iterating through `mutable_package` and erasing elements modifies the vector while iterating using an index. This can lead to skipping elements or out-of-bounds access if `mutable_package.erase(mutable_package.begin()+i)` is called and `i` is not decremented afterwards. Specifically, when an element is erased, the subsequent elements shift to the left, and the loop increment `i++` will then skip the element that moved into the current position `i`.\r\n\r\n**Fix:**\r\nTo fix this, either iterate backwards or decrement the index `i` after erasing an element. A common pattern is to decrement `i` after erasing:\r\n\r\n```diff\r\n--- a/src/node/txdownloadman_impl.cpp\r\n+++ b/src/node/txdownloadman_impl.cpp\r\n@@ -617,7 +617,7 @@\r\n             LogDebug(BCLog::TXPACKAGES, \"removing tx (%s) from the following package because we already have it: %s\\n\", txid.ToString(), package_string);\r\n             mutable_package.erase(mutable_package.begin()+i);\r\n         } else if (RecentRejectsFilter().contains(wtxid.ToUint256())) {\r\n-            LogDebug(BCLog::TXPACKAGES, \"dropping package because tx (%s) has already been rejected and is not eligible for reconsideration: %s\\n\", txid.ToString(), package_string);\r\n+            LogDebug(BCLog::TXPACKAGES, \"dropping package because tx (%s) has already been rejected and is not eligible for reconsideration: %s\\n\", txid.ToString(), package_string);\r\n             mutable_package.erase(mutable_package.begin()+i);\r\n         }\r\n     }\r\n```\r\n\r\nAlternatively, decrement `i` after erasing:\r\n\r\n```diff\r\n--- a/src/node/txdownloadman_impl.cpp\r\n+++ b/src/node/txdownloadman_impl.cpp\r\n@@ -617,7 +617,7 @@\r\n             LogDebug(BCLog::TXPACKAGES, \"removing tx (%s) from the following package because we already have it: %s\\n\", txid.ToString(), package_string);\r\n             mutable_package.erase(mutable_package.begin()+i);\r\n         } else if (RecentRejectsFilter().contains(wtxid.ToUint256())) {\r\n-            LogDebug(BCLog::TXPACKAGES, \"dropping package because tx (%s) has already been rejected and is not eligible for reconsideration: %s\\n\", txid.ToString(), package_string);\r\n+            LogDebug(BCLog::TXPACKAGES, \"dropping package because tx (%s) has already been rejected and is not eligible for reconsideration: %s\\n\", txid.ToString(), package_string);\r\n             mutable_package.erase(mutable_package.begin()+i);\r\n         }\r\n     }\r\n```\r\n\r\nOr, more robustly:\r\n\r\n```diff\r\n--- a/src/node/txdownloadman_impl.cpp\r\n+++ b/src/node/txdownloadman_impl.cpp\r\n@@ -617,7 +617,7 @@\r\n             LogDebug(BCLog::TXPACKAGES, \"removing tx (%s) from the following package because we already have it: %s\\n\", txid.ToString(), package_string);\r\n             mutable_package.erase(mutable_package.begin()+i);\r\n         } else if (RecentRejectsFilter().contains(wtxid.ToUint256())) {\r\n-            LogDebug(BCLog::TXPACKAGES, \"dropping package because tx (%s) has already been rejected and is not eligible for reconsideration: %s\\n\", txid.ToString(), package_string);\r\n+            LogDebug(BCLog::TXPACKAGES, \"dropping package because tx (%s) has already been rejected and is not eligible for reconsideration: %s\\n\", txid.ToString(), package_string);\r\n             mutable_package.erase(mutable_package.begin()+i);\r\n         }\r\n     }\r\n```",
      "created_at": "2025-09-30T08:19:13Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390291584",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 608,
      "original_line": 608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291682",
      "pull_request_review_id": 3283190939,
      "id": 2390291682,
      "node_id": "PRRC_kwDOABII586OePTi",
      "diff_hunk": "@@ -584,4 +660,43 @@ std::vector<TxOrphanage::OrphanTxBase> TxDownloadManagerImpl::GetOrphanTransacti\n {\n     return m_orphanage->GetOrphanTransactions();\n }\n+\n+PackageRelayVersions TxDownloadManagerImpl::GetSupportedVersions() const {\n+    return PKG_RELAY_PKGTXNS;\n+}\n+\n+void TxDownloadManagerImpl::ReceivedVersion(NodeId nodeid) {\n+    if (m_registration_states.find(nodeid) != m_registration_states.end()) return;\n+    m_registration_states.insert(std::make_pair(nodeid, RegistrationState{}));\n+}\n+\n+void TxDownloadManagerImpl::ReceivedSendpackages(NodeId nodeid, PackageRelayVersions version) {\n+    const auto it = m_registration_states.find(nodeid);\n+    if (it == m_registration_states.end()) return;\n+    it->second.m_sendpackages_received = true;\n+    // Ignore versions we don't understand. Relay packages of versions that we both support.\n+    it->second.m_versions_in_common = PackageRelayVersions(GetSupportedVersions() & version);\n+}\n+\n+std::optional<PackageRelayVersions> TxDownloadManagerImpl::UpdateRegistrationState(NodeId nodeid, bool txrelay, bool wtxidrelay) {",
      "path": "src/node/txdownloadman_impl.cpp",
      "position": 126,
      "original_position": 126,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Issue\r\n\r\n**Type:** Bug\r\n**Severity:** Medium\r\n\r\n**Line:** 688\r\n\r\nIn `UpdateRegistrationState`, the `m_registration_states.erase(it)` call invalidates the iterator `it`. If `final_state` is true, the function returns `version` immediately after the erase. This is generally safe as the iterator is no longer used. However, it's good practice to be mindful of iterator invalidation. If there were subsequent operations on `it` after the erase, this would be a critical bug. As it stands, it's a potential maintainability concern if the logic were to change.\r\n\r\n**Fix:**\r\nNo immediate fix is required as the iterator is not used after invalidation. However, for clarity and robustness, consider re-fetching the iterator if it were to be used again, or restructuring the code to perform the erase after all necessary data has been extracted.",
      "created_at": "2025-09-30T08:19:15Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390291682",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 681,
      "original_line": 681,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291786",
      "pull_request_review_id": 3283190939,
      "id": 2390291786,
      "node_id": "PRRC_kwDOABII586OePVK",
      "diff_hunk": "@@ -584,4 +660,43 @@ std::vector<TxOrphanage::OrphanTxBase> TxDownloadManagerImpl::GetOrphanTransacti\n {\n     return m_orphanage->GetOrphanTransactions();\n }\n+\n+PackageRelayVersions TxDownloadManagerImpl::GetSupportedVersions() const {\n+    return PKG_RELAY_PKGTXNS;\n+}\n+\n+void TxDownloadManagerImpl::ReceivedVersion(NodeId nodeid) {\n+    if (m_registration_states.find(nodeid) != m_registration_states.end()) return;\n+    m_registration_states.insert(std::make_pair(nodeid, RegistrationState{}));\n+}\n+\n+void TxDownloadManagerImpl::ReceivedSendpackages(NodeId nodeid, PackageRelayVersions version) {\n+    const auto it = m_registration_states.find(nodeid);\n+    if (it == m_registration_states.end()) return;\n+    it->second.m_sendpackages_received = true;\n+    // Ignore versions we don't understand. Relay packages of versions that we both support.\n+    it->second.m_versions_in_common = PackageRelayVersions(GetSupportedVersions() & version);\n+}\n+\n+std::optional<PackageRelayVersions> TxDownloadManagerImpl::UpdateRegistrationState(NodeId nodeid, bool txrelay, bool wtxidrelay) {\n+    const auto& it = m_registration_states.find(nodeid);\n+    if (it == m_registration_states.end()) return std::nullopt;\n+    it->second.m_txrelay = txrelay;\n+    it->second.m_wtxid_relay = wtxidrelay;\n+    const bool final_state = it->second.CanRelayPackages();\n+    PackageRelayVersions version = it->second.m_versions_in_common;\n+    m_registration_states.erase(it);\n+    if (final_state) {\n+        m_package_relay_versions.insert(std::make_pair(nodeid, version));\n+        return version;\n+    }\n+    return std::nullopt;\n+}\n+bool TxDownloadManagerImpl::NodeSupportsVersion(const NodeId& nodeid, const PackageRelayVersions& versions) {",
      "path": "src/node/txdownloadman_impl.cpp",
      "position": 140,
      "original_position": 140,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 697\r\n\r\nThe `NodeSupportsVersion` function checks for the existence of `nodeid` in `m_package_relay_versions` twice. First, it calls `m_package_relay_versions.find(nodeid)` and assigns the result to `node_versions`. Then, it calls `m_package_relay_versions.find(nodeid)` again within the `if` condition. This is redundant.\r\n\r\n**Suggestion:**\r\nStore the result of `find` in a variable and use that variable for the check, or perform the check directly without assigning to `node_versions` if it's only used in the `if` block.\r\n\r\n```diff\r\n--- a/src/node/txdownloadman_impl.cpp\r\n+++ b/src/node/txdownloadman_impl.cpp\r\n@@ -695,9 +695,9 @@\r\n bool TxDownloadManagerImpl::NodeSupportsVersion(const NodeId& nodeid, const PackageRelayVersions& versions) {\r\n     auto node_versions = m_package_relay_versions.find(nodeid);\r\n-    if (m_package_relay_versions.find(nodeid) != m_package_relay_versions.end()) {\r\n+    if (node_versions != m_package_relay_versions.end()) {\r\n         return node_versions->second & versions;\r\n     }\r\n     return false;\r\n }\r\n }\r\n```",
      "created_at": "2025-09-30T08:19:17Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390291786",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 695,
      "original_line": 695,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291901",
      "pull_request_review_id": 3283190939,
      "id": 2390291901,
      "node_id": "PRRC_kwDOABII586OePW9",
      "diff_hunk": "@@ -18,6 +18,21 @@\n class CTxMemPool;\n namespace node {\n class TxDownloadManagerImpl {\n+    struct RegistrationState {\n+        // All of the following bools will need to be true\n+        /** Whether this peer allows transaction relay from us. */\n+        bool m_txrelay{true};\n+        // Whether this peer sent a BIP339 wtxidrelay message.\n+        bool m_wtxid_relay{false};\n+        /** Whether this peer says they can do package relay. */\n+        bool m_sendpackages_received{false};\n+        /** Versions of package relay supported by this node.\n+         * This is a subset of PACKAGE_RELAY_SUPPORTED_VERSIONS. */\n+        PackageRelayVersions m_versions_in_common{PKG_RELAY_NONE};\n+        bool CanRelayPackages() {",
      "path": "src/node/txdownloadman_impl.h",
      "position": 15,
      "original_position": 15,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 32-34\r\n\r\nThe `CanRelayPackages` method within the `RegistrationState` struct directly uses member variables to determine package relay capability. If the conditions for package relay become more intricate, this method's logic might benefit from being more explicit or potentially relocated to a more testable context. This could involve breaking down the conditions or ensuring comprehensive unit tests cover all possible return paths.",
      "created_at": "2025-09-30T08:19:18Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390291901",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291986",
      "pull_request_review_id": 3283190939,
      "id": 2390291986,
      "node_id": "PRRC_kwDOABII586OePYS",
      "diff_hunk": "@@ -141,6 +156,13 @@ class TxDownloadManagerImpl {\n      * all peers we are connected to (no block-relay-only and temporary connections). */\n     std::map<NodeId, PeerInfo> m_peer_info;\n \n+    /** Stores relevant information about the peer prior to verack. Upon completion of version\n+     * handshake, we use this information to decide whether we relay packages with this peer. */\n+    std::map<NodeId, RegistrationState> m_registration_states;",
      "path": "src/node/txdownloadman_impl.h",
      "position": 28,
      "original_position": 28,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 161\r\n\r\nThe comment for `m_registration_states` suggests it stores information prior to `verack` and is used post-handshake. However, the `RegistrationState` struct has default initializations for `m_txrelay` and `m_wtxid_relay`. Clarification is needed on how these states are accurately populated and managed *before* `verack` if they are critical for post-handshake decisions. This could involve ensuring that these states are explicitly set or updated during the version handshake process.",
      "created_at": "2025-09-30T08:19:20Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390291986",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390291986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 161,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292094",
      "pull_request_review_id": 3283190939,
      "id": 2390292094,
      "node_id": "PRRC_kwDOABII586OePZ-",
      "diff_hunk": "@@ -141,6 +156,13 @@ class TxDownloadManagerImpl {\n      * all peers we are connected to (no block-relay-only and temporary connections). */\n     std::map<NodeId, PeerInfo> m_peer_info;\n \n+    /** Stores relevant information about the peer prior to verack. Upon completion of version\n+     * handshake, we use this information to decide whether we relay packages with this peer. */\n+    std::map<NodeId, RegistrationState> m_registration_states;\n+\n+    /** Only contains nodes that support some type of package relay. */\n+    std::map<NodeId, PackageRelayVersions> m_package_relay_versions;",
      "path": "src/node/txdownloadman_impl.h",
      "position": 31,
      "original_position": 31,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 164\r\n\r\nThe `m_package_relay_versions` map is intended to store nodes supporting package relay. This appears to overlap in functionality with `m_versions_in_common` within the `RegistrationState` struct. It would be beneficial to clearly define the distinct responsibilities of these two data structures to avoid potential redundancy or confusion, and to ensure data consistency.",
      "created_at": "2025-09-30T08:19:22Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390292094",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292196",
      "pull_request_review_id": 3283190939,
      "id": 2390292196,
      "node_id": "PRRC_kwDOABII586OePbk",
      "diff_hunk": "@@ -190,6 +214,16 @@ class TxDownloadManagerImpl {\n \n     std::vector<TxOrphanage::OrphanTxBase> GetOrphanTransactions() const;\n \n+    PackageRelayVersions GetSupportedVersions() const;\n+\n+    void ReceivedVersion(NodeId nodeid);",
      "path": "src/node/txdownloadman_impl.h",
      "position": 51,
      "original_position": 51,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 219\r\n\r\nThe `ReceivedVersion` function is declared but its implementation is missing from this diff. Understanding how this function populates or updates the `m_registration_states` and `m_peer_info` members is crucial for ensuring correct peer state management after the version handshake.",
      "created_at": "2025-09-30T08:19:23Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390292196",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 219,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292299",
      "pull_request_review_id": 3283190939,
      "id": 2390292299,
      "node_id": "PRRC_kwDOABII586OePdL",
      "diff_hunk": "@@ -190,6 +214,16 @@ class TxDownloadManagerImpl {\n \n     std::vector<TxOrphanage::OrphanTxBase> GetOrphanTransactions() const;\n \n+    PackageRelayVersions GetSupportedVersions() const;\n+\n+    void ReceivedVersion(NodeId nodeid);\n+\n+    void ReceivedSendpackages(NodeId nodeid, PackageRelayVersions version);",
      "path": "src/node/txdownloadman_impl.h",
      "position": 53,
      "original_position": 53,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 221\r\n\r\nThe `ReceivedSendpackages` function is declared. Its implementation should ensure that the `m_registration_states` and `m_package_relay_versions` are updated accurately based on the received `PackageRelayVersions` from the peer. This is critical for maintaining an up-to-date view of peer capabilities.",
      "created_at": "2025-09-30T08:19:25Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390292299",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 221,
      "original_line": 221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292389",
      "pull_request_review_id": 3283190939,
      "id": 2390292389,
      "node_id": "PRRC_kwDOABII586OePel",
      "diff_hunk": "@@ -190,6 +214,16 @@ class TxDownloadManagerImpl {\n \n     std::vector<TxOrphanage::OrphanTxBase> GetOrphanTransactions() const;\n \n+    PackageRelayVersions GetSupportedVersions() const;\n+\n+    void ReceivedVersion(NodeId nodeid);\n+\n+    void ReceivedSendpackages(NodeId nodeid, PackageRelayVersions version);\n+\n+    std::optional<PackageRelayVersions> UpdateRegistrationState(NodeId nodeid, bool txrelay, bool wtxidrelay);",
      "path": "src/node/txdownloadman_impl.h",
      "position": 55,
      "original_position": 55,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 223\r\n\r\nThe `UpdateRegistrationState` function is declared. Its implementation needs to ensure that the `m_txrelay` and `m_wtxidrelay` members of `m_registration_states` are updated correctly. Furthermore, the logic for determining and returning `std::optional<PackageRelayVersions>` should be clearly defined and robust.",
      "created_at": "2025-09-30T08:19:27Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390292389",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 223,
      "original_line": 223,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292488",
      "pull_request_review_id": 3283190939,
      "id": 2390292488,
      "node_id": "PRRC_kwDOABII586OePgI",
      "diff_hunk": "@@ -190,6 +214,16 @@ class TxDownloadManagerImpl {\n \n     std::vector<TxOrphanage::OrphanTxBase> GetOrphanTransactions() const;\n \n+    PackageRelayVersions GetSupportedVersions() const;\n+\n+    void ReceivedVersion(NodeId nodeid);\n+\n+    void ReceivedSendpackages(NodeId nodeid, PackageRelayVersions version);\n+\n+    std::optional<PackageRelayVersions> UpdateRegistrationState(NodeId nodeid, bool txrelay, bool wtxidrelay);\n+\n+    bool NodeSupportsVersion(const NodeId& nodeid, const PackageRelayVersions& versions);",
      "path": "src/node/txdownloadman_impl.h",
      "position": 57,
      "original_position": 57,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 225\r\n\r\nThe `NodeSupportsVersion` function is declared. Its implementation should efficiently and accurately determine if a peer identified by `nodeid` supports the provided `versions`. This likely involves querying the `m_registration_states` or `m_package_relay_versions` maps.",
      "created_at": "2025-09-30T08:19:28Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390292488",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 225,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292586",
      "pull_request_review_id": 3283190939,
      "id": 2390292586,
      "node_id": "PRRC_kwDOABII586OePhq",
      "diff_hunk": "@@ -15,6 +15,8 @@\n #include <unordered_set>\n #include <vector>\n \n+using TransactionCompression = DefaultFormatter;",
      "path": "src/policy/packages.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 18\r\n\r\nThe `TransactionCompression` alias is defined but its usage is not immediately clear in this scope. If it's intended for use within the `PackageToSend` serialization, consider moving its definition closer to its usage or ensuring its purpose is well-documented if it's meant for broader use.",
      "created_at": "2025-09-30T08:19:30Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390292586",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 18,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292733",
      "pull_request_review_id": 3283190939,
      "id": 2390292733,
      "node_id": "PRRC_kwDOABII586OePj9",
      "diff_hunk": "@@ -51,6 +53,20 @@ using Package = std::vector<CTransactionRef>;\n \n class PackageValidationState : public ValidationState<PackageValidationResult> {};\n \n+class PackageToSend {\n+public:\n+    Package txns;\n+\n+    PackageToSend() = default;\n+    explicit PackageToSend(const Package& package) :\n+        txns(package) {}\n+\n+    SERIALIZE_METHODS(PackageToSend, obj)",
      "path": "src/policy/packages.h",
      "position": 21,
      "original_position": 21,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Lines:** 64-67\r\n\r\nThe `PackageToSend` class uses `SERIALIZE_METHODS` for serialization. For improved maintainability and potentially better performance or features, consider evaluating if a more modern serialization framework or library would be beneficial, especially as the serialization logic evolves.",
      "created_at": "2025-09-30T08:19:32Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390292733",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292845",
      "pull_request_review_id": 3283190939,
      "id": 2390292845,
      "node_id": "PRRC_kwDOABII586OePlt",
      "diff_hunk": "@@ -303,6 +307,8 @@ inline const std::array ALL_NET_MESSAGE_TYPES{std::to_array<std::string>({\n     NetMsgType::CFCHECKPT,",
      "path": "src/protocol.h",
      "position": 12,
      "original_position": 12,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Code Issue\r\n\r\n**Lines:** 307-312\r\n\r\n```cpp\r\ninline const std::array ALL_NET_MESSAGE_TYPES{\r\n    NetMsgType::CFCHECKPT,\r\n    NetMsgType::WTXIDRELAY,\r\n    NetMsgType::SENDTXRCNCL,\r\n    NetMsgType::SENDPACKAGES,\r\n    NetMsgType::PKGTXNS,\r\n};\r\n```\r\n\r\nThe `ALL_NET_MESSAGE_TYPES` array references `NetMsgType::SENDPACKAGES` and `NetMsgType::PKGTXNS`. However, these identifiers are not defined within the `NetMsgType` namespace. This will lead to a compilation failure. Ensure that these message types are declared and defined in the `NetMsgType` namespace before they are used in this array.",
      "created_at": "2025-09-30T08:19:33Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390292845",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390292845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 307,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293002",
      "pull_request_review_id": 3283190939,
      "id": 2390293002,
      "node_id": "PRRC_kwDOABII586OePoK",
      "diff_hunk": "@@ -142,6 +142,7 @@ static RPCHelpMan getpeerinfo()\n                         {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n                     }},\n                     {RPCResult::Type::BOOL, \"relaytxes\", \"Whether we relay transactions to this peer\"},\n+                    {RPCResult::Type::BOOL, \"relaytxpackages\", \"Whether we can relay packages with this peer\"},",
      "path": "src/rpc/net.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 145\r\n\r\nThe description for `relaytxpackages` is present in the RPC help text. This same information is also being added as a key-value pair in the JSON output. Consider if both are necessary or if there's a more streamlined way to present this information to avoid redundancy.",
      "created_at": "2025-09-30T08:19:35Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390293002",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293145",
      "pull_request_review_id": 3283190939,
      "id": 2390293145,
      "node_id": "PRRC_kwDOABII586OePqZ",
      "diff_hunk": "@@ -272,6 +273,7 @@ static RPCHelpMan getpeerinfo()\n             heights.push_back(height);\n         }\n         obj.pushKV(\"inflight\", std::move(heights));\n+        obj.pushKV(\"relaytxpackages\", statestats.m_package_relay);",
      "path": "src/rpc/net.cpp",
      "position": 12,
      "original_position": 12,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 276\r\n\r\nThe key `relaytxpackages` is being added to the RPC result. The help text for this key is defined on line 145. Ensure that documentation and code changes are synchronized. If this key is intended to be part of the RPC output, its definition in the help text should be clearly associated with this addition.",
      "created_at": "2025-09-30T08:19:37Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390293145",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 276,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293318",
      "pull_request_review_id": 3283190939,
      "id": 2390293318,
      "node_id": "PRRC_kwDOABII586OePtG",
      "diff_hunk": "@@ -68,6 +68,17 @@ static CTransactionRef MakeTransactionSpending(const std::vector<COutPoint>& out\n     for (size_t o = 0; o < num_outputs; ++o) tx.vout.emplace_back(CENT, P2WSH_OP_TRUE);\n     return MakeTransactionRef(tx);\n }\n+\n+static Package MakePackage(FuzzedDataProvider& fuzzed_data_provider) {",
      "path": "src/test/fuzz/txdownloadman.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 72-80\r\n\r\nThe `MakePackage` function is defined and used within the `txdownloadman` fuzz target. A similar functionality is also present in the `txdownloadman_impl` fuzz target (lines 339-340). If the logic for creating a package is identical, consider abstracting this into a shared helper function to avoid code duplication and improve maintainability.",
      "created_at": "2025-09-30T08:19:39Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390293318",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 72,
      "original_line": 72,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293485",
      "pull_request_review_id": 3283190939,
      "id": 2390293485,
      "node_id": "PRRC_kwDOABII586OePvt",
      "diff_hunk": "@@ -164,6 +175,12 @@ void CheckPackageToValidate(const node::PackageToValidate& package_to_validate,\n     Assert(package.size() == 2);\n }\n \n+void CheckSenderInitPackageToValidate(const node::PackageToValidate& package_to_validate, NodeId peer)",
      "path": "src/test/fuzz/txdownloadman.cpp",
      "position": 22,
      "original_position": 22,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 178-182\r\n\r\nThe `CheckSenderInitPackageToValidate` function is called within the fuzzing logic. While the assertions within the function are valuable, ensure that the `rand_peer` variable used when calling `txdownloadman.ReceivedPackage` and subsequently `CheckSenderInitPackageToValidate` is sufficiently fuzzed or varied to cover different peer scenarios. Currently, `rand_peer` is generated using `fuzzed_data_provider.ConsumeIntegral<NodeId>()` which is appropriate, but it's worth noting the dependency.",
      "created_at": "2025-09-30T08:19:41Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390293485",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 178,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293663",
      "pull_request_review_id": 3283190939,
      "id": 2390293663,
      "node_id": "PRRC_kwDOABII586OePyf",
      "diff_hunk": "@@ -403,6 +427,17 @@ FUZZ_TARGET(txdownloadman_impl, .init = initialize)\n                     Assert(!txdownload_impl.RecentRejectsFilter().contains(package.back()->GetWitnessHash().ToUint256()));\n                 }\n             },\n+            [&] {\n+                if (const auto& package_to_validate = txdownload_impl.ReceivedPackage(rand_peer, rand_package)) {\n+                    CheckSenderInitPackageToValidate(*package_to_validate, rand_peer);\n+\n+                    const auto& package = package_to_validate->m_txns;\n+\n+                    for (size_t i = 0; i < package.size(); i++) {",
      "path": "src/test/fuzz/txdownloadman.cpp",
      "position": 69,
      "original_position": 69,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 436-438\r\n\r\nIn the `txdownloadman_impl` fuzz target, the code iterates through `package_to_validate->m_txns` and asserts that none of them are present in `txdownload_impl.RecentRejectsFilter()`. A similar check for the last transaction of the package is performed in a different branch of the `CallOneOf` (lines 427). This could indicate a potential for code duplication or an opportunity to consolidate the rejection filter check for the entire package into a single, more comprehensive assertion.",
      "created_at": "2025-09-30T08:19:43Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390293663",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 436,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293812",
      "pull_request_review_id": 3283190939,
      "id": 2390293812,
      "node_id": "PRRC_kwDOABII586OeP00",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 78,
      "original_position": 78,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 78\r\n\r\nThe `PackageRelayTest.test_pkg_received` method could be more explicit in verifying the `sendpackages` message reception. While the test focuses on `pkgtxns`, explicitly checking that `_sendpackages_received` contains the expected version after the `on_version` call would strengthen the test's coverage of the initial handshake and feature negotiation.\r\n\r\n**Suggestion:**\r\nAdd an assertion in `test_pkg_received` to check `package_sender.sendpackages_received` after the initial connection setup.",
      "created_at": "2025-09-30T08:19:44Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390293812",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293980",
      "pull_request_review_id": 3283190939,
      "id": 2390293980,
      "node_id": "PRRC_kwDOABII586OeP3c",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])\n+        fill_mempool(self, self.nodes[0])\n+\n+        self.log.info(\"Test that we send a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_sent_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if there are multiple unconfirmed ancestors\")\n+        self.test_pkg_not_sent_if_multiple_unknown_ancestors()\n+\n+    @cleanup\n+    def test_pkg_received(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        # tell package_receiver about the low parent and wait for getdata\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+        package_sender.wait_for_getdata([low_parent_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # package_receiver does not accept low fee parent\n+        assert_equal(package_receiver.getrawmempool(), [])\n+\n+        # send pkgtxns with both txs upon high fee child getdata\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        package_sender.wait_for_getdata([high_child_wtxid_int])\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        # check that we now accept the package\n+        node_mempool = package_receiver.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_pkg_sent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_sender.getpeerinfo()[0][\"bytessent_per_msg\"])\n+\n+        assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 169,
      "original_position": 169,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 169\r\n\r\nThe assertion `assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)` checks for an exact byte count. This is fragile and can break with minor changes to message serialization. It's better to verify the functional behavior.\r\n\r\n**Suggestion:**\r\nFocus on verifying that the `pkgtxns` message was sent and that the `package_receiver` correctly processed the transactions within it, rather than asserting a specific byte count.",
      "created_at": "2025-09-30T08:19:46Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390293980",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390293980"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 169,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294168",
      "pull_request_review_id": 3283190939,
      "id": 2390294168,
      "node_id": "PRRC_kwDOABII586OeP6Y",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])\n+        fill_mempool(self, self.nodes[0])\n+\n+        self.log.info(\"Test that we send a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_sent_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if there are multiple unconfirmed ancestors\")\n+        self.test_pkg_not_sent_if_multiple_unknown_ancestors()\n+\n+    @cleanup\n+    def test_pkg_received(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        # tell package_receiver about the low parent and wait for getdata\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+        package_sender.wait_for_getdata([low_parent_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # package_receiver does not accept low fee parent\n+        assert_equal(package_receiver.getrawmempool(), [])\n+\n+        # send pkgtxns with both txs upon high fee child getdata\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        package_sender.wait_for_getdata([high_child_wtxid_int])\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        # check that we now accept the package\n+        node_mempool = package_receiver.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_pkg_sent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_sender.getpeerinfo()[0][\"bytessent_per_msg\"])\n+\n+        assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)\n+        assert_equal(len(package_receiver._pkgtxns_received), 2)\n+        assert low_parent_wtxid_int in package_receiver._pkgtxns_received\n+        assert high_child_wtxid_int in package_receiver._pkgtxns_received\n+\n+    @cleanup\n+    def test_pkg_received_if_one_parent_known(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.send_and_ping(msg_tx(parent1[\"tx\"]))\n+        self.wait_until(lambda: parent1[\"txid\"] in package_receiver.getrawmempool())\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent2[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: (low_fee_parent2[\"txid\"] in package_receiver.getrawmempool()) and (high_fee_child[\"txid\"] in package_receiver.getrawmempool()))",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 190,
      "original_position": 190,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 190\r\n\r\nThe test `test_pkg_received_if_one_parent_known` relies on the node's mempool being in a predictable state. However, the `run_test` method restarts the node and fills the mempool before this test, and the test itself is not decorated with `@cleanup`. This could lead to the assertion `(low_fee_parent2[\"txid\"] in package_receiver.getrawmempool()) and (high_fee_child[\"txid\"] in package_receiver.getrawmempool())` being affected by pre-existing transactions in the mempool.\r\n\r\n**Suggestion:**\r\nDecorate `test_pkg_received_if_one_parent_known` with `@cleanup` to ensure a clean mempool state before the test begins, or explicitly clear the mempool and disconnect peers before this test.",
      "created_at": "2025-09-30T08:19:49Z",
      "updated_at": "2025-09-30T08:20:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390294168",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294168"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294278",
      "pull_request_review_id": 3283190939,
      "id": 2390294278,
      "node_id": "PRRC_kwDOABII586OeP8G",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])\n+        fill_mempool(self, self.nodes[0])\n+\n+        self.log.info(\"Test that we send a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_sent_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if there are multiple unconfirmed ancestors\")\n+        self.test_pkg_not_sent_if_multiple_unknown_ancestors()\n+\n+    @cleanup\n+    def test_pkg_received(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        # tell package_receiver about the low parent and wait for getdata\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+        package_sender.wait_for_getdata([low_parent_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # package_receiver does not accept low fee parent\n+        assert_equal(package_receiver.getrawmempool(), [])\n+\n+        # send pkgtxns with both txs upon high fee child getdata\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        package_sender.wait_for_getdata([high_child_wtxid_int])\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        # check that we now accept the package\n+        node_mempool = package_receiver.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_pkg_sent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_sender.getpeerinfo()[0][\"bytessent_per_msg\"])\n+\n+        assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)\n+        assert_equal(len(package_receiver._pkgtxns_received), 2)\n+        assert low_parent_wtxid_int in package_receiver._pkgtxns_received\n+        assert high_child_wtxid_int in package_receiver._pkgtxns_received\n+\n+    @cleanup\n+    def test_pkg_received_if_one_parent_known(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.send_and_ping(msg_tx(parent1[\"tx\"]))\n+        self.wait_until(lambda: parent1[\"txid\"] in package_receiver.getrawmempool())\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent2[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: (low_fee_parent2[\"txid\"] in package_receiver.getrawmempool()) and (high_fee_child[\"txid\"] in package_receiver.getrawmempool()))\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_known_parent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        self.nodes[0].setmocktime(int(time.time()))\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        package_receiver.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].bumpmocktime(600)",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 215,
      "original_position": 215,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 215\r\n\r\nThe test `test_pkg_not_sent_if_known_parent` advances mock time, but the `@cleanup` decorator resets it to 0 afterwards. This means the time advancement is immediately undone, potentially weakening the assertion that no `pkgtxns` were received after time has passed. The test might be more robust if the time advancement's effect is preserved or if the assertion is made before the cleanup.\r\n\r\n**Suggestion:**\r\nConsider making the assertion about `_pkgtxns_received` before the `finally` block in the `cleanup` decorator, or ensure that the time manipulation is necessary and its effect is correctly tested within the scope of the decorated function.",
      "created_at": "2025-09-30T08:19:50Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390294278",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 215,
      "original_line": 215,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294424",
      "pull_request_review_id": 3283190939,
      "id": 2390294424,
      "node_id": "PRRC_kwDOABII586OeP-Y",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])\n+        fill_mempool(self, self.nodes[0])\n+\n+        self.log.info(\"Test that we send a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_sent_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if there are multiple unconfirmed ancestors\")\n+        self.test_pkg_not_sent_if_multiple_unknown_ancestors()\n+\n+    @cleanup\n+    def test_pkg_received(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        # tell package_receiver about the low parent and wait for getdata\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+        package_sender.wait_for_getdata([low_parent_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # package_receiver does not accept low fee parent\n+        assert_equal(package_receiver.getrawmempool(), [])\n+\n+        # send pkgtxns with both txs upon high fee child getdata\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        package_sender.wait_for_getdata([high_child_wtxid_int])\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        # check that we now accept the package\n+        node_mempool = package_receiver.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_pkg_sent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_sender.getpeerinfo()[0][\"bytessent_per_msg\"])\n+\n+        assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)\n+        assert_equal(len(package_receiver._pkgtxns_received), 2)\n+        assert low_parent_wtxid_int in package_receiver._pkgtxns_received\n+        assert high_child_wtxid_int in package_receiver._pkgtxns_received\n+\n+    @cleanup\n+    def test_pkg_received_if_one_parent_known(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.send_and_ping(msg_tx(parent1[\"tx\"]))\n+        self.wait_until(lambda: parent1[\"txid\"] in package_receiver.getrawmempool())\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent2[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: (low_fee_parent2[\"txid\"] in package_receiver.getrawmempool()) and (high_fee_child[\"txid\"] in package_receiver.getrawmempool()))\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_known_parent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        self.nodes[0].setmocktime(int(time.time()))\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        package_receiver.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].bumpmocktime(600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_below_feefilter(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        current_time = int(time.time())\n+        self.nodes[0].setmocktime(current_time)\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(2000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000020000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].setmocktime(current_time+600)",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 242,
      "original_position": 242,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 242\r\n\r\nThis test manipulates mock time, but the `@cleanup` decorator resets it to 0. The time advancement `self.nodes[0].setmocktime(current_time+600)` is therefore undone. This might make the assertions `assert_equal(len(package_receiver._pkgtxns_received), 0)` and `assert_equal(len(package_receiver._tx_received), 0)` less conclusive if the test's intent was to verify behavior after a specific duration.\r\n\r\n**Suggestion:**\r\nEnsure that time-dependent assertions are made before the `cleanup` decorator's time reset, or reconsider the necessity of mock time manipulation if its effect is immediately nullified by the cleanup process.",
      "created_at": "2025-09-30T08:19:52Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390294424",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 242,
      "original_line": 242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294541",
      "pull_request_review_id": 3283190939,
      "id": 2390294541,
      "node_id": "PRRC_kwDOABII586OeQAN",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])\n+        fill_mempool(self, self.nodes[0])\n+\n+        self.log.info(\"Test that we send a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_sent_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if there are multiple unconfirmed ancestors\")\n+        self.test_pkg_not_sent_if_multiple_unknown_ancestors()\n+\n+    @cleanup\n+    def test_pkg_received(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        # tell package_receiver about the low parent and wait for getdata\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+        package_sender.wait_for_getdata([low_parent_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # package_receiver does not accept low fee parent\n+        assert_equal(package_receiver.getrawmempool(), [])\n+\n+        # send pkgtxns with both txs upon high fee child getdata\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        package_sender.wait_for_getdata([high_child_wtxid_int])\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        # check that we now accept the package\n+        node_mempool = package_receiver.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_pkg_sent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_sender.getpeerinfo()[0][\"bytessent_per_msg\"])\n+\n+        assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)\n+        assert_equal(len(package_receiver._pkgtxns_received), 2)\n+        assert low_parent_wtxid_int in package_receiver._pkgtxns_received\n+        assert high_child_wtxid_int in package_receiver._pkgtxns_received\n+\n+    @cleanup\n+    def test_pkg_received_if_one_parent_known(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.send_and_ping(msg_tx(parent1[\"tx\"]))\n+        self.wait_until(lambda: parent1[\"txid\"] in package_receiver.getrawmempool())\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent2[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: (low_fee_parent2[\"txid\"] in package_receiver.getrawmempool()) and (high_fee_child[\"txid\"] in package_receiver.getrawmempool()))\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_known_parent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        self.nodes[0].setmocktime(int(time.time()))\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        package_receiver.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].bumpmocktime(600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_below_feefilter(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        current_time = int(time.time())\n+        self.nodes[0].setmocktime(current_time)\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(2000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000020000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].setmocktime(current_time+600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+    @cleanup\n+    def test_pkg_dropped_if_not_1p1c(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_child = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB*20, confirmed_only=True)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_child[\"tx\"], high_fee_child[\"tx\"]]))",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 256,
      "original_position": 256,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 256\r\n\r\nThe test `test_pkg_dropped_if_not_1p1c` sends a `pkgtxns` message that is not 1p1c and asserts that the mempool remains empty. While this confirms the package was not accepted, it could be more informative to explicitly check for rejection or logging of the invalid package, if such mechanisms are available and testable.\r\n\r\n**Suggestion:**\r\nIf possible, add checks for specific rejection messages or log entries that indicate the `pkgtxns` message was dropped due to not being 1p1c, rather than solely relying on the mempool state.",
      "created_at": "2025-09-30T08:19:54Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390294541",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294541"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 256,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294690",
      "pull_request_review_id": 3283190939,
      "id": 2390294690,
      "node_id": "PRRC_kwDOABII586OeQCi",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])\n+        fill_mempool(self, self.nodes[0])\n+\n+        self.log.info(\"Test that we send a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_sent_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if there are multiple unconfirmed ancestors\")\n+        self.test_pkg_not_sent_if_multiple_unknown_ancestors()\n+\n+    @cleanup\n+    def test_pkg_received(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        # tell package_receiver about the low parent and wait for getdata\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+        package_sender.wait_for_getdata([low_parent_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # package_receiver does not accept low fee parent\n+        assert_equal(package_receiver.getrawmempool(), [])\n+\n+        # send pkgtxns with both txs upon high fee child getdata\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        package_sender.wait_for_getdata([high_child_wtxid_int])\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        # check that we now accept the package\n+        node_mempool = package_receiver.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_pkg_sent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_sender.getpeerinfo()[0][\"bytessent_per_msg\"])\n+\n+        assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)\n+        assert_equal(len(package_receiver._pkgtxns_received), 2)\n+        assert low_parent_wtxid_int in package_receiver._pkgtxns_received\n+        assert high_child_wtxid_int in package_receiver._pkgtxns_received\n+\n+    @cleanup\n+    def test_pkg_received_if_one_parent_known(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.send_and_ping(msg_tx(parent1[\"tx\"]))\n+        self.wait_until(lambda: parent1[\"txid\"] in package_receiver.getrawmempool())\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent2[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: (low_fee_parent2[\"txid\"] in package_receiver.getrawmempool()) and (high_fee_child[\"txid\"] in package_receiver.getrawmempool()))\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_known_parent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        self.nodes[0].setmocktime(int(time.time()))\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        package_receiver.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].bumpmocktime(600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_below_feefilter(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        current_time = int(time.time())\n+        self.nodes[0].setmocktime(current_time)\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(2000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000020000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].setmocktime(current_time+600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+    @cleanup\n+    def test_pkg_dropped_if_not_1p1c(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_child = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB*20, confirmed_only=True)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_child[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_receiver.getpeerinfo()[0][\"bytesrecv_per_msg\"])\n+\n+        assert_equal(len(package_receiver.getrawmempool()), 0)\n+\n+    @cleanup\n+    def test_disconnect_if_no_tx_relay(self):\n+        self.restart_node(0, extra_args=[\"-blocksonly\", \"-packagerelay=1\"])",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 264,
      "original_position": 264,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 264\r\n\r\nThe test `test_disconnect_if_no_tx_relay` restarts the node with `-blocksonly`. The intention is to test disconnection when transaction relay is effectively disabled. However, the link between `-blocksonly` and the absence of transaction relay (specifically `wtxidrelay` or `sendpackages` capability negotiation) could be more clearly stated or verified. The `PackageRelayTest` class's `PackageRelayer` is initialized with `send_wtxidrelay=True` by default, which might not align with the `-blocksonly` node's capabilities.\r\n\r\n**Suggestion:**\r\nClarify in comments or by adjusting the `PackageRelayer` instantiation (e.g., `PackageRelayer(send_wtxidrelay=False)`) why the peer should disconnect. Ensure that the `PackageRelayer`'s `send_wtxidrelay` flag is set appropriately to reflect the expected behavior when the node is in `-blocksonly` mode.",
      "created_at": "2025-09-30T08:19:56Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390294690",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 264,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294898",
      "pull_request_review_id": 3283190939,
      "id": 2390294898,
      "node_id": "PRRC_kwDOABII586OeQFy",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])\n+        fill_mempool(self, self.nodes[0])\n+\n+        self.log.info(\"Test that we send a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_sent_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if there are multiple unconfirmed ancestors\")\n+        self.test_pkg_not_sent_if_multiple_unknown_ancestors()\n+\n+    @cleanup\n+    def test_pkg_received(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        # tell package_receiver about the low parent and wait for getdata\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+        package_sender.wait_for_getdata([low_parent_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # package_receiver does not accept low fee parent\n+        assert_equal(package_receiver.getrawmempool(), [])\n+\n+        # send pkgtxns with both txs upon high fee child getdata\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        package_sender.wait_for_getdata([high_child_wtxid_int])\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        # check that we now accept the package\n+        node_mempool = package_receiver.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_pkg_sent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_sender.getpeerinfo()[0][\"bytessent_per_msg\"])\n+\n+        assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)\n+        assert_equal(len(package_receiver._pkgtxns_received), 2)\n+        assert low_parent_wtxid_int in package_receiver._pkgtxns_received\n+        assert high_child_wtxid_int in package_receiver._pkgtxns_received\n+\n+    @cleanup\n+    def test_pkg_received_if_one_parent_known(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.send_and_ping(msg_tx(parent1[\"tx\"]))\n+        self.wait_until(lambda: parent1[\"txid\"] in package_receiver.getrawmempool())\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent2[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: (low_fee_parent2[\"txid\"] in package_receiver.getrawmempool()) and (high_fee_child[\"txid\"] in package_receiver.getrawmempool()))\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_known_parent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        self.nodes[0].setmocktime(int(time.time()))\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        package_receiver.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].bumpmocktime(600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_below_feefilter(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        current_time = int(time.time())\n+        self.nodes[0].setmocktime(current_time)\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(2000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000020000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].setmocktime(current_time+600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+    @cleanup\n+    def test_pkg_dropped_if_not_1p1c(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_child = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB*20, confirmed_only=True)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_child[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_receiver.getpeerinfo()[0][\"bytesrecv_per_msg\"])\n+\n+        assert_equal(len(package_receiver.getrawmempool()), 0)\n+\n+    @cleanup\n+    def test_disconnect_if_no_tx_relay(self):\n+        self.restart_node(0, extra_args=[\"-blocksonly\", \"-packagerelay=1\"])\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+\n+        package_sender.send_without_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        package_sender.wait_for_disconnect()\n+\n+    def test_pkg_sent_if_one_parent_known(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 2 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(2000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000020000\"))\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.sendrawtransaction(parent1[\"hex\"])\n+        self.wait_until(lambda: len(package_receiver._tx_received) == 1)\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent2[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: len(package_receiver._pkgtxns_received) == 2)\n+\n+        self.generate(self.nodes[0], 1)",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 299,
      "original_position": 299,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 299-300\r\n\r\nThis test manually generates a block and disconnects peers (`self.generate(self.nodes[0], 1)` and `self.nodes[0].disconnect_p2ps()`). This cleanup logic is duplicated within the test function itself, rather than relying on the `@cleanup` decorator. This can lead to inconsistencies and makes the test harder to maintain.\r\n\r\n**Suggestion:**\r\nApply the `@cleanup` decorator to `test_pkg_sent_if_one_parent_known` to handle the cleanup automatically and consistently, removing the manual cleanup steps from within the test function.",
      "created_at": "2025-09-30T08:19:59Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390294898",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390294898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 299,
      "original_line": 299,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295065",
      "pull_request_review_id": 3283190939,
      "id": 2390295065,
      "node_id": "PRRC_kwDOABII586OeQIZ",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])\n+        fill_mempool(self, self.nodes[0])\n+\n+        self.log.info(\"Test that we send a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_sent_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if there are multiple unconfirmed ancestors\")\n+        self.test_pkg_not_sent_if_multiple_unknown_ancestors()\n+\n+    @cleanup\n+    def test_pkg_received(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        # tell package_receiver about the low parent and wait for getdata\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+        package_sender.wait_for_getdata([low_parent_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # package_receiver does not accept low fee parent\n+        assert_equal(package_receiver.getrawmempool(), [])\n+\n+        # send pkgtxns with both txs upon high fee child getdata\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        package_sender.wait_for_getdata([high_child_wtxid_int])\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        # check that we now accept the package\n+        node_mempool = package_receiver.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_pkg_sent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_sender.getpeerinfo()[0][\"bytessent_per_msg\"])\n+\n+        assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)\n+        assert_equal(len(package_receiver._pkgtxns_received), 2)\n+        assert low_parent_wtxid_int in package_receiver._pkgtxns_received\n+        assert high_child_wtxid_int in package_receiver._pkgtxns_received\n+\n+    @cleanup\n+    def test_pkg_received_if_one_parent_known(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.send_and_ping(msg_tx(parent1[\"tx\"]))\n+        self.wait_until(lambda: parent1[\"txid\"] in package_receiver.getrawmempool())\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent2[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: (low_fee_parent2[\"txid\"] in package_receiver.getrawmempool()) and (high_fee_child[\"txid\"] in package_receiver.getrawmempool()))\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_known_parent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        self.nodes[0].setmocktime(int(time.time()))\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        package_receiver.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].bumpmocktime(600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_below_feefilter(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        current_time = int(time.time())\n+        self.nodes[0].setmocktime(current_time)\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(2000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000020000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].setmocktime(current_time+600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+    @cleanup\n+    def test_pkg_dropped_if_not_1p1c(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_child = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB*20, confirmed_only=True)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_child[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_receiver.getpeerinfo()[0][\"bytesrecv_per_msg\"])\n+\n+        assert_equal(len(package_receiver.getrawmempool()), 0)\n+\n+    @cleanup\n+    def test_disconnect_if_no_tx_relay(self):\n+        self.restart_node(0, extra_args=[\"-blocksonly\", \"-packagerelay=1\"])\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+\n+        package_sender.send_without_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        package_sender.wait_for_disconnect()\n+\n+    def test_pkg_sent_if_one_parent_known(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 2 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(2000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000020000\"))\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.sendrawtransaction(parent1[\"hex\"])\n+        self.wait_until(lambda: len(package_receiver._tx_received) == 1)\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent2[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: len(package_receiver._pkgtxns_received) == 2)\n+\n+        self.generate(self.nodes[0], 1)\n+        self.nodes[0].disconnect_p2ps()\n+\n+    def test_pkg_not_sent_if_multiple_unknown_ancestors(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        current_time = int(time.time())\n+        self.nodes[0].setmocktime(current_time)\n+\n+        # set a fee filter of 2 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(2000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000020000\"))\n+\n+        low_fee_parent1 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[low_fee_parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent1[\"hex\"], low_fee_parent2[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.nodes[0].setmocktime(current_time+600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+        self.nodes[0].disconnect_p2ps()",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 325,
      "original_position": 325,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 325\r\n\r\nThe test `test_pkg_not_sent_if_multiple_unknown_ancestors` includes a manual call to `self.nodes[0].disconnect_p2ps()`. This cleanup action is performed within the test function itself, rather than being managed by the `@cleanup` decorator. This duplication of cleanup logic can reduce maintainability and consistency.\r\n\r\n**Suggestion:**\r\nApply the `@cleanup` decorator to `test_pkg_not_sent_if_multiple_unknown_ancestors` to ensure that peer disconnection and other cleanup tasks are handled automatically and consistently, removing the manual call from the test function.",
      "created_at": "2025-09-30T08:20:01Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390295065",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 325,
      "original_line": 325,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295229",
      "pull_request_review_id": 3283190939,
      "id": 2390295229,
      "node_id": "PRRC_kwDOABII586OeQK9",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 37,
      "original_position": 37,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Issue\r\n\r\n**Type:** Maintainability | **Severity:** Low\r\n\r\n**Line:** 37-50\r\n\r\nThe `cleanup` decorator performs a block generation and disconnects all peers. This might be too aggressive for tests that need to inspect the state after the test function completes but before the test framework fully tears down. For example, if a test needs to check the mempool state after `func(self)` has run, the subsequent `self.generate(self.nodes[0], 1)` will clear it.\r\n\r\n**Fix:**\r\nConsider making the cleanup actions more granular or allowing tests to opt-out of specific cleanup steps if they need to preserve state. Alternatively, ensure that all assertions are made within the `try` block of the decorated function.",
      "created_at": "2025-09-30T08:20:03Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390295229",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295389",
      "pull_request_review_id": 3283190939,
      "id": 2390295389,
      "node_id": "PRRC_kwDOABII586OeQNd",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 113,
      "original_position": 113,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Issue\r\n\r\n**Type:** Maintainability | **Severity:** Low\r\n\r\n**Line:** 113\r\n\r\nThe `run_test` method restarts node 0 and fills its mempool, but the subsequent tests (`test_pkg_sent_if_one_parent_known` and `test_pkg_not_sent_if_multiple_unknown_ancestors`) are not decorated with `@cleanup`. This means that the state from `fill_mempool` and the restarted node might persist, potentially affecting the isolation of these tests.\r\n\r\n**Fix:**\r\nApply the `@cleanup` decorator to `test_pkg_sent_if_one_parent_known` and `test_pkg_not_sent_if_multiple_unknown_ancestors`, or add explicit state reset logic before these tests.",
      "created_at": "2025-09-30T08:20:05Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390295389",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 113,
      "original_line": 113,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295550",
      "pull_request_review_id": 3283190939,
      "id": 2390295550,
      "node_id": "PRRC_kwDOABII586OeQP-",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])\n+        fill_mempool(self, self.nodes[0])\n+\n+        self.log.info(\"Test that we send a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_sent_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if there are multiple unconfirmed ancestors\")\n+        self.test_pkg_not_sent_if_multiple_unknown_ancestors()\n+\n+    @cleanup\n+    def test_pkg_received(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        # tell package_receiver about the low parent and wait for getdata\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+        package_sender.wait_for_getdata([low_parent_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # package_receiver does not accept low fee parent\n+        assert_equal(package_receiver.getrawmempool(), [])\n+\n+        # send pkgtxns with both txs upon high fee child getdata\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        package_sender.wait_for_getdata([high_child_wtxid_int])\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        # check that we now accept the package\n+        node_mempool = package_receiver.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_pkg_sent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_sender.getpeerinfo()[0][\"bytessent_per_msg\"])\n+\n+        assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 169,
      "original_position": 169,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Issue\r\n\r\n**Type:** Maintainability | **Severity:** Low\r\n\r\n**Line:** 169\r\n\r\nThe test asserts an exact byte count (`291`) for the `pkgtxns` message. This is a fragile assertion that could fail due to minor changes in message serialization, even if the core functionality is working correctly. It makes the test less robust to future code modifications.\r\n\r\n**Fix:**\r\nRemove the assertion for the exact byte count. Focus on verifying the functional aspects of the package relay, such as the correct transactions being sent and received, or the expected behavior of the protocol.",
      "created_at": "2025-09-30T08:20:06Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390295550",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295550"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 169,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295760",
      "pull_request_review_id": 3283190939,
      "id": 2390295760,
      "node_id": "PRRC_kwDOABII586OeQTQ",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])\n+        fill_mempool(self, self.nodes[0])\n+\n+        self.log.info(\"Test that we send a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_sent_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if there are multiple unconfirmed ancestors\")\n+        self.test_pkg_not_sent_if_multiple_unknown_ancestors()\n+\n+    @cleanup\n+    def test_pkg_received(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        # tell package_receiver about the low parent and wait for getdata\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+        package_sender.wait_for_getdata([low_parent_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # package_receiver does not accept low fee parent\n+        assert_equal(package_receiver.getrawmempool(), [])\n+\n+        # send pkgtxns with both txs upon high fee child getdata\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        package_sender.wait_for_getdata([high_child_wtxid_int])\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        # check that we now accept the package\n+        node_mempool = package_receiver.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_pkg_sent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_sender.getpeerinfo()[0][\"bytessent_per_msg\"])\n+\n+        assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)\n+        assert_equal(len(package_receiver._pkgtxns_received), 2)\n+        assert low_parent_wtxid_int in package_receiver._pkgtxns_received\n+        assert high_child_wtxid_int in package_receiver._pkgtxns_received\n+\n+    @cleanup\n+    def test_pkg_received_if_one_parent_known(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.send_and_ping(msg_tx(parent1[\"tx\"]))\n+        self.wait_until(lambda: parent1[\"txid\"] in package_receiver.getrawmempool())\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent2[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: (low_fee_parent2[\"txid\"] in package_receiver.getrawmempool()) and (high_fee_child[\"txid\"] in package_receiver.getrawmempool()))\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_known_parent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        self.nodes[0].setmocktime(int(time.time()))",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 197,
      "original_position": 197,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Issue\r\n\r\n**Type:** Maintainability | **Severity:** Low\r\n\r\n**Line:** 197\r\n\r\nThese tests manipulate mock time using `setmocktime` and `bumpmocktime`. However, the `@cleanup` decorator resets the mock time to 0 at the end of each decorated test. This means that the time advancements made within these specific tests are effectively undone before the next test begins. If subsequent tests rely on a specific mock time state, this could lead to unexpected behavior.\r\n\r\n**Fix:**\r\nEnsure that time manipulation is handled consistently. If the time advancement is crucial for the test's assertion, consider if the `@cleanup` decorator's time reset is appropriate for these tests, or if the tests should manage their own time state more explicitly.",
      "created_at": "2025-09-30T08:20:08Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390295760",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 197,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295893",
      "pull_request_review_id": 3283190939,
      "id": 2390295893,
      "node_id": "PRRC_kwDOABII586OeQVV",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test sender-initiated package relay\"\"\"\n+\n+from decimal import Decimal\n+import time\n+\n+from test_framework.mempool_util import (\n+    fill_mempool,\n+)\n+from test_framework.messages import (\n+    CInv,\n+    msg_feefilter,\n+    msg_getdata,\n+    msg_inv,\n+    msg_pkgtxns,\n+    msg_sendpackages,\n+    msg_tx,\n+    msg_wtxidrelay,\n+    msg_verack,\n+    MSG_WTX,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n+from test_framework.util import assert_equal\n+\n+# 1sat/vB feerate denominated in BTC/KvB\n+FEERATE_1SAT_VB = Decimal(\"0.00001000\")\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+            # Reset time\n+            self.nodes[0].setmocktime(0)\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+        self._pkgtxns_received = []\n+        self._tx_received = []\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+    def on_pkgtxns(self, message):\n+        for tx in message.txns:\n+            self._pkgtxns_received.append(tx.wtxid_int)\n+\n+    def on_tx(self, message):\n+        self._tx_received.append(message.tx.wtxid_int)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\", \"-maxmempool=5\"]]\n+\n+    def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, 20)\n+\n+        self.log.info(\"Test that a node can receive a `pkgtxns` message\")\n+        self.test_pkg_received()\n+        self.log.info(\"Test that a node can send a `pkgtxns` message in the appropriate situation\")\n+        self.test_pkg_sent()\n+        self.log.info(\"Test that we can receive a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_received_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if the parent is known\")\n+        self.test_pkg_not_sent_if_known_parent()\n+        self.log.info(\"Test that a package is not sent if it is below the fee filter\")\n+        self.test_pkg_not_sent_if_below_feefilter()\n+        self.log.info(\"Test that a package is dropped by the node if it is not 1p1c\")\n+        self.test_pkg_dropped_if_not_1p1c()\n+        self.log.info(\"Test that we disconnect the peer if fRelay not sent\")\n+        self.test_disconnect_if_no_tx_relay()\n+\n+        # We need a different set-up for the following tests, and we don't run @cleanup\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        self.restart_node(0, extra_args=[\"-packagerelay=1\", \"-maxmempool=5\"])\n+        fill_mempool(self, self.nodes[0])\n+\n+        self.log.info(\"Test that we send a 1p1c package if there are two unconfirmed parents but one of them is known\")\n+        self.test_pkg_sent_if_one_parent_known()\n+        self.log.info(\"Test that a package is not sent if there are multiple unconfirmed ancestors\")\n+        self.test_pkg_not_sent_if_multiple_unknown_ancestors()\n+\n+    @cleanup\n+    def test_pkg_received(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        # tell package_receiver about the low parent and wait for getdata\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+        package_sender.wait_for_getdata([low_parent_wtxid_int])\n+        package_sender.send_and_ping(msg_tx(low_fee_parent[\"tx\"]))\n+\n+        # package_receiver does not accept low fee parent\n+        assert_equal(package_receiver.getrawmempool(), [])\n+\n+        # send pkgtxns with both txs upon high fee child getdata\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        package_sender.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=high_child_wtxid_int)]))\n+        package_sender.wait_for_getdata([high_child_wtxid_int])\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        # check that we now accept the package\n+        node_mempool = package_receiver.getrawmempool()\n+        assert low_fee_parent[\"txid\"] in node_mempool\n+        assert high_fee_child[\"txid\"] in node_mempool\n+\n+    @cleanup\n+    def test_pkg_sent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_sender.getpeerinfo()[0][\"bytessent_per_msg\"])\n+\n+        assert_equal(package_sender.getpeerinfo()[0][\"bytessent_per_msg\"][\"pkgtxns\"], 291)\n+        assert_equal(len(package_receiver._pkgtxns_received), 2)\n+        assert low_parent_wtxid_int in package_receiver._pkgtxns_received\n+        assert high_child_wtxid_int in package_receiver._pkgtxns_received\n+\n+    @cleanup\n+    def test_pkg_received_if_one_parent_known(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.send_and_ping(msg_tx(parent1[\"tx\"]))\n+        self.wait_until(lambda: parent1[\"txid\"] in package_receiver.getrawmempool())\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_parent2[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: (low_fee_parent2[\"txid\"] in package_receiver.getrawmempool()) and (high_fee_child[\"txid\"] in package_receiver.getrawmempool()))\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_known_parent(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        self.nodes[0].setmocktime(int(time.time()))\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(1000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000010000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        package_receiver.send_and_ping(msg_inv([CInv(t=MSG_WTX, h=low_parent_wtxid_int)]))\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].bumpmocktime(600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+    @cleanup\n+    def test_pkg_not_sent_if_below_feefilter(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        current_time = int(time.time())\n+        self.nodes[0].setmocktime(current_time)\n+\n+        # set a fee filter of 1 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(2000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000020000\"))\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=FEERATE_1SAT_VB, version=3)\n+\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        # move time ahead\n+        self.nodes[0].setmocktime(current_time+600)\n+\n+        assert_equal(len(package_receiver._pkgtxns_received), 0)\n+        assert_equal(len(package_receiver._tx_received), 0)\n+\n+    @cleanup\n+    def test_pkg_dropped_if_not_1p1c(self):\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_child = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB*20, confirmed_only=True)\n+\n+        # submit package to package_sender's mempool\n+        package_sender.send_and_ping(msg_pkgtxns(txns=[low_fee_child[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        self.wait_until(lambda: \"pkgtxns\" in package_receiver.getpeerinfo()[0][\"bytesrecv_per_msg\"])\n+\n+        assert_equal(len(package_receiver.getrawmempool()), 0)\n+\n+    @cleanup\n+    def test_disconnect_if_no_tx_relay(self):\n+        self.restart_node(0, extra_args=[\"-blocksonly\", \"-packagerelay=1\"])\n+        package_receiver = self.nodes[0]\n+        package_sender = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        low_fee_parent = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB/2, confirmed_only=True, version=3)\n+        high_fee_child = self.wallet.create_self_transfer(utxo_to_spend=low_fee_parent[\"new_utxo\"], fee_rate=40*FEERATE_1SAT_VB, version=3)\n+\n+        low_parent_wtxid_int = low_fee_parent[\"tx\"].wtxid_int\n+        high_child_wtxid_int = high_fee_child[\"tx\"].wtxid_int\n+\n+        package_sender.send_without_ping(msg_pkgtxns(txns=[low_fee_parent[\"tx\"], high_fee_child[\"tx\"]]))\n+\n+        package_sender.wait_for_disconnect()\n+\n+    def test_pkg_sent_if_one_parent_known(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        # set a fee filter of 2 sat/byte\n+        package_receiver.send_and_ping(msg_feefilter(2000))\n+        self.wait_until(lambda: package_sender.getpeerinfo()[0][\"minfeefilter\"] == Decimal(\"0.000020000\"))\n+\n+        parent1 = self.wallet.create_self_transfer(fee_rate=20*FEERATE_1SAT_VB, confirmed_only=True)\n+\n+        package_sender.sendrawtransaction(parent1[\"hex\"])\n+        self.wait_until(lambda: len(package_receiver._tx_received) == 1)\n+\n+        low_fee_parent2 = self.wallet.create_self_transfer(fee_rate=FEERATE_1SAT_VB, confirmed_only=True)\n+        high_fee_child = self.wallet.create_self_transfer_multi(utxos_to_spend=[parent1[\"new_utxo\"], low_fee_parent2[\"new_utxo\"]], fee_per_output=4000)\n+\n+        # submit package to package_sender's mempool\n+        assert_equal(package_sender.submitpackage([low_fee_parent2[\"hex\"], high_fee_child[\"hex\"]])[\"package_msg\"], \"success\")\n+\n+        self.wait_until(lambda: len(package_receiver._pkgtxns_received) == 2)\n+\n+        self.generate(self.nodes[0], 1)\n+        self.nodes[0].disconnect_p2ps()\n+\n+    def test_pkg_not_sent_if_multiple_unknown_ancestors(self):\n+        package_sender = self.nodes[0]\n+        package_receiver = self.nodes[0].add_p2p_connection(PackageRelayer())\n+\n+        current_time = int(time.time())\n+        self.nodes[0].setmocktime(current_time)",
      "path": "test/functional/p2p_sender_init_package_relay.py",
      "position": 307,
      "original_position": 307,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Issue\r\n\r\n**Type:** Maintainability | **Severity:** Low\r\n\r\n**Line:** 307\r\n\r\nThis test uses `setmocktime` to manipulate the node's time. As with other tests employing mock time and the `@cleanup` decorator, the decorator's action of resetting mock time to 0 at the end of the test might negate the intended effect of the time manipulation for subsequent tests or lead to unexpected behavior if other tests rely on a specific time state.\r\n\r\n**Fix:**\r\nEvaluate the necessity of mock time manipulation in this context. If time advancement is critical, consider how it interacts with the `@cleanup` decorator's reset behavior. Ensure that test isolation is maintained regarding time-dependent states.",
      "created_at": "2025-09-30T08:20:10Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390295893",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390295893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 307,
      "original_line": 307,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296055",
      "pull_request_review_id": 3283190939,
      "id": 2390296055,
      "node_id": "PRRC_kwDOABII586OeQX3",
      "diff_hunk": "@@ -0,0 +1,128 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test package relay messages\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendpackages,\n+    msg_verack,\n+    msg_version,\n+    msg_wtxidrelay,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+def cleanup(func):",
      "path": "test/functional/p2p_sendpackages.py",
      "position": 27,
      "original_position": 27,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Lines:** 27-37\r\n\r\nThe `cleanup` decorator performs a full block generation and disconnects all peers. This might be overly aggressive for certain test scenarios where only specific cleanup is required. Consider making the cleanup process more granular or configurable to allow for more targeted cleanup operations per test case.",
      "created_at": "2025-09-30T08:20:12Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390296055",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296218",
      "pull_request_review_id": 3283190939,
      "id": 2390296218,
      "node_id": "PRRC_kwDOABII586OeQaa",
      "diff_hunk": "@@ -0,0 +1,128 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test package relay messages\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendpackages,\n+    msg_verack,\n+    msg_version,\n+    msg_wtxidrelay,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):",
      "path": "test/functional/p2p_sendpackages.py",
      "position": 40,
      "original_position": 40,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 40\r\n\r\nThe `PackageRelayer` constructor takes multiple boolean arguments (`send_sendpackages`, `send_wtxidrelay`). If additional configuration options are introduced in the future, this could lead to a long and less readable constructor signature. Consider using a configuration dictionary or a dedicated options object to pass these settings, which would be more scalable and maintainable.",
      "created_at": "2025-09-30T08:20:14Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390296218",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296355",
      "pull_request_review_id": 3283190939,
      "id": 2390296355,
      "node_id": "PRRC_kwDOABII586OeQcj",
      "diff_hunk": "@@ -0,0 +1,128 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test package relay messages\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendpackages,\n+    msg_verack,\n+    msg_version,\n+    msg_wtxidrelay,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\"]]\n+\n+    @cleanup\n+    def test_sendpackages(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Test sendpackages during version handshake\")\n+        peer_normal = node.add_p2p_connection(PackageRelayer())",
      "path": "test/functional/p2p_sendpackages.py",
      "position": 75,
      "original_position": 75,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Lines:** 75-79\r\n\r\nThe test `test_sendpackages` contains several blocks that follow a similar pattern: adding a P2P connection, performing assertions on `sendpackages_received` and `relaytxpackages`, and then disconnecting. This repetition can be reduced by extracting this common logic into a helper method. This would improve the readability and maintainability of the test function.",
      "created_at": "2025-09-30T08:20:16Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390296355",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296437",
      "pull_request_review_id": 3283190939,
      "id": 2390296437,
      "node_id": "PRRC_kwDOABII586OeQd1",
      "diff_hunk": "@@ -0,0 +1,128 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test package relay messages\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendpackages,\n+    msg_verack,\n+    msg_version,\n+    msg_wtxidrelay,\n+    PKG_RELAY_PKGTXNS,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+)\n+\n+def cleanup(func):\n+    def wrapper(self):\n+        assert len(self.nodes[0].getpeerinfo()) == 0\n+        assert len(self.nodes[0].getrawmempool()) == 0\n+        try:\n+            func(self)\n+        finally:\n+            # Clear mempool\n+            self.generate(self.nodes[0], 1)\n+            self.nodes[0].disconnect_p2ps()\n+    return wrapper\n+\n+class PackageRelayer(P2PInterface):\n+    def __init__(self, send_sendpackages=True, send_wtxidrelay=True):\n+        super().__init__()\n+        # List versions of each sendpackages received\n+        self._sendpackages_received = []\n+        self._send_sendpackages = send_sendpackages\n+        self._send_wtxidrelay = send_wtxidrelay\n+\n+    @property\n+    def sendpackages_received(self):\n+        with p2p_lock:\n+            return self._sendpackages_received\n+\n+    def on_version(self, message):\n+        if self._send_wtxidrelay:\n+            self.send_without_ping(msg_wtxidrelay())\n+        if self._send_sendpackages:\n+            sendpackages_message = msg_sendpackages()\n+            sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+            self.send_without_ping(sendpackages_message)\n+        self.send_without_ping(msg_verack())\n+        self.nServices = message.nServices\n+\n+    def on_sendpackages(self, message):\n+        self._sendpackages_received.append(message.versions)\n+\n+class PackageRelayTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-packagerelay=1\"]]\n+\n+    @cleanup\n+    def test_sendpackages(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Test sendpackages during version handshake\")\n+        peer_normal = node.add_p2p_connection(PackageRelayer())\n+        assert peer_normal._sendpackages_received\n+        assert_equal(peer_normal._sendpackages_received, [PKG_RELAY_PKGTXNS])\n+        assert node.getpeerinfo()[0][\"relaytxpackages\"]\n+        node.disconnect_p2ps()\n+\n+        self.log.info(\"Test sendpackages without wtxid relay\")\n+        peer_no_wtxidrelay = node.add_p2p_connection(PackageRelayer(send_wtxidrelay=False))\n+        assert_equal(peer_no_wtxidrelay.sendpackages_received, [PKG_RELAY_PKGTXNS])\n+        assert not node.getpeerinfo()[0][\"relaytxpackages\"]\n+        node.disconnect_p2ps()\n+\n+        self.log.info(\"Test sendpackages when fRelay is false\")\n+        node = self.nodes[0]\n+        peer_no_frelay = node.add_p2p_connection(PackageRelayer(), send_version=False, wait_for_verack=False)\n+        version_message = msg_version()\n+        version_message.nVersion = 70015\n+        version_message.strSubVer = P2P_SUBVERSION\n+        version_message.nServices = P2P_SERVICES\n+        version_message.relay = 1\n+        peer_no_frelay.send_without_ping(version_message)\n+        peer_no_frelay.wait_for_verack()\n+        assert not node.getpeerinfo()[0][\"relaytxpackages\"]\n+        self.nodes[0].disconnect_p2ps()\n+\n+        self.log.info(\"Test sendpackages is received even if we don't send it\")\n+        node = self.nodes[0]\n+        peer_no_sendpackages = node.add_p2p_connection(PackageRelayer(send_sendpackages=False))\n+        # Sendpackages should still be sent\n+        assert_equal(node.getpeerinfo()[0][\"bytessent_per_msg\"][\"sendpackages\"], 32)\n+        assert_equal(peer_no_sendpackages.sendpackages_received, [PKG_RELAY_PKGTXNS])\n+        assert \"sendpackages\" not in node.getpeerinfo()[0][\"bytesrecv_per_msg\"]\n+        assert not node.getpeerinfo()[0][\"relaytxpackages\"]\n+        node.disconnect_p2ps()\n+\n+        self.log.info(\"Test disconnection if sendpackages is sent after version handshake\")\n+        peer_sendpackages_after_verack = node.add_p2p_connection(PackageRelayer(), send_version=True, wait_for_verack=True)\n+        sendpackages_message = msg_sendpackages()\n+        sendpackages_message.versions = PKG_RELAY_PKGTXNS\n+        peer_sendpackages_after_verack.send_without_ping(sendpackages_message)\n+        peer_sendpackages_after_verack.wait_for_disconnect()\n+\n+        self.log.info(\"Test sendpackages on a blocksonly node\")\n+\n+        self.restart_node(0, extra_args=[\"-blocksonly\"])",
      "path": "test/functional/p2p_sendpackages.py",
      "position": 119,
      "original_position": 119,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Lines:** 119-122\r\n\r\nThe test restarts the node with the `-blocksonly` argument. The `cleanup` decorator, as implemented, does not explicitly revert this change. If this test were to be run in conjunction with other tests, the node might remain in a `blocksonly` state, affecting subsequent test executions. The cleanup process should ensure that the node is returned to its default configuration or a known clean state after the test.",
      "created_at": "2025-09-30T08:20:17Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390296437",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 119,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296527",
      "pull_request_review_id": 3283190939,
      "id": 2390296527,
      "node_id": "PRRC_kwDOABII586OeQfP",
      "diff_hunk": "@@ -157,6 +157,7 @@ def test_getpeerinfo(self):\n                 \"id\": no_version_peer_id,\n                 \"inbound\": True,\n                 \"inflight\": [],\n+                \"relaytxpackages\" : False,",
      "path": "test/functional/rpc_net.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 160\r\n\r\nThe key `relaytxpackages` is being added to the peer information dictionary. If this represents a new field or a change in the expected output of `getpeerinfo`, it should be documented in the relevant RPC documentation to inform users of the change.",
      "created_at": "2025-09-30T08:20:19Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390296527",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296527"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296659",
      "pull_request_review_id": 3283190939,
      "id": 2390296659,
      "node_id": "PRRC_kwDOABII586OeQhT",
      "diff_hunk": "@@ -1903,6 +1905,42 @@ def __repr__(self):\n         return \"msg_sendtxrcncl(version=%lu, salt=%lu)\" %\\\n             (self.version, self.salt)\n \n+class msg_sendpackages:\n+    __slots__ = (\"versions\")",
      "path": "test/functional/test_framework/messages.py",
      "position": 14,
      "original_position": 14,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 1909\r\n\r\nWhen defining `__slots__` with a single element, it should be defined as a tuple with a trailing comma to avoid ambiguity. Currently, `__slots__ = ('versions')` is interpreted as a string, not a tuple. The correct way to define it is `__slots__ = ('versions',)`.",
      "created_at": "2025-09-30T08:20:21Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390296659",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1909,
      "original_line": 1909,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296812",
      "pull_request_review_id": 3283190939,
      "id": 2390296812,
      "node_id": "PRRC_kwDOABII586OeQjs",
      "diff_hunk": "@@ -1903,6 +1905,42 @@ def __repr__(self):\n         return \"msg_sendtxrcncl(version=%lu, salt=%lu)\" %\\\n             (self.version, self.salt)\n \n+class msg_sendpackages:\n+    __slots__ = (\"versions\")\n+    msgtype = b\"sendpackages\"\n+\n+    def __init__(self):\n+        self.versions = 0\n+\n+    def deserialize(self, f):\n+        self.versions = int.from_bytes(f.read(8), \"little\")\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.versions.to_bytes(8, \"little\")\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_sendpackages(versions={})\".format(self.versions)\n+\n+class msg_pkgtxns:\n+    __slots__ = (\"txns\")",
      "path": "test/functional/test_framework/messages.py",
      "position": 32,
      "original_position": 32,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 1927\r\n\r\nWhen defining `__slots__` with a single element, it should be defined as a tuple with a trailing comma to avoid ambiguity. Currently, `__slots__ = ('txns')` is interpreted as a string, not a tuple. The correct way to define it is `__slots__ = ('txns',)`.",
      "created_at": "2025-09-30T08:20:23Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390296812",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1927,
      "original_line": 1927,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296977",
      "pull_request_review_id": 3283190939,
      "id": 2390296977,
      "node_id": "PRRC_kwDOABII586OeQmR",
      "diff_hunk": "@@ -551,10 +555,12 @@ def on_headers(self, message): pass\n     def on_mempool(self, message): pass\n     def on_merkleblock(self, message): pass\n     def on_notfound(self, message): pass\n+    def on_pkgtxns(self, message): pass",
      "path": "test/functional/test_framework/p2p.py",
      "position": 30,
      "original_position": 30,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Code Issue\r\n\r\n**Lines:** 558-558\r\n\r\n```python\r\ndef on_pkgtxns(self, message): pass\r\n```\r\n\r\nThis method is defined but does not implement any logic, only `pass`. This suggests that the `pkgtxns` message type is not being handled, which might be an oversight if this message is expected to be processed.",
      "created_at": "2025-09-30T08:20:25Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390296977",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390296977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 558,
      "original_line": 558,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390297169",
      "pull_request_review_id": 3283190939,
      "id": 2390297169,
      "node_id": "PRRC_kwDOABII586OeQpR",
      "diff_hunk": "@@ -551,10 +555,12 @@ def on_headers(self, message): pass\n     def on_mempool(self, message): pass\n     def on_merkleblock(self, message): pass\n     def on_notfound(self, message): pass\n+    def on_pkgtxns(self, message): pass\n     def on_pong(self, message): pass\n     def on_sendaddrv2(self, message): pass\n     def on_sendcmpct(self, message): pass\n     def on_sendheaders(self, message): pass\n+    def on_sendpackages(self, message): pass",
      "path": "test/functional/test_framework/p2p.py",
      "position": 35,
      "original_position": 35,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## ⚠️ Code Issue\r\n\r\n**Lines:** 563-563\r\n\r\n```python\r\ndef on_sendpackages(self, message): pass\r\n```\r\n\r\nThis method is defined but does not implement any logic, only `pass`. This suggests that the `sendpackages` message type is not being handled, which might be an oversight if this message is expected to be processed.",
      "created_at": "2025-09-30T08:20:26Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390297169",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390297169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 563,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390297351",
      "pull_request_review_id": 3283190939,
      "id": 2390297351,
      "node_id": "PRRC_kwDOABII586OeQsH",
      "diff_hunk": "@@ -176,6 +176,8 @@\n     'wallet_txn_clone.py --segwit',\n     'rpc_getchaintips.py',\n     'rpc_misc.py',\n+    'p2p_sendpackages.py',",
      "path": "test/functional/test_runner.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "original_commit_id": "4ec9d9230ee02c758d588be5afd56b07691c24ed",
      "in_reply_to_id": null,
      "user": {
        "login": "starkshade",
        "id": 234865730,
        "node_id": "U_kgDODf_EQg",
        "avatar_url": "https://avatars.githubusercontent.com/u/234865730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/starkshade",
        "html_url": "https://github.com/starkshade",
        "followers_url": "https://api.github.com/users/starkshade/followers",
        "following_url": "https://api.github.com/users/starkshade/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/starkshade/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/starkshade/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/starkshade/subscriptions",
        "organizations_url": "https://api.github.com/users/starkshade/orgs",
        "repos_url": "https://api.github.com/users/starkshade/repos",
        "events_url": "https://api.github.com/users/starkshade/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/starkshade/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "## 💡 Improvement Needed\r\n\r\n**Line:** 179-180\r\n\r\nConsider grouping related test files for better organization and readability. For example, 'p2p_sendpackages.py' and 'p2p_sender_init_package_relay.py' could be grouped together.",
      "created_at": "2025-09-30T08:20:29Z",
      "updated_at": "2025-09-30T08:20:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/33500#discussion_r2390297351",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2390297351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/33500"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": 179,
      "side": "RIGHT"
    }
  ]
}