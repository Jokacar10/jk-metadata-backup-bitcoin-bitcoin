{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660",
    "id": 2020979175,
    "node_id": "PR_kwDOABII5854dbHn",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30660",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30660.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30660.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/b19439b1eee57041fc37dcf509d5ee9f248263bc",
    "number": 30660,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "qa: Verify clean shutdown on startup failure",
    "user": {
      "login": "hodlinator",
      "id": 172445034,
      "node_id": "U_kgDOCkdNag",
      "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hodlinator",
      "html_url": "https://github.com/hodlinator",
      "followers_url": "https://api.github.com/users/hodlinator/followers",
      "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
      "organizations_url": "https://api.github.com/users/hodlinator/orgs",
      "repos_url": "https://api.github.com/users/hodlinator/repos",
      "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/hodlinator/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Improves handling of startup errors in functional tests and puts tests in place to ensure knock-on errors don't creep in.\r\n- `wait_for_rpc_connection()` now appends specific failures leading up to the `Unable to connect to bitcoind` error to that error message:\r\n  `[node 0] Unable to connect to bitcoind after 60s (ignored errors: {'missing_credentials': 1, 'OSError.ECONNREFUSED': 239}, latest error: ConnectionRefusedError(111, 'Connection refused'))`\r\n- Fixes Windows Python issue where `socket.timeout` exceptions end up with unset `errno`-fields.\r\n- Also adds comments, refactors code, improves logging.\r\n\r\nThe underlying purpose is to ensure developer efficiency in finding root causes of test failures.\r\n\r\nPrior iterations of the PR partially focused on fixing the same issue as #31620.\r\nOriginally inspired by #30390.\r\n\r\n### Testing\r\n\r\nCan be tested by reverting either faf2f2c654d9aa18b2f49a157956f9ab0fce302a or fae3bf6b870eb0f9cddd1adac82ba72890806ae3 from #31620, or the \"qa: Avoid calling stop-RPC if not connected\" from this PR, and running *feature_framework_startup_failures.py*.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2024-08-15T11:53:45Z",
    "updated_at": "2025-04-26T20:21:05Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merged": false,
    "merge_commit_sha": "507451bb972949768bae19f139e86a376f9bdaa4",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "hodlinator:2024-08/test_node_rpc_connection_failure",
      "ref": "2024-08/test_node_rpc_connection_failure",
      "sha": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 813856282,
        "node_id": "R_kgDOMIJ2Gg",
        "name": "bitcoin",
        "full_name": "hodlinator/bitcoin",
        "owner": {
          "login": "hodlinator",
          "id": 172445034,
          "node_id": "U_kgDOCkdNag",
          "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/hodlinator",
          "html_url": "https://github.com/hodlinator",
          "followers_url": "https://api.github.com/users/hodlinator/followers",
          "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
          "organizations_url": "https://api.github.com/users/hodlinator/orgs",
          "repos_url": "https://api.github.com/users/hodlinator/repos",
          "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/hodlinator/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/hodlinator/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/hodlinator/bitcoin",
        "archive_url": "https://api.github.com/repos/hodlinator/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/hodlinator/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/hodlinator/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/hodlinator/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/hodlinator/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/hodlinator/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/hodlinator/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/hodlinator/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/hodlinator/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/hodlinator/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/hodlinator/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/hodlinator/bitcoin/events",
        "forks_url": "https://api.github.com/repos/hodlinator/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/hodlinator/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/hodlinator/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/hodlinator/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/hodlinator/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/hodlinator/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/hodlinator/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/hodlinator/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/hodlinator/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/hodlinator/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/hodlinator/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/hodlinator/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/hodlinator/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/hodlinator/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/hodlinator/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:hodlinator/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/hodlinator/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/hodlinator/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/hodlinator/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/hodlinator/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/hodlinator/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/hodlinator/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/hodlinator/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/hodlinator/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/hodlinator/bitcoin/hooks",
        "svn_url": "https://github.com/hodlinator/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 238947,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-26T20:21:01Z",
        "created_at": "2024-06-11T22:00:51Z",
        "updated_at": "2025-03-09T08:58:35Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "d2ac748e9e7a92503af1729f2397778979cdd240",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37121,
        "stargazers_count": 83048,
        "watchers_count": 83048,
        "size": 280478,
        "default_branch": "master",
        "open_issues_count": 711,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-26T12:46:02Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-04-26T20:52:23Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 216,
    "deletions": 30,
    "changed_files": 4,
    "commits": 6,
    "review_comments": 159,
    "comments": 31
  },
  "events": [
    {
      "event": "commented",
      "id": 2291135616,
      "node_id": "IC_kwDOABII586Ij_SA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2291135616",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T11:53:48Z",
      "updated_at": "2025-04-26T19:48:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/30660.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Stale ACK | [tdb3](https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2425524929), [m3dwards](https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2491116799), [ryanofsky](https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2784838614), [l0rinc](https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2832401037) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.\n<!--5faf32d7da4f0f540f40219e4f7537a3-->",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2291135616",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "labeled",
      "id": 13894930195,
      "node_id": "LE_lADOABII586TGVLXzwAAAAM8M88T",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13894930195",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T11:53:50Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "commented",
      "id": 2291136157,
      "node_id": "IC_kwDOABII586Ij_ad",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2291136157",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T11:54:15Z",
      "updated_at": "2024-08-15T11:54:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Encountered a case of #30390 here:\r\nhttps://github.com/bitcoin/bitcoin/actions/runs/10380115902/job/28739417666?pr=30377\r\n\r\nOutput with only the test (no fix commit):\r\n```\r\n$ test/functional/feature_framework_rpc_failure.py\r\n2024-08-15T07:30:20.427000Z TestFramework (INFO): PRNG seed is: 635212259632049987\r\n2024-08-15T07:30:20.427000Z TestFramework (INFO): Initializing test directory /run/user/1001/bitcoin_func_test_ujsvbdnm\r\n2024-08-15T07:30:20.428000Z TestFramework (INFO): Forcing us to timeout instantly to simulate an unresponsive bitcoind\r\n2024-08-15T07:30:20.429000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 569, in start_nodes\r\n    node.wait_for_rpc_connection()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_node.py\", line 329, in wait_for_rpc_connection\r\n    self._raise_assertion_error(\"Unable to connect to bitcoind after {}s\".format(self.rpc_timeout))\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_node.py\", line 192, in _raise_assertion_error\r\n    raise AssertionError(self._node_msg(msg))\r\nAssertionError: [node 0] Unable to connect to bitcoind after 0s\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/hodlinator/bitcoin/test/functional/feature_framework_rpc_failure.py\", line 21, in setup_network\r\n    BitcoinTestFramework.setup_network(self)\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 396, in setup_network\r\n    self.setup_nodes()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 418, in setup_nodes\r\n    self.start_nodes()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 572, in start_nodes\r\n    self.stop_nodes()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 587, in stop_nodes\r\n    node.stop_node(wait=wait, wait_until_stopped=False)\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_node.py\", line 390, in stop_node\r\n    self.stop(wait=wait)\r\n    ^^^^^^^^^\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_node.py\", line 209, in __getattr__\r\n    assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: [node 0] Error: no RPC connection\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 131, in main\r\n    self.setup()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 302, in setup\r\n    self.setup_network()\r\n  File \"/home/hodlinator/bitcoin/test/functional/feature_framework_rpc_failure.py\", line 23, in setup_network\r\n    assert_equal(str(e), \"[node 0] Unable to connect to bitcoind after 0s\")\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/util.py\", line 75, in assert_equal\r\n    raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\r\nAssertionError: not([node 0] Error: no RPC connection == [node 0] Unable to connect to bitcoind after 0s)\r\n2024-08-15T07:30:20.480000Z TestFramework (INFO): Stopping nodes\r\nTraceback (most recent call last):\r\n  File \"/home/hodlinator/bitcoin/test/functional/feature_framework_rpc_failure.py\", line 32, in <module>\r\n    FeatureFrameworkRPCFailure(__file__).main()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 155, in main\r\n    exit_code = self.shutdown()\r\n                ^^^^^^^^^^^^^^^\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 318, in shutdown\r\n    self.stop_nodes()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 587, in stop_nodes\r\n    node.stop_node(wait=wait, wait_until_stopped=False)\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_node.py\", line 390, in stop_node\r\n    self.stop(wait=wait)\r\n    ^^^^^^^^^\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_node.py\", line 209, in __getattr__\r\n    assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: [node 0] Error: no RPC connection\r\n[node 0] Cleaning up leftover process\r\n```\r\n\r\nWith fix:\r\n```\r\n$ test/functional/feature_framework_rpc_failure.py\r\n2024-08-15T07:30:05.092000Z TestFramework (INFO): PRNG seed is: 1672695534155872365\r\n2024-08-15T07:30:05.092000Z TestFramework (INFO): Initializing test directory /run/user/1001/bitcoin_func_test_cow4vrf7\r\n2024-08-15T07:30:05.093000Z TestFramework (INFO): Forcing us to timeout instantly to simulate an unresponsive bitcoind\r\n2024-08-15T07:30:05.094000Z TestFramework.node0 (WARNING): Cannot call stop-RPC as we are not connected. Killing process 326500.\r\n2024-08-15T07:30:05.144000Z TestFramework (INFO): Caught AssertionError with expected message\r\n2024-08-15T07:30:05.194000Z TestFramework (INFO): Stopping nodes\r\n2024-08-15T07:30:05.194000Z TestFramework (INFO): Cleaning up /run/user/1001/bitcoin_func_test_cow4vrf7 on exit\r\n2024-08-15T07:30:05.194000Z TestFramework (INFO): Tests successful\r\n```",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2291136157",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "commented",
      "id": 2291183910,
      "node_id": "IC_kwDOABII586IkLEm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2291183910",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T12:32:10Z",
      "updated_at": "2024-08-15T12:32:10Z",
      "author_association": "MEMBER",
      "body": "Can you explain this a bit more? I think optimizing the test framework to cleanly shut down on a failure is a bit premature, and may not be needed. However, if a failing test may leave behind a dangling bitcoind process, this seems like something to fix, because it will otherwise lead to test warnings and failures down the road.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2291183910",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13922841561,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAM93bPZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13922841561",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bcc87514e780cd35d1f71d5c4c4069a8fac95324",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/bcc87514e780cd35d1f71d5c4c4069a8fac95324",
      "created_at": "2024-08-18T20:10:11Z"
    },
    {
      "event": "commented",
      "id": 2295379703,
      "node_id": "IC_kwDOABII586I0Lb3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2295379703",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-18T20:23:33Z",
      "updated_at": "2024-08-18T20:31:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Can you explain this a bit more? I think optimizing the test framework to cleanly shut down on a failure is a bit premature, and may not be needed.\r\n\r\nAs long as the additional complexity and maintenance burden is low, I think it is worth having a cleaner shutdown to avoid muddying the waters for people trying to figure out root causes.\r\n\r\n> However, if a failing test may leave behind a dangling bitcoind process, this seems like something to fix, because it will otherwise lead to test warnings and failures down the road.\r\n\r\nIt does clean up dangling bitcoind processes without the fix, as can be seen in the log:\r\n```\r\n[node 0] Cleaning up leftover process\r\n```\r\nThe latest push (~bcc87514e780cd35d1f71d5c4c4069a8fac95324~ 0ea00cddc3d4a3f92c6bfae13a8b844e97ebc8c3) now explains in the log message that it is terminating the process to avoid `wait_until_stopped` timing out (which raises an additional exception).\r\n\r\n\\+ Broke out a commit adding the `self.expected_ret_code` functionality, so that the fix commit in the middle is clearer.\r\n\\+ Attempted to make the comment at the top of the test file more explanatory.\r\n\\+ ~Switched from `process.kill()` to the somewhat less aggressive `process.terminate()` (although on second thoughts, if the RPC interface is not responding in a real-world situation outside of the added test, maybe `.kill()` is closer to what we want).~",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2295379703",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13922875317,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAM93je1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13922875317",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0ea00cddc3d4a3f92c6bfae13a8b844e97ebc8c3",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/0ea00cddc3d4a3f92c6bfae13a8b844e97ebc8c3",
      "created_at": "2024-08-18T20:29:55Z"
    },
    {
      "event": "commented",
      "id": 2311026632,
      "node_id": "IC_kwDOABII586Jv3fI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2311026632",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-26T20:27:30Z",
      "updated_at": "2024-08-26T20:50:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Last week I was [hit by this again](https://github.com/hodlinator/bitcoin/actions/runs/10491632082/job/29061229925#step:27:98). Probably line ending differences on Windows makes any additional Python exception reporting extra annoying to read due to every second line being blank (separate issue, but slightly improved by this PR producing less output).\r\n\r\n### Git-sleuthing to help motivate this PR\r\n#### Was this ever working?\r\nUnfortunately for my case, it seems the answer is no:\r\n7897338918dac072e788b8ab2919d4559f311bef (Aug, 2017) broke out **test_node.py** from **test_framework.py** added the `self.rpc_connected` flag. Would have been nice if it had protected use of the `stop()` RPC using this new flag (like in this PR) but unfortunately it did not.\r\n\r\n#### Fixes in the same area\r\n\r\nfafb33cdefd2d8ce065263978075d26a1672b630 (May, 2016) MarcoFalke wrapped `stop()` attempts in `try`/`except` so at least *other nodes* would have a chance of [shutting down properly](https://github.com/bitcoin/bitcoin/pull/7971#issuecomment-215962540). (6 days later in fab5233fe6c99d446a2cebc48cf479c3f026c2cc a timeout for waiting on the process to shutdown was added too, probably so the tests wouldn't hang waiting for a non-crashed `bitcoind` that we failed to send `stop()` to).\r\n\r\n#14670 (Dec, 2018) is tangential and adds **test/functional/feature_shutdown.py** in 28479f926f21f2a91bec5a06671c60e5b0c55532, to ensure that HTTP responses for `stop()` make it all the way back to the client if I'm understanding it correctly. It fixes #11777 (Nov, 2017) which is arguably about shutdowns not being clean enough (sometimes showing additional errors depending on timing). The current PR is certainly more nit-level, but still continuing in the same general direction.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2311026632",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "commented",
      "id": 2311186892,
      "node_id": "IC_kwDOABII586JwenM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2311186892",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-26T22:07:37Z",
      "updated_at": "2024-08-26T22:07:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Another argument for this PR is that even the current title of #30390 is \"ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it\". This in itself when looking at logs like https://github.com/bitcoin/bitcoin/actions/runs/9677128783/job/26698120754#step:27:225 is actually just a knock-on exception happening after the RPC connection attempt times out and `stop()`-RPC is called in vain:\r\n<details>\r\n<summary>Copied log excerpt</summary>\r\n\r\n```\r\n313/313 - wallet_listsinceblock.py --legacy-wallet failed, Duration: 2415 s\r\nstdout:\r\n2024-06-26T09:53:17.196000Z TestFramework (INFO): PRNG seed is: 3062882430636553844\r\n2024-06-26T09:53:17.227000Z TestFramework (INFO): Initializing test directory D:\\a\\_temp\\test_runner_₿_🏃_20240626_093314\\wallet_listsinceblock_88\r\n2024-06-26T10:33:29.783000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 569, in start_nodes\r\n    node.wait_for_rpc_connection()\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_node.py\", line 314, in wait_for_rpc_connection\r\n    self._raise_assertion_error(\"Unable to connect to bitcoind after {}s\".format(self.rpc_timeout))\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_node.py\", line 188, in _raise_assertion_error\r\n    raise AssertionError(self._node_msg(msg))\r\nAssertionError: [node 3] Unable to connect to bitcoind after 2400s\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 131, in main\r\n    self.setup()\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 302, in setup\r\n    self.setup_network()\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 396, in setup_network\r\n    self.setup_nodes()\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 418, in setup_nodes\r\n    self.start_nodes()\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 572, in start_nodes\r\n    self.stop_nodes()\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 587, in stop_nodes\r\n    node.stop_node(wait=wait, wait_until_stopped=False)\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_node.py\", line 375, in stop_node\r\n    self.stop(wait=wait)\r\n    ^^^^^^^^^\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_node.py\", line 205, in __getattr__\r\n    assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: [node 3] Error: no RPC connection\r\n2024-06-26T10:33:29.842000Z TestFramework (INFO): Stopping nodes\r\n[node 3] Cleaning up leftover process\r\n[node 2] Cleaning up leftover process\r\n[node 1] Cleaning up leftover process\r\n[node 0] Cleaning up leftover process\r\n\r\nstderr:\r\nTraceback (most recent call last):\r\n  File \"D:\\a\\bitcoin\\bitcoin/test/functional/wallet_listsinceblock.py\", line 508, in <module>\r\n    ListSinceBlockTest().main()\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 155, in main\r\n    exit_code = self.shutdown()\r\n                ^^^^^^^^^^^^^^^\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 318, in shutdown\r\n    self.stop_nodes()\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_framework.py\", line 587, in stop_nodes\r\n    node.stop_node(wait=wait, wait_until_stopped=False)\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\test_node.py\", line 375, in stop_node\r\n    self.stop(wait=wait)\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\coverage.py\", line 50, in __call__\r\n    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\r\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\authproxy.py\", line 127, in __call__\r\n    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))\r\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"D:\\a\\bitcoin\\bitcoin\\test\\functional\\test_framework\\authproxy.py\", line 105, in _request\r\n    self.__conn.request(method, path, postdata, headers)\r\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.12.4\\x64\\Lib\\http\\client.py\", line 1336, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.12.4\\x64\\Lib\\http\\client.py\", line 1382, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.12.4\\x64\\Lib\\http\\client.py\", line 1331, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.12.4\\x64\\Lib\\http\\client.py\", line 1091, in _send_output\r\n    self.send(msg)\r\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.12.4\\x64\\Lib\\http\\client.py\", line 1035, in send\r\n    self.connect()\r\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.12.4\\x64\\Lib\\http\\client.py\", line 1001, in connect\r\n    self.sock = self._create_connection(\r\n                ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.12.4\\x64\\Lib\\socket.py\", line 853, in create_connection\r\n    raise exceptions[0]\r\n  File \"C:\\hostedtoolcache\\windows\\Python\\3.12.4\\x64\\Lib\\socket.py\", line 838, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it\r\n```\r\n\r\n</details>\r\n\r\nA better title might have been \"Unable to connect to bitcoind after 2400s errors on Windows\", which this PR would have made it more likely to be in the first place (had it predated the issue).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2311186892",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14035813832,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAANEmYXI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14035813832",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3d97816fffab3c715b6ec1183c349d66c784f530",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/3d97816fffab3c715b6ec1183c349d66c784f530",
      "created_at": "2024-08-27T21:53:56Z"
    },
    {
      "event": "commented",
      "id": 2313645385,
      "node_id": "IC_kwDOABII586J521J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2313645385",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-27T21:54:40Z",
      "updated_at": "2024-08-27T21:54:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "After more investigation into #30390, my impression is that since `TestNode.wait_for_rpc_connection()` ignores a bunch of exceptions, the knock-on exceptions when calling `stop()` and failing prior to this PR actually may sometimes provide a clue for why the RPC connection wasn't established in the first place.\r\n\r\nThat realization made me add 2 more commits here, which provide more information on the original exceptions being triggered and ignored inside `wait_for_rpc_connection`. Only fair since we are avoiding the triggering of knock-on exceptions later.\r\n\r\nThe timeout exception's message thereby now includes counters of encountered (and ignored) exceptions + latest exception type & message:\r\n`Unable to connect to bitcoind after 60s (ignored errors: {'missing_credentials': 5}, latest error: ValueError('No RPC credentials'))`",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2313645385",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "labeled",
      "id": 14036556028,
      "node_id": "LE_lADOABII586TGVLXzwAAAANEpNj8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14036556028",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-27T23:54:46Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "subscribed",
      "id": 14041105342,
      "node_id": "SE_lADOABII586TGVLXzwAAAANE6kO-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14041105342",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-28T06:40:00Z"
    },
    {
      "event": "unlabeled",
      "id": 14445101903,
      "node_id": "UNLE_lADOABII586TGVLXzwAAAANc_sNP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14445101903",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-29T11:58:25Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 14619266491,
      "node_id": "LE_lADOABII586TGVLXzwAAAANnYE27",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14619266491",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-13T10:25:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "review_requested",
      "id": 14659939105,
      "node_id": "RRE_lADOABII586TGVLXzwAAAANpzOsh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14659939105",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T15:30:23Z",
      "requested_reviewer": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 14659942643,
      "node_id": "RRE_lADOABII586TGVLXzwAAAANpzPjz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14659942643",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T15:30:36Z",
      "requested_reviewer": {
        "login": "willcl-ark",
        "id": 6606587,
        "node_id": "MDQ6VXNlcjY2MDY1ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6606587?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/willcl-ark",
        "html_url": "https://github.com/willcl-ark",
        "followers_url": "https://api.github.com/users/willcl-ark/followers",
        "following_url": "https://api.github.com/users/willcl-ark/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/willcl-ark/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/willcl-ark/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/willcl-ark/subscriptions",
        "organizations_url": "https://api.github.com/users/willcl-ark/orgs",
        "repos_url": "https://api.github.com/users/willcl-ark/repos",
        "events_url": "https://api.github.com/users/willcl-ark/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/willcl-ark/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2414327186,
      "node_id": "IC_kwDOABII586P57WS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2414327186",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T15:30:43Z",
      "updated_at": "2024-10-15T15:30:43Z",
      "author_association": "MEMBER",
      "body": "cc @tdb3 ",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2414327186",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "mentioned",
      "id": 14659948324,
      "node_id": "MEE_lADOABII586TGVLXzwAAAANpzQ8k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14659948324",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T15:30:46Z"
    },
    {
      "event": "subscribed",
      "id": 14659948347,
      "node_id": "SE_lADOABII586TGVLXzwAAAANpzQ87",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14659948347",
      "actor": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-15T15:30:46Z"
    },
    {
      "event": "unlabeled",
      "id": 14727847056,
      "node_id": "UNLE_lADOABII586TGVLXzwAAAANt2RyQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14727847056",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-18T21:52:54Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14772018129,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAANwexvR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14772018129",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9173b056006fd3940675108aa3fe0d0d855af768",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/9173b056006fd3940675108aa3fe0d0d855af768",
      "created_at": "2024-10-21T22:11:10Z"
    },
    {
      "event": "commented",
      "id": 2427838505,
      "node_id": "IC_kwDOABII586QteAp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2427838505",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-21T22:14:16Z",
      "updated_at": "2024-10-21T22:14:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "(Rebased onto latest master).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2427838505",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "reviewed",
      "id": 2408783550,
      "node_id": "PRR_kwDOABII586Pkx6-",
      "url": null,
      "actor": null,
      "commit_id": "9173b056006fd3940675108aa3fe0d0d855af768",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 9173b056006fd3940675108aa3fe0d0d855af768\r\n\r\nThis seems quite useful when troubleshooting errors. Left a few nits, but nothing I feel very strongly about.",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2408783550",
      "submitted_at": "2024-10-31T18:49:37Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15083990718,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAODE26-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15083990718",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "1148c4a53295e7635a813aadfde53ba5d973395c",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/1148c4a53295e7635a813aadfde53ba5d973395c",
      "created_at": "2024-11-02T20:15:14Z"
    },
    {
      "event": "reviewed",
      "id": 2411714494,
      "node_id": "PRR_kwDOABII586Pv9e-",
      "url": null,
      "actor": null,
      "commit_id": "1148c4a53295e7635a813aadfde53ba5d973395c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the review @tdb3!\r\n\r\nImplemented feedback from that review, made the code a bit more Pythonic and improved comments slightly.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2411714494",
      "submitted_at": "2024-11-02T20:26:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "reviewed",
      "id": 2411750030,
      "node_id": "PRR_kwDOABII586PwGKO",
      "url": null,
      "actor": null,
      "commit_id": "1148c4a53295e7635a813aadfde53ba5d973395c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code Review re ACK 1148c4a53295e7635a813aadfde53ba5d973395c\r\n\r\nNice work cleaning up the existing code around the core changes. Increases readability.",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2411750030",
      "submitted_at": "2024-11-02T22:59:44Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15087180052,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAODRBkU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15087180052",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "042cee7073b338d79b5176d4157cf08bbd079b9f",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/042cee7073b338d79b5176d4157cf08bbd079b9f",
      "created_at": "2024-11-02T23:10:24Z"
    },
    {
      "event": "reviewed",
      "id": 2411752016,
      "node_id": "PRR_kwDOABII586PwGpQ",
      "url": null,
      "actor": null,
      "commit_id": "042cee7073b338d79b5176d4157cf08bbd079b9f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "re ACK 042cee7073b338d79b5176d4157cf08bbd079b9f",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2411752016",
      "submitted_at": "2024-11-02T23:15:46Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "reviewed",
      "id": 2412663196,
      "node_id": "PRR_kwDOABII586PzlGc",
      "url": null,
      "actor": null,
      "commit_id": "042cee7073b338d79b5176d4157cf08bbd079b9f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left some nits on the first commit. Will take a look at the others later.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2412663196",
      "submitted_at": "2024-11-06T18:18:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15210659600,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAOKoD8Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15210659600",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a637f27f926ec64835757559585b3a2df7e2f8ed",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/a637f27f926ec64835757559585b3a2df7e2f8ed",
      "created_at": "2024-11-08T10:44:50Z"
    },
    {
      "event": "commented",
      "id": 2464405109,
      "node_id": "IC_kwDOABII586S49Z1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2464405109",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T10:56:45Z",
      "updated_at": "2024-11-08T10:56:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for the reviews! Was trying to keep comments largely intact, but agree with @maflcko that they were somewhat incorrect, so altered them. Also renamed `ignored_errors` (introduced by this PR) to `suppressed_errors` since it felt more fitting and also matches the updated comments.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2464405109",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "mentioned",
      "id": 15211022922,
      "node_id": "MEE_lADOABII586TGVLXzwAAAAOKpcpK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15211022922",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T10:56:47Z"
    },
    {
      "event": "subscribed",
      "id": 15211022945,
      "node_id": "SE_lADOABII586TGVLXzwAAAAOKpcph",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15211022945",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T10:56:47Z"
    },
    {
      "event": "labeled",
      "id": 15212189413,
      "node_id": "LE_lADOABII586TGVLXzwAAAAOKt5bl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15212189413",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T11:32:52Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2464482883,
      "node_id": "IC_kwDOABII586S5QZD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2464482883",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T11:32:53Z",
      "updated_at": "2024-11-08T11:32:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/32707688603</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2464482883",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15216497315,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAOK-VKj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15216497315",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "68b0530d5fe867dbee5e551ecf6d491fecbc77f1",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/68b0530d5fe867dbee5e551ecf6d491fecbc77f1",
      "created_at": "2024-11-08T13:44:33Z"
    },
    {
      "event": "unlabeled",
      "id": 15217218309,
      "node_id": "UNLE_lADOABII586TGVLXzwAAAAOLBFMF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15217218309",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T14:33:20Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2425524929,
      "node_id": "PRR_kwDOABII586QkpLB",
      "url": null,
      "actor": null,
      "commit_id": "68b0530d5fe867dbee5e551ecf6d491fecbc77f1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code Review re ACK 68b0530d5fe867dbee5e551ecf6d491fecbc77f1",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2425524929",
      "submitted_at": "2024-11-09T17:32:13Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "commented",
      "id": 2482647517,
      "node_id": "IC_kwDOABII586T-jHd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2482647517",
      "actor": {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-18T10:40:33Z",
      "updated_at": "2024-11-18T10:51:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nI like the motivation to cleanup the logs and remove the cascade of exceptions.\r\n\r\nTo test, I modified the included test to see what errors a user would have seen without the assertion:\r\n\r\n```diff\r\n--- a/test/functional/feature_framework_rpc_failure.py\r\n+++ b/test/functional/feature_framework_rpc_failure.py\r\n@@ -23,7 +23,8 @@ class FeatureFrameworkRPCFailure(BitcoinTestFramework):\r\n         self.log.info(f\"Setting RPC timeout to 0 to simulate an unresponsive bitcoind, expect one warning.\")\r\n         self.rpc_timeout = 0\r\n\r\n-        assert_raises_message(AssertionError, \"[node 0] Unable to connect to bitcoind after 0s\", BitcoinTestFramework.setup_network, self)\r\n+        BitcoinTestFramework.setup_network(self)\r\n\r\n     def run_test(self):\r\n         pass\r\n```\r\n\r\n<details>\r\n<summary>\r\nWithout PR:\r\n</summary>\r\n\r\n```shell\r\n2024-11-18T09:59:33.936000Z TestFramework (INFO): PRNG seed is: 6704525597374825472\r\n2024-11-18T09:59:33.937000Z TestFramework (INFO): Initializing test directory /var/folders/q9/65c9dvyj3lbdsv5zrhp_8qk80000gn/T/bitcoin_func_test_kccj2gaf\r\n2024-11-18T09:59:33.939000Z TestFramework (INFO): Setting RPC timeout to 0 to simulate an unresponsive bitcoind, expect one warning.\r\n2024-11-18T09:59:33.944000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_framework.py\", line 569, in start_nodes\r\n    node.wait_for_rpc_connection()\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_node.py\", line 335, in wait_for_rpc_connection\r\n    self._raise_assertion_error(\"Unable to connect to bitcoind after {}s\".format(self.rpc_timeout))\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_node.py\", line 198, in _raise_assertion_error\r\n    raise AssertionError(self._node_msg(msg))\r\nAssertionError: [node 0] Unable to connect to bitcoind after 0s\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_framework.py\", line 131, in main\r\n    self.setup()\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_framework.py\", line 302, in setup\r\n    self.setup_network()\r\n  File \"/Users/max/source/bitcoin/./build/test/functional/feature_framework_rpc_failure.py\", line 24, in setup_network\r\n    BitcoinTestFramework.setup_network(self)\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_framework.py\", line 396, in setup_network\r\n    self.setup_nodes()\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_framework.py\", line 418, in setup_nodes\r\n    self.start_nodes()\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_framework.py\", line 572, in start_nodes\r\n    self.stop_nodes()\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_framework.py\", line 587, in stop_nodes\r\n    node.stop_node(wait=wait, wait_until_stopped=False)\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_node.py\", line 396, in stop_node\r\n    self.stop(wait=wait)\r\n    ^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_node.py\", line 215, in __getattr__\r\n    assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: [node 0] Error: no RPC connection\r\n2024-11-18T09:59:33.997000Z TestFramework (INFO): Stopping nodes\r\nTraceback (most recent call last):\r\n  File \"/Users/max/source/bitcoin/./build/test/functional/feature_framework_rpc_failure.py\", line 32, in <module>\r\n    FeatureFrameworkRPCFailure(__file__).main()\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_framework.py\", line 155, in main\r\n    exit_code = self.shutdown()\r\n                ^^^^^^^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_framework.py\", line 318, in shutdown\r\n    self.stop_nodes()\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_framework.py\", line 587, in stop_nodes\r\n    node.stop_node(wait=wait, wait_until_stopped=False)\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_node.py\", line 396, in stop_node\r\n    self.stop(wait=wait)\r\n    ^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/build/test/functional/test_framework/test_node.py\", line 215, in __getattr__\r\n    assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: [node 0] Error: no RPC connection\r\n[node 0] Cleaning up leftover process\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\nWith PR\r\n</summary>\r\n\r\n```shell\r\n2024-11-18T10:09:52.135000Z TestFramework (INFO): PRNG seed is: 7321683449385937851\r\n2024-11-18T10:09:52.135000Z TestFramework (INFO): Initializing test directory /var/folders/q9/65c9dvyj3lbdsv5zrhp_8qk80000gn/T/bitcoin_func_test_izqaxw8a\r\n2024-11-18T10:09:52.137000Z TestFramework (INFO): Setting RPC timeout to 0 to simulate an unresponsive bitcoind, expect one warning.\r\n2024-11-18T10:09:52.141000Z TestFramework.node0 (WARNING): Cannot call stop-RPC as we are not connected. Killing process 47850 so that wait_until_stopped will not time out.\r\n2024-11-18T10:09:52.194000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 131, in main\r\n    self.setup()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 302, in setup\r\n    self.setup_network()\r\n  File \"/Users/max/source/bitcoin/./build/test/functional/feature_framework_rpc_failure.py\", line 26, in setup_network\r\n    BitcoinTestFramework.setup_network(self)\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 396, in setup_network\r\n    self.setup_nodes()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 418, in setup_nodes\r\n    self.start_nodes()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 569, in start_nodes\r\n    node.wait_for_rpc_connection()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 344, in wait_for_rpc_connection\r\n    self._raise_assertion_error(f\"Unable to connect to bitcoind after {self.rpc_timeout}s (ignored errors: {str(dict(suppressed_errors))}, latest error: {latest_error})\")\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 199, in _raise_assertion_error\r\n    raise AssertionError(self._node_msg(msg))\r\nAssertionError: [node 0] Unable to connect to bitcoind after 0s (ignored errors: {}, latest error: )\r\n2024-11-18T10:09:52.250000Z TestFramework (INFO): Stopping nodes\r\n2024-11-18T10:09:52.250000Z TestFramework (WARNING): Not cleaning up dir /var/folders/q9/65c9dvyj3lbdsv5zrhp_8qk80000gn/T/bitcoin_func_test_izqaxw8a\r\n2024-11-18T10:09:52.250000Z TestFramework (ERROR): Test failed. Test logging available at /var/folders/q9/65c9dvyj3lbdsv5zrhp_8qk80000gn/T/bitcoin_func_test_izqaxw8a/test_framework.log\r\n2024-11-18T10:09:52.250000Z TestFramework (ERROR):\r\n2024-11-18T10:09:52.251000Z TestFramework (ERROR): Hint: Call /Users/max/source/bitcoin/test/functional/combine_logs.py '/var/folders/q9/65c9dvyj3lbdsv5zrhp_8qk80000gn/T/bitcoin_func_test_izqaxw8a' to consolidate all logs\r\n2024-11-18T10:09:52.251000Z TestFramework (ERROR):\r\n2024-11-18T10:09:52.251000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\r\n2024-11-18T10:09:52.251000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\r\n2024-11-18T10:09:52.251000Z TestFramework (ERROR):\r\n\r\n```\r\n</details>\r\n\r\nI prefer the logs with this change!\r\n\r\nNext I modified bitcoind so that it would fail to start and ran a random functional test (`p2p_blockfilters.py`) \r\n\r\n<details>\r\n<summary>\r\nWithout PR\r\n</summary>\r\n\r\n```shell\r\n2024-11-18T09:39:40.861000Z TestFramework (INFO): PRNG seed is: 8730495587434508112\r\n2024-11-18T09:39:40.862000Z TestFramework (INFO): Initializing test directory /var/folders/q9/65c9dvyj3lbdsv5zrhp_8qk80000gn/T/bitcoin_func_test_0gw_zhhl\r\n2024-11-18T09:39:41.372000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 569, in start_nodes\r\n    node.wait_for_rpc_connection()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 276, in wait_for_rpc_connection\r\n    raise FailedToStartError(self._node_msg(\r\ntest_framework.test_node.FailedToStartError: [node 0] bitcoind exited with status 1 during initialization.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 131, in main\r\n    self.setup()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 302, in setup\r\n    self.setup_network()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 396, in setup_network\r\n    self.setup_nodes()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 418, in setup_nodes\r\n    self.start_nodes()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 572, in start_nodes\r\n    self.stop_nodes()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 587, in stop_nodes\r\n    node.stop_node(wait=wait, wait_until_stopped=False)\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 396, in stop_node\r\n    self.stop(wait=wait)\r\n    ^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 215, in __getattr__\r\n    assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: [node 0] Error: no RPC connection\r\n2024-11-18T09:39:41.431000Z TestFramework (INFO): Stopping nodes\r\nTraceback (most recent call last):\r\n  File \"/Users/max/source/bitcoin/build/test/functional/p2p_blockfilters.py\", line 285, in <module>\r\n    CompactFiltersTest(__file__).main()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 155, in main\r\n    exit_code = self.shutdown()\r\n                ^^^^^^^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 318, in shutdown\r\n    self.stop_nodes()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 587, in stop_nodes\r\n    node.stop_node(wait=wait, wait_until_stopped=False)\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 396, in stop_node\r\n    self.stop(wait=wait)\r\n    ^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 215, in __getattr__\r\n    assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: [node 0] Error: no RPC connection\r\n[node 1] Cleaning up leftover process\r\n[node 0] Cleaning up leftover process\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>\r\nWith PR\r\n</summary>\r\n\r\n```shell\r\n2024-11-15T13:07:28.308000Z TestFramework (INFO): PRNG seed is: 2784953090753807617\r\n2024-11-15T13:07:28.308000Z TestFramework (INFO): Initializing test directory /var/folders/q9/65c9dvyj3lbdsv5zrhp_8qk80000gn/T/bitcoin_func_test_udgky3fr\r\n2024-11-15T13:07:28.821000Z TestFramework.node0 (WARNING): Cannot call stop-RPC as we are not connected. Killing process 26867 so that wait_until_stopped will not time out.\r\n2024-11-15T13:07:28.821000Z TestFramework.node1 (WARNING): Cannot call stop-RPC as we are not connected. Killing process 26868 so that wait_until_stopped will not time out.\r\n2024-11-15T13:07:28.821000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 569, in start_nodes\r\n    node.wait_for_rpc_connection()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 279, in wait_for_rpc_connection\r\n    raise FailedToStartError(self._node_msg(\r\ntest_framework.test_node.FailedToStartError: [node 0] bitcoind exited with status 1 during initialization.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 131, in main\r\n    self.setup()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 302, in setup\r\n    self.setup_network()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 396, in setup_network\r\n    self.setup_nodes()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 418, in setup_nodes\r\n    self.start_nodes()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 572, in start_nodes\r\n    self.stop_nodes()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 591, in stop_nodes\r\n    node.wait_until_stopped()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 462, in wait_until_stopped\r\n    self.wait_until(lambda: self.is_node_stopped(**kwargs), timeout=timeout)\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 860, in wait_until\r\n    return wait_until_helper_internal(test_function, timeout=timeout, timeout_factor=self.timeout_factor)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/util.py\", line 291, in wait_until_helper_internal\r\n    if predicate():\r\n       ^^^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 462, in <lambda>\r\n    self.wait_until(lambda: self.is_node_stopped(**kwargs), timeout=timeout)\r\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 439, in is_node_stopped\r\n    assert return_code == expected_ret_code, self._node_msg(\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: [node 0] Node returned unexpected exit code (1) vs (-9) when stopping\r\n2024-11-15T13:07:28.880000Z TestFramework (INFO): Stopping nodes\r\n2024-11-15T13:07:28.881000Z TestFramework.node0 (WARNING): Cannot call stop-RPC as we are not connected. Killing process 26867 so that wait_until_stopped will not time out.\r\n2024-11-15T13:07:28.881000Z TestFramework.node1 (WARNING): Cannot call stop-RPC as we are not connected. Killing process 26868 so that wait_until_stopped will not time out.\r\nTraceback (most recent call last):\r\n  File \"/Users/max/source/bitcoin/build/test/functional/p2p_blockfilters.py\", line 285, in <module>\r\n    CompactFiltersTest(__file__).main()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 155, in main\r\n    exit_code = self.shutdown()\r\n                ^^^^^^^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 318, in shutdown\r\n    self.stop_nodes()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_framework.py\", line 591, in stop_nodes\r\n    node.wait_until_stopped()\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 462, in wait_until_stopped\r\n    self.wait_until(lambda: self.is_node_stopped(**kwargs), timeout=timeout)\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 860, in wait_until\r\n    return wait_until_helper_internal(test_function, timeout=timeout, timeout_factor=self.timeout_factor)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/util.py\", line 291, in wait_until_helper_internal\r\n    if predicate():\r\n       ^^^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 462, in <lambda>\r\n    self.wait_until(lambda: self.is_node_stopped(**kwargs), timeout=timeout)\r\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/max/source/bitcoin/test/functional/test_framework/test_node.py\", line 439, in is_node_stopped\r\n    assert return_code == expected_ret_code, self._node_msg(\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError: [node 0] Node returned unexpected exit code (1) vs (-9) when stopping\r\n[node 1] Cleaning up leftover process 26868\r\n[node 0] Cleaning up leftover process 26867\r\n\r\n```\r\n</details>\r\n\r\nI'm not sure if it's the intention of this PR to improve things in that scenario but the log doesn't seem much better and if anything it was slightly easier to understand before.\r\n\r\nBefore this change the logs showed `AssertionError: [node 0] Error: no RPC connection` and after this change that is now `AssertionError: [node 0] Node returned unexpected exit code (1) vs (-9) when stopping`. I feel like no RPC connection is the better error here?",
      "user": {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2482647517",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15341418497,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAOSa3gB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15341418497",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ba28593147ccc880c3a4d40db0d4ef57f4766254",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/ba28593147ccc880c3a4d40db0d4ef57f4766254",
      "created_at": "2024-11-18T23:02:52Z"
    },
    {
      "event": "commented",
      "id": 2484340220,
      "node_id": "IC_kwDOABII586UFAX8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2484340220",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-18T23:13:54Z",
      "updated_at": "2024-11-18T23:13:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @m3dwards for having a look!\r\n\r\nI had not tested the case of *bitcoind* exiting early together with my suggested change here (focused more on stalling as in one of the issues inspiring it).\r\n\r\nMade some changes to this part of `TestNode.stop_node()` to handle an already dead process:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/ba28593147ccc880c3a4d40db0d4ef57f4766254/test/functional/test_framework/test_node.py#L412-L420\r\n\r\nWith those changes, the output for such a case is now:\r\n\r\n<details>\r\n<summary>\r\nOutput\r\n</summary>\r\n\r\n```\r\n₿ build/test/functional/p2p_blockfilters.py \r\n2024-11-18T23:01:17.204000Z TestFramework (INFO): PRNG seed is: 5667811122664278008\r\n2024-11-18T23:01:17.205000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_mzr3jg96\r\n2024-11-18T23:01:17.458000Z TestFramework.node0 (WARNING): Process 175180 already died with return code 1.\r\n2024-11-18T23:01:17.458000Z TestFramework.node1 (WARNING): Process 175181 already died with return code 1.\r\n2024-11-18T23:01:17.459000Z TestFramework (ERROR): Unexpected exception caught during testing\r\nTraceback (most recent call last):\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 131, in main\r\n    self.setup()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 302, in setup\r\n    self.setup_network()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 396, in setup_network\r\n    self.setup_nodes()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 418, in setup_nodes\r\n    self.start_nodes()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_framework.py\", line 569, in start_nodes\r\n    node.wait_for_rpc_connection()\r\n  File \"/home/hodlinator/bitcoin/test/functional/test_framework/test_node.py\", line 279, in wait_for_rpc_connection\r\n    raise FailedToStartError(self._node_msg(\r\ntest_framework.test_node.FailedToStartError: [node 0] bitcoind exited with status 1 during initialization. \r\n2024-11-18T23:01:17.513000Z TestFramework (INFO): Stopping nodes\r\n2024-11-18T23:01:17.513000Z TestFramework (WARNING): Not cleaning up dir /tmp/bitcoin_func_test_mzr3jg96\r\n2024-11-18T23:01:17.513000Z TestFramework (ERROR): Test failed. Test logging available at /tmp/bitcoin_func_test_mzr3jg96/test_framework.log\r\n2024-11-18T23:01:17.513000Z TestFramework (ERROR): \r\n2024-11-18T23:01:17.513000Z TestFramework (ERROR): Hint: Call /home/hodlinator/bitcoin/test/functional/combine_logs.py '/tmp/bitcoin_func_test_mzr3jg96' to consolidate all logs\r\n2024-11-18T23:01:17.513000Z TestFramework (ERROR): \r\n2024-11-18T23:01:17.514000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\r\n2024-11-18T23:01:17.514000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\r\n2024-11-18T23:01:17.514000Z TestFramework (ERROR):\r\n```\r\n</details>",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2484340220",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "mentioned",
      "id": 15341538308,
      "node_id": "MEE_lADOABII586TGVLXzwAAAAOSbUwE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15341538308",
      "actor": {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-18T23:13:56Z"
    },
    {
      "event": "subscribed",
      "id": 15341538324,
      "node_id": "SE_lADOABII586TGVLXzwAAAAOSbUwU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15341538324",
      "actor": {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-18T23:13:56Z"
    },
    {
      "event": "commented",
      "id": 2491116799,
      "node_id": "IC_kwDOABII586Ue2z_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2491116799",
      "actor": {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T13:13:47Z",
      "updated_at": "2024-11-21T13:13:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Made some changes to this part of `TestNode.stop_node()` to handle an already dead process\r\n\r\nLooks cleaner.\r\n\r\nACK ba28593147ccc880c3a4d40db0d4ef57f4766254",
      "user": {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2491116799",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "review_requested",
      "id": 15381727197,
      "node_id": "RRE_lADOABII586TGVLXzwAAAAOU0ofd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15381727197",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-21T13:13:51Z",
      "requested_reviewer": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2476693353,
      "node_id": "PRR_kwDOABII586Tn1dp",
      "url": null,
      "actor": null,
      "commit_id": "ba28593147ccc880c3a4d40db0d4ef57f4766254",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2476693353",
      "submitted_at": "2024-12-03T20:31:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "labeled",
      "id": 15610041709,
      "node_id": "LE_lADOABII586TGVLXzwAAAAOiblVt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15610041709",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T01:30:35Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2533415892,
      "node_id": "IC_kwDOABII586XANvU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2533415892",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T01:30:36Z",
      "updated_at": "2024-12-11T01:30:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/33168290506</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2533415892",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15624366615,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAOjSOoX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15624366615",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d4cda43d1716580a08acb4f7788fbcff165b9bf9",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/d4cda43d1716580a08acb4f7788fbcff165b9bf9",
      "created_at": "2024-12-11T20:26:50Z"
    },
    {
      "event": "commented",
      "id": 2537066932,
      "node_id": "IC_kwDOABII586XOJG0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2537066932",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T20:29:24Z",
      "updated_at": "2024-12-11T20:30:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "- Fixed [ruff linter error reported by CI](https://github.com/bitcoin/bitcoin/runs/33168290506) due to #31417 being merged.\r\n- Added *feature_framework_stop_node.py*-test to verify clean shutdown of TestNode when the bitcoind-process already exited/crashed, [issue found earlier](https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2482647517) by m3dwards. (Also added comment justifying setting of `self.expected_ret_code` in *test_node.py*).\r\n- Switched from `Counter` to simpler `collections.defaultdict(int)`-type.\r\n- Updated copyright headers to include \"-present\".",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2537066932",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15624472254,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAOjSoa-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15624472254",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "608b9ff097214bff3527cc240b7be313c62131d5",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/608b9ff097214bff3527cc240b7be313c62131d5",
      "created_at": "2024-12-11T20:33:08Z"
    },
    {
      "event": "unlabeled",
      "id": 15625327742,
      "node_id": "UNLE_lADOABII586TGVLXzwAAAAOjV5R-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15625327742",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-11T21:27:52Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2532868324,
      "node_id": "PRR_kwDOABII586W-IDk",
      "url": null,
      "actor": null,
      "commit_id": "608b9ff097214bff3527cc240b7be313c62131d5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review 608b9ff097214bff3527cc240b7be313c62131d5\r\n\r\nNice changes in this PR. I've been confused by the error output from wait_for_rpc_connection() before, so think this will be helpful.\r\n\r\nOne thing that wasn't obvious to me from the PR description is that this improving error output in two separate ways:\r\n\r\n- One change here is *adding* error output to `wait_for_rpc_connection`. Previously errors that happened during polling before the final \"Unable to connect to bitcoind\" error were silently ignored, so less information would be visible about what was causing the problem. Now counts of the different errors and the most recent message are shown.\r\n\r\n- Another change here is *suppressing* error output after the `wait_for_rpc_connection` error, specifically suppressing exceptions from in `stop_node` when trying to call stop method fails.\r\n\r\nI didn't ACK the PR because I think the changes to the `stop_node` method are overbroad, and I [suggested](https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1904621833) a way to limit them. Other than that I think this all looks very good.\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2532868324",
      "submitted_at": "2025-01-07T18:54:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "renamed",
      "id": 15870697892,
      "node_id": "RTE_lADOABII586TGVLXzwAAAAOx96Gk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15870697892",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T16:46:02Z",
      "rename": {
        "from": "test: Shut down framework cleanly on RPC connection failure",
        "to": "qa: Shut down framework cleanly on RPC connection failure"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15870710838,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAOx99Q2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15870710838",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "bd24bae94eae75b34172056874a50338c9e7c30e",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/bd24bae94eae75b34172056874a50338c9e7c30e",
      "created_at": "2025-01-09T16:47:02Z"
    },
    {
      "event": "commented",
      "id": 2580812651,
      "node_id": "IC_kwDOABII586Z1BNr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2580812651",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T16:55:14Z",
      "updated_at": "2025-01-09T16:55:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated based off ryanofsky's [review](https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2532868324).\r\n\r\nHopefully latest PR summary is slightly clearer.\r\n\r\nReplaced \"test\" -> \"qa\" since PR is about functional tests and not unit tests, should conform better with *CONTRIBUTING.md*.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2580812651",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15871864319,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAOyCW3_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15871864319",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "965b23a6c134214bf179db907b56b9699d6c0369",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/965b23a6c134214bf179db907b56b9699d6c0369",
      "created_at": "2025-01-09T18:21:11Z"
    },
    {
      "event": "labeled",
      "id": 15871865116,
      "node_id": "LE_lADOABII586TGVLXzwAAAAOyCXEc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15871865116",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T18:21:15Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2580978629,
      "node_id": "IC_kwDOABII586Z1pvF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2580978629",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T18:21:16Z",
      "updated_at": "2025-01-09T18:21:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/35384673501</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2580978629",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15872230947,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAOyDwYj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15872230947",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8148e4da2c6d756cc24e337060d002473f1eebbf",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/8148e4da2c6d756cc24e337060d002473f1eebbf",
      "created_at": "2025-01-09T18:53:34Z"
    },
    {
      "event": "unlabeled",
      "id": 15872984516,
      "node_id": "UNLE_lADOABII586TGVLXzwAAAAOyGoXE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15872984516",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-09T20:05:39Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2541894649,
      "node_id": "PRR_kwDOABII586Xgjv5",
      "url": null,
      "actor": null,
      "commit_id": "8148e4da2c6d756cc24e337060d002473f1eebbf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2541894649",
      "submitted_at": "2025-01-10T09:10:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "commented",
      "id": 2598305057,
      "node_id": "IC_kwDOABII586a3v0h",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2598305057",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-17T12:53:35Z",
      "updated_at": "2025-01-17T12:53:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "Excuse me from being [brief](https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2580812651) earlier.\r\n\r\nTaking the time do document changes in latest push - `git range-diff master 608b9ff 8148e4d`\r\n\r\n- [Inlined comments](https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1909144554) about different `errno`-codes instead of duplicating the identifiers in the comment.\r\n- Made missing cookie file comment [slightly more informative](https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1909141475).\r\n- Removed `expect_error` in favor of `expected_ret_code` after ryanofsky's [suggestion](https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1904607706) (grepping for uses of the former). This helps decrease the amount of added complexity to test_node.py.\r\n- Add `avoid_exceptions` parameter to `stop_node()` to make the behavior change more surgical, thanks to ryanofsky's [suggestion](https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1904621833). We now only kill the node under more narrow conditions.\r\n- Clarified in log output of tests when a WARNING is expected ([ryanofsky suggestion](https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1905790290)).\r\n- ee4c9d7eba6ba6fb6dcb7abd539c23f5b62d5991 - Added *feature_framework_rpc_failure_details.py* to verify that suppressed exception information is included in RPC connection timeout message ([ryanofsky suggestion](https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1905811915)).\r\n- Switched *feature_framework_stop_node.py* from using `TestNode.start()` + `TestNode.wait_for_rpc_connection()` to `BitcoinTestFramework.start_node()` which combines the two.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2598305057",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "labeled",
      "id": 16092005494,
      "node_id": "LE_lADOABII586TGVLXzwAAAAO_KIR2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16092005494",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-28T12:10:29Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "renamed",
      "id": 16100282544,
      "node_id": "RTE_lADOABII586TGVLXzwAAAAO_ptCw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16100282544",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-28T22:42:52Z",
      "rename": {
        "from": "qa: Shut down framework cleanly on RPC connection failure",
        "to": "qa: Verify clean shutdown on startup failure"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16100288290,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAO_puci",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16100288290",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f2e3721e018c3038d5d648ec7ae08e96418f3c29",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/f2e3721e018c3038d5d648ec7ae08e96418f3c29",
      "created_at": "2025-01-28T22:43:43Z"
    },
    {
      "event": "commented",
      "id": 2620208770,
      "node_id": "IC_kwDOABII586cLTaC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2620208770",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-28T22:45:41Z",
      "updated_at": "2025-01-28T22:45:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Resolved conflict with @maflcko's #31620 which solved the core issue more elegantly.\r\n\r\nI think there is still some use in the tests from this PR, as we want to avoid knock-on exceptions being reintroduced. I've reworked the tests from 3 to 1 Python file. They now launch a child process of which keeps the success-state of the parent `BitcoinTestFramework` separate from the expected failures of the child processes.\r\n\r\nThe final commit (f2e3721e018c3038d5d648ec7ae08e96418f3c29) is what remains of the core of what this PR used to be, but I haven't been able to construe a test that exercises it. So if reviewers prefer, I can drop it.\r\n\r\nTest instructions in updated PR summary.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2620208770",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "mentioned",
      "id": 16100302316,
      "node_id": "MEE_lADOABII586TGVLXzwAAAAO_px3s",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16100302316",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-28T22:45:43Z"
    },
    {
      "event": "subscribed",
      "id": 16100302326,
      "node_id": "SE_lADOABII586TGVLXzwAAAAO_px32",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16100302326",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-28T22:45:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16100498898,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAO_qh3S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16100498898",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "eb6b88aac89bcfa258385f6cb2a2c7181a1163d1",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/eb6b88aac89bcfa258385f6cb2a2c7181a1163d1",
      "created_at": "2025-01-28T23:11:59Z"
    },
    {
      "event": "labeled",
      "id": 16100499474,
      "node_id": "LE_lADOABII586TGVLXzwAAAAO_qiAS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16100499474",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-28T23:12:04Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2620246834,
      "node_id": "IC_kwDOABII586cLcsy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2620246834",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-28T23:12:05Z",
      "updated_at": "2025-01-28T23:12:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/36321182366</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2620246834",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "unlabeled",
      "id": 16100840437,
      "node_id": "UNLE_lADOABII586TGVLXzwAAAAO_r1P1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16100840437",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-29T00:07:50Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 16101108297,
      "node_id": "UNLE_lADOABII586TGVLXzwAAAAO_s2pJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16101108297",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-29T00:47:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16110500071,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAPAQrjn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16110500071",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "798fa7bd220f7a4c1c7149ad4c1b25c8baa9c692",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/798fa7bd220f7a4c1c7149ad4c1b25c8baa9c692",
      "created_at": "2025-01-29T16:04:29Z"
    },
    {
      "event": "commented",
      "id": 2622149035,
      "node_id": "IC_kwDOABII586cStGr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2622149035",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-29T16:37:03Z",
      "updated_at": "2025-01-29T16:37:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Latest push adds 2347ce8f018b1b9b8d6ef1933a778023fd228b7f which fixes a Windows Python issue [found by CI](https://github.com/bitcoin/bitcoin/actions/runs/13021269281/job/36322263072). It's still a mystery to me why the old test from a previous version of this PR in ee4c9d7eba6ba6fb6dcb7abd539c23f5b62d5991 didn't provoke the same issue on Windows CI ([successful run including that commit](https://github.com/bitcoin/bitcoin/actions/runs/12696631983/job/35391102229#step:12:388)). CI output states they're running the same [Python](https://github.com/bitcoin/bitcoin/actions/runs/13021269281/job/36322263072#step:4:69) [version](https://github.com/bitcoin/bitcoin/actions/runs/12696631983/job/35391102229#step:4:69).\r\n\r\nTest was also updated to re-launch child processes using the same Python interpreter as the parent, as I was ending up with mixed 64/32-bit interpeters on Windows. Also switches from using `subprocesses.getoutput()` which is marked as [legacy](https://docs.python.org/3/library/subprocess.html#legacy-shell-invocation-functions), to `subprocess.run()` with a timeout.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2622149035",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16114128049,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAPAehSx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16114128049",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a18f7c8a252bdffd181fe696ede8a91e285e1cce",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/a18f7c8a252bdffd181fe696ede8a91e285e1cce",
      "created_at": "2025-01-29T20:45:49Z"
    },
    {
      "event": "commented",
      "id": 2622819631,
      "node_id": "IC_kwDOABII586cVQ0v",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2622819631",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-29T20:50:46Z",
      "updated_at": "2025-01-29T23:06:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry about the churn here. Went back to ee4c9d7eba6ba6fb6dcb7abd539c23f5b62d5991 and was able to reproduce the `TimeoutError.errno==None`-issue there too, which is a relief. It seemed to be a bit timing-sensitive, so in the latest push I increased the still low `rpc_timeout`-override and applied `self.options.timeout_factor` to it in hopes of making it more robust.\r\n\r\nEdit:\r\nThe above was for a18f7c8a252bdffd181fe696ede8a91e285e1cce.\r\nFixed trivial type-error in next push, 8102f3d8e0b6715433eeda78b9b57a83109fc45e.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2622819631",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "labeled",
      "id": 16115451393,
      "node_id": "LE_lADOABII586TGVLXzwAAAAPAjkYB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16115451393",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-29T22:28:22Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16115758223,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAPAkvSP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16115758223",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8102f3d8e0b6715433eeda78b9b57a83109fc45e",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/8102f3d8e0b6715433eeda78b9b57a83109fc45e",
      "created_at": "2025-01-29T23:03:37Z"
    },
    {
      "event": "unlabeled",
      "id": 16116313919,
      "node_id": "UNLE_lADOABII586TGVLXzwAAAAPAm28_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16116313919",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T00:21:23Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "unsubscribed",
      "id": 16129607252,
      "node_id": "UE_lADOABII586TGVLXzwAAAAPBZkZU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16129607252",
      "actor": {
        "login": "PRADACANDI18",
        "id": 91190628,
        "node_id": "MDQ6VXNlcjkxMTkwNjI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/91190628?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PRADACANDI18",
        "html_url": "https://github.com/PRADACANDI18",
        "followers_url": "https://api.github.com/users/PRADACANDI18/followers",
        "following_url": "https://api.github.com/users/PRADACANDI18/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PRADACANDI18/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PRADACANDI18/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PRADACANDI18/subscriptions",
        "organizations_url": "https://api.github.com/users/PRADACANDI18/orgs",
        "repos_url": "https://api.github.com/users/PRADACANDI18/repos",
        "events_url": "https://api.github.com/users/PRADACANDI18/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PRADACANDI18/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-30T20:18:09Z"
    },
    {
      "event": "reviewed",
      "id": 2612568019,
      "node_id": "PRR_kwDOABII586buJ_T",
      "url": null,
      "actor": null,
      "commit_id": "8102f3d8e0b6715433eeda78b9b57a83109fc45e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 8102f3d8e0b6715433eeda78b9b57a83109fc45e. Looks like #31620 made some overlapping changes, but this PR still seems very useful.\r\n\r\nFrom PR description:\r\n\r\n> Before #31620, failure to establish RPC connections would result in an attempt to stop the node via RPC, triggering knock-on exceptions. This would muddy the waters for developers looking for root causes of test failures. This PR used to solve that issue in a more roundabout way than aforementioned PR, but now merely adds tests to ensure knock-on errors/exceptions are not reintroduced.\r\n\r\nEven after reviewing this PR twice and rereading this paragraph several times, I find this pretty difficult to understand. Would suggest giving a more straightforward description like:\r\n\r\n- This PR improves handling of startup errors in functional tests. Specifically it improves `wait_for_rpc_connection` so instead of returning a vague `Unable to connect to bitcoind` error, it returns details about specific failures leading up to it. This PR also adds comments, refactors code, improves logging, detects timeout errors on windows, adds a test to make sure error handling behavior is not broken in the future.\r\n\r\nI think it is ok to mention #31620 and mention the earlier version of this PR in a postscript to provide context for early review comments, but the main goal of the PR description should be to describe the PR as it currently is.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2612568019",
      "submitted_at": "2025-02-12T17:26:07Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "review_requested",
      "id": 16284667358,
      "node_id": "RRE_lADOABII586TGVLXzwAAAAPKpE3e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16284667358",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-12T17:26:13Z",
      "requested_reviewer": {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16294149647,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAPLNP4P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16294149647",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2069c8754c2636a6a8df15ca3bed2bc6a7fbb523",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/2069c8754c2636a6a8df15ca3bed2bc6a7fbb523",
      "created_at": "2025-02-13T10:22:01Z"
    },
    {
      "event": "reviewed",
      "id": 2613365399,
      "node_id": "PRR_kwDOABII586bxMqX",
      "url": null,
      "actor": null,
      "commit_id": "8102f3d8e0b6715433eeda78b9b57a83109fc45e",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for bearing with me @ryanofsky. :)\r\n\r\nUpdated PR description based on feedback and addressed inline comments.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2613365399",
      "submitted_at": "2025-02-13T10:23:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16294230239,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAPLNjjf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16294230239",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c107aa8c873cb3c031b341baef487638133823f1",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/c107aa8c873cb3c031b341baef487638133823f1",
      "created_at": "2025-02-13T10:27:24Z"
    },
    {
      "event": "labeled",
      "id": 16294232098,
      "node_id": "LE_lADOABII586TGVLXzwAAAAPLNkAi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16294232098",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T10:27:33Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2656153442,
      "node_id": "IC_kwDOABII586eUa9i",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2656153442",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T10:27:34Z",
      "updated_at": "2025-02-13T10:27:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/37155473613</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2656153442",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "unlabeled",
      "id": 16295616474,
      "node_id": "UNLE_lADOABII586TGVLXzwAAAAPLS1_a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16295616474",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-13T12:14:36Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2683088562,
      "node_id": "PRR_kwDOABII586f7K6y",
      "url": null,
      "actor": null,
      "commit_id": "c107aa8c873cb3c031b341baef487638133823f1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK c107aa8c873cb3c031b341baef487638133823f1. Changes since last review were just updating some messages and expanding the test a little. Thanks for the updates. This still looks good to me and I left some more comments, but they are not important.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2683088562",
      "submitted_at": "2025-03-13T20:02:17Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16775272756,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAPn4lk0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16775272756",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "47a70f2c675244fd5476ca6832a1e6bb39c32289",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/47a70f2c675244fd5476ca6832a1e6bb39c32289",
      "created_at": "2025-03-14T14:10:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16775459833,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAPn5TP5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16775459833",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b2ea0bd922c080d01ac52d819b9f0fecc0679571",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/b2ea0bd922c080d01ac52d819b9f0fecc0679571",
      "created_at": "2025-03-14T14:23:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16775467653,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAPn5VKF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16775467653",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9d8dbad70d6ad87ec4fd7a4b8ebe88a01f0d8b31",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/9d8dbad70d6ad87ec4fd7a4b8ebe88a01f0d8b31",
      "created_at": "2025-03-14T14:23:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16776142463,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAPn755_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16776142463",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b31bdf5ffbec89cd2bdf8092d4b6e9bcee25c34c",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/b31bdf5ffbec89cd2bdf8092d4b6e9bcee25c34c",
      "created_at": "2025-03-14T15:06:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16776257842,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAPn8WEy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16776257842",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ce87c0e7852864847d97e2eafba9caff196d54bc",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/ce87c0e7852864847d97e2eafba9caff196d54bc",
      "created_at": "2025-03-14T15:13:55Z"
    },
    {
      "event": "reviewed",
      "id": 2691498575,
      "node_id": "PRR_kwDOABII586gbQJP",
      "url": null,
      "actor": null,
      "commit_id": "fa2178e67ffb630ac0a0643fd53eca82db2a8fc8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2691498575",
      "submitted_at": "2025-03-17T17:35:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16866363363,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAPtUEfj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16866363363",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cac218dcbdd2b5682a7ac8659aac0306e68a65f5",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/cac218dcbdd2b5682a7ac8659aac0306e68a65f5",
      "created_at": "2025-03-19T13:58:55Z"
    },
    {
      "event": "reviewed",
      "id": 2717272610,
      "node_id": "PRR_kwDOABII586h9koi",
      "url": null,
      "actor": null,
      "commit_id": "cac218dcbdd2b5682a7ac8659aac0306e68a65f5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK cac218dcbdd2b5682a7ac8659aac0306e68a65f5. Just changed exception to assert and assert to exception since last review. Left a minor suggestion but it's not important so feel free to ignore. Thanks for being so responsive with previous feedback.\r\n\r\nI think this PR should be pretty helpful to developers writing python tests since it cleans up logging, returns more complete error information, provides better feedback if stop_node is used incorrectly, and adds test coverage for the test framework to make sure it works reliably.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2717272610",
      "submitted_at": "2025-03-26T14:03:39Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "review_requested",
      "id": 16993507980,
      "node_id": "RRE_lADOABII586TGVLXzwAAAAP05FqM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16993507980",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-26T14:03:43Z",
      "requested_reviewer": {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 16994010479,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAP07AVv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16994010479",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6539598b42005f453b358a0076287db99d1b02eb",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/6539598b42005f453b358a0076287db99d1b02eb",
      "created_at": "2025-03-26T14:25:53Z"
    },
    {
      "event": "reviewed",
      "id": 2717633497,
      "node_id": "PRR_kwDOABII586h-8vZ",
      "url": null,
      "actor": null,
      "commit_id": "6539598b42005f453b358a0076287db99d1b02eb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 6539598b42005f453b358a0076287db99d1b02eb. Since last review just simplified errno code a little as suggested",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2717633497",
      "submitted_at": "2025-03-26T15:13:57Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "reviewed",
      "id": 2720758773,
      "node_id": "PRR_kwDOABII586iK3v1",
      "url": null,
      "actor": null,
      "commit_id": "6539598b42005f453b358a0076287db99d1b02eb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "lightweight, code review only ACK 6539598b42005f453b358a0076287db99d1b02eb",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2720758773",
      "submitted_at": "2025-03-27T11:13:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17022842615,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAP2o_b3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17022842615",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6bbfb3eeef2e35560dd357bb2a8a7378e2b49eb5",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/6bbfb3eeef2e35560dd357bb2a8a7378e2b49eb5",
      "created_at": "2025-03-27T22:28:23Z"
    },
    {
      "event": "reviewed",
      "id": 2723573980,
      "node_id": "PRR_kwDOABII586iVnDc",
      "url": null,
      "actor": null,
      "commit_id": "6bbfb3eeef2e35560dd357bb2a8a7378e2b49eb5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Pushed new version due to [recent discussion around socket timeout issue](https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2016198629).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2723573980",
      "submitted_at": "2025-03-27T22:33:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "reviewed",
      "id": 2724801948,
      "node_id": "PRR_kwDOABII586iaS2c",
      "url": null,
      "actor": null,
      "commit_id": "6bbfb3eeef2e35560dd357bb2a8a7378e2b49eb5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "lightweight re-review-ack 6bbfb3eeef2e35560dd357bb2a8a7378e2b49eb5",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2724801948",
      "submitted_at": "2025-03-28T09:28:51Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17033008139,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAP3PxQL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17033008139",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fc88c2ec297dc93ba06008bd5ae10798e9f6aeac",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/fc88c2ec297dc93ba06008bd5ae10798e9f6aeac",
      "created_at": "2025-03-28T13:52:54Z"
    },
    {
      "event": "reviewed",
      "id": 2725634006,
      "node_id": "PRR_kwDOABII586idd_W",
      "url": null,
      "actor": null,
      "commit_id": "fc88c2ec297dc93ba06008bd5ae10798e9f6aeac",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Latest push:\r\n* Removes `test_instant_rpc_timeout` which was artificially setting `rpc_timeout = 0`, which is not a supported case and which caused different behavior on Windows network stacks compared to Linux. That test was a rough subset of `test_wrong_rpc_port`. Removing `test_instant_rpc_timeout` allowed dropping the commit with the workaround for socket timeout with unset errno entirely. **Special thanks to @maflcko for [insisting](https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2018040253) that something was not right.**\r\n* Fixed nit concerning escaping in regexp string.\r\n* Bumped `subprocess.run`-timeout since it was flaky under Windows.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2725634006",
      "submitted_at": "2025-03-28T14:06:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "reviewed",
      "id": 2725831188,
      "node_id": "PRR_kwDOABII586ieOIU",
      "url": null,
      "actor": null,
      "commit_id": "fc88c2ec297dc93ba06008bd5ae10798e9f6aeac",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK fc88c2ec297dc93ba06008bd5ae10798e9f6aeac. Just dropped 0 timeout workaround and instant timeout test since the last review.\r\n\r\nIdeally, I would want setting a 0 timeout to result in a comprehensible error message lke \"Unable to connect to bitcoind after 0s\" and not some harder to debug behavior, but it wouldn't be worth restructuring the code or adding a special case for.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2725831188",
      "submitted_at": "2025-03-28T14:56:44Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "review_requested",
      "id": 17034040117,
      "node_id": "RRE_lADOABII586TGVLXzwAAAAP3TtM1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17034040117",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T14:56:50Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2778504085,
      "node_id": "PRR_kwDOABII586lnJuV",
      "url": null,
      "actor": null,
      "commit_id": "fc88c2ec297dc93ba06008bd5ae10798e9f6aeac",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "As discussed in private, I've summarized my findings here shortly.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2778504085",
      "submitted_at": "2025-04-18T13:10:45Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "review_requested",
      "id": 17320192895,
      "node_id": "RRE_lADOABII586TGVLXzwAAAAQIXSt_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17320192895",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T13:10:52Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17325376048,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQIrEIw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17325376048",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "77776c532a94874a3b77e90dc15747c8462c7ca7",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/77776c532a94874a3b77e90dc15747c8462c7ca7",
      "created_at": "2025-04-18T21:56:49Z"
    },
    {
      "event": "reviewed",
      "id": 2779505028,
      "node_id": "PRR_kwDOABII586lq-GE",
      "url": null,
      "actor": null,
      "commit_id": "77776c532a94874a3b77e90dc15747c8462c7ca7",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Hi folks!\r\n\r\nAsked @l0rinc what it would take for him to give this more than a lightweight A-C-K, and we went through the commits together, especially feature_framework_startup_failures.py. It made me agree some minor improvements are justified in order to make the code more readable & correct.\r\n\r\n#### Added final commit - drop or squash?\r\n\r\nWe also agreed that it would be worth experimenting with breaking up the one test class into multiple to clarify things further. Let me know what you think about the result.\r\n\r\n@ryanofsky: Hope you tolerate the invalidation of your latest ACK. If you deem the next-to-last commit re-ACK:able, but would rather see the last commit dropped, I hereby grant you veto rights for time served within this PR.\r\n\r\n---\r\n\r\nEdit: Subsequent pushes unbreak the test when running in the context of test_runner.py with `--cachedir` being sent in, solve minor linter failure, and rebased on master in hopes of avoiding [Windows CI](https://github.com/bitcoin/bitcoin/actions/runs/14542361027/job/40803360940?pr=30660) file contention issue #32291 (which I only now realize hasn't been solved yet).",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2779505028",
      "submitted_at": "2025-04-18T21:57:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17325733885,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQIsbf9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17325733885",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "94fbd7baf40b0bede8d29419e6a72c55f1d5f16d",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/94fbd7baf40b0bede8d29419e6a72c55f1d5f16d",
      "created_at": "2025-04-18T22:43:31Z"
    },
    {
      "event": "labeled",
      "id": 17325737206,
      "node_id": "LE_lADOABII586TGVLXzwAAAAQIscT2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17325737206",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T22:43:45Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2816311959,
      "node_id": "IC_kwDOABII586n3YKX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2816311959",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T22:43:46Z",
      "updated_at": "2025-04-18T22:43:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/40802607410</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2816311959",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17325752680,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQIsgFo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17325752680",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9e0fede6a6d608ff307b48b9a326c6d467b410cf",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/9e0fede6a6d608ff307b48b9a326c6d467b410cf",
      "created_at": "2025-04-18T22:45:15Z"
    },
    {
      "event": "unlabeled",
      "id": 17326860243,
      "node_id": "UNLE_lADOABII586TGVLXzwAAAAQIwufT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17326860243",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-19T01:43:11Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2816587753,
      "node_id": "IC_kwDOABII586n4bfp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2816587753",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-19T07:26:24Z",
      "updated_at": "2025-04-19T07:26:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "You could rebase your change before the fix reverted in https://github.com/bitcoin/bitcoin/pull/32302 to make it green",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2816587753",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "reviewed",
      "id": 2779902319,
      "node_id": "PRR_kwDOABII586lsfFv",
      "url": null,
      "actor": null,
      "commit_id": "9e0fede6a6d608ff307b48b9a326c6d467b410cf",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, I like the new `FeatureFrameworkStartupFailures`, it's untangled a lot better now in my opinion. I assume from the last commit message that it's not final, right?",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2779902319",
      "submitted_at": "2025-04-19T07:46:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "convert_to_draft",
      "id": 17328105772,
      "node_id": "CTDE_lADOABII586TGVLXzwAAAAQI1eks",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17328105772",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-19T08:56:37Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDg3OTI0M2U4MWZkNTVmNTQ3MzlmYmRhZTRkNWI4NjY2ZjVhY2I5YTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/879243e81fd55f54739fbdae4d5b8666f5acb9a9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/879243e81fd55f54739fbdae4d5b8666f5acb9a9",
      "tree": {
        "sha": "f7b80cc26960ea26040949a9d2f3fd35b21a95d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7b80cc26960ea26040949a9d2f3fd35b21a95d1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f7b80cc26960ea26040949a9d2f3fd35b21a95d1\nparent d91a746815e4428c738f1a096a950292cbdb5469\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1745011200 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1745089773 +0200\n\nqa refactor: wait_for_rpc_connection - Treat OSErrors the same\n\nConnectionResetError is an OSError as well (ECONNRESET), no reason to have a separate except-block for it.\n\nAlso improves comments for other exceptions and make condition above more Pythonic.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQPOu3M+tpn9C5Osbpp42K7t6a8kAWlQCSV2FVoXTjLUqHvDbTzL0AAvRLQhQn+CwaH\nimljv2pjWOvl1BwPFXiQs=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d91a746815e4428c738f1a096a950292cbdb5469",
          "sha": "d91a746815e4428c738f1a096a950292cbdb5469",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d91a746815e4428c738f1a096a950292cbdb5469"
        }
      ],
      "message": "qa refactor: wait_for_rpc_connection - Treat OSErrors the same\n\nConnectionResetError is an OSError as well (ECONNRESET), no reason to have a separate except-block for it.\n\nAlso improves comments for other exceptions and make condition above more Pythonic.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-04-19T19:09:33Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-04-18T21:20:00Z"
      },
      "sha": "879243e81fd55f54739fbdae4d5b8666f5acb9a9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZhZDIxYjRjMDExNDAyOWQxNmQzMzRiZjhkNDM3ODM0NzA4YTI5NWU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ad21b4c0114029d16d334bf8d437834708a295e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad21b4c0114029d16d334bf8d437834708a295e",
      "tree": {
        "sha": "53047df5d374a676dd6f72fb79c71956e9c27b3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53047df5d374a676dd6f72fb79c71956e9c27b3d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 53047df5d374a676dd6f72fb79c71956e9c27b3d\nparent 879243e81fd55f54739fbdae4d5b8666f5acb9a9\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1733925376 +0100\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1745089773 +0200\n\nqa: Include ignored errors in RPC connection timeout\n\nWhen an RPC connection attempt with bitcoind times out, include which ignored errors occurred in the exception message.\n\nMay provide clues of what has gone wrong.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQMYm0Y33BCVPKvt+GbHSE9DOcwby+RamkDxbIcvOQ4qRQrGschAg85lWaRaKNSJCts\nPYcVvGZg4gCQVLdSSfnAQ=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/879243e81fd55f54739fbdae4d5b8666f5acb9a9",
          "sha": "879243e81fd55f54739fbdae4d5b8666f5acb9a9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/879243e81fd55f54739fbdae4d5b8666f5acb9a9"
        }
      ],
      "message": "qa: Include ignored errors in RPC connection timeout\n\nWhen an RPC connection attempt with bitcoind times out, include which ignored errors occurred in the exception message.\n\nMay provide clues of what has gone wrong.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-04-19T19:09:33Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2024-12-11T13:56:16Z"
      },
      "sha": "6ad21b4c0114029d16d334bf8d437834708a295e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDliMjRhNDAzZmFlNGI4OTZmZjc3MDU1MTliZDQ4Yzg3N2I0ZTYyMWI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b24a403fae4b896ff7705519bd48c877b4e621b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9b24a403fae4b896ff7705519bd48c877b4e621b",
      "tree": {
        "sha": "3f57df30187ddbacd993e1060153c6a53f3eac13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f57df30187ddbacd993e1060153c6a53f3eac13"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3f57df30187ddbacd993e1060153c6a53f3eac13\nparent 6ad21b4c0114029d16d334bf8d437834708a295e\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1739434704 +0100\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1745089773 +0200\n\nqa: Only allow calling TestNode.stop() after connecting\n\n(Still tolerate calling it on a no longer (self.)running node, as in a node that has been queried for is_node_stopped() and modified state before returning True).\n\nTests should not attempt to use the non-functioning RPC interface to call stop() unless wait_for_connections() has succeeded.\n\nNo longer log and suppress http.client.CannotSendRequest as a consequence of stop()-RPC, as error conditions causing this knock-on issue are now guarded against before the call.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQJehu2qid/gnoQDCyjo2XGWw3D7FV6bHmOyvrRzy2mmBrn2uwqfw+69jj3xL2Nl5XN\ndxi/n7XwYP/zuANYpTxwY=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ad21b4c0114029d16d334bf8d437834708a295e",
          "sha": "6ad21b4c0114029d16d334bf8d437834708a295e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6ad21b4c0114029d16d334bf8d437834708a295e"
        }
      ],
      "message": "qa: Only allow calling TestNode.stop() after connecting\n\n(Still tolerate calling it on a no longer (self.)running node, as in a node that has been queried for is_node_stopped() and modified state before returning True).\n\nTests should not attempt to use the non-functioning RPC interface to call stop() unless wait_for_connections() has succeeded.\n\nNo longer log and suppress http.client.CannotSendRequest as a consequence of stop()-RPC, as error conditions causing this knock-on issue are now guarded against before the call.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-04-19T19:09:33Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-02-13T08:18:24Z"
      },
      "sha": "9b24a403fae4b896ff7705519bd48c877b4e621b"
    },
    {
      "event": "reviewed",
      "id": 2781869977,
      "node_id": "PRR_kwDOABII586lz_eZ",
      "url": null,
      "actor": null,
      "commit_id": "9e0fede6a6d608ff307b48b9a326c6d467b410cf",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK 9e0fede6a6d608ff307b48b9a326c6d467b410cf. Main change since last review were a lot of `feature_framework_startup_failures.py` cleanups. I do think the drop or squash commit 9e0fede6a6d608ff307b48b9a326c6d467b410cf is an improvement so would vote for squash, but no strong opinion",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2781869977",
      "submitted_at": "2025-04-21T17:53:25Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "review_requested",
      "id": 17341519523,
      "node_id": "RRE_lADOABII586TGVLXzwAAAAQJopaj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17341519523",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T17:53:30Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDFmNjM5ZWZjYTVlNzFhMGZmMjA4NDE1ZDk0ZTQwOGE3NDc3OGQ0ZGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f639efca5e71a0ff208415d94e408a74778d4db",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1f639efca5e71a0ff208415d94e408a74778d4db",
      "tree": {
        "sha": "45b8591bbaa124de3717c2bf67c23ac916b0822b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45b8591bbaa124de3717c2bf67c23ac916b0822b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 45b8591bbaa124de3717c2bf67c23ac916b0822b\nparent 9b24a403fae4b896ff7705519bd48c877b4e621b\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1745237734 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1745260522 +0200\n\nqa: Work around Python socket timeout issue\n\nObserved on local machine running Windows / Python v3.13.1 when overriding rpc_timeout to small values (5- seconds). Next commit performs such overrides.\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQGHtxIWTo9mgxIPs4MWmzIQplqtD21Jt+Pj0hPNz1LNnJv7U1hx7Iz1MCzXje4OiY5\na2LVuTH0lwb3uXS1N80AU=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b24a403fae4b896ff7705519bd48c877b4e621b",
          "sha": "9b24a403fae4b896ff7705519bd48c877b4e621b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9b24a403fae4b896ff7705519bd48c877b4e621b"
        }
      ],
      "message": "qa: Work around Python socket timeout issue\n\nObserved on local machine running Windows / Python v3.13.1 when overriding rpc_timeout to small values (5- seconds). Next commit performs such overrides.",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-04-21T18:35:22Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-04-21T12:15:34Z"
      },
      "sha": "1f639efca5e71a0ff208415d94e408a74778d4db"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17342049892,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQJqq5k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17342049892",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "14175d9d5ac02a6614631a0d4636690e47534b75",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/14175d9d5ac02a6614631a0d4636690e47534b75",
      "created_at": "2025-04-21T18:40:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17342250318,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQJrb1O",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17342250318",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "created_at": "2025-04-21T18:59:11Z"
    },
    {
      "event": "reviewed",
      "id": 2782051429,
      "node_id": "PRR_kwDOABII586l0rxl",
      "url": null,
      "actor": null,
      "commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I also vote for squashing the last commit.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2782051429",
      "submitted_at": "2025-04-21T19:52:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17344008893,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQJyJK9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17344008893",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91",
      "created_at": "2025-04-21T21:59:52Z"
    },
    {
      "event": "ready_for_review",
      "id": 17344163866,
      "node_id": "RFRE_lADOABII586TGVLXzwAAAAQJyvAa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17344163866",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T22:20:34Z"
    },
    {
      "event": "commented",
      "id": 2819614471,
      "node_id": "IC_kwDOABII586oD-cH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2819614471",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-21T22:21:46Z",
      "updated_at": "2025-04-21T22:31:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Notable changes since [previous update](https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2779505028) (`git range-diff master 77776c5 ea3cc83`).\r\n* Changed parent test process to run a node, and use it to measure startup-times. That measurement is then used to to cap how long we wait before timing out due to wrong port.\r\n* Forward test framework arguments like `--tmpdir` and `--timeout-factor` to child processes (now with stable hashing).\r\n* Dropped the commit to avoid logging node stop info as parent process now also runs a node.\r\n* Re-added the commit to handle socket timeout exception with missing errno (https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053051864), since I started experiencing the issue again for non-zero `rpc_timeout`s as well.\r\n* Added warning about dangling bitcoind processes upon subprocess timeout.\r\n* Edit: Also squashed commit breaking apart class in feature_framework_startup_failures.py based off https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2781869977 and https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2782051429.\r\n",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2819614471",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "reviewed",
      "id": 2783771949,
      "node_id": "PRR_kwDOABII586l7P0t",
      "url": null,
      "actor": null,
      "commit_id": "ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91\r\n\r\nLGTM, left a few nits, but none are blockers.\r\nBefore merging someone with more experience should also review to be sure.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2783771949",
      "submitted_at": "2025-04-22T11:56:17Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "review_requested",
      "id": 17352602820,
      "node_id": "RRE_lADOABII586TGVLXzwAAAAQKS7TE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17352602820",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-22T11:56:28Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17353510743,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQKWY9X",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17353510743",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ece168ecef6e57e3a994ec5f7bd341f9c7525721",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/ece168ecef6e57e3a994ec5f7bd341f9c7525721",
      "created_at": "2025-04-22T12:57:07Z"
    },
    {
      "event": "reviewed",
      "id": 2784838614,
      "node_id": "PRR_kwDOABII586l_UPW",
      "url": null,
      "actor": null,
      "commit_id": "ece168ecef6e57e3a994ec5f7bd341f9c7525721",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK ece168ecef6e57e3a994ec5f7bd341f9c7525721. Changes since last review were squashing and rebasing, doing a better job of passing seed, timeouts, and tmpdirs to child processes. Previously dropped workaround for None errno is also back, this time with link to upstream python bug.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2784838614",
      "submitted_at": "2025-04-22T18:02:28Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "review_requested",
      "id": 17358145853,
      "node_id": "RRE_lADOABII586TGVLXzwAAAAQKoEk9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17358145853",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-22T18:02:34Z",
      "requested_reviewer": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17366755796,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQLI6nU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17366755796",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "afd01c18c7fed41882410e37ff91f03975011c5e",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/afd01c18c7fed41882410e37ff91f03975011c5e",
      "created_at": "2025-04-23T09:01:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17367082776,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQLKKcY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17367082776",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "created_at": "2025-04-23T09:18:34Z"
    },
    {
      "event": "labeled",
      "id": 17367093370,
      "node_id": "LE_lADOABII586TGVLXzwAAAAQLKNB6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17367093370",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-23T09:19:08Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2823631206,
      "node_id": "IC_kwDOABII586oTTFm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2823631206",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-23T09:19:09Z",
      "updated_at": "2025-04-23T09:19:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/40998561125</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2823631206",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "reviewed",
      "id": 2786806460,
      "node_id": "PRR_kwDOABII586mG0q8",
      "url": null,
      "actor": null,
      "commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2786806460",
      "submitted_at": "2025-04-23T10:28:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "unlabeled",
      "id": 17369027185,
      "node_id": "UNLE_lADOABII586TGVLXzwAAAAQLRlJx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17369027185",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-23T11:13:24Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2829540751,
      "node_id": "IC_kwDOABII586op12P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2829540751",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-25T06:59:59Z",
      "updated_at": "2025-04-25T06:59:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "Drahtbot's LLM is complaining about an assert string: https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2291135616\r\nThe Python interpreter is fine with mixing regular `\"\"`-strings and `f\"\"`-strings, so it's a false positive.",
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2829540751",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "commented",
      "id": 2829565889,
      "node_id": "IC_kwDOABII586op7_B",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2829565889",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-25T07:13:42Z",
      "updated_at": "2025-04-25T07:13:42Z",
      "author_association": "MEMBER",
      "body": "> Drahtbot's LLM is complaining ... [#30660 (comment)](https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2291135616)\r\n> ... it's a false positive.\r\n\r\nYes, there are some rare false-positives. However, there are many more true positives, including one logic bug that was already found in a test in another pull, so I think overall it is worth it. Happy to discuss further in https://github.com/maflcko/DrahtBot/issues, or anywhere else.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2829565889",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI4ZTI4MmVmOWFlOTRlZGU0YWFjZTZiOTdmZjE4YzY2Y2I3MmEwMDE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28e282ef9ae94ede4aace6b97ff18c66cb72a001",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/28e282ef9ae94ede4aace6b97ff18c66cb72a001",
      "tree": {
        "sha": "2fad236ea3edfdf1b0ce5216c83b00656f3713be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fad236ea3edfdf1b0ce5216c83b00656f3713be"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2fad236ea3edfdf1b0ce5216c83b00656f3713be\nparent 1f639efca5e71a0ff208415d94e408a74778d4db\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1745584756 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1745584756 +0200\n\nqa: assert_raises_message() - Stop assuming certain structure for exceptions\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQDFwXwA151A21+WLL3Ha41L2XwgplzIJxUPjxGgjX0M4gZ6yLvXvTOPsdBWwt2f3ug\nugiw1b6YMCw4zOO4nwEgg=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f639efca5e71a0ff208415d94e408a74778d4db",
          "sha": "1f639efca5e71a0ff208415d94e408a74778d4db",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1f639efca5e71a0ff208415d94e408a74778d4db"
        }
      ],
      "message": "qa: assert_raises_message() - Stop assuming certain structure for exceptions",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-04-25T12:39:16Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-04-25T12:39:16Z"
      },
      "sha": "28e282ef9ae94ede4aace6b97ff18c66cb72a001"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17406253081,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQNflgZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17406253081",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0302eefd9a826e1d8e81b3684ff8ebc6de9d4217",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/0302eefd9a826e1d8e81b3684ff8ebc6de9d4217",
      "created_at": "2025-04-25T13:05:04Z"
    },
    {
      "event": "commented",
      "id": 2832401037,
      "node_id": "IC_kwDOABII586o0wKN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2832401037",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-26T16:20:02Z",
      "updated_at": "2025-04-26T16:20:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 0302eefd9a826e1d8e81b3684ff8ebc6de9d4217\r\n\r\nLatest push fixed dead code concerns, uses counts instead of find for non-regex cases consistently and uses less encoding rountrips.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#issuecomment-2832401037",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30660"
    },
    {
      "event": "review_requested",
      "id": 17417471316,
      "node_id": "RRE_lADOABII586TGVLXzwAAAAQOKYVU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17417471316",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-26T16:20:09Z",
      "requested_reviewer": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2796176804,
      "node_id": "PRR_kwDOABII586mqkWk",
      "url": null,
      "actor": null,
      "commit_id": "0302eefd9a826e1d8e81b3684ff8ebc6de9d4217",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#pullrequestreview-2796176804",
      "submitted_at": "2025-04-26T16:23:05Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17418340760,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQONsmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17418340760",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8be192443ad07a4743a392d7d9b28b0bf0fd59fa",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/8be192443ad07a4743a392d7d9b28b0bf0fd59fa",
      "created_at": "2025-04-26T19:48:00Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIxOTQzOWIxZWVlNTcwNDFmYzM3ZGNmNTA5ZDVlZTlmMjQ4MjYzYmM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "tree": {
        "sha": "08a234ba8ace21974f404f0b5700a4f2c9ca7acc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08a234ba8ace21974f404f0b5700a4f2c9ca7acc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 08a234ba8ace21974f404f0b5700a4f2c9ca7acc\nparent 28e282ef9ae94ede4aace6b97ff18c66cb72a001\nauthor Hodlinator <172445034+hodlinator@users.noreply.github.com> 1745242119 +0200\ncommitter Hodlinator <172445034+hodlinator@users.noreply.github.com> 1745698827 +0200\n\nqa: Add feature_framework_startup_failures.py\n",
        "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg39Hzirivn9mM3G8qwAOGOKsmHT\ny2f/O2iDRQI8UxEyoAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQLLMfSmDkiZ9Jgwo3LG019aB4KSZQ/q27gzKoHk4qZll5NGmoNVbUhTYj+maaPoprn\nccJwoD84MHcADRSwjshwU=\n-----END SSH SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28e282ef9ae94ede4aace6b97ff18c66cb72a001",
          "sha": "28e282ef9ae94ede4aace6b97ff18c66cb72a001",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/28e282ef9ae94ede4aace6b97ff18c66cb72a001"
        }
      ],
      "message": "qa: Add feature_framework_startup_failures.py",
      "committer": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-04-26T20:20:27Z"
      },
      "author": {
        "name": "Hodlinator",
        "email": "172445034+hodlinator@users.noreply.github.com",
        "date": "2025-04-21T13:28:39Z"
      },
      "sha": "b19439b1eee57041fc37dcf509d5ee9f248263bc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17418464900,
      "node_id": "HRFPE_lADOABII586TGVLXzwAAAAQOOK6E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17418464900",
      "actor": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "commit_url": "https://api.github.com/repos/hodlinator/bitcoin/commits/b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "created_at": "2025-04-26T20:21:05Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824983303",
      "pull_request_review_id": 2408783550,
      "id": 1824983303,
      "node_id": "PRRC_kwDOABII585sxwkH",
      "diff_hunk": "@@ -313,25 +316,35 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 return\n             except JSONRPCException as e:  # Initialization phase\n                 # -28 RPC in warmup\n+                if e.error['code'] == -28:\n+                    ignored_errors[\"JSONRPCException -28\"] += 1\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                # - Ignore the exception to properly raise the FailedToStartError.\n+                elif e.error['code'] == -342:\n+                    ignored_errors[\"JSONRPCException -342\"] += 1",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 27,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5c95843281bea483544e3f8348d40badda233aa1",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "non-blocking nit: might be a bit more Pythonic to use Counter.update() rather than `+= 1`.\r\nFor example:\r\n```python\r\nignored_errors.update([f\"JSONRPCException {e.error['code']}\"])\r\n```",
      "created_at": "2024-10-31T18:19:07Z",
      "updated_at": "2024-10-31T18:49:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1824983303",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824983303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 319,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824996905",
      "pull_request_review_id": 2408783550,
      "id": 1824996905,
      "node_id": "PRRC_kwDOABII585sxz4p",
      "diff_hunk": "@@ -313,25 +316,35 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 return\n             except JSONRPCException as e:  # Initialization phase\n                 # -28 RPC in warmup\n+                if e.error['code'] == -28:\n+                    ignored_errors[\"JSONRPCException -28\"] += 1\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                # - Ignore the exception to properly raise the FailedToStartError.\n+                elif e.error['code'] == -342:\n+                    ignored_errors[\"JSONRPCException -342\"] += 1\n+                else:\n                     raise  # unknown JSON RPC exception\n+                latest_error = repr(e)\n             except OSError as e:\n                 if e.errno == errno.ECONNRESET:\n                     # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n                     # succeeds. Try again to properly raise the FailedToStartError\n-                    pass\n+                    ignored_errors[\"OSError.ECONNRESET\"] += 1\n                 elif e.errno == errno.ETIMEDOUT:\n-                    pass # Treat identical to ECONNRESET\n+                    ignored_errors[\"OSError.ETIMEDOUT\"] += 1 # Treat identical to ECONNRESET\n                 elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n+                    ignored_errors[\"OSError.ECONNREFUSED\"] += 1 # Port not yet open?",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 42,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5c95843281bea483544e3f8348d40badda233aa1",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "non-blocking nit: same with these.\r\ne.g.\r\n```python\r\nignored_errors.update([errno.errorcode[e.errno]])\r\n```",
      "created_at": "2024-10-31T18:27:21Z",
      "updated_at": "2024-10-31T18:49:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1824996905",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1824996905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 332,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 336,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825023128",
      "pull_request_review_id": 2408783550,
      "id": 1825023128,
      "node_id": "PRRC_kwDOABII585sx6SY",
      "diff_hunk": "@@ -0,0 +1,41 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify failure to connect to bitcoind's RPC interface only raises one exception.\n+\n+Multiple exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as additional\n+maintenance and complexity is low.\n+\"\"\"\n+\n+from pathlib import Path\n+\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        test_name = Path(__file__).name\n+        self.log.info(f\"{test_name}: Setting RPC timeout to 0 to simulate an unresponsive bitcoind\")\n+        self.rpc_timeout = 0\n+\n+        try:\n+            BitcoinTestFramework.setup_network(self)\n+        except AssertionError as e:\n+            assert_equal(str(e)[:47], \"[node 0] Unable to connect to bitcoind after 0s\")\n+            self.log.info(f\"{test_name}: Caught AssertionError with expected RPC connection failure message\")\n+        else:\n+            raise AssertionError(\"Didn't raise expected error\")",
      "path": "test/functional/feature_framework_rpc_failure.py",
      "position": null,
      "original_position": 35,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "9173b056006fd3940675108aa3fe0d0d855af768",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe we can use `util.assert_raises()` or `util.assert_raises_message()` here to keep things more concise?",
      "created_at": "2024-10-31T18:47:30Z",
      "updated_at": "2024-10-31T18:49:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1825023128",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1825023128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 29,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826772195",
      "pull_request_review_id": 2411714494,
      "id": 1826772195,
      "node_id": "PRRC_kwDOABII585s4lTj",
      "diff_hunk": "@@ -313,25 +316,35 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 return\n             except JSONRPCException as e:  # Initialization phase\n                 # -28 RPC in warmup\n+                if e.error['code'] == -28:\n+                    ignored_errors[\"JSONRPCException -28\"] += 1\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                # - Ignore the exception to properly raise the FailedToStartError.\n+                elif e.error['code'] == -342:\n+                    ignored_errors[\"JSONRPCException -342\"] += 1\n+                else:\n                     raise  # unknown JSON RPC exception\n+                latest_error = repr(e)\n             except OSError as e:\n                 if e.errno == errno.ECONNRESET:\n                     # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n                     # succeeds. Try again to properly raise the FailedToStartError\n-                    pass\n+                    ignored_errors[\"OSError.ECONNRESET\"] += 1\n                 elif e.errno == errno.ETIMEDOUT:\n-                    pass # Treat identical to ECONNRESET\n+                    ignored_errors[\"OSError.ETIMEDOUT\"] += 1 # Treat identical to ECONNRESET\n                 elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n+                    ignored_errors[\"OSError.ECONNREFUSED\"] += 1 # Port not yet open?",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 42,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5c95843281bea483544e3f8348d40badda233aa1",
      "in_reply_to_id": 1824996905,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Same issue with `update()`, see https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1826774806).",
      "created_at": "2024-11-02T20:21:00Z",
      "updated_at": "2024-11-02T20:28:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1826772195",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826772195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 332,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 336,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826774077",
      "pull_request_review_id": 2411714494,
      "id": 1826774077,
      "node_id": "PRRC_kwDOABII585s4lw9",
      "diff_hunk": "@@ -0,0 +1,41 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify failure to connect to bitcoind's RPC interface only raises one exception.\n+\n+Multiple exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as additional\n+maintenance and complexity is low.\n+\"\"\"\n+\n+from pathlib import Path\n+\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        test_name = Path(__file__).name\n+        self.log.info(f\"{test_name}: Setting RPC timeout to 0 to simulate an unresponsive bitcoind\")\n+        self.rpc_timeout = 0\n+\n+        try:\n+            BitcoinTestFramework.setup_network(self)\n+        except AssertionError as e:\n+            assert_equal(str(e)[:47], \"[node 0] Unable to connect to bitcoind after 0s\")\n+            self.log.info(f\"{test_name}: Caught AssertionError with expected RPC connection failure message\")\n+        else:\n+            raise AssertionError(\"Didn't raise expected error\")",
      "path": "test/functional/feature_framework_rpc_failure.py",
      "position": null,
      "original_position": 35,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "9173b056006fd3940675108aa3fe0d0d855af768",
      "in_reply_to_id": 1825023128,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Had to add a commit (2a0c0e410e9f32dbf7af7229457889b09553c438) that refurbishes `assert_raises_message()`, but test is much cleaner now!",
      "created_at": "2024-11-02T20:22:41Z",
      "updated_at": "2024-11-02T20:26:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1826774077",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826774077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 29,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826774806",
      "pull_request_review_id": 2411714494,
      "id": 1826774806,
      "node_id": "PRRC_kwDOABII585s4l8W",
      "diff_hunk": "@@ -313,25 +316,35 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 return\n             except JSONRPCException as e:  # Initialization phase\n                 # -28 RPC in warmup\n+                if e.error['code'] == -28:\n+                    ignored_errors[\"JSONRPCException -28\"] += 1\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                # - Ignore the exception to properly raise the FailedToStartError.\n+                elif e.error['code'] == -342:\n+                    ignored_errors[\"JSONRPCException -342\"] += 1",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 27,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5c95843281bea483544e3f8348d40badda233aa1",
      "in_reply_to_id": 1824983303,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Tried using `update()`, but it resulted in things like:\r\n```\r\nAssertionError: [node 0] Unable to connect to bitcoind after 10s (ignored errors: {'m': 40, 'i': 120, 's': 120, 'n': 80, 'g': 40, '_': 40, 'c': 40, 'r': 40, 'e': 80, 'd': 40, 't': 40, 'a': 40, 'l': 40}, latest error: ValueError('No RPC credentials'))\r\n```\r\ni.e. it was iterating over the string and incrementing an entry for each unique character, which seems to match the [docs](https://docs.python.org/3/library/collections.html#collections.Counter.update) even though not super clear.~\r\n\r\n---\r\n\r\nEdit: @tdb3 pointed out out of band than I'd probably missed out the `[]`-brackets around the strings to make `update()` iterate through whole strings instead of chars.\r\n```python\r\nignored_errors.update([f\"JSONRPCException {e.error['code']}\"])\r\n````\r\nfeels slightly more contrived and verbose to me than\r\n```python\r\nignored_errors[f\"JSONRPCException {e.error['code']}\"] += 1\r\n```\r\nbut neither is too elegant.\r\n\r\nMight switch away from `Counter` if something more appropriate is found.",
      "created_at": "2024-11-02T20:23:20Z",
      "updated_at": "2024-11-02T21:37:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1826774806",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826774806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 319,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826867112",
      "pull_request_review_id": 2411750030,
      "id": 1826867112,
      "node_id": "PRRC_kwDOABII585s48eo",
      "diff_hunk": "@@ -317,19 +320,25 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n                 if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n+                ignored_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n+                latest_error = repr(e)\n             except OSError as e:\n                 # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n                 #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n                 # ETIMEDOUT    - Treat identical to ECONNRESET\n                 # ECONNREFUSED - Port not yet open?\n                 if e.errno not in [errno.ECONNRESET, errno.ETIMEDOUT, errno.ECONNREFUSED]:\n                     raise  # unknown OS error\n+                ignored_errors[f\"OSError {errno.errorcode[e.errno]}\"] += 1\n+                latest_error = repr(e)\n             except ValueError as e:\n                 # If cookie file is missing and no rpcuser or rpcpassword; bitcoind is still starting, otherwise raise\n                 if \"No RPC credentials\" not in str(e):\n                     raise\n+                ignored_errors[\"missing_credentials\"] += 1\n+                latest_error = repr(e)\n             time.sleep(1.0 / poll_per_s)\n-        self._raise_assertion_error(\"Unable to connect to bitcoind after {}s\".format(self.rpc_timeout))\n+        self._raise_assertion_error(\"Unable to connect to bitcoind after {}s (ignored errors: {}, latest error: {})\".format(self.rpc_timeout, str(dict(ignored_errors)), latest_error))",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 40,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "b6b30c2d9c24fde23a613ee9b3681d66ec7abff1",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "non-blocking pico-nit:\r\nIf this file gets touched again, could use `f` string instead of `format`.\r\nhttps://github.com/bitcoin/bitcoin/blob/master/test/functional/README.md#style-guidelines",
      "created_at": "2024-11-02T22:50:33Z",
      "updated_at": "2024-11-02T22:59:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1826867112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826867112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826869399",
      "pull_request_review_id": 2411751751,
      "id": 1826869399,
      "node_id": "PRRC_kwDOABII585s49CX",
      "diff_hunk": "@@ -317,19 +320,25 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n                 if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n+                ignored_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n+                latest_error = repr(e)\n             except OSError as e:\n                 # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n                 #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n                 # ETIMEDOUT    - Treat identical to ECONNRESET\n                 # ECONNREFUSED - Port not yet open?\n                 if e.errno not in [errno.ECONNRESET, errno.ETIMEDOUT, errno.ECONNREFUSED]:\n                     raise  # unknown OS error\n+                ignored_errors[f\"OSError {errno.errorcode[e.errno]}\"] += 1\n+                latest_error = repr(e)\n             except ValueError as e:\n                 # If cookie file is missing and no rpcuser or rpcpassword; bitcoind is still starting, otherwise raise\n                 if \"No RPC credentials\" not in str(e):\n                     raise\n+                ignored_errors[\"missing_credentials\"] += 1\n+                latest_error = repr(e)\n             time.sleep(1.0 / poll_per_s)\n-        self._raise_assertion_error(\"Unable to connect to bitcoind after {}s\".format(self.rpc_timeout))\n+        self._raise_assertion_error(\"Unable to connect to bitcoind after {}s (ignored errors: {}, latest error: {})\".format(self.rpc_timeout, str(dict(ignored_errors)), latest_error))",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 40,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "b6b30c2d9c24fde23a613ee9b3681d66ec7abff1",
      "in_reply_to_id": 1826867112,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point! Resolved in latest push.",
      "created_at": "2024-11-02T23:11:35Z",
      "updated_at": "2024-11-02T23:11:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1826869399",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1826869399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 341,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827490394",
      "pull_request_review_id": 2412663196,
      "id": 1827490394,
      "node_id": "PRRC_kwDOABII585s7Upa",
      "diff_hunk": "@@ -0,0 +1,35 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify failure to connect to bitcoind's RPC interface only raises one exception.\n+\n+Multiple exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as additional\n+maintenance and complexity is low.\n+\"\"\"\n+\n+from pathlib import Path\n+\n+from test_framework.util import (\n+    assert_raises_message,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        test_name = Path(__file__).name\n+        self.log.info(f\"{test_name}: Setting RPC timeout to 0 to simulate an unresponsive bitcoind\")",
      "path": "test/functional/feature_framework_rpc_failure.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "042cee7073b338d79b5176d4157cf08bbd079b9f",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Any reason to log the file name here? The containing folder of the log should already have the name of the test/file. If not, the user should know which test they called to know it.\r\n\r\nIf not, and this was helpful, it would be better to log it for all tests, instead of just for this one test specifically.",
      "created_at": "2024-11-04T10:15:01Z",
      "updated_at": "2024-11-06T18:18:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1827490394",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827490394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827578786",
      "pull_request_review_id": 2412663196,
      "id": 1827578786,
      "node_id": "PRRC_kwDOABII585s7qOi",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 6,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in 5ca92b17c5d2d5efa7b2246da1905bb8fd186230: It is obvious, but could mention the success case as well?\r\n\r\n`Retry after these, until a permanent success or failure state (such as FailedToStartError, or timeout) is reached.`?",
      "created_at": "2024-11-04T11:24:08Z",
      "updated_at": "2024-11-06T18:18:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1827578786",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827578786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 315,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827592298",
      "pull_request_review_id": 2412663196,
      "id": 1827592298,
      "node_id": "PRRC_kwDOABII585s7thq",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 8,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think this is true, it is just one example. I think 342 can be raised by authproxy.py for various reasons.",
      "created_at": "2024-11-04T11:36:02Z",
      "updated_at": "2024-11-06T18:18:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1827592298",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827592298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827600606",
      "pull_request_review_id": 2412663196,
      "id": 1827600606,
      "node_id": "PRRC_kwDOABII585s7vje",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 25,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Could just mention that the three are treated equal to \"-342 Service unavailable\", which is already explained above?",
      "created_at": "2024-11-04T11:42:48Z",
      "updated_at": "2024-11-06T18:18:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1827600606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827600606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827605564",
      "pull_request_review_id": 2412663196,
      "id": 1827605564,
      "node_id": "PRRC_kwDOABII585s7ww8",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?\n+                if e.errno not in [errno.ECONNRESET, errno.ETIMEDOUT, errno.ECONNREFUSED]:\n                     raise  # unknown OS error\n-            except ValueError as e:  # cookie file not found and no rpcuser or rpcpassword; bitcoind is still starting\n+            except ValueError as e:\n+                # If cookie file is missing and no rpcuser or rpcpassword; bitcoind is still starting, otherwise raise",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 30,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I don't think \"bitcoind is still starting\" is true either. It is just one example. Another example would be that the cookie file is (accidentally) disabled in the config.\r\n\r\nWhat about just `Retry if cookie file is not created and no rpcuser or rpcpassword.\"?",
      "created_at": "2024-11-04T11:47:12Z",
      "updated_at": "2024-11-06T18:18:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1827605564",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1827605564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834128269",
      "pull_request_review_id": 2423368450,
      "id": 1834128269,
      "node_id": "PRRC_kwDOABII585tUpON",
      "diff_hunk": "@@ -0,0 +1,35 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify failure to connect to bitcoind's RPC interface only raises one exception.\n+\n+Multiple exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as additional\n+maintenance and complexity is low.\n+\"\"\"\n+\n+from pathlib import Path\n+\n+from test_framework.util import (\n+    assert_raises_message,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        test_name = Path(__file__).name\n+        self.log.info(f\"{test_name}: Setting RPC timeout to 0 to simulate an unresponsive bitcoind\")",
      "path": "test/functional/feature_framework_rpc_failure.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "042cee7073b338d79b5176d4157cf08bbd079b9f",
      "in_reply_to_id": 1827490394,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Wanted to make clear it wasn't something internal to `BitcoinTestFramework/TestNode` deciding to set the RPC timeout. Replaced that with instead appending \", expect one warning\" to the log message. (Edit: now pushed).",
      "created_at": "2024-11-08T10:44:14Z",
      "updated_at": "2024-11-08T10:45:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1834128269",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834128269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834132074",
      "pull_request_review_id": 2423382638,
      "id": 1834132074,
      "node_id": "PRRC_kwDOABII585tUqJq",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 6,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": 1827578786,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, changed to\r\n`Suppress these in favor of a later outcome (success, FailedToStartError, or timeout).`",
      "created_at": "2024-11-08T10:47:20Z",
      "updated_at": "2024-11-08T22:26:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1834132074",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834132074"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 315,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834132851",
      "pull_request_review_id": 2423383926,
      "id": 1834132851,
      "node_id": "PRRC_kwDOABII585tUqVz",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 8,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": 1827592298,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Made comment less definitive.",
      "created_at": "2024-11-08T10:48:03Z",
      "updated_at": "2024-11-08T10:48:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1834132851",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834132851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 317,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834133495",
      "pull_request_review_id": 2423385042,
      "id": 1834133495,
      "node_id": "PRRC_kwDOABII585tUqf3",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 25,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": 1827600606,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added:\r\n`Suppress similarly to the above JSONRPCException errors:`",
      "created_at": "2024-11-08T10:48:40Z",
      "updated_at": "2024-11-08T10:48:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1834133495",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834133495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834134904",
      "pull_request_review_id": 2423387458,
      "id": 1834134904,
      "node_id": "PRRC_kwDOABII585tUq14",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?\n+                if e.errno not in [errno.ECONNRESET, errno.ETIMEDOUT, errno.ECONNREFUSED]:\n                     raise  # unknown OS error\n-            except ValueError as e:  # cookie file not found and no rpcuser or rpcpassword; bitcoind is still starting\n+            except ValueError as e:\n+                # If cookie file is missing and no rpcuser or rpcpassword; bitcoind is still starting, otherwise raise",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 30,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": 1827605564,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree, made comment less definitive, but still think it's good to include the common cause:\r\n`Suppress if cookie file is missing and no rpcuser or rpcpassword; bitcoind may be starting`",
      "created_at": "2024-11-08T10:49:56Z",
      "updated_at": "2024-11-08T10:49:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1834134904",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834134904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 328,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834551086",
      "pull_request_review_id": 2424048996,
      "id": 1834551086,
      "node_id": "PRRC_kwDOABII585tWQcu",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 25,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": 1827600606,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I still don't know if the current docs are correct and useful.\r\n\r\nWhy would `ETIMEDOUT` only happen on warmup? Why is it even relevant to mention anything here?\r\n\r\nI think it would be clearer to just mention that the three are treated equal to \"-342 Service unavailable\", which is already explained above?",
      "created_at": "2024-11-08T15:06:26Z",
      "updated_at": "2024-11-08T15:06:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1834551086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1834551086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846425672",
      "pull_request_review_id": 2442357273,
      "id": 1846425672,
      "node_id": "PRRC_kwDOABII585uDjhI",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 25,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": 1827600606,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1834551086\r\n\r\nAre you still working on this?",
      "created_at": "2024-11-18T11:27:29Z",
      "updated_at": "2024-11-18T11:27:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1846425672",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1846425672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847351945",
      "pull_request_review_id": 2443849497,
      "id": 1847351945,
      "node_id": "PRRC_kwDOABII585uHFqJ",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 25,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": 1827600606,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I am still working on this PR. Not thrilled about removing the 3 comment strings predating this PR.",
      "created_at": "2024-11-18T22:19:43Z",
      "updated_at": "2024-11-18T22:19:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1847351945",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1847351945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858229897",
      "pull_request_review_id": 2461064621,
      "id": 1858229897,
      "node_id": "PRRC_kwDOABII585uwlaJ",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 25,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": 1827600606,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I am satisfied with the PR in it's latest revision, but if you don't consider this a nit, but rather a blocker, let me know.",
      "created_at": "2024-11-26T10:35:47Z",
      "updated_at": "2024-11-26T10:35:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1858229897",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1858229897"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868331201",
      "pull_request_review_id": 2476693353,
      "id": 1868331201,
      "node_id": "PRRC_kwDOABII585vXHjB",
      "diff_hunk": "@@ -5,6 +5,7 @@\n \"\"\"Class for bitcoind node under test\"\"\"\n \n import contextlib\n+from collections import Counter",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 4,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ba28593147ccc880c3a4d40db0d4ef57f4766254",
      "in_reply_to_id": null,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Could possibly use `collections.defaultdict(int)` instead of `Counter` iff I really need to retouch).",
      "created_at": "2024-12-03T20:31:38Z",
      "updated_at": "2024-12-03T20:31:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1868331201",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1868331201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904577914",
      "pull_request_review_id": 2532868324,
      "id": 1904577914,
      "node_id": "PRRC_kwDOABII585xhY16",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 25,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": 1827600606,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test refactor: wait_for_rpc_connection - Treat OSErrors the same\" (5321eb089cd1b39160038050a6ef6f27fd6f4ef9)\r\n\r\nI think these documentation changes look ok, but looking at old and new versions side by side I mostly found the previous comments easier to follow because they were more direct and interspersed with relevant code.\r\n\r\nE.g. the previous \"# Initialization phase\" comment next to the exception being caught told me that the exception was expected during initialization. The current comment \"Suppress these in favor of a later outcome\" tells me the code does not care about this exception as much as other exceptions, but not why.\r\n\r\nAm fine with both versions though.\r\n\r\n",
      "created_at": "2025-01-06T19:57:04Z",
      "updated_at": "2025-01-07T18:54:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1904577914",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904577914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904579994",
      "pull_request_review_id": 2532868324,
      "id": 1904579994,
      "node_id": "PRRC_kwDOABII585xhZWa",
      "diff_hunk": "@@ -311,23 +311,22 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these in favor of a later outcome (success, FailedToStartError, or timeout).\n                 # -28 RPC in warmup\n-                # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                # -342 Service unavailable, could be starting up or shutting down\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # Suppress similarly to the above JSONRPCException errors:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds.\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?\n+                if e.errno not in [errno.ECONNRESET, errno.ETIMEDOUT, errno.ECONNREFUSED]:\n                     raise  # unknown OS error\n-            except ValueError as e:  # cookie file not found and no rpcuser or rpcpassword; bitcoind is still starting\n+            except ValueError as e:\n+                # Suppress if cookie file is missing and no rpcuser or rpcpassword; bitcoind may be starting",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 32,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5321eb089cd1b39160038050a6ef6f27fd6f4ef9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test refactor: wait_for_rpc_connection - Treat OSErrors the same\" (5321eb089cd1b39160038050a6ef6f27fd6f4ef9)\r\n\r\nFound both this comment \"cookie file is missing\" and previous comment \"cookie file not found\" confusing because it is not clear why the cookie file would not be present. IMO saying \"node has not generated the cookie file yet\" would be clearer.",
      "created_at": "2025-01-06T19:59:28Z",
      "updated_at": "2025-01-07T18:54:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1904579994",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904579994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904607706",
      "pull_request_review_id": 2532868324,
      "id": 1904607706,
      "node_id": "PRRC_kwDOABII585xhgHa",
      "diff_hunk": "@@ -447,7 +448,9 @@ def is_node_stopped(self, *, expected_stderr=\"\", expected_ret_code=0):\n \n     def wait_until_stopped(self, *, timeout=BITCOIND_PROC_WAIT_TIMEOUT, expect_error=False, **kwargs):\n         if \"expected_ret_code\" not in kwargs:\n-            kwargs[\"expected_ret_code\"] = 1 if expect_error else 0  # Whether node shutdown return EXIT_FAILURE or EXIT_SUCCESS\n+            # Whether node shutdown is expected to return EXIT_FAILURE (1) or\n+            # EXIT_SUCCESS (self.expected_ret_code).\n+            kwargs[\"expected_ret_code\"] = 1 if expect_error else self.expected_ret_code",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 33,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "db0e1580a5212a162908ac4f23e935e1f76e06dc",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Allow changing expected internal return code\" (db0e1580a5212a162908ac4f23e935e1f76e06dc)\r\n\r\nNow that this logic is getting more complicated with `self.expected_ret_code` I think the `expect_error` argument should be dropped so the code can be more understandable. It looks like there is only a single `expect_error` usage in `feature_abortnode.py` and it can be easily replaced by using `expected_ret_code`. Would suggest:\r\n\r\n```diff\r\n--- a/test/functional/feature_abortnode.py\r\n+++ b/test/functional/feature_abortnode.py\r\n@@ -36,7 +36,7 @@ class AbortNodeTest(BitcoinTestFramework):\r\n \r\n             # Check that node0 aborted\r\n             self.log.info(\"Waiting for crash\")\r\n-            self.nodes[0].wait_until_stopped(timeout=5, expect_error=True, expected_stderr=\"Error: A fatal internal error occurred, see debug.log for details: Failed to disconnect block.\")\r\n+            self.nodes[0].wait_until_stopped(timeout=5, expected_ret_code=1, expected_stderr=\"Error: A fatal internal error occurred, see debug.log for details: Failed to disconnect block.\")\r\n         self.log.info(\"Node crashed - now verifying restart fails\")\r\n         self.nodes[0].assert_start_raises_init_error()\r\n \r\n--- a/test/functional/test_framework/test_node.py\r\n+++ b/test/functional/test_framework/test_node.py\r\n@@ -460,11 +460,11 @@ class TestNode():\r\n         self.log.debug(\"Node stopped\")\r\n         return True\r\n \r\n-    def wait_until_stopped(self, *, timeout=BITCOIND_PROC_WAIT_TIMEOUT, expect_error=False, **kwargs):\r\n+    def wait_until_stopped(self, *, timeout=BITCOIND_PROC_WAIT_TIMEOUT, **kwargs):\r\n         if \"expected_ret_code\" not in kwargs:\r\n             # Whether node shutdown is expected to return EXIT_FAILURE (1) or\r\n             # EXIT_SUCCESS (self.expected_ret_code).\r\n-            kwargs[\"expected_ret_code\"] = 1 if expect_error else self.expected_ret_code\r\n+            kwargs[\"expected_ret_code\"] = self.expected_ret_code\r\n         self.wait_until(lambda: self.is_node_stopped(**kwargs), timeout=timeout)\r\n \r\n     def replace_in_config(self, replacements):\r\n```\r\n",
      "created_at": "2025-01-06T20:30:06Z",
      "updated_at": "2025-01-07T18:54:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1904607706",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904607706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904621833",
      "pull_request_review_id": 2532868324,
      "id": 1904621833,
      "node_id": "PRRC_kwDOABII585xhjkJ",
      "diff_hunk": "@@ -397,14 +398,27 @@ def stop_node(self, expected_stderr='', *, wait=0, wait_until_stopped=True):\n         if not self.running:\n             return\n         self.log.debug(\"Stopping node\")\n-        try:\n-            # Do not use wait argument when testing older nodes, e.g. in wallet_backwards_compatibility.py\n-            if self.version_is_at_least(180000):\n-                self.stop(wait=wait)\n+        if self.rpc_connected:\n+            try:\n+                # Do not use wait argument when testing older nodes, e.g. in wallet_backwards_compatibility.py\n+                if self.version_is_at_least(180000):\n+                    self.stop(wait=wait)\n+                else:\n+                    self.stop()\n+            except http.client.CannotSendRequest:\n+                self.log.exception(\"Unable to stop node.\")\n+        else:\n+            return_code = self.process.poll()\n+            if return_code is None:\n+                self.log.warning(\"Cannot call stop-RPC as we are not connected. \"\n+                    f\"Killing process {self.process.pid} so that wait_until_stopped will not time out.\")\n+                self.expected_ret_code = 1 if platform.system() == \"Windows\" else -9\n+                self.process.kill()\n             else:\n-                self.stop()\n-        except http.client.CannotSendRequest:\n-            self.log.exception(\"Unable to stop node.\")\n+                self.log.warning(f\"Process {self.process.pid} already died with return code {return_code}.\")\n+                # If we no longer have a running process once stop_node() is called, assume we've already triggered an",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 42,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "4ab7879ec6b71804cc3a51bcf58fa6318fa103b0",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Kill process if stop-RPC is not available\" (4ab7879ec6b71804cc3a51bcf58fa6318fa103b0)\r\n\r\nThis change doesn't seem safe. The stop_node method can be called by arbitrary test code at arbitrary times, including when `self.rpc_connected` is False, and I don't think it should be suppressing errors unless the caller has explicitly requested that errors should not be passed on.\r\n\r\nWould suggest narrowing the error suppression behavior, so errors and bugs will be less likely to go unnoticed because of this change:\r\n\r\n<details><summary>diff</summary>\r\n<p>\r\n\r\n```diff\r\n--- a/test/functional/feature_framework_stop_node.py\r\n+++ b/test/functional/feature_framework_stop_node.py\r\n@@ -42,7 +42,7 @@ class FeatureFrameworkStopNode(BitcoinTestFramework):\r\n         assert self.nodes[0].running, \\\r\n             \"The process should still be flagged as running before calling stop_node()\"\r\n         self.log.debug(\"Explicitly stopping the node to verify it completes cleanly during the test\")\r\n-        self.nodes[0].stop_node(expected_stderr=invalid_arg_error)\r\n+        self.nodes[0].stop_node(expected_stderr=invalid_arg_error, force=True)\r\n \r\n if __name__ == '__main__':\r\n     FeatureFrameworkStopNode(__file__).main()\r\n--- a/test/functional/test_framework/test_framework.py\r\n+++ b/test/functional/test_framework/test_framework.py\r\n@@ -315,7 +315,7 @@ class BitcoinTestFramework(metaclass=BitcoinTestMetaClass):\r\n         if not self.options.noshutdown:\r\n             self.log.info(\"Stopping nodes\")\r\n             if self.nodes:\r\n-                self.stop_nodes()\r\n+                self.stop_nodes(force=self.success != TestStatus.PASSED)\r\n         else:\r\n             for node in self.nodes:\r\n                 node.cleanup_on_exit = False\r\n@@ -569,7 +569,7 @@ class BitcoinTestFramework(metaclass=BitcoinTestMetaClass):\r\n                 node.wait_for_rpc_connection()\r\n         except Exception:\r\n             # If one node failed to start, stop the others\r\n-            self.stop_nodes()\r\n+            self.stop_nodes(force=True)\r\n             raise\r\n \r\n         if self.options.coveragedir is not None:\r\n@@ -580,11 +580,11 @@ class BitcoinTestFramework(metaclass=BitcoinTestMetaClass):\r\n         \"\"\"Stop a bitcoind test node\"\"\"\r\n         self.nodes[i].stop_node(expected_stderr, wait=wait)\r\n \r\n-    def stop_nodes(self, wait=0):\r\n+    def stop_nodes(self, wait=0, force=False):\r\n         \"\"\"Stop multiple bitcoind test nodes\"\"\"\r\n         for node in self.nodes:\r\n             # Issue RPC to stop nodes\r\n-            node.stop_node(wait=wait, wait_until_stopped=False)\r\n+            node.stop_node(wait=wait, wait_until_stopped=False, force=force)\r\n \r\n         for node in self.nodes:\r\n             # Wait for nodes to stop\r\n--- a/test/functional/test_framework/test_node.py\r\n+++ b/test/functional/test_framework/test_node.py\r\n@@ -393,12 +393,30 @@ class TestNode():\r\n     def version_is_at_least(self, ver):\r\n         return self.version is None or self.version >= ver\r\n \r\n-    def stop_node(self, expected_stderr='', *, wait=0, wait_until_stopped=True):\r\n-        \"\"\"Stop the node.\"\"\"\r\n+    def stop_node(self, expected_stderr='', *, wait=0, wait_until_stopped=True, force=False):\r\n+        \"\"\"Stop the node.\r\n+\r\n+        Args:\r\n+            force (bool): Stop the node forcefully if necessary, and change\r\n+                errors that would otherwise be exceptions into logged warnings.\r\n+\r\n+        Notes:\r\n+            - The force argument should only be set to true when a test has\r\n+            already failed, and the caller is already throwing an exception of\r\n+            its own, and wants its own exception to take precedence over errors\r\n+            from this function. Since the error that happened was presumably\r\n+            unknown and unexpected, the node may have already crashed or may\r\n+            need to be shut down forcefully.\r\n+        \"\"\"\r\n         if not self.running:\r\n             return\r\n         self.log.debug(\"Stopping node\")\r\n-        if self.rpc_connected:\r\n+\r\n+        # If self.running is true but self.rpc_connected is not true, it means\r\n+        # that the process has been started, but wait_for_rpc_connection() was\r\n+        # not able to make a successful connection. In this case, if force is\r\n+        # true, avoid trying to make another RPC call and just stop the process.\r\n+        if not force or self.rpc_connected:\r\n             try:\r\n                 # Do not use wait argument when testing older nodes, e.g. in wallet_backwards_compatibility.py\r\n                 if self.version_is_at_least(180000):\r\n```\r\n</p>\r\n</details>\r\n\r\nNote: The diff above is still calling the stop RPC instead of killing the node when `self.rpc_connected` is true. But it might actually be more desirable to change `if not force or self.rpc_connected:` there to `if not force:` and prefer to kill node processes instead of stopping them after test failures. Would not suggest doing this here, since it would change other behavior beyond the scope of the PR, but I could imagine cases where changing this might reduce noise and help debugging errors in CI.",
      "created_at": "2025-01-06T20:47:25Z",
      "updated_at": "2025-01-07T18:54:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1904621833",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1904621833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 431,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1905685464",
      "pull_request_review_id": 2532868324,
      "id": 1905685464,
      "node_id": "PRRC_kwDOABII585xlnPY",
      "diff_hunk": "@@ -397,14 +398,27 @@ def stop_node(self, expected_stderr='', *, wait=0, wait_until_stopped=True):\n         if not self.running:\n             return\n         self.log.debug(\"Stopping node\")\n-        try:\n-            # Do not use wait argument when testing older nodes, e.g. in wallet_backwards_compatibility.py\n-            if self.version_is_at_least(180000):\n-                self.stop(wait=wait)\n+        if self.rpc_connected:\n+            try:\n+                # Do not use wait argument when testing older nodes, e.g. in wallet_backwards_compatibility.py\n+                if self.version_is_at_least(180000):\n+                    self.stop(wait=wait)\n+                else:\n+                    self.stop()\n+            except http.client.CannotSendRequest:\n+                self.log.exception(\"Unable to stop node.\")\n+        else:\n+            return_code = self.process.poll()\n+            if return_code is None:\n+                self.log.warning(\"Cannot call stop-RPC as we are not connected. \"\n+                    f\"Killing process {self.process.pid} so that wait_until_stopped will not time out.\")\n+                self.expected_ret_code = 1 if platform.system() == \"Windows\" else -9\n+                self.process.kill()",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 36,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "4ab7879ec6b71804cc3a51bcf58fa6318fa103b0",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Kill process if stop-RPC is not available\" (4ab7879ec6b71804cc3a51bcf58fa6318fa103b0)\r\n\r\nI think this is probably the simplest way to write this code and we should stick with it for now, but just want to point out there is a minor race condition here because the process could end between the time that poll and kill are called and then the kill call could throw an exception.\r\n\r\nAnother separate idea is that it might be safer to write `self.expected_ret_code = self.process.wait()` instead of hardcoding 1/-9 return codes. Again though would be inclined to stick with the working code unless there is a more of a reason to change.",
      "created_at": "2025-01-07T16:05:15Z",
      "updated_at": "2025-01-07T18:54:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1905685464",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1905685464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 415,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 428,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1905790290",
      "pull_request_review_id": 2532868324,
      "id": 1905790290,
      "node_id": "PRRC_kwDOABII585xmA1S",
      "diff_hunk": "@@ -0,0 +1,48 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify that when a node process fails due to a startup error, we can still call\n+TestNode.stop_node() without triggering knock-on errors.\n+\"\"\"\n+\n+from test_framework.test_node import (\n+    FailedToStartError,\n+    TestNode,\n+)\n+from test_framework.util import (\n+    assert_raises_message,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class FeatureFrameworkStopNode(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    # Overridden to avoid syncing non-started nodes.\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    # Overridden to avoid starting nodes before run_test.\n+    def setup_nodes(self):\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    def run_test(self):\n+        # We don't call assert_start_raises_init_error here, as we want\n+        # to exercise the more common wait_for_rpc_connection flow.\n+        self.nodes[0].start(extra_args=['-nonexistentarg'])\n+        invalid_arg_error = \"Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        assert_raises_message(\n+            exc=FailedToStartError,\n+            message=\"[node 0] bitcoind exited with status 1 during initialization. \" + invalid_arg_error,\n+            fun=TestNode.wait_for_rpc_connection,\n+            self=self.nodes[0]\n+        )\n+        assert self.nodes[0].running, \\\n+            \"The process should still be flagged as running before calling stop_node()\"\n+        self.log.debug(\"Explicitly stopping the node to verify it completes cleanly during the test\")\n+        self.nodes[0].stop_node(expected_stderr=invalid_arg_error)",
      "path": "test/functional/feature_framework_stop_node.py",
      "position": null,
      "original_position": 45,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "608b9ff097214bff3527cc240b7be313c62131d5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Add feature_framework_stop_node.py\" (608b9ff097214bff3527cc240b7be313c62131d5)\r\n\r\nOne problem with this test as currently written is that it prints a real warning to the output (like `TestFramework.node0 (WARNING): Process 579831 already died with return code 1`). This is potentially confusing because this warning is expected and should not be a cause for concern, but you can't know that from looking at test output.\r\n\r\nI can think of a few possible solutions:\r\n\r\n- Redirecting log output during the stop_node call and checking for the expected warning with an assertion here.\r\n- Letting the stop_node function throw exceptions instead of converting errors into warnings, then catching and handling the exceptions in the places (just 2 places currently) where they are expected.\r\n- Not changing anything but just add a warning before the warning instructing reader to ignore the next warning.\r\n\r\n",
      "created_at": "2025-01-07T17:02:28Z",
      "updated_at": "2025-01-07T18:54:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1905790290",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1905790290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1905811915",
      "pull_request_review_id": 2532868324,
      "id": 1905811915,
      "node_id": "PRRC_kwDOABII585xmGHL",
      "diff_hunk": "@@ -0,0 +1,32 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify failure to connect to bitcoind's RPC interface only raises one exception.\n+\n+Multiple exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as additional\n+maintenance and complexity is low.\n+\"\"\"\n+\n+from test_framework.util import (\n+    assert_raises_message,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.log.info(\"Setting RPC timeout to 0 to simulate an unresponsive bitcoind, expect one warning.\")\n+        self.rpc_timeout = 0\n+\n+        assert_raises_message(AssertionError, \"[node 0] Unable to connect to bitcoind after 0s\", BitcoinTestFramework.setup_network, self)",
      "path": "test/functional/feature_framework_rpc_failure.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "f67d8963575feecdd4914c1a56bab4e0bebc000d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Add feature_framework_rpc_failure.py\" (f67d8963575feecdd4914c1a56bab4e0bebc000d)\r\n\r\nNote: there is no test coverage for the \"ignored errors\" and \"latest error\" parts of the message. I think it would be good to add some coverage for this, even if it just checking for 0 and None, so there is a at least a hint that more coverage could be added here, especially since it's possible to imagine this functionality becoming broken in the future and more coverage helping prevent this.",
      "created_at": "2025-01-07T17:20:33Z",
      "updated_at": "2025-01-07T18:54:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1905811915",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1905811915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1905869855",
      "pull_request_review_id": 2532868324,
      "id": 1905869855,
      "node_id": "PRRC_kwDOABII585xmUQf",
      "diff_hunk": "@@ -157,6 +157,7 @@ def __init__(self, i, datadir_path, *, chain, rpchost, timewait, timeout_factor,\n         self.rpc = None\n         self.url = None\n         self.log = logging.getLogger('TestFramework.node%d' % i)\n+        self.expected_ret_code = 0 # EXIT_SUCCESS",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 4,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "db0e1580a5212a162908ac4f23e935e1f76e06dc",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"test: Allow changing expected internal return code\" (db0e1580a5212a162908ac4f23e935e1f76e06dc)\r\n\r\nNote: I like the changes in this commit, and think the new `TestNode.expected_ret_code` member could be a useful way to signal expected statuses when shutdown starts. But just want to point out that I don't think adding a new `expected_ret_code` member is strictly necessary for this PR to work. The only place it is actually used later in the PR is in the `stop_node` function when it is killing a failed process, and it seems to me that `stop_node` could just as easily set `self.running = False` instead and call `process.wait()` itself to reap the pid without blocking.",
      "created_at": "2025-01-07T18:13:36Z",
      "updated_at": "2025-01-07T18:54:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1905869855",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1905869855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908463115",
      "pull_request_review_id": 2537277498,
      "id": 1908463115,
      "node_id": "PRRC_kwDOABII585xwNYL",
      "diff_hunk": "@@ -397,14 +398,27 @@ def stop_node(self, expected_stderr='', *, wait=0, wait_until_stopped=True):\n         if not self.running:\n             return\n         self.log.debug(\"Stopping node\")\n-        try:\n-            # Do not use wait argument when testing older nodes, e.g. in wallet_backwards_compatibility.py\n-            if self.version_is_at_least(180000):\n-                self.stop(wait=wait)\n+        if self.rpc_connected:\n+            try:\n+                # Do not use wait argument when testing older nodes, e.g. in wallet_backwards_compatibility.py\n+                if self.version_is_at_least(180000):\n+                    self.stop(wait=wait)\n+                else:\n+                    self.stop()\n+            except http.client.CannotSendRequest:\n+                self.log.exception(\"Unable to stop node.\")\n+        else:\n+            return_code = self.process.poll()\n+            if return_code is None:\n+                self.log.warning(\"Cannot call stop-RPC as we are not connected. \"\n+                    f\"Killing process {self.process.pid} so that wait_until_stopped will not time out.\")\n+                self.expected_ret_code = 1 if platform.system() == \"Windows\" else -9\n+                self.process.kill()",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 36,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "4ab7879ec6b71804cc3a51bcf58fa6318fa103b0",
      "in_reply_to_id": 1905685464,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for pointing out the race condition! It is not so likely if we get here because of RPC connection timeout, but still possible.\r\n\r\nI tried adding a second `.kill()` after the first one and it does not raise an exception, and no exception is [documented](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.kill).",
      "created_at": "2025-01-09T09:52:58Z",
      "updated_at": "2025-01-09T16:47:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1908463115",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908463115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 415,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 428,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908515569",
      "pull_request_review_id": 2537277498,
      "id": 1908515569,
      "node_id": "PRRC_kwDOABII585xwaLx",
      "diff_hunk": "@@ -397,14 +398,27 @@ def stop_node(self, expected_stderr='', *, wait=0, wait_until_stopped=True):\n         if not self.running:\n             return\n         self.log.debug(\"Stopping node\")\n-        try:\n-            # Do not use wait argument when testing older nodes, e.g. in wallet_backwards_compatibility.py\n-            if self.version_is_at_least(180000):\n-                self.stop(wait=wait)\n+        if self.rpc_connected:\n+            try:\n+                # Do not use wait argument when testing older nodes, e.g. in wallet_backwards_compatibility.py\n+                if self.version_is_at_least(180000):\n+                    self.stop(wait=wait)\n+                else:\n+                    self.stop()\n+            except http.client.CannotSendRequest:\n+                self.log.exception(\"Unable to stop node.\")\n+        else:\n+            return_code = self.process.poll()\n+            if return_code is None:\n+                self.log.warning(\"Cannot call stop-RPC as we are not connected. \"\n+                    f\"Killing process {self.process.pid} so that wait_until_stopped will not time out.\")\n+                self.expected_ret_code = 1 if platform.system() == \"Windows\" else -9\n+                self.process.kill()\n             else:\n-                self.stop()\n-        except http.client.CannotSendRequest:\n-            self.log.exception(\"Unable to stop node.\")\n+                self.log.warning(f\"Process {self.process.pid} already died with return code {return_code}.\")\n+                # If we no longer have a running process once stop_node() is called, assume we've already triggered an",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 42,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "4ab7879ec6b71804cc3a51bcf58fa6318fa103b0",
      "in_reply_to_id": 1904621833,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems wrong to me to attempt using the RPC connection in `stop_node()` when we known that `self.rpc_connected == False`. New version has:\r\n```Python\r\nif self.rpc_connected:\r\n    # Call stop-RPC...\r\nelif force:\r\n    # Kill etc...\r\nelse:\r\n    raise RuntimeError(f\"Cannot call stop-RPC as we don't have an RPC connection to process {self.process.pid}.\")\r\n```\r\n\r\nEdit: (Ended up calling it `avoid_exceptions` which I think is slightly better than `force`).",
      "created_at": "2025-01-09T10:31:19Z",
      "updated_at": "2025-01-09T18:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1908515569",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1908515569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 431,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909135121",
      "pull_request_review_id": 2537277498,
      "id": 1909135121,
      "node_id": "PRRC_kwDOABII585xyxcR",
      "diff_hunk": "@@ -0,0 +1,48 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify that when a node process fails due to a startup error, we can still call\n+TestNode.stop_node() without triggering knock-on errors.\n+\"\"\"\n+\n+from test_framework.test_node import (\n+    FailedToStartError,\n+    TestNode,\n+)\n+from test_framework.util import (\n+    assert_raises_message,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class FeatureFrameworkStopNode(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    # Overridden to avoid syncing non-started nodes.\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+    # Overridden to avoid starting nodes before run_test.\n+    def setup_nodes(self):\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    def run_test(self):\n+        # We don't call assert_start_raises_init_error here, as we want\n+        # to exercise the more common wait_for_rpc_connection flow.\n+        self.nodes[0].start(extra_args=['-nonexistentarg'])\n+        invalid_arg_error = \"Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        assert_raises_message(\n+            exc=FailedToStartError,\n+            message=\"[node 0] bitcoind exited with status 1 during initialization. \" + invalid_arg_error,\n+            fun=TestNode.wait_for_rpc_connection,\n+            self=self.nodes[0]\n+        )\n+        assert self.nodes[0].running, \\\n+            \"The process should still be flagged as running before calling stop_node()\"\n+        self.log.debug(\"Explicitly stopping the node to verify it completes cleanly during the test\")\n+        self.nodes[0].stop_node(expected_stderr=invalid_arg_error)",
      "path": "test/functional/feature_framework_stop_node.py",
      "position": null,
      "original_position": 45,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "608b9ff097214bff3527cc240b7be313c62131d5",
      "in_reply_to_id": 1905790290,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Went for option 3, making clear in the log message just above that a WARNING is expected.",
      "created_at": "2025-01-09T16:36:10Z",
      "updated_at": "2025-01-09T16:47:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1909135121",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909135121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 45,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909136687",
      "pull_request_review_id": 2537277498,
      "id": 1909136687,
      "node_id": "PRRC_kwDOABII585xyx0v",
      "diff_hunk": "@@ -0,0 +1,32 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify failure to connect to bitcoind's RPC interface only raises one exception.\n+\n+Multiple exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as additional\n+maintenance and complexity is low.\n+\"\"\"\n+\n+from test_framework.util import (\n+    assert_raises_message,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.log.info(\"Setting RPC timeout to 0 to simulate an unresponsive bitcoind, expect one warning.\")\n+        self.rpc_timeout = 0\n+\n+        assert_raises_message(AssertionError, \"[node 0] Unable to connect to bitcoind after 0s\", BitcoinTestFramework.setup_network, self)",
      "path": "test/functional/feature_framework_rpc_failure.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "f67d8963575feecdd4914c1a56bab4e0bebc000d",
      "in_reply_to_id": 1905811915,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added *test/functional/feature_framework_rpc_failure_details.py*.",
      "created_at": "2025-01-09T16:37:25Z",
      "updated_at": "2025-01-09T16:47:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1909136687",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909136687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909139264",
      "pull_request_review_id": 2537277498,
      "id": 1909139264,
      "node_id": "PRRC_kwDOABII585xyydA",
      "diff_hunk": "@@ -157,6 +157,7 @@ def __init__(self, i, datadir_path, *, chain, rpchost, timewait, timeout_factor,\n         self.rpc = None\n         self.url = None\n         self.log = logging.getLogger('TestFramework.node%d' % i)\n+        self.expected_ret_code = 0 # EXIT_SUCCESS",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 4,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "db0e1580a5212a162908ac4f23e935e1f76e06dc",
      "in_reply_to_id": 1905869855,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Interesting, I do agree there is a spaghetti/complexity factor to `expected_ret_code`, so might revisit this.",
      "created_at": "2025-01-09T16:39:29Z",
      "updated_at": "2025-01-09T16:47:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1909139264",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909139264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909141475",
      "pull_request_review_id": 2537277498,
      "id": 1909141475,
      "node_id": "PRRC_kwDOABII585xyy_j",
      "diff_hunk": "@@ -311,23 +311,22 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these in favor of a later outcome (success, FailedToStartError, or timeout).\n                 # -28 RPC in warmup\n-                # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                # -342 Service unavailable, could be starting up or shutting down\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # Suppress similarly to the above JSONRPCException errors:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds.\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?\n+                if e.errno not in [errno.ECONNRESET, errno.ETIMEDOUT, errno.ECONNREFUSED]:\n                     raise  # unknown OS error\n-            except ValueError as e:  # cookie file not found and no rpcuser or rpcpassword; bitcoind is still starting\n+            except ValueError as e:\n+                # Suppress if cookie file is missing and no rpcuser or rpcpassword; bitcoind may be starting",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 32,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5321eb089cd1b39160038050a6ef6f27fd6f4ef9",
      "in_reply_to_id": 1904579994,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "New version:\r\n`# Suppress if cookie file isn't generated yet and no rpcuser or rpcpassword; bitcoind may be starting.`",
      "created_at": "2025-01-09T16:41:09Z",
      "updated_at": "2025-01-09T18:55:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1909141475",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909141475"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909144554",
      "pull_request_review_id": 2537277498,
      "id": 1909144554,
      "node_id": "PRRC_kwDOABII585xyzvq",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Avoid raising these, to possibly raise the FailedToStartError on next iteration.\n                 # -28 RPC in warmup\n                 # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # ECONNRESET   - This might happen when the RPC server is in warmup, but shut down before the call to\n+                #                getblockcount succeeds. Try again to properly raise the FailedToStartError\n+                # ETIMEDOUT    - Treat identical to ECONNRESET\n+                # ECONNREFUSED - Port not yet open?",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 25,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "5ca92b17c5d2d5efa7b2246da1905bb8fd186230",
      "in_reply_to_id": 1827600606,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I mostly found the previous comments easier to follow because they were more direct and interspersed with relevant code.\r\n\r\nHopefully this is from the latest push can be considered an improvement:\r\n```python\r\nif e.errno not in [ errno.ECONNRESET,     # This might happen when the RPC server is in warmup,\r\n                                          # but shut down before the call to getblockcount succeeds.\r\n                    errno.ETIMEDOUT,      # Treat identical to ECONNRESET\r\n                    errno.ECONNREFUSED ]: # Port not yet open?\r\n```",
      "created_at": "2025-01-09T16:43:26Z",
      "updated_at": "2025-01-09T16:47:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1909144554",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909144554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 331,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909147382",
      "pull_request_review_id": 2537277498,
      "id": 1909147382,
      "node_id": "PRRC_kwDOABII585xy0b2",
      "diff_hunk": "@@ -447,7 +448,9 @@ def is_node_stopped(self, *, expected_stderr=\"\", expected_ret_code=0):\n \n     def wait_until_stopped(self, *, timeout=BITCOIND_PROC_WAIT_TIMEOUT, expect_error=False, **kwargs):\n         if \"expected_ret_code\" not in kwargs:\n-            kwargs[\"expected_ret_code\"] = 1 if expect_error else 0  # Whether node shutdown return EXIT_FAILURE or EXIT_SUCCESS\n+            # Whether node shutdown is expected to return EXIT_FAILURE (1) or\n+            # EXIT_SUCCESS (self.expected_ret_code).\n+            kwargs[\"expected_ret_code\"] = 1 if expect_error else self.expected_ret_code",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 33,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "db0e1580a5212a162908ac4f23e935e1f76e06dc",
      "in_reply_to_id": 1904607706,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken, although I moved some of the handling of `expected_ret_code` directly into `is_node_stopped()`.",
      "created_at": "2025-01-09T16:45:32Z",
      "updated_at": "2025-01-09T16:47:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1909147382",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1909147382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1910044619",
      "pull_request_review_id": 2541894649,
      "id": 1910044619,
      "node_id": "PRRC_kwDOABII585x2PfL",
      "diff_hunk": "@@ -569,7 +569,7 @@ def start_nodes(self, extra_args=None, *args, **kwargs):\n                 node.wait_for_rpc_connection()\n         except Exception:\n             # If one node failed to start, stop the others\n-            self.stop_nodes()\n+            self.stop_nodes(avoid_exceptions=True)",
      "path": "test/functional/test_framework/test_framework.py",
      "position": null,
      "original_position": 14,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8148e4da2c6d756cc24e337060d002473f1eebbf",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "coming from the conflicting pull, I don't think this call should exist in the first place for two reasons:\r\n\r\n* It doesn't work in most cases, because a failure to start any node likely means the RPC isn't up for the other nodes either, so the call will just fail in most cases. Effectively just using the kill fallback.\r\n* It doesn't make sense to special case startup. Nodes can at any time fail to start (not only in start_nodes), or crash, and adding this exception handling to all places isn't useful nor trivially possible.\r\n\r\nSo I removed it in https://github.com/bitcoin/bitcoin/pull/31620.\r\n\r\n(Just leaving a comment here to document the merge conflict between the two changes. Should be trivial to solve either way, so nothing to be done here, I think.)",
      "created_at": "2025-01-10T09:10:43Z",
      "updated_at": "2025-01-10T09:10:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1910044619",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1910044619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 572,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953030408",
      "pull_request_review_id": 2612568019,
      "id": 1953030408,
      "node_id": "PRRC_kwDOABII5850aOEI",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these in favor of a later outcome (success, FailedToStartError, or timeout).",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 6,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8fa04cb13a4bf62a42b18e7c0c79151d13cb494b",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"qa refactor: wait_for_rpc_connection - Treat OSErrors the same\" (8fa04cb13a4bf62a42b18e7c0c79151d13cb494b)\r\n\r\nVarious thoughts:\r\n\r\n- I think \"initialization phase\" comment that was removed provided more context and was more understandable than the new \"Suppress these in favor of\" comment.\r\n- I don't see why it is useful to list later outcomes that can happen after these errors are suppressed, especially when the list seems to contains every imaginable outcome.\r\n- I don't understand why \"-342 Service unavailable, RPC server started but is shutting down due to error\" comment is being changed to \"-342 Service unavailable, could be starting up or shutting down\". These descriptions seem inconsistent and I don't know which one is correct since I don't see where -342 is being returned and https://github.com/bitcoin/bitcoin/blob/master/src/rpc/protocol.h doesn't seem to contain that error code.\r\n\r\nGiven all this, I'd suggest just keeping the comments in this except block unchanged.\r\n\r\nBut if not doing that, I think \"Suppress these\" should be changed to something like \"Suppress early init errors\" so overall purpose of the except block is clear.\r\n\r\n",
      "created_at": "2025-02-12T16:38:56Z",
      "updated_at": "2025-02-12T17:26:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1953030408",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953030408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 315,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953060817",
      "pull_request_review_id": 2612568019,
      "id": 1953060817,
      "node_id": "PRRC_kwDOABII5850aVfR",
      "diff_hunk": "@@ -0,0 +1,93 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import (\n+    assert_equal,\n+    rpc_port,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if self.options.rpc_timeout is not None or self.options.extra_args else 0\n+\n+        if self.options.rpc_timeout is not None:\n+            self.rpc_timeout = self.options.rpc_timeout\n+        if self.options.extra_args:\n+            self.extra_args = [[self.options.extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--rpc_timeout\", dest=\"rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 36,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "2226e1489101f363114ce474d7f5e56ec50c9c6a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"qa: Add feature_framework_startup_failures.py\" (2226e1489101f363114ce474d7f5e56ec50c9c6a)\r\n\r\nMaybe give these arguments a prefix like `--internal-` so it obvious they are internal, and to avoid risk of silent conflicts if real test arguments with the same names are added later.",
      "created_at": "2025-02-12T16:57:56Z",
      "updated_at": "2025-02-12T17:26:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1953060817",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953060817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953080253",
      "pull_request_review_id": 2612568019,
      "id": 1953080253,
      "node_id": "PRRC_kwDOABII5850aaO9",
      "diff_hunk": "@@ -323,12 +323,13 @@ def shutdown(self):\n \n         self.log.debug('Closing down network thread')\n         self.network_thread.close()\n-        if self.success == TestStatus.FAILED:\n-            self.log.info(\"Not stopping nodes as test failed. The dangling processes will be cleaned up later.\")\n-        else:\n-            self.log.info(\"Stopping nodes\")\n-            if self.nodes:\n-                self.stop_nodes()\n+        if self.nodes:",
      "path": "test/functional/test_framework/test_framework.py",
      "position": null,
      "original_position": 10,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "9d0e6a1b2aa5be186550658ff85e5ad643554338",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"qa: Only log node stopping info if we have any\" (9d0e6a1b2aa5be186550658ff85e5ad643554338)\r\n\r\nWould be helpful if commit description stated motivation for this change. After looking at the `stop_nodes()` method implementation it seem like this is a logging-only change and point is just to remove stopping log statements when there are no nodes. But it would be good if actual intent of change were explicit.",
      "created_at": "2025-02-12T17:10:02Z",
      "updated_at": "2025-02-12T17:26:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1953080253",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953080253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953084710",
      "pull_request_review_id": 2612568019,
      "id": 1953084710,
      "node_id": "PRRC_kwDOABII5850abUm",
      "diff_hunk": "@@ -400,14 +400,14 @@ def stop_node(self, expected_stderr='', *, wait=0, wait_until_stopped=True):\n         if not self.running:\n             return\n         self.log.debug(\"Stopping node\")\n-        try:\n+        if self.rpc_connected:",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8102f3d8e0b6715433eeda78b9b57a83109fc45e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"qa: Avoid calling stop-RPC if not connected\" (8102f3d8e0b6715433eeda78b9b57a83109fc45e)\r\n\r\nThis change seems good, but unclear what motivation is. Is it supposed to be a refactoring that makes code more robust, or were there actually any cases where CannotSendRequest exceptions were caught and suppressed? If so what were those cases? Commit description should say what goals of this change are and if CannotSendRequest is an actual or theoretical change in behavior.",
      "created_at": "2025-02-12T17:12:59Z",
      "updated_at": "2025-02-12T17:26:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1953084710",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953084710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953499371",
      "pull_request_review_id": 2613365399,
      "id": 1953499371,
      "node_id": "PRRC_kwDOABII5850cAjr",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these in favor of a later outcome (success, FailedToStartError, or timeout).",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 6,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8fa04cb13a4bf62a42b18e7c0c79151d13cb494b",
      "in_reply_to_id": 1953030408,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I think \"initialization phase\" comment that was removed provided more context and was more understandable than the new \"Suppress these in favor of\" comment.\r\n\r\nAs the commit message specifies, we are changing `wait_for_rpc_connection()`, so the only value the \"Initialization phase\" comment had came from adding some context to a ~80 line long function which is part of initialization IMO. (The mention of `FailedToStartError` also gives a hint at what phase we are in).\r\n\r\n> I don't see why it is useful to list later outcomes that can happen after these errors are suppressed, especially when the list seems to contains every imaginable outcome.\r\n\r\nI think it is good to document *why* we are catching and suppressing some exceptions (while re-raising others).\r\n\r\n> I don't understand why \"-342 Service unavailable, RPC server started but is shutting down due to error\" comment is being changed to \"-342 Service unavailable, could be starting up or shutting down\". These descriptions seem inconsistent and I don't know which one is correct since I don't see where -342 is being returned and https://github.com/bitcoin/bitcoin/blob/master/src/rpc/protocol.h doesn't seem to contain that error code.\r\n\r\nI think -342 comes from *test/functional/test_framework/authproxy.py*. This is what prompted my changed phrasing: https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1827592298\r\n\r\n> But if not doing that, I think \"Suppress these\" should be changed to something like \"Suppress early init errors\" so overall purpose of the except block is clear.\r\n\r\nWould rather improve the comment at the top of the function if you think it doesn't provide enough context?\r\nhttps://github.com/bitcoin/bitcoin/blob/8fa04cb13a4bf62a42b18e7c0c79151d13cb494b/test/functional/test_framework/test_node.py#L264-L265\r\n\r\n(Edit: This comment was pending when maflcko left his below).",
      "created_at": "2025-02-12T22:33:59Z",
      "updated_at": "2025-02-13T10:25:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1953499371",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1953499371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 315,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954047202",
      "pull_request_review_id": 2613365399,
      "id": 1954047202,
      "node_id": "PRRC_kwDOABII5850eGTi",
      "diff_hunk": "@@ -323,12 +323,13 @@ def shutdown(self):\n \n         self.log.debug('Closing down network thread')\n         self.network_thread.close()\n-        if self.success == TestStatus.FAILED:\n-            self.log.info(\"Not stopping nodes as test failed. The dangling processes will be cleaned up later.\")\n-        else:\n-            self.log.info(\"Stopping nodes\")\n-            if self.nodes:\n-                self.stop_nodes()\n+        if self.nodes:",
      "path": "test/functional/test_framework/test_framework.py",
      "position": null,
      "original_position": 10,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "9d0e6a1b2aa5be186550658ff85e5ad643554338",
      "in_reply_to_id": 1953080253,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "- Saw the code still had an inner `if self.nodes`-check - removed in new push.\r\n- Slightly clarified commit message, describing the change (even though it adds some negation) rather than describing then end state of the change.",
      "created_at": "2025-02-13T08:33:54Z",
      "updated_at": "2025-02-13T10:23:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1954047202",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954047202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 374,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954056589",
      "pull_request_review_id": 2613365399,
      "id": 1954056589,
      "node_id": "PRRC_kwDOABII5850eImN",
      "diff_hunk": "@@ -400,14 +400,14 @@ def stop_node(self, expected_stderr='', *, wait=0, wait_until_stopped=True):\n         if not self.running:\n             return\n         self.log.debug(\"Stopping node\")\n-        try:\n+        if self.rpc_connected:",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8102f3d8e0b6715433eeda78b9b57a83109fc45e",
      "in_reply_to_id": 1953084710,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks! This made me actually realize I could add a test for it and improve the exception message (+ commit message).",
      "created_at": "2025-02-13T08:40:02Z",
      "updated_at": "2025-02-13T10:23:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1954056589",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954056589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954103791",
      "pull_request_review_id": 2614330874,
      "id": 1954103791,
      "node_id": "PRRC_kwDOABII5850eUHv",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these in favor of a later outcome (success, FailedToStartError, or timeout).",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 6,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8fa04cb13a4bf62a42b18e7c0c79151d13cb494b",
      "in_reply_to_id": 1953030408,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> * I don't understand why \"-342 Service unavailable, RPC server started but is shutting down due to error\" comment is being changed to \"-342 Service unavailable, could be starting up or shutting down\". These descriptions seem inconsistent and I don't know which one is correct since I don't see where -342 is being returned\r\n\r\nI'd guess that it is coming from authproxy and is pretty general:\r\n\r\n```\r\n$ git grep '\\-342\\>' ./test/\r\ntest/functional/feature_taproot.py:# Test Taproot softfork (BIPs 340-342)\r\ntest/functional/rpc_bind.py:        assert_raises_rpc_error(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], self.non_loopback_ip, self.defaultport)\r\ntest/functional/test_framework/authproxy.py:                    'code': -342, 'message': 'non-200 HTTP status code but no JSON-RPC error'}, status)\r\ntest/functional/test_framework/authproxy.py:                    'code': -342, 'message': 'non-200 HTTP status code'}, status)\r\ntest/functional/test_framework/authproxy.py:                'code': -342, 'message': 'non-200 HTTP status code'}, status)\r\ntest/functional/test_framework/authproxy.py:                'code': -342, 'message': 'missing HTTP response from server'})\r\ntest/functional/test_framework/authproxy.py:                raise JSONRPCException({'code': -342, 'message': 'Content received with NO CONTENT status code'})\r\ntest/functional/test_framework/authproxy.py:                {'code': -342, 'message': 'non-JSON HTTP response with \\'%i %s\\' from server' % (http_response.status, http_response.reason)},\r\ntest/functional/test_framework/authproxy.py:                'code': -342, 'message': f'Cannot decode response in utf8 format, content: {data}, exception: {e}'})\r\ntest/functional/test_framework/test_node.py:                # -342 Service unavailable, RPC server started but is shutting down due to error\r\ntest/functional/test_framework/test_node.py:                if e.error['code'] != -28 and e.error['code'] != -342:\r\n",
      "created_at": "2025-02-13T09:07:24Z",
      "updated_at": "2025-02-13T09:07:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1954103791",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1954103791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 315,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1994143659",
      "pull_request_review_id": 2683088562,
      "id": 1994143659,
      "node_id": "PRRC_kwDOABII58523Der",
      "diff_hunk": "@@ -400,14 +400,14 @@ def stop_node(self, expected_stderr='', *, wait=0, wait_until_stopped=True):\n         if not self.running:\n             return\n         self.log.debug(\"Stopping node\")\n-        try:\n+        if self.rpc_connected:",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8102f3d8e0b6715433eeda78b9b57a83109fc45e",
      "in_reply_to_id": 1953084710,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1954056589\r\n\r\n> Thanks! This made me actually realize I could add a test for it and improve the exception message (+ commit message).\r\n\r\nI'm still not clear when this case would ever be expected to happen.\r\n\r\nIIUC, there is no runtime error that could trigger this, and nothing non-test code could could do to trigger it, and the only thing that could trigger it is incorrectly written test code?\r\n\r\nIf so, it would seem clearer to replace the exception with an assertion like `assert self.rpc_connected, self._node_msg(...)` to be clear this is a bug in the test code, not some other failure.",
      "created_at": "2025-03-13T18:58:25Z",
      "updated_at": "2025-03-13T20:02:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1994143659",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1994143659"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1994186307",
      "pull_request_review_id": 2683088562,
      "id": 1994186307,
      "node_id": "PRRC_kwDOABII58523N5D",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these in favor of a later outcome (success, FailedToStartError, or timeout).",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 6,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8fa04cb13a4bf62a42b18e7c0c79151d13cb494b",
      "in_reply_to_id": 1953030408,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1953499371\r\n\r\n> I think it is good to document _why_ we are catching and suppressing some exceptions (while re-raising others).\r\n\r\nIt's funny, because to me replacing \"Initialization phase\" with \"Suppress these in favor of a later outcome\" is literally *removing* the comment that explains why it is ok to suppress these errors. The previous comment made it clear these errors were being suppressed because they are expected during initialization. The new comment tells me they are being suppressed and that various other outcomes are possible later, which tells me nothing about why it is safe or good to suppress errors *here*.\r\n\r\nMaybe the problem is that I've wasted too much time debugging issues and being traumatized by code that suppresses errors and fails to report useful information, but I found the new comment here hard to parse, and could not figure out what it was trying to tell me, and it made me not trust this code for seeming to suppress errors without a clear reason.\r\n\r\n> I think -342 comes from _test/functional/test_framework/authproxy.py_. This is what prompted my changed phrasing: [#30660 (comment)](https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1827592298)\r\n\r\nThanks that helps. But the phrase \"Service unavailable\" would seem to connote that server is running but it is telling us it can't process requests, when actually this is a low-level error coming from the JSON-RPC client. Would suggest replacing \"-342 Service unavailable\" with something like \"-342 HTTP error\" to be clearer about the source of this error.",
      "created_at": "2025-03-13T19:30:54Z",
      "updated_at": "2025-03-13T20:02:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1994186307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1994186307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 315,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1995687071",
      "pull_request_review_id": 2685495327,
      "id": 1995687071,
      "node_id": "PRRC_kwDOABII585288Sf",
      "diff_hunk": "@@ -400,14 +400,14 @@ def stop_node(self, expected_stderr='', *, wait=0, wait_until_stopped=True):\n         if not self.running:\n             return\n         self.log.debug(\"Stopping node\")\n-        try:\n+        if self.rpc_connected:",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 26,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8102f3d8e0b6715433eeda78b9b57a83109fc45e",
      "in_reply_to_id": 1953084710,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Correct, especially now after maflcko's change in fae3bf6b870eb0f9cddd1adac82ba72890806ae3 to not call `stop()` on test failure, I agree it makes sense to assert instead, good suggestion! Fixed.\r\n\r\n> were there actually any cases where CannotSendRequest exceptions were caught and suppressed? If so what were those cases? Commit description should say what goals of this change are and if CannotSendRequest is an actual or theoretical change in behavior.\r\n\r\nIt was a common knock-on issue from attempting to call stop-RPC on a non-functional RPC interface, see for example \"CannotSendRequest\" in the log of #21367. Should no longer happen due to maflcko's change and us guarding against that kind of thing with the assert.\r\n\r\nClarified commit description.",
      "created_at": "2025-03-14T14:28:41Z",
      "updated_at": "2025-03-14T14:40:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1995687071",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1995687071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 403,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1995695052",
      "pull_request_review_id": 2685495327,
      "id": 1995695052,
      "node_id": "PRRC_kwDOABII58528-PM",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these in favor of a later outcome (success, FailedToStartError, or timeout).",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 6,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8fa04cb13a4bf62a42b18e7c0c79151d13cb494b",
      "in_reply_to_id": 1953030408,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for taking the time to elaborate.\r\n\r\n\"Initialization phase\" was too terse for me - of course we're in the initialization phase... duh. :)\r\n\r\nChanged to \"Suppress these as they are expected during initialization.\"",
      "created_at": "2025-03-14T14:33:41Z",
      "updated_at": "2025-03-14T14:40:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1995695052",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1995695052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 315,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1999309420",
      "pull_request_review_id": 2691498575,
      "id": 1999309420,
      "node_id": "PRRC_kwDOABII5853Kwps",
      "diff_hunk": "@@ -322,13 +322,18 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.\n+                if error_num is None:\n+                    assert isinstance(e, TimeoutError)\n+                    error_num = errno.ETIMEDOUT",
      "path": "test/functional/test_framework/test_node.py",
      "position": 61,
      "original_position": 8,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "fa2178e67ffb630ac0a0643fd53eca82db2a8fc8",
      "in_reply_to_id": null,
      "user": {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The inclusion of an assert suggests to me that we expect that all OSErrors without errno are TimeoutErrors? Is this actually what we expect?\r\n\r\nIf not should the if statement be changed to `if error_num is None and isinstance(e, TimeoutError):`",
      "created_at": "2025-03-17T17:35:39Z",
      "updated_at": "2025-03-17T17:35:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1999309420",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1999309420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 329,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1999690309",
      "pull_request_review_id": 2692110136,
      "id": 1999690309,
      "node_id": "PRRC_kwDOABII5853MNpF",
      "diff_hunk": "@@ -322,13 +322,18 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.\n+                if error_num is None:\n+                    assert isinstance(e, TimeoutError)\n+                    error_num = errno.ETIMEDOUT",
      "path": "test/functional/test_framework/test_node.py",
      "position": 61,
      "original_position": 8,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "fa2178e67ffb630ac0a0643fd53eca82db2a8fc8",
      "in_reply_to_id": 1999309420,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Had a feeling `OSError`s must always have that field set (except for the socket `TimeoutError` bug), but the [docs](https://docs.python.org/3/library/exceptions.html#OSError) indicate it's a bit more loose:\r\n\r\n> The second form of the constructor sets the corresponding attributes, described below. The attributes default to None if not specified.\r\n\r\nCould change the condition as you suggestion, but it would be prudent to assert that `error_num` isn't `None` for other cases:\r\n```python\r\n                if error_num is None and isinstance(e, TimeoutError):\r\n                    error_num = errno.ETIMEDOUT\r\n                else:\r\n                    assert error_num is not None\r\n```\r\nSo not sure about that change as it would repeat one of the conditions. Maybe just adding an error message to what we have now would be okay?\r\n```python\r\n                if error_num is None:\r\n                    assert isinstance(e, TimeoutError), \"We only currently support \" \\\r\n                        f\"inferring errno from TimeoutErrors, encountered unhandled: {e!r}\"\r\n                    error_num = errno.ETIMEDOUT\r\n```",
      "created_at": "2025-03-17T21:20:18Z",
      "updated_at": "2025-03-17T21:20:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r1999690309",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1999690309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 329,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2003213136",
      "pull_request_review_id": 2698232473,
      "id": 2003213136,
      "node_id": "PRRC_kwDOABII5853ZptQ",
      "diff_hunk": "@@ -322,13 +322,18 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.\n+                if error_num is None:\n+                    assert isinstance(e, TimeoutError)\n+                    error_num = errno.ETIMEDOUT",
      "path": "test/functional/test_framework/test_node.py",
      "position": 61,
      "original_position": 8,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "fa2178e67ffb630ac0a0643fd53eca82db2a8fc8",
      "in_reply_to_id": 1999309420,
      "user": {
        "login": "m3dwards",
        "id": 1204616,
        "node_id": "MDQ6VXNlcjEyMDQ2MTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1204616?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/m3dwards",
        "html_url": "https://github.com/m3dwards",
        "followers_url": "https://api.github.com/users/m3dwards/followers",
        "following_url": "https://api.github.com/users/m3dwards/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/m3dwards/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/m3dwards/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/m3dwards/subscriptions",
        "organizations_url": "https://api.github.com/users/m3dwards/orgs",
        "repos_url": "https://api.github.com/users/m3dwards/repos",
        "events_url": "https://api.github.com/users/m3dwards/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/m3dwards/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is only a NIT so feel free to leave it as it is but in my mind an assert is used to signal an expectation of predicted state. In Python asserts are not even executed if run in optimised mode. It seems like we are using it more like an exception here?\r\n\r\n```python\r\n                if error_num is None:\r\n                    if isinstance(e, TimeoutError):\r\n                        error_num = errno.ETIMEDOUT\r\n                    else:\r\n                        raise Exception(\"errno is required\")\r\n```",
      "created_at": "2025-03-19T12:29:11Z",
      "updated_at": "2025-03-19T12:29:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2003213136",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2003213136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 329,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2003409216",
      "pull_request_review_id": 2698586239,
      "id": 2003409216,
      "node_id": "PRRC_kwDOABII5853aZlA",
      "diff_hunk": "@@ -322,13 +322,18 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.\n+                if error_num is None:\n+                    assert isinstance(e, TimeoutError)\n+                    error_num = errno.ETIMEDOUT",
      "path": "test/functional/test_framework/test_node.py",
      "position": 61,
      "original_position": 8,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "fa2178e67ffb630ac0a0643fd53eca82db2a8fc8",
      "in_reply_to_id": 1999309420,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not so concerned about people running in optimised node since 5+ functional tests fail in that way, but changed in latest push to:\r\nhttps://github.com/bitcoin/bitcoin/blob/cac218dcbdd2b5682a7ac8659aac0306e68a65f5/test/functional/test_framework/test_node.py#L325-L331",
      "created_at": "2025-03-19T14:02:50Z",
      "updated_at": "2025-03-19T14:02:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2003409216",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2003409216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 329,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2014198466",
      "pull_request_review_id": 2717272610,
      "id": 2014198466,
      "node_id": "PRRC_kwDOABII5854DjrC",
      "diff_hunk": "@@ -322,13 +322,18 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.\n+                if error_num is None:\n+                    assert isinstance(e, TimeoutError)\n+                    error_num = errno.ETIMEDOUT",
      "path": "test/functional/test_framework/test_node.py",
      "position": 61,
      "original_position": 8,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "fa2178e67ffb630ac0a0643fd53eca82db2a8fc8",
      "in_reply_to_id": 1999309420,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2003409216\r\n\r\nIn commit \"qa: Workaround Windows issue with socket timeouts\" (c92a8fcd79d76b23c366a07be1c8778db7bea891)\r\n\r\nFWIW, I think the best way to write this would be simply:\r\n\r\n```python\r\n# Work around issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.\r\nif error_num is None and isinstance(e, TimeoutError):\r\n    error_num = errno.ETIMEDOUT\r\n\r\nif error_num not in [ ... ]:\r\n   raise\r\n```\r\n\r\nRaising a new \"Cannot infer errno when unset\" exception just adds complexity and could make it harder to debug since the original exception contains more information than the new exception.",
      "created_at": "2025-03-26T13:51:40Z",
      "updated_at": "2025-03-26T14:03:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2014198466",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2014198466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 329,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2014298202",
      "pull_request_review_id": 2717451115,
      "id": 2014298202,
      "node_id": "PRRC_kwDOABII5854D8Ba",
      "diff_hunk": "@@ -322,13 +322,18 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.\n+                if error_num is None:\n+                    assert isinstance(e, TimeoutError)\n+                    error_num = errno.ETIMEDOUT",
      "path": "test/functional/test_framework/test_node.py",
      "position": 61,
      "original_position": 8,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "fa2178e67ffb630ac0a0643fd53eca82db2a8fc8",
      "in_reply_to_id": 1999309420,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for re-reviewing this again!\r\n\r\nYes, in that way we would make `error_num == None` be one of the cases for which we `raise`. It's obviously better to `raise` for something unexpected than to suppress, which should lead to it being tracked down and intentionally categorized for suppression or not.\r\n\r\nUpdated in latest push.",
      "created_at": "2025-03-26T14:26:54Z",
      "updated_at": "2025-03-26T14:26:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2014298202",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2014298202"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 329,
      "original_line": 329,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2016198629",
      "pull_request_review_id": 2720758773,
      "id": 2016198629,
      "node_id": "PRRC_kwDOABII5854LL_l",
      "diff_hunk": "@@ -322,13 +322,17 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 5,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "52746d0c58ae1fc5913c8e01884c3fd628088be2",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this the issue? https://github.com/python/cpython/issues/109601 If so, it doesn't seem to be Windows related.",
      "created_at": "2025-03-27T10:37:22Z",
      "updated_at": "2025-03-27T11:13:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2016198629",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2016198629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2016268165",
      "pull_request_review_id": 2720758773,
      "id": 2016268165,
      "node_id": "PRRC_kwDOABII5854Lc-F",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_instant_rpc_timeout(self):\n+        self.log.info(\"Verifying timeout in connecting to bitcoind's RPC interface results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-rpc_timeout=0\"],\n+            \"AssertionError: \\\\[node 0\\\\] Unable to connect to bitcoind after 0s\"\n+        )\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            \"FailedToStartError: \\\\[node 0\\\\] bitcoind exited with status 1 during initialization. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 98,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "75134fef62e49462b18c30653a93a2483b764e9a",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: for consistency I'd make this either a `r\"...\\[node 0\\]` as well or do a `re.escape` if we want to be explicit. Though I think we're probably matching way too much here, it doesn't hint at which part of the error is important and which part is irrelevant and subject to change",
      "created_at": "2025-03-27T11:12:09Z",
      "updated_at": "2025-03-27T11:13:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2016268165",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2016268165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2016324443",
      "pull_request_review_id": 2720988372,
      "id": 2016324443,
      "node_id": "PRRC_kwDOABII5854Lqtb",
      "diff_hunk": "@@ -322,13 +322,17 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 5,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "52746d0c58ae1fc5913c8e01884c3fd628088be2",
      "in_reply_to_id": 2016198629,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also, the commit message seems to imply this is a bugfix for an issue observed on Windows. However, I don't think anyone has observed this on current master. The first commit of this pull claims to be  a \"refactor\", so maybe the bug this is fixing was introduced there instead?",
      "created_at": "2025-03-27T11:34:21Z",
      "updated_at": "2025-03-27T11:34:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2016324443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2016324443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2016543766",
      "pull_request_review_id": 2721395584,
      "id": 2016543766,
      "node_id": "PRRC_kwDOABII5854MgQW",
      "diff_hunk": "@@ -322,13 +322,17 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 5,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "52746d0c58ae1fc5913c8e01884c3fd628088be2",
      "in_reply_to_id": 2016198629,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for finding that issue @l0rinc!\r\n\r\nI've only observed it on Windows, maybe the socket subsystem or timeouts are different enough there to make it more of an issue.\r\n\r\n> However, I don't think anyone has observed this on current master. \r\n\r\nMaybe I was running under some less common setup like non-WSL MSVC Debug, or maybe my Windows network stack was having a bad day. (There's an odd chance that I might have been using Linux->Windows cross-built binaries for some reason).\r\n\r\n> The first commit of this pull claims to be a \"refactor\", so maybe the bug this is fixing was introduced there instead?\r\n\r\n8ff738a6e96c19aaf14ebea52c8ae13751cf443b, the refactor-commit does indeed restructure how `OSError`s are caught, at first I thought maybe it was filtering `TimeoutError` by type, but no, the approach on master also relies on `errno.ETIMEDOUT` (`ConnectionResetError` is partially filtered by type there, [they are not direct descendants of each other](https://docs.python.org/3/library/exceptions.html#exception-hierarchy)).",
      "created_at": "2025-03-27T13:07:33Z",
      "updated_at": "2025-03-27T13:07:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2016543766",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2016543766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2016558898",
      "pull_request_review_id": 2721422199,
      "id": 2016558898,
      "node_id": "PRRC_kwDOABII5854Mj8y",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_instant_rpc_timeout(self):\n+        self.log.info(\"Verifying timeout in connecting to bitcoind's RPC interface results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-rpc_timeout=0\"],\n+            \"AssertionError: \\\\[node 0\\\\] Unable to connect to bitcoind after 0s\"\n+        )\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            \"FailedToStartError: \\\\[node 0\\\\] bitcoind exited with status 1 during initialization. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 98,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "75134fef62e49462b18c30653a93a2483b764e9a",
      "in_reply_to_id": 2016268165,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "r\"\"-string seems more consistent. Thanks for pointing it out! Will fix if I re-touch.",
      "created_at": "2025-03-27T13:15:26Z",
      "updated_at": "2025-03-27T13:15:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2016558898",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2016558898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2017677344",
      "pull_request_review_id": 2723573980,
      "id": 2017677344,
      "node_id": "PRRC_kwDOABII5854Q1Ag",
      "diff_hunk": "@@ -322,13 +322,17 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 5,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "52746d0c58ae1fc5913c8e01884c3fd628088be2",
      "in_reply_to_id": 2016198629,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Pushed new version of this commit - 51b2115a348f681e12aabf514cb156da4420da2e. Now links to the Python issue in the comment, and only mentions that it was encountered on Windows in the commit message.",
      "created_at": "2025-03-27T22:31:14Z",
      "updated_at": "2025-03-27T22:33:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2017677344",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2017677344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2017677498",
      "pull_request_review_id": 2723573980,
      "id": 2017677498,
      "node_id": "PRRC_kwDOABII5854Q1C6",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_instant_rpc_timeout(self):\n+        self.log.info(\"Verifying timeout in connecting to bitcoind's RPC interface results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-rpc_timeout=0\"],\n+            \"AssertionError: \\\\[node 0\\\\] Unable to connect to bitcoind after 0s\"\n+        )\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            \"FailedToStartError: \\\\[node 0\\\\] bitcoind exited with status 1 during initialization. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 98,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "75134fef62e49462b18c30653a93a2483b764e9a",
      "in_reply_to_id": 2016268165,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fixed.",
      "created_at": "2025-03-27T22:31:27Z",
      "updated_at": "2025-03-27T22:33:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2017677498",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2017677498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018040253",
      "pull_request_review_id": 2724477889,
      "id": 2018040253,
      "node_id": "PRRC_kwDOABII5854SNm9",
      "diff_hunk": "@@ -322,13 +322,17 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 5,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "52746d0c58ae1fc5913c8e01884c3fd628088be2",
      "in_reply_to_id": 2016198629,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do you still know how often it happened and what the traceback looked like?",
      "created_at": "2025-03-28T07:13:28Z",
      "updated_at": "2025-03-28T07:13:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2018040253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018040253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018221082",
      "pull_request_review_id": 2724801948,
      "id": 2018221082,
      "node_id": "PRRC_kwDOABII5854S5wa",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_instant_rpc_timeout(self):\n+        self.log.info(\"Verifying timeout in connecting to bitcoind's RPC interface results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-rpc_timeout=0\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after 0s\"\n+        )\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 98,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "6bbfb3eeef2e35560dd357bb2a8a7378e2b49eb5",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "super-nit:\r\n```suggestion\r\n            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\r\n```",
      "created_at": "2025-03-28T09:24:56Z",
      "updated_at": "2025-03-28T09:28:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2018221082",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018221082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018313316",
      "pull_request_review_id": 2724980234,
      "id": 2018313316,
      "node_id": "PRRC_kwDOABII5854TQRk",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_instant_rpc_timeout(self):\n+        self.log.info(\"Verifying timeout in connecting to bitcoind's RPC interface results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-rpc_timeout=0\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after 0s\"\n+        )\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 98,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "6bbfb3eeef2e35560dd357bb2a8a7378e2b49eb5",
      "in_reply_to_id": 2018221082,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Will take if anything else forces me to re-touch.",
      "created_at": "2025-03-28T10:14:58Z",
      "updated_at": "2025-03-28T10:14:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2018313316",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018313316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018664612",
      "pull_request_review_id": 2725526894,
      "id": 2018664612,
      "node_id": "PRRC_kwDOABII5854UmCk",
      "diff_hunk": "@@ -322,13 +322,17 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 5,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "52746d0c58ae1fc5913c8e01884c3fd628088be2",
      "in_reply_to_id": 2016198629,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Was able to easily reproduce the issue.\r\n\r\n<details><summary>Log</summary>\r\n\r\nC:\\Users\\hodlinator\\bitcoin>py build\\test\\functional\\feature_framework_startup_failures.py\r\n2025-03-28T13:09:19.459000Z TestFramework (INFO): PRNG seed is: 4595347679033165165\r\n2025-03-28T13:09:19.519000Z TestFramework (INFO): Initializing test directory C:\\Users\\HODLIN~1\\AppData\\Local\\Temp\\bitcoin_func_test_4hxul9x2\r\n2025-03-28T13:09:19.519000Z TestFramework (INFO): Verifying timeout in connecting to bitcoind's RPC interface results in only one exception.\r\n2025-03-28T13:09:19.788000Z TestFramework (INFO): Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\r\n2025-03-28T13:09:21.378000Z TestFramework (ERROR): Found 0/1 occurrences of the specific exception: AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\r\n2025-03-28T13:09:21.378000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\test_framework\\test_framework.py\", line 135, in main\r\n    self.run_test()\r\n    ~~~~~~~~~~~~~^^\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\feature_framework_startup_failures.py\", line 111, in run_test\r\n    self.test_wrong_rpc_port()\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~^^\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\feature_framework_startup_failures.py\", line 85, in test_wrong_rpc_port\r\n    self._run_test_internal(\r\n    ~~~~~~~~~~~~~~~~~~~~~~~^\r\n        # Lower the timeout so we don't wait that long.\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    ...<4 lines>...\r\n        r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    )\r\n    ^\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\feature_framework_startup_failures.py\", line 74, in _run_test_internal\r\n    raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\r\nAssertionError: Child test didn't contain (only) expected errors.\r\n<CHILD OUTPUT BEGIN>:\r\n2025-03-28T13:09:19.929000Z TestFramework (INFO): PRNG seed is: 1755806780689552109\r\n2025-03-28T13:09:19.952000Z TestFramework (INFO): Initializing test directory C:\\Users\\HODLIN~1\\AppData\\Local\\Temp\\bitcoin_func_test_zahuvbto\r\n2025-03-28T13:09:21.234000Z TestFramework (ERROR): Unexpected exception caught during testing\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\test_framework\\test_framework.py\", line 131, in main\r\n    self.setup()\r\n    ~~~~~~~~~~^^\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\test_framework\\test_framework.py\", line 313, in setup\r\n    self.setup_network()\r\n    ~~~~~~~~~~~~~~~~~~^^\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\feature_framework_startup_failures.py\", line 47, in setup_network\r\n    BitcoinTestFramework.setup_network(self)\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\test_framework\\test_framework.py\", line 404, in setup_network\r\n    self.setup_nodes()\r\n    ~~~~~~~~~~~~~~~~^^\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\test_framework\\test_framework.py\", line 426, in setup_nodes\r\n    self.start_nodes()\r\n    ~~~~~~~~~~~~~~~~^^\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\test_framework\\test_framework.py\", line 585, in start_nodes\r\n    node.wait_for_rpc_connection()\r\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\test_framework\\test_node.py\", line 286, in wait_for_rpc_connection\r\n    rpc.getblockcount()\r\n    ~~~~~~~~~~~~~~~~~^^\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\test_framework\\coverage.py\", line 50, in __call__\r\n    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\test_framework\\authproxy.py\", line 127, in __call__\r\n    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))\r\n                       ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\test_framework\\authproxy.py\", line 105, in _request\r\n    self.__conn.request(method, path, postdata, headers)\r\n    ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\hodlinator\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py\", line 1336, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\hodlinator\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py\", line 1382, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\hodlinator\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py\", line 1331, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\hodlinator\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py\", line 1091, in _send_output\r\n    self.send(msg)\r\n    ~~~~~~~~~^^^^^\r\n  File \"C:\\Users\\hodlinator\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py\", line 1035, in send\r\n    self.connect()\r\n    ~~~~~~~~~~~~^^\r\n  File \"C:\\Users\\hodlinator\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py\", line 1001, in connect\r\n    self.sock = self._create_connection(\r\n                ~~~~~~~~~~~~~~~~~~~~~~~^\r\n        (self.host,self.port), self.timeout, self.source_address)\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\hodlinator\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\socket.py\", line 864, in create_connection\r\n    raise exceptions[0]\r\n  File \"C:\\Users\\hodlinator\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\socket.py\", line 849, in create_connection\r\n    sock.connect(sa)\r\n    ~~~~~~~~~~~~^^^^\r\nTimeoutError: timed out\r\n2025-03-28T13:09:21.344000Z TestFramework (INFO): Not stopping nodes as test failed. The dangling processes will be cleaned up later.\r\n2025-03-28T13:09:21.345000Z TestFramework (WARNING): Not cleaning up dir C:\\Users\\HODLIN~1\\AppData\\Local\\Temp\\bitcoin_func_test_zahuvbto\r\n2025-03-28T13:09:21.345000Z TestFramework (ERROR): Test failed. Test logging available at C:\\Users\\HODLIN~1\\AppData\\Local\\Temp\\bitcoin_func_test_zahuvbto/test_framework.log\r\n2025-03-28T13:09:21.345000Z TestFramework (ERROR):\r\n2025-03-28T13:09:21.345000Z TestFramework (ERROR): Hint: Call C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\combine_logs.py 'C:\\Users\\HODLIN~1\\AppData\\Local\\Temp\\bitcoin_func_test_zahuvbto' to consolidate all logs\r\n2025-03-28T13:09:21.346000Z TestFramework (ERROR):\r\n2025-03-28T13:09:21.346000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\r\n2025-03-28T13:09:21.346000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\r\n2025-03-28T13:09:21.346000Z TestFramework (ERROR):\r\n[node 0] Cleaning up leftover process\r\n\r\n<CHILD OUTPUT END>\r\n\r\n2025-03-28T13:09:21.431000Z TestFramework (INFO): Not stopping nodes as test failed. The dangling processes will be cleaned up later.\r\n2025-03-28T13:09:21.431000Z TestFramework (WARNING): Not cleaning up dir C:\\Users\\HODLIN~1\\AppData\\Local\\Temp\\bitcoin_func_test_4hxul9x2\r\n2025-03-28T13:09:21.431000Z TestFramework (ERROR): Test failed. Test logging available at C:\\Users\\HODLIN~1\\AppData\\Local\\Temp\\bitcoin_func_test_4hxul9x2/test_framework.log\r\n2025-03-28T13:09:21.431000Z TestFramework (ERROR):\r\n2025-03-28T13:09:21.432000Z TestFramework (ERROR): Hint: Call C:\\Users\\hodlinator\\bitcoin\\build\\test\\functional\\combine_logs.py 'C:\\Users\\HODLIN~1\\AppData\\Local\\Temp\\bitcoin_func_test_4hxul9x2' to consolidate all logs\r\n2025-03-28T13:09:21.432000Z TestFramework (ERROR):\r\n2025-03-28T13:09:21.432000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\r\n2025-03-28T13:09:21.432000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\r\n2025-03-28T13:09:21.432000Z TestFramework (ERROR):\r\n\r\n</details>\r\n\r\nMy hypothesis is that we trigger the issue through the first test setting a 0 rpc_timeout:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/6bbfb3eeef2e35560dd357bb2a8a7378e2b49eb5/test/functional/feature_framework_startup_failures.py#L76-L81\r\n\r\nAttempting to use the network stack with a 0 timeout seems to have different meanings on Linux and Windows. It's not really a realistic test. I think the next test covers a superset of the one above, so could probably remove the first one.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/6bbfb3eeef2e35560dd357bb2a8a7378e2b49eb5/test/functional/feature_framework_startup_failures.py#L83-L92",
      "created_at": "2025-03-28T13:27:02Z",
      "updated_at": "2025-03-28T13:27:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2018664612",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018664612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018729209",
      "pull_request_review_id": 2725634006,
      "id": 2018729209,
      "node_id": "PRRC_kwDOABII5854U1z5",
      "diff_hunk": "@@ -0,0 +1,117 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_instant_rpc_timeout(self):\n+        self.log.info(\"Verifying timeout in connecting to bitcoind's RPC interface results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-rpc_timeout=0\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after 0s\"\n+        )\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 98,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "6bbfb3eeef2e35560dd357bb2a8a7378e2b49eb5",
      "in_reply_to_id": 2018221082,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thread https://github.com/bitcoin/bitcoin/pull/30660/files#r2018221082:\r\nTaken.",
      "created_at": "2025-03-28T13:53:16Z",
      "updated_at": "2025-03-28T14:06:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2018729209",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018729209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018732697",
      "pull_request_review_id": 2725634006,
      "id": 2018732697,
      "node_id": "PRRC_kwDOABII5854U2qZ",
      "diff_hunk": "@@ -322,13 +322,17 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 5,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "52746d0c58ae1fc5913c8e01884c3fd628088be2",
      "in_reply_to_id": 2016198629,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Dropped the test and workaround commit in latest push.",
      "created_at": "2025-03-28T13:55:11Z",
      "updated_at": "2025-03-28T14:06:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2018732697",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2018732697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050585116",
      "pull_request_review_id": 2778504085,
      "id": 2050585116,
      "node_id": "PRRC_kwDOABII5856OXIc",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+    def test_start_stop(self):\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between triggers an assert.\")\n+        self._run_test_internal(\n+            [\"--internal-start_stop=1\"],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+    def run_test(self):\n+        if self.options.internal_rpc_timeout is None and self.options.internal_extra_args is None:",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 102,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this is a quite confusing way to check whether we're in a child process or not (not obvious to me why `internal_start_stop` is not even here)",
      "created_at": "2025-04-18T12:48:10Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050585116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050585116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050586381",
      "pull_request_review_id": 2778504085,
      "id": 2050586381,
      "node_id": "PRRC_kwDOABII5856OXcN",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+    def test_start_stop(self):\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between triggers an assert.\")\n+        self._run_test_internal(\n+            [\"--internal-start_stop=1\"],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+    def run_test(self):\n+        if self.options.internal_rpc_timeout is None and self.options.internal_extra_args is None:\n+            self.test_wrong_rpc_port()\n+            self.test_init_error()\n+            self.test_start_stop()",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 105,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "do we need to batch all 3 tests into a single test?",
      "created_at": "2025-04-18T12:48:36Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050586381",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050586381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 103,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050588477",
      "pull_request_review_id": 2778504085,
      "id": 2050588477,
      "node_id": "PRRC_kwDOABII5856OX89",
      "diff_hunk": "@@ -408,6 +408,7 @@\n     'p2p_handshake.py --v2transport',\n     'feature_dirsymlinks.py',\n     'feature_help.py',\n+    'feature_framework_startup_failures.py',",
      "path": "test/functional/test_runner.py",
      "position": 11,
      "original_position": 11,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I know this is meant to be mostly random, but the existing `feature` ones seem to be in alphabetic order",
      "created_at": "2025-04-18T12:49:33Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050588477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050588477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050589262",
      "pull_request_review_id": 2778504085,
      "id": 2050589262,
      "node_id": "PRRC_kwDOABII5856OYJO",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+    def test_start_stop(self):\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between triggers an assert.\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 95,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could these be separate sub-tests instead of just test logs?",
      "created_at": "2025-04-18T12:50:02Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050589262",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050589262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050590043",
      "pull_request_review_id": 2778504085,
      "id": 2050590043,
      "node_id": "PRRC_kwDOABII5856OYVb",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "could we add these into the try so that I don't have to understand where `result` is coming from?",
      "created_at": "2025-04-18T12:50:47Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050590043",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050590043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050590886",
      "pull_request_review_id": 2778504085,
      "id": 2050590886,
      "node_id": "PRRC_kwDOABII5856OYim",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 59,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "this line might need explanation for why no `Traceback` is a `success=False`",
      "created_at": "2025-04-18T12:51:25Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050590886",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050590886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050591406",
      "pull_request_review_id": 2778504085,
      "id": 2050591406,
      "node_id": "PRRC_kwDOABII5856OYqu",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 56,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we collect the errors instead of printing and counting?",
      "created_at": "2025-04-18T12:51:45Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050591406",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050591406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050592861",
      "pull_request_review_id": 2778504085,
      "id": 2050592861,
      "node_id": "PRRC_kwDOABII5856OZBd",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 37,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do we really need 3 separate internal dummy args? Seems like a framework with a custom arg and 3 separate tests with different behaviors checking only a single thing would untangle this slightly better",
      "created_at": "2025-04-18T12:53:01Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050592861",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050592861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050594392",
      "pull_request_review_id": 2778504085,
      "id": 2050594392,
      "node_id": "PRRC_kwDOABII5856OZZY",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 6,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"various startup failures\" doesn't sound like a single test to me, could we maybe unwrap them somehow?",
      "created_at": "2025-04-18T12:55:06Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050594392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050594392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050594684",
      "pull_request_review_id": 2778504085,
      "id": 2050594684,
      "node_id": "PRRC_kwDOABII5856OZd8",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 11,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I find the `relaunches itself` part quite confusing here",
      "created_at": "2025-04-18T12:55:31Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050594684",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050594684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050597252",
      "pull_request_review_id": 2778504085,
      "id": 2050597252,
      "node_id": "PRRC_kwDOABII5856OaGE",
      "diff_hunk": "",
      "path": "test/functional/test_framework/test_framework.py",
      "position": 1,
      "original_position": 1,
      "commit_id": "fc88c2ec297dc93ba06008bd5ae10798e9f6aeac",
      "original_commit_id": "fc88c2ec297dc93ba06008bd5ae10798e9f6aeac",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: I'd move this commit before the previous one (it's more like the others, the previous one is different)",
      "created_at": "2025-04-18T12:58:49Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050597252",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050597252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050601737",
      "pull_request_review_id": 2778504085,
      "id": 2050601737,
      "node_id": "PRRC_kwDOABII5856ObMJ",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these as they are expected during initialization.\n                 # -28 RPC in warmup\n-                # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                # -342 Service unavailable, could be starting up or shutting down\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # Suppress similarly to the above JSONRPCException errors.\n+                if e.errno not in [ errno.ECONNRESET,     # This might happen when the RPC server is in warmup,\n+                                                          # but shut down before the call to getblockcount succeeds.\n+                                    errno.ETIMEDOUT,      # Treat identical to ECONNRESET\n+                                    errno.ECONNREFUSED ]: # Port not yet open?\n                     raise  # unknown OS error",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 28,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8ff738a6e96c19aaf14ebea52c8ae13751cf443b",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: this formatting pushes everything out of my screen:\r\n```suggestion\r\n                # Suppress similarly to the above JSONRPCException errors.\r\n                if e.errno not in [\r\n                    errno.ECONNRESET,  # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount succeeds.\r\n                    errno.ETIMEDOUT,   # Treat identical to ECONNRESET\r\n                    errno.ECONNREFUSED # Port not yet open?\r\n                ]: \r\n                    raise  # unknown OS error\r\n```",
      "created_at": "2025-04-18T13:02:10Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050601737",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050601737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 321,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050602938",
      "pull_request_review_id": 2778504085,
      "id": 2050602938,
      "node_id": "PRRC_kwDOABII5856Obe6",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 40,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "why?",
      "created_at": "2025-04-18T13:03:34Z",
      "updated_at": "2025-04-18T13:10:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050602938",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050602938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050604413",
      "pull_request_review_id": 2778504085,
      "id": 2050604413,
      "node_id": "PRRC_kwDOABII5856Ob19",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 51,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "can we just add `.stdout` at the end here since it's all we're using?",
      "created_at": "2025-04-18T13:05:27Z",
      "updated_at": "2025-04-18T13:11:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050604413",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050604413"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050605146",
      "pull_request_review_id": 2778504085,
      "id": 2050605146,
      "node_id": "PRRC_kwDOABII5856OcBa",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 51,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "do we care about `stdout` and `encoding` here? Or can we do `stdout=subprocess.DEVNULL` maybe?",
      "created_at": "2025-04-18T13:06:37Z",
      "updated_at": "2025-04-18T13:13:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050605146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050605146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050608441",
      "pull_request_review_id": 2778504085,
      "id": 2050608441,
      "node_id": "PRRC_kwDOABII5856Oc05",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 66,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "we could likely use the walrus operator here to narrow the scope and name:\r\n```suggestion\r\n\t\tif (matches := len(re.findall(expected_exception, result.stdout))) != 1:\r\n\t\t    self.log.error(f\"Found {matches}/1 occurrences of the specific exception: {expected_exception}\")\r\n\t\t    success = False\r\n```",
      "created_at": "2025-04-18T13:10:07Z",
      "updated_at": "2025-04-18T13:13:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050608441",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050608441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050626830",
      "pull_request_review_id": 2778579593,
      "id": 2050626830,
      "node_id": "PRRC_kwDOABII5856OhUO",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+    def test_start_stop(self):\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between triggers an assert.\")\n+        self._run_test_internal(\n+            [\"--internal-start_stop=1\"],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+    def run_test(self):\n+        if self.options.internal_rpc_timeout is None and self.options.internal_extra_args is None:",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 102,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050585116,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> this is a quite confusing way to check whether we're in a child process or not (not obvious to me why `internal_start_stop` is not even here)\r\n\r\nDo you have a suggestion to make it less confusing? I feel like checking for an internal argument is a mostly straightforward way of checking whether this was called internally.",
      "created_at": "2025-04-18T13:26:32Z",
      "updated_at": "2025-04-18T13:26:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050626830",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050626830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050631756",
      "pull_request_review_id": 2778588130,
      "id": 2050631756,
      "node_id": "PRRC_kwDOABII5856OihM",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+    def test_start_stop(self):\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between triggers an assert.\")\n+        self._run_test_internal(\n+            [\"--internal-start_stop=1\"],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+    def run_test(self):\n+        if self.options.internal_rpc_timeout is None and self.options.internal_extra_args is None:",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 102,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050585116,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've realized that all child test processes fail before reaching `run_test()`, so I'm leaning toward changing this into an `assert`.",
      "created_at": "2025-04-18T13:30:22Z",
      "updated_at": "2025-04-18T13:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2050631756",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2050631756"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051093928",
      "pull_request_review_id": 2779376204,
      "id": 2051093928,
      "node_id": "PRRC_kwDOABII5856QTWo",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+    def test_start_stop(self):\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between triggers an assert.\")\n+        self._run_test_internal(\n+            [\"--internal-start_stop=1\"],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+    def run_test(self):\n+        if self.options.internal_rpc_timeout is None and self.options.internal_extra_args is None:\n+            self.test_wrong_rpc_port()\n+            self.test_init_error()\n+            self.test_start_stop()",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 105,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050586381,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "That is the pattern for functional tests, see for example:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/3ee7062ee33c94c717131b8e7a8c01b37a1e9728/test/functional/feature_config_args.py#L488-L503",
      "created_at": "2025-04-18T20:36:44Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051093928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051093928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 103,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051095762",
      "pull_request_review_id": 2779376204,
      "id": 2051095762,
      "node_id": "PRRC_kwDOABII5856QTzS",
      "diff_hunk": "@@ -408,6 +408,7 @@\n     'p2p_handshake.py --v2transport',\n     'feature_dirsymlinks.py',\n     'feature_help.py',\n+    'feature_framework_startup_failures.py',",
      "path": "test/functional/test_runner.py",
      "position": 11,
      "original_position": 11,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050588477,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/blob/3ee7062ee33c94c717131b8e7a8c01b37a1e9728/test/functional/test_runner.py#L371-L375\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/3ee7062ee33c94c717131b8e7a8c01b37a1e9728/test/functional/test_runner.py#L389-L391",
      "created_at": "2025-04-18T20:38:42Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051095762",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051095762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 413,
      "original_line": 413,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051097217",
      "pull_request_review_id": 2779376204,
      "id": 2051097217,
      "node_id": "PRRC_kwDOABII5856QUKB",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050590043,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Tried it out, but then one runs into the issue that it looks like `subprocess.TimeoutExpired` could be raised anywhere in that whole function, which I prefer avoiding.",
      "created_at": "2025-04-18T20:40:51Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051097217",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051097217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051100542",
      "pull_request_review_id": 2779376204,
      "id": 2051100542,
      "node_id": "PRRC_kwDOABII5856QU9-",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 59,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050590886,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed the function name from `_run_test_internal` to `_verify_startup_failure` and added comment, hopefully that clarifies this aspect. I also find the error message quite explanatory:\r\nhttps://github.com/bitcoin/bitcoin/blob/fc88c2ec297dc93ba06008bd5ae10798e9f6aeac/test/functional/feature_framework_startup_failures.py#L59-L60",
      "created_at": "2025-04-18T20:45:02Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051100542",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051100542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051101926",
      "pull_request_review_id": 2779376204,
      "id": 2051101926,
      "node_id": "PRRC_kwDOABII5856QVTm",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 11,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050594684,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'd rather keep the overall test in one file. We need child process as we want the parent to always succeed, and the child processes to always fail.\r\n\r\nCorrected grammar:\r\n\"Test relaunches itself into child processes in order to trigger failures without the parent process' BitcoinTestFramework also failing.\"",
      "created_at": "2025-04-18T20:47:10Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051101926",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051101926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051108994",
      "pull_request_review_id": 2779376204,
      "id": 2051108994,
      "node_id": "PRRC_kwDOABII5856QXCC",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 40,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050602938,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Improved comment:\r\n\"Only proceed if num_nodes > 0 (child test processes), as 0 (parent) is not supported by BitcoinTestFramework.setup_network().\"\r\n\r\nCould explore making `BitcoinTestFramework` more permissive in this aspect but would rather defer that.",
      "created_at": "2025-04-18T20:52:11Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051108994",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051108994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051112592",
      "pull_request_review_id": 2779376204,
      "id": 2051112592,
      "node_id": "PRRC_kwDOABII5856QX6Q",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 51,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050604413,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Good point, taken!",
      "created_at": "2025-04-18T20:55:30Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051112592",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051112592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051114024",
      "pull_request_review_id": 2779376204,
      "id": 2051114024,
      "node_id": "PRRC_kwDOABII5856QYQo",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 51,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050605146,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Requiring the expected output to be in stderr and not stdout seems petty/brittle to me, even if it is more correct.\r\n\r\n`encoding` is required to avoid:\r\n```\r\n    traceback_count = len(re.findall(\"Traceback\", output))\r\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/nix/store/26yi95240650jxp5dj78xzch70i1kzlz-python3-3.12.9/lib/python3.12/re/__init__.py\", line 217, in findall\r\n    return _compile(pattern, flags).findall(string)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nTypeError: cannot use a string pattern on a bytes-like object\r\n```",
      "created_at": "2025-04-18T20:56:57Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051114024",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051114024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051116701",
      "pull_request_review_id": 2779376204,
      "id": 2051116701,
      "node_id": "PRRC_kwDOABII5856QY6d",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 66,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050608441,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Prefer using the walrus for truthiness tests which don't require the additional `() != 1`.",
      "created_at": "2025-04-18T21:01:03Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051116701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051116701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051118275",
      "pull_request_review_id": 2779376204,
      "id": 2051118275,
      "node_id": "PRRC_kwDOABII5856QZTD",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+    def test_start_stop(self):\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between triggers an assert.\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 95,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050589262,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Let me know if you think the final commit in the latest push is an improvement.",
      "created_at": "2025-04-18T21:03:15Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051118275",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051118275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051118701",
      "pull_request_review_id": 2779376204,
      "id": 2051118701,
      "node_id": "PRRC_kwDOABII5856QZZt",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 56,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050591406,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken!",
      "created_at": "2025-04-18T21:03:58Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051118701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051118701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051121901",
      "pull_request_review_id": 2779376204,
      "id": 2051121901,
      "node_id": "PRRC_kwDOABII5856QaLt",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 37,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050592861,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it leaves flexibility for adding more tests which use a subset of them.",
      "created_at": "2025-04-18T21:05:58Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051121901",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051121901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 35,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051126771",
      "pull_request_review_id": 2779376204,
      "id": 2051126771,
      "node_id": "PRRC_kwDOABII5856QbXz",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 6,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050594392,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is rare for functional tests to only test one thing. But I agree \"various\" is a bit too loose, changed to \"framework\".",
      "created_at": "2025-04-18T21:08:43Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051126771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051126771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051130798",
      "pull_request_review_id": 2779376204,
      "id": 2051130798,
      "node_id": "PRRC_kwDOABII5856QcWu",
      "diff_hunk": "",
      "path": "test/functional/test_framework/test_framework.py",
      "position": 1,
      "original_position": 1,
      "commit_id": "fc88c2ec297dc93ba06008bd5ae10798e9f6aeac",
      "original_commit_id": "fc88c2ec297dc93ba06008bd5ae10798e9f6aeac",
      "in_reply_to_id": 2050597252,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. Also makes it easier to squash/drop the new final commit of introducing multiple `BitcoinTestFramework`-subclasses.",
      "created_at": "2025-04-18T21:14:16Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051130798",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051130798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051138169",
      "pull_request_review_id": 2779376204,
      "id": 2051138169,
      "node_id": "PRRC_kwDOABII5856QeJ5",
      "diff_hunk": "@@ -311,23 +311,21 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these as they are expected during initialization.\n                 # -28 RPC in warmup\n-                # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                # -342 Service unavailable, could be starting up or shutting down\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                # Suppress similarly to the above JSONRPCException errors.\n+                if e.errno not in [ errno.ECONNRESET,     # This might happen when the RPC server is in warmup,\n+                                                          # but shut down before the call to getblockcount succeeds.\n+                                    errno.ETIMEDOUT,      # Treat identical to ECONNRESET\n+                                    errno.ECONNREFUSED ]: # Port not yet open?\n                     raise  # unknown OS error",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 28,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "8ff738a6e96c19aaf14ebea52c8ae13751cf443b",
      "in_reply_to_id": 2050601737,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fair. Taken.",
      "created_at": "2025-04-18T21:21:04Z",
      "updated_at": "2025-04-18T21:57:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051138169",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051138169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 321,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 338,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051419211",
      "pull_request_review_id": 2779896413,
      "id": 2051419211,
      "node_id": "PRRC_kwDOABII5856RixL",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 51,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050605146,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for checking",
      "created_at": "2025-04-19T07:23:56Z",
      "updated_at": "2025-04-19T07:23:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051419211",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051419211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051419245",
      "pull_request_review_id": 2779896431,
      "id": 2051419245,
      "node_id": "PRRC_kwDOABII5856Rixt",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 66,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050608441,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The point is to narrow the scope of variables so that we can give them more focused names.\r\nThe example in the doc https://docs.python.org/3/whatsnew/3.8.html is basically this exact escenario\r\n```python\r\nif (n := len(a)) > 10:\r\n    print(f\"List is too long ({n} elements, expected <= 10)\")\r\n```",
      "created_at": "2025-04-19T07:24:01Z",
      "updated_at": "2025-04-19T07:24:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051419245",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051419245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051419293",
      "pull_request_review_id": 2779897051,
      "id": 2051419293,
      "node_id": "PRRC_kwDOABII5856Riyd",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050590043,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> looks like subprocess.TimeoutExpired could be raised anywhere in that whole function\r\n\r\nIsn't that the whole point of a try/catch, that the happy path isn't disrupted, that you don't *have* to know where it's coming from? Otherwise we're treating exceptions as return codes.\r\n\r\nQuoting again from the Python docs https://docs.python.org/3/tutorial/errors.html\r\n```python\r\ntry:\r\n    f = open('myfile.txt')\r\n    s = f.readline()\r\n    i = int(s.strip())\r\nexcept [...]\r\n```\r\nand not\r\n```python\r\ntry:\r\n    f = open('myfile.txt')\r\nexcept [...]\r\ns = f.readline()\r\ni = int(s.strip())\r\n```",
      "created_at": "2025-04-19T07:24:23Z",
      "updated_at": "2025-04-19T07:24:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051419293",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051419293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051419454",
      "pull_request_review_id": 2779897857,
      "id": 2051419454,
      "node_id": "PRRC_kwDOABII5856Ri0-",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", result.stdout))\n+        if test_failure_msg_count != 1:\n+            self.log.error(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+            success = False\n+\n+        if not success:\n+            raise AssertionError(f\"Child test didn't contain (only) expected errors.\\n<CHILD OUTPUT BEGIN>:\\n{result.stdout}\\n<CHILD OUTPUT END>\\n\")\n+\n+    def test_wrong_rpc_port(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._run_test_internal(\n+            # Lower the timeout so we don't wait that long.\n+            [f\"--internal-rpc_timeout={int(max(3, self.options.timeout_factor))}\",\n+            # Override RPC port to something TestNode isn't expecting so that we\n+            # are unable to establish an RPC connection.\n+            f\"--internal-extra_args=-rpcport={rpc_port(2)}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+    def test_init_error(self):\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._run_test_internal(\n+            [\"--internal-extra_args=-nonexistentarg\"],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+    def test_start_stop(self):\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between triggers an assert.\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 95,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050589262,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is, thanks",
      "created_at": "2025-04-19T07:24:50Z",
      "updated_at": "2025-04-19T07:24:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051419454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051419454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051422887",
      "pull_request_review_id": 2779901776,
      "id": 2051422887,
      "node_id": "PRRC_kwDOABII5856Rjqn",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))\n+        if traceback_count != 1:\n+            self.log.error(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+            success = False\n+\n+        matching_exception_count = len(re.findall(expected_exception, result.stdout))\n+        if matching_exception_count != 1:\n+            self.log.error(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+            success = False",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 66,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050608441,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Or we could avoid repetition as well by a more functional approach of separating data from algorithm:\r\n```python\r\npatterns = {\r\n    \"Traceback\": \"tracebacks - expecting exactly one with no knock-on exceptions\",\r\n    expected_exception: f\"occurrences of the specific exception: {expected_exception}\",\r\n    \"Test failed. Test logging available at\": \"test failure output messages\"\r\n}\r\nerrors = [f\"Found {count}/1 {message}.\"\r\n          for pattern, message in patterns.items()\r\n          if (count := len(re.findall(pattern, output))) != 1]\r\n```",
      "created_at": "2025-04-19T07:40:58Z",
      "updated_at": "2025-04-19T07:40:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051422887",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051422887"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051423400",
      "pull_request_review_id": 2779902319,
      "id": 2051423400,
      "node_id": "PRRC_kwDOABII5856Rjyo",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 0  # Parent process doesn't need a node itself.\n+\n+    def setup_network(self):\n+        # BitcoinTestFramework.setup_network() does not support 0 nodes.\n+        pass\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, expected_exception):\n+        try:\n+            output = subprocess.run([sys.executable, __file__, f\"--cachedir={self.options.cachedir}\", f\"--internal_test={test.__name__}\"],\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+\n+        traceback_count = len(re.findall(\"Traceback\", output))\n+        if traceback_count != 1:\n+            errors.append(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+\n+        matching_exception_count = len(re.findall(expected_exception, output))\n+        if matching_exception_count != 1:\n+            errors.append(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", output))\n+        if test_failure_msg_count != 1:\n+            errors.append(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>:\\n{output}\\n<CHILD OUTPUT END>\\n\"\n+\n+    def run_test(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._verify_startup_failure(\n+            TestWrongRpcPortStartupFailure,\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._verify_startup_failure(\n+            TestInitErrorStartupFailure,\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between raises an assert.\")\n+        self._verify_startup_failure(\n+            TestStartStopStartupFailure,\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+class InternalTestMixin:\n+    def add_options(self, parser):\n+        # Just here to silence unrecognized argument error, we actually read the value in the if-main at the bottom.\n+        parser.add_argument(\"--internal_test\", dest=\"internal_never_read\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+class TestWrongRpcPortStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # Lower the timeout so we don't wait that long.\n+        self.rpc_timeout = max(3, self.options.timeout_factor)\n+        # Override RPC port to something TestNode isn't expecting so that we\n+        # are unable to establish an RPC connection.\n+        self.extra_args = [[f\"-rpcport={rpc_port(2)}\"]]\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+class TestInitErrorStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-nonexistentarg\"]]\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+class TestStartStopStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.nodes[0].start()\n+        self.nodes[0].stop_node() # This should raise an exception\n+        assert False, \"stop_node() should raise an exception when we haven't called wait_for_rpc_connection()\"\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+\n+if __name__ == '__main__':\n+    if not any('--internal_test=' in arg for arg in sys.argv):\n+        FeatureFrameworkStartupFailures(__file__).main()\n+    else:\n+        for arg in sys.argv:\n+            if arg[:16] == '--internal_test=':",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 122,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "9e0fede6a6d608ff307b48b9a326c6d467b410cf",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: can probably be `if arg.startswith('--internal_test='):`\r\nor walrus to the rescue again:\r\n```python\r\nif arg.startswith(prefix := '--internal_test='):\r\n    class_name = arg[len(prefix):]\r\n```",
      "created_at": "2025-04-19T07:44:23Z",
      "updated_at": "2025-04-19T07:46:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2051423400",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2051423400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052772059",
      "pull_request_review_id": 2781869977,
      "id": 2052772059,
      "node_id": "PRRC_kwDOABII5856WtDb",
      "diff_hunk": "@@ -0,0 +1,127 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 0  # Parent process doesn't need a node itself.\n+\n+    def setup_network(self):\n+        # BitcoinTestFramework.setup_network() does not support 0 nodes.\n+        pass\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, expected_exception):\n+        try:\n+            output = subprocess.run([sys.executable, __file__, f\"--cachedir={self.options.cachedir}\", f\"--internal_test={test.__name__}\"],\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+\n+        traceback_count = len(re.findall(\"Traceback\", output))\n+        if traceback_count != 1:\n+            errors.append(f\"Found {traceback_count}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+\n+        matching_exception_count = len(re.findall(expected_exception, output))\n+        if matching_exception_count != 1:\n+            errors.append(f\"Found {matching_exception_count}/1 occurrences of the specific exception: {expected_exception}\")\n+\n+        test_failure_msg_count = len(re.findall(\"Test failed. Test logging available at\", output))\n+        if test_failure_msg_count != 1:\n+            errors.append(f\"Found {test_failure_msg_count}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>:\\n{output}\\n<CHILD OUTPUT END>\\n\"\n+\n+    def run_test(self):\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._verify_startup_failure(\n+            TestWrongRpcPortStartupFailure,\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._verify_startup_failure(\n+            TestInitErrorStartupFailure,\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between raises an assert.\")\n+        self._verify_startup_failure(\n+            TestStartStopStartupFailure,\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+class InternalTestMixin:\n+    def add_options(self, parser):\n+        # Just here to silence unrecognized argument error, we actually read the value in the if-main at the bottom.\n+        parser.add_argument(\"--internal_test\", dest=\"internal_never_read\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+class TestWrongRpcPortStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # Lower the timeout so we don't wait that long.\n+        self.rpc_timeout = max(3, self.options.timeout_factor)\n+        # Override RPC port to something TestNode isn't expecting so that we\n+        # are unable to establish an RPC connection.\n+        self.extra_args = [[f\"-rpcport={rpc_port(2)}\"]]\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+class TestInitErrorStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-nonexistentarg\"]]\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+class TestStartStopStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.nodes[0].start()\n+        self.nodes[0].stop_node() # This should raise an exception\n+        assert False, \"stop_node() should raise an exception when we haven't called wait_for_rpc_connection()\"\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+\n+if __name__ == '__main__':\n+    if not any('--internal_test=' in arg for arg in sys.argv):\n+        FeatureFrameworkStartupFailures(__file__).main()\n+    else:\n+        for arg in sys.argv:\n+            if arg[:16] == '--internal_test=':",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 122,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "9e0fede6a6d608ff307b48b9a326c6d467b410cf",
      "in_reply_to_id": 2051423400,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In commit \"Drop or Squash? - Break out startup failures into distinct classes\" (9e0fede6a6d608ff307b48b9a326c6d467b410cf)\r\n\r\nI think could also simplify the `sys.modules` code and write `globals()[class_name](__file__).main()`",
      "created_at": "2025-04-21T17:48:30Z",
      "updated_at": "2025-04-21T17:53:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2052772059",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052772059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052883498",
      "pull_request_review_id": 2782051429,
      "id": 2052883498,
      "node_id": "PRRC_kwDOABII5856XIQq",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> str on Windows\r\n\r\nhttps://docs.python.org/3/library/subprocess.html#subprocess.TimeoutExpired.output claims:\r\n> This is always [bytes](https://docs.python.org/3/library/stdtypes.html#bytes) when any output was captured\r\n\r\nCan we simplify to:\r\n\r\n```suggestion\r\n            child_output = e.output.decode(\"utf-8\") if e.output else \"\"\r\n```\r\n\r\n?",
      "created_at": "2025-04-21T19:15:39Z",
      "updated_at": "2025-04-21T19:52:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2052883498",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052883498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052891901",
      "pull_request_review_id": 2782051429,
      "id": 2052891901,
      "node_id": "PRRC_kwDOABII5856XKT9",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := len(re.findall(\"Traceback\", output))) != 1:\n+            errors.append(f\"Found {n}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+        if (n := len(re.findall(expected_exception, output))) != 1:\n+            errors.append(f\"Found {n}/1 occurrences of the specific exception: {expected_exception}\")\n+        if (n := len(re.findall(\"Test failed. Test logging available at\", output))) != 1:\n+            errors.append(f\"Found {n}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"\n+\n+    def run_test(self):\n+        self.log.info(\"Parent process is measuring node startup duration in order to obtain a reasonable timeout value for later test...\")\n+        node_start_time = time.time()\n+        self.nodes[0].start()\n+        self.nodes[0].wait_for_rpc_connection()\n+        node_start_duration = time.time() - node_start_time\n+        self.nodes[0].stop_node()\n+        self.log.info(f\"...measured {node_start_duration:.1f}s.\")\n+\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._verify_startup_failure(\n+            TestWrongRpcPortStartupFailure, [f\"--internal_node_start_duration={node_start_duration}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._verify_startup_failure(\n+            TestInitErrorStartupFailure, [],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between raises an assert.\")\n+        self._verify_startup_failure(\n+            TestStartStopStartupFailure, [],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+class InternalTestMixin:\n+    def add_options(self, parser):\n+        # Just here to silence unrecognized argument error, we actually read the value in the if-main at the bottom.\n+        parser.add_argument(\"--internal_test\", dest=\"internal_never_read\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+class TestWrongRpcPortStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal_node_start_duration\", dest=\"node_start_duration\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\", type=float)\n+        InternalTestMixin.add_options(self, parser)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # Override RPC listen port to something TestNode isn't expecting so that\n+        # we are unable to establish an RPC connection.\n+        self.extra_args = [[f\"-rpcport={rpc_port(2)}\"]]\n+        # Override the timeout to avoid waiting unnecessarily long to realize\n+        # nothing is on that port. Divide by timeout_factor to counter\n+        # multiplication in base, 2 * node_start_duration should be enough.\n+        self.rpc_timeout = max(3, 2 * self.options.node_start_duration) / self.options.timeout_factor\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": 132,
      "original_position": 120,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: `assert False` is a bit hacky in my opinion - can we use the same style that we did on line 60?\r\n```suggestion\r\n        print(\"Should have failed earlier during startup.\")\r\n        raise\r\n```",
      "created_at": "2025-04-21T19:23:14Z",
      "updated_at": "2025-04-21T19:52:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2052891901",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052891901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052899485",
      "pull_request_review_id": 2782051429,
      "id": 2052899485,
      "node_id": "PRRC_kwDOABII5856XMKd",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := len(re.findall(\"Traceback\", output))) != 1:\n+            errors.append(f\"Found {n}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+        if (n := len(re.findall(expected_exception, output))) != 1:\n+            errors.append(f\"Found {n}/1 occurrences of the specific exception: {expected_exception}\")\n+        if (n := len(re.findall(\"Test failed. Test logging available at\", output))) != 1:\n+            errors.append(f\"Found {n}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"\n+\n+    def run_test(self):\n+        self.log.info(\"Parent process is measuring node startup duration in order to obtain a reasonable timeout value for later test...\")\n+        node_start_time = time.time()\n+        self.nodes[0].start()\n+        self.nodes[0].wait_for_rpc_connection()\n+        node_start_duration = time.time() - node_start_time\n+        self.nodes[0].stop_node()\n+        self.log.info(f\"...measured {node_start_duration:.1f}s.\")\n+\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._verify_startup_failure(\n+            TestWrongRpcPortStartupFailure, [f\"--internal_node_start_duration={node_start_duration}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._verify_startup_failure(\n+            TestInitErrorStartupFailure, [],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between raises an assert.\")\n+        self._verify_startup_failure(\n+            TestStartStopStartupFailure, [],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+class InternalTestMixin:\n+    def add_options(self, parser):\n+        # Just here to silence unrecognized argument error, we actually read the value in the if-main at the bottom.\n+        parser.add_argument(\"--internal_test\", dest=\"internal_never_read\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+class TestWrongRpcPortStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal_node_start_duration\", dest=\"node_start_duration\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\", type=float)\n+        InternalTestMixin.add_options(self, parser)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # Override RPC listen port to something TestNode isn't expecting so that\n+        # we are unable to establish an RPC connection.\n+        self.extra_args = [[f\"-rpcport={rpc_port(2)}\"]]\n+        # Override the timeout to avoid waiting unnecessarily long to realize\n+        # nothing is on that port. Divide by timeout_factor to counter\n+        # multiplication in base, 2 * node_start_duration should be enough.\n+        self.rpc_timeout = max(3, 2 * self.options.node_start_duration) / self.options.timeout_factor\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+class TestInitErrorStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-nonexistentarg\"]]\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+class TestStartStopStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.nodes[0].start()\n+        self.nodes[0].stop_node() # This should raise an exception\n+        assert False, \"stop_node() should raise an exception when we haven't called wait_for_rpc_connection()\"\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+\n+if __name__ == '__main__':\n+    internal_test = None\n+    for arg in sys.argv:",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 146,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not a fan of a incomplete iteration, can we separate the generator expression to the first line, something like:\r\n```suggestion\r\n    class_name = next((arg[16:] for arg in sys.argv if arg.startswith('--internal_test=')), None)\r\n```\r\nor use a regexp to deduplicate the match and substring (untested):\r\n```suggestion\r\n        class_name = next((m[1] for arg in sys.argv if (m := re.match(r'--internal_test=(.*)', arg))), None)\r\n```",
      "created_at": "2025-04-21T19:30:55Z",
      "updated_at": "2025-04-21T19:52:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2052899485",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052899485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052904553",
      "pull_request_review_id": 2782051429,
      "id": 2052904553,
      "node_id": "PRRC_kwDOABII5856XNZp",
      "diff_hunk": "@@ -305,33 +306,46 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                     # overhead is trivial, and the added guarantees are worth\n                     # the minimal performance cost.\n                 self.log.debug(\"RPC successfully started\")\n+                # Set rpc_connected even if we are in use_cli mode so that we know we can call self.stop() if needed.\n+                self.rpc_connected = True\n                 if self.use_cli:\n                     return\n                 self.rpc = rpc\n-                self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these as they are expected during initialization.\n                 # -28 RPC in warmup\n-                # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                # -342 Service unavailable, could be starting up or shutting down\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n+                suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n+                latest_error = repr(e)\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                error_num = e.errno\n+                # Work around issue where socket timeouts don't have errno set.\n+                # https://github.com/python/cpython/issues/109601\n+                if error_num is None and isinstance(e, TimeoutError):\n+                    error_num = errno.ETIMEDOUT\n+\n+                # Suppress similarly to the above JSONRPCException errors.\n+                if error_num not in [\n+                    errno.ECONNRESET,   # This might happen when the RPC server is in warmup,\n+                                        # but shut down before the call to getblockcount succeeds.\n+                    errno.ETIMEDOUT,    # Treat identical to ECONNRESET\n+                    errno.ECONNREFUSED  # Port not yet open?\n+                ]:\n                     raise  # unknown OS error\n-            except ValueError as e:  # cookie file not found and no rpcuser or rpcpassword; bitcoind is still starting\n+                suppressed_errors[f\"OSError {errno.errorcode[error_num]}\"] += 1",
      "path": "test/functional/test_framework/test_node.py",
      "position": 72,
      "original_position": 72,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Based on the checks we're doing on `e` at the top, `error_num` can potentially be `None` here - is that expected?",
      "created_at": "2025-04-21T19:36:06Z",
      "updated_at": "2025-04-21T19:52:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2052904553",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052904553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 339,
      "original_line": 339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052912020",
      "pull_request_review_id": 2782051429,
      "id": 2052912020,
      "node_id": "PRRC_kwDOABII5856XPOU",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 46,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I understand this correctly, we may want to preserve the seed properties - and xor preserves the distribution properties better than addition:\r\n```suggestion\r\n            args.append(f\"--randomseed={self.options.randomseed ^ hash(expected_exception)}\")\r\n```\r\n\r\nQ: is `hash` expected to be stable between runs - or is that not important here?",
      "created_at": "2025-04-21T19:43:30Z",
      "updated_at": "2025-04-21T19:52:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2052912020",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052912020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052915468",
      "pull_request_review_id": 2782051429,
      "id": 2052915468,
      "node_id": "PRRC_kwDOABII5856XQEM",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := len(re.findall(\"Traceback\", output))) != 1:",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 63,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "do we need regular expression matching here or can we use `output.count(\"Traceback\")` as well?\r\n```suggestion\r\n        if (n := output.count(\"Traceback\")) != 1:\r\n```",
      "created_at": "2025-04-21T19:46:57Z",
      "updated_at": "2025-04-21T19:52:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2052915468",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052915468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052969592",
      "pull_request_review_id": 2782202301,
      "id": 2052969592,
      "node_id": "PRRC_kwDOABII5856XdR4",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := len(re.findall(\"Traceback\", output))) != 1:\n+            errors.append(f\"Found {n}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+        if (n := len(re.findall(expected_exception, output))) != 1:\n+            errors.append(f\"Found {n}/1 occurrences of the specific exception: {expected_exception}\")\n+        if (n := len(re.findall(\"Test failed. Test logging available at\", output))) != 1:\n+            errors.append(f\"Found {n}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"\n+\n+    def run_test(self):\n+        self.log.info(\"Parent process is measuring node startup duration in order to obtain a reasonable timeout value for later test...\")\n+        node_start_time = time.time()\n+        self.nodes[0].start()\n+        self.nodes[0].wait_for_rpc_connection()\n+        node_start_duration = time.time() - node_start_time\n+        self.nodes[0].stop_node()\n+        self.log.info(f\"...measured {node_start_duration:.1f}s.\")\n+\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._verify_startup_failure(\n+            TestWrongRpcPortStartupFailure, [f\"--internal_node_start_duration={node_start_duration}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._verify_startup_failure(\n+            TestInitErrorStartupFailure, [],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between raises an assert.\")\n+        self._verify_startup_failure(\n+            TestStartStopStartupFailure, [],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+class InternalTestMixin:\n+    def add_options(self, parser):\n+        # Just here to silence unrecognized argument error, we actually read the value in the if-main at the bottom.\n+        parser.add_argument(\"--internal_test\", dest=\"internal_never_read\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+class TestWrongRpcPortStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal_node_start_duration\", dest=\"node_start_duration\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\", type=float)\n+        InternalTestMixin.add_options(self, parser)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # Override RPC listen port to something TestNode isn't expecting so that\n+        # we are unable to establish an RPC connection.\n+        self.extra_args = [[f\"-rpcport={rpc_port(2)}\"]]\n+        # Override the timeout to avoid waiting unnecessarily long to realize\n+        # nothing is on that port. Divide by timeout_factor to counter\n+        # multiplication in base, 2 * node_start_duration should be enough.\n+        self.rpc_timeout = max(3, 2 * self.options.node_start_duration) / self.options.timeout_factor\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": 132,
      "original_position": 120,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052891901,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "`raise` re-raises the currently caught exception. Think it's roughly equivalent to `throw;` in C++. One can do:\r\n```python\r\nraise AssertionError(\"...\")\r\n```\r\nBut I prefer using `assert` for new code. Considered raising `RuntimeError`, but this really is a code invariant, mostly for documenting, but also for catching changed behavior.",
      "created_at": "2025-04-21T20:38:25Z",
      "updated_at": "2025-04-21T22:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2052969592",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052969592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052974062",
      "pull_request_review_id": 2782202301,
      "id": 2052974062,
      "node_id": "PRRC_kwDOABII5856XeXu",
      "diff_hunk": "@@ -305,33 +306,46 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                     # overhead is trivial, and the added guarantees are worth\n                     # the minimal performance cost.\n                 self.log.debug(\"RPC successfully started\")\n+                # Set rpc_connected even if we are in use_cli mode so that we know we can call self.stop() if needed.\n+                self.rpc_connected = True\n                 if self.use_cli:\n                     return\n                 self.rpc = rpc\n-                self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these as they are expected during initialization.\n                 # -28 RPC in warmup\n-                # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                # -342 Service unavailable, could be starting up or shutting down\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n+                suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n+                latest_error = repr(e)\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                error_num = e.errno\n+                # Work around issue where socket timeouts don't have errno set.\n+                # https://github.com/python/cpython/issues/109601\n+                if error_num is None and isinstance(e, TimeoutError):\n+                    error_num = errno.ETIMEDOUT\n+\n+                # Suppress similarly to the above JSONRPCException errors.\n+                if error_num not in [\n+                    errno.ECONNRESET,   # This might happen when the RPC server is in warmup,\n+                                        # but shut down before the call to getblockcount succeeds.\n+                    errno.ETIMEDOUT,    # Treat identical to ECONNRESET\n+                    errno.ECONNREFUSED  # Port not yet open?\n+                ]:\n                     raise  # unknown OS error\n-            except ValueError as e:  # cookie file not found and no rpcuser or rpcpassword; bitcoind is still starting\n+                suppressed_errors[f\"OSError {errno.errorcode[error_num]}\"] += 1",
      "path": "test/functional/test_framework/test_node.py",
      "position": 72,
      "original_position": 72,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052904553,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We will re-`raise` above for `None`, see: https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2014298202",
      "created_at": "2025-04-21T20:42:57Z",
      "updated_at": "2025-04-21T22:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2052974062",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2052974062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 339,
      "original_line": 339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053019508",
      "pull_request_review_id": 2782202301,
      "id": 2053019508,
      "node_id": "PRRC_kwDOABII5856Xpd0",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 46,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052912020,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> Q: is `hash` expected to be stable between runs - or is that not important here?\r\n\r\nOof [no](https://stackoverflow.com/a/16452347/30124796)! Switched to insecure & fast MD5.",
      "created_at": "2025-04-21T21:29:38Z",
      "updated_at": "2025-04-21T22:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053019508",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053019508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053020028",
      "pull_request_review_id": 2782202301,
      "id": 2053020028,
      "node_id": "PRRC_kwDOABII5856Xpl8",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := len(re.findall(\"Traceback\", output))) != 1:\n+            errors.append(f\"Found {n}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+        if (n := len(re.findall(expected_exception, output))) != 1:\n+            errors.append(f\"Found {n}/1 occurrences of the specific exception: {expected_exception}\")\n+        if (n := len(re.findall(\"Test failed. Test logging available at\", output))) != 1:\n+            errors.append(f\"Found {n}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"\n+\n+    def run_test(self):\n+        self.log.info(\"Parent process is measuring node startup duration in order to obtain a reasonable timeout value for later test...\")\n+        node_start_time = time.time()\n+        self.nodes[0].start()\n+        self.nodes[0].wait_for_rpc_connection()\n+        node_start_duration = time.time() - node_start_time\n+        self.nodes[0].stop_node()\n+        self.log.info(f\"...measured {node_start_duration:.1f}s.\")\n+\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._verify_startup_failure(\n+            TestWrongRpcPortStartupFailure, [f\"--internal_node_start_duration={node_start_duration}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._verify_startup_failure(\n+            TestInitErrorStartupFailure, [],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between raises an assert.\")\n+        self._verify_startup_failure(\n+            TestStartStopStartupFailure, [],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+class InternalTestMixin:\n+    def add_options(self, parser):\n+        # Just here to silence unrecognized argument error, we actually read the value in the if-main at the bottom.\n+        parser.add_argument(\"--internal_test\", dest=\"internal_never_read\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+class TestWrongRpcPortStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal_node_start_duration\", dest=\"node_start_duration\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\", type=float)\n+        InternalTestMixin.add_options(self, parser)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # Override RPC listen port to something TestNode isn't expecting so that\n+        # we are unable to establish an RPC connection.\n+        self.extra_args = [[f\"-rpcport={rpc_port(2)}\"]]\n+        # Override the timeout to avoid waiting unnecessarily long to realize\n+        # nothing is on that port. Divide by timeout_factor to counter\n+        # multiplication in base, 2 * node_start_duration should be enough.\n+        self.rpc_timeout = max(3, 2 * self.options.node_start_duration) / self.options.timeout_factor\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+class TestInitErrorStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-nonexistentarg\"]]\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+class TestStartStopStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.nodes[0].start()\n+        self.nodes[0].stop_node() # This should raise an exception\n+        assert False, \"stop_node() should raise an exception when we haven't called wait_for_rpc_connection()\"\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+\n+if __name__ == '__main__':\n+    internal_test = None\n+    for arg in sys.argv:",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 146,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052899485,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks! Took regexp form.",
      "created_at": "2025-04-21T21:30:15Z",
      "updated_at": "2025-04-21T22:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053020028",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053020028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053031058",
      "pull_request_review_id": 2782202301,
      "id": 2053031058,
      "node_id": "PRRC_kwDOABII5856XsSS",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052883498,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In this case real-world experience proved the documentation to be wrong. We do get a string on Windows, at least under some conditions.\r\n\r\nIt does make sense to invert the condition similar to what you did though! To avoid trying `None.decode(\"utf-8\")`.\r\n`None` serializes okay (to `\"None\"`) so we can return `e.output` for both the `str` and `None` cases.\r\n```suggestion\r\n            # e.output is returned as bytes on Linux and str on Windows.\r\n            child_output = e.output.decode(\"utf-8\") if isinstance(e.output, bytes) else e.output\r\n```",
      "created_at": "2025-04-21T21:43:30Z",
      "updated_at": "2025-04-21T22:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053031058",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053031058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053032382",
      "pull_request_review_id": 2782202301,
      "id": 2053032382,
      "node_id": "PRRC_kwDOABII5856Xsm-",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := len(re.findall(\"Traceback\", output))) != 1:",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 63,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052915468,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Taken.",
      "created_at": "2025-04-21T21:45:03Z",
      "updated_at": "2025-04-21T22:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053032382",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053032382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053051864",
      "pull_request_review_id": 2782332417,
      "id": 2053051864,
      "node_id": "PRRC_kwDOABII5856XxXY",
      "diff_hunk": "@@ -322,13 +322,17 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                 suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n                 latest_error = repr(e)\n             except OSError as e:\n+                error_num = e.errno\n+                # Workaround issue observed on Windows, Python v3.13.1 where socket timeouts don't have errno set.",
      "path": "test/functional/test_framework/test_node.py",
      "position": null,
      "original_position": 5,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "52746d0c58ae1fc5913c8e01884c3fd628088be2",
      "in_reply_to_id": 2016198629,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This was re-added in later pushes as I was able to reproduce it on Windows with 5- second timeouts, not just 0 timeouts as hypothesized above (https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2018664612). See 1f639efca5e71a0ff208415d94e408a74778d4db.",
      "created_at": "2025-04-21T22:10:46Z",
      "updated_at": "2025-04-21T22:10:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053051864",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053051864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053912193",
      "pull_request_review_id": 2783771949,
      "id": 2053912193,
      "node_id": "PRRC_kwDOABII5856bDaB",
      "diff_hunk": "@@ -305,33 +306,46 @@ def wait_for_rpc_connection(self, *, wait_for_import=True):\n                     # overhead is trivial, and the added guarantees are worth\n                     # the minimal performance cost.\n                 self.log.debug(\"RPC successfully started\")\n+                # Set rpc_connected even if we are in use_cli mode so that we know we can call self.stop() if needed.\n+                self.rpc_connected = True\n                 if self.use_cli:\n                     return\n                 self.rpc = rpc\n-                self.rpc_connected = True\n                 self.url = self.rpc.rpc_url\n                 return\n-            except JSONRPCException as e:  # Initialization phase\n+            except JSONRPCException as e:\n+                # Suppress these as they are expected during initialization.\n                 # -28 RPC in warmup\n-                # -342 Service unavailable, RPC server started but is shutting down due to error\n-                if e.error['code'] != -28 and e.error['code'] != -342:\n+                # -342 Service unavailable, could be starting up or shutting down\n+                if e.error['code'] not in [-28, -342]:\n                     raise  # unknown JSON RPC exception\n-            except ConnectionResetError:\n-                # This might happen when the RPC server is in warmup, but shut down before the call to getblockcount\n-                # succeeds. Try again to properly raise the FailedToStartError\n-                pass\n+                suppressed_errors[f\"JSONRPCException {e.error['code']}\"] += 1\n+                latest_error = repr(e)\n             except OSError as e:\n-                if e.errno == errno.ETIMEDOUT:\n-                    pass  # Treat identical to ConnectionResetError\n-                elif e.errno == errno.ECONNREFUSED:\n-                    pass  # Port not yet open?\n-                else:\n+                error_num = e.errno\n+                # Work around issue where socket timeouts don't have errno set.\n+                # https://github.com/python/cpython/issues/109601\n+                if error_num is None and isinstance(e, TimeoutError):\n+                    error_num = errno.ETIMEDOUT\n+\n+                # Suppress similarly to the above JSONRPCException errors.\n+                if error_num not in [\n+                    errno.ECONNRESET,   # This might happen when the RPC server is in warmup,\n+                                        # but shut down before the call to getblockcount succeeds.\n+                    errno.ETIMEDOUT,    # Treat identical to ECONNRESET\n+                    errno.ECONNREFUSED  # Port not yet open?\n+                ]:\n                     raise  # unknown OS error\n-            except ValueError as e:  # cookie file not found and no rpcuser or rpcpassword; bitcoind is still starting\n+                suppressed_errors[f\"OSError {errno.errorcode[error_num]}\"] += 1",
      "path": "test/functional/test_framework/test_node.py",
      "position": 72,
      "original_position": 72,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052904553,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Indeed, thanks",
      "created_at": "2025-04-22T11:25:04Z",
      "updated_at": "2025-04-22T11:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053912193",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053912193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 339,
      "original_line": 339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053917393",
      "pull_request_review_id": 2783771949,
      "id": 2053917393,
      "node_id": "PRRC_kwDOABII5856bErR",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := len(re.findall(\"Traceback\", output))) != 1:\n+            errors.append(f\"Found {n}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+        if (n := len(re.findall(expected_exception, output))) != 1:\n+            errors.append(f\"Found {n}/1 occurrences of the specific exception: {expected_exception}\")\n+        if (n := len(re.findall(\"Test failed. Test logging available at\", output))) != 1:\n+            errors.append(f\"Found {n}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"\n+\n+    def run_test(self):\n+        self.log.info(\"Parent process is measuring node startup duration in order to obtain a reasonable timeout value for later test...\")\n+        node_start_time = time.time()\n+        self.nodes[0].start()\n+        self.nodes[0].wait_for_rpc_connection()\n+        node_start_duration = time.time() - node_start_time\n+        self.nodes[0].stop_node()\n+        self.log.info(f\"...measured {node_start_duration:.1f}s.\")\n+\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._verify_startup_failure(\n+            TestWrongRpcPortStartupFailure, [f\"--internal_node_start_duration={node_start_duration}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._verify_startup_failure(\n+            TestInitErrorStartupFailure, [],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between raises an assert.\")\n+        self._verify_startup_failure(\n+            TestStartStopStartupFailure, [],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+class InternalTestMixin:\n+    def add_options(self, parser):\n+        # Just here to silence unrecognized argument error, we actually read the value in the if-main at the bottom.\n+        parser.add_argument(\"--internal_test\", dest=\"internal_never_read\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+class TestWrongRpcPortStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal_node_start_duration\", dest=\"node_start_duration\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\", type=float)\n+        InternalTestMixin.add_options(self, parser)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # Override RPC listen port to something TestNode isn't expecting so that\n+        # we are unable to establish an RPC connection.\n+        self.extra_args = [[f\"-rpcport={rpc_port(2)}\"]]\n+        # Override the timeout to avoid waiting unnecessarily long to realize\n+        # nothing is on that port. Divide by timeout_factor to counter\n+        # multiplication in base, 2 * node_start_duration should be enough.\n+        self.rpc_timeout = max(3, 2 * self.options.node_start_duration) / self.options.timeout_factor\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": 132,
      "original_position": 120,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052891901,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yes, I meant either print + raise or just `raise Exception(\"Should have failed earlier during startup\")`, as you've mentioned.\r\n`assert False` feels like a hack... ",
      "created_at": "2025-04-22T11:27:23Z",
      "updated_at": "2025-04-22T11:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053917393",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053917393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053925442",
      "pull_request_review_id": 2783771949,
      "id": 2053925442,
      "node_id": "PRRC_kwDOABII5856bGpC",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := len(re.findall(\"Traceback\", output))) != 1:",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 63,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052915468,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think it applies to the other `findall` instances after this",
      "created_at": "2025-04-22T11:33:01Z",
      "updated_at": "2025-04-22T11:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053925442",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053925442"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053935108",
      "pull_request_review_id": 2783771949,
      "id": 2053935108,
      "node_id": "PRRC_kwDOABII5856bJAE",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 33,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe we could make the tenses more uniform here:\r\n```suggestion\r\n    # Launches a child test process that runs this same file, instantiates\r\n    # a child test, and verifies that it raises only the expected exception.\r\n```",
      "created_at": "2025-04-22T11:39:44Z",
      "updated_at": "2025-04-22T11:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053935108",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053935108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053942125",
      "pull_request_review_id": 2783771949,
      "id": 2053942125,
      "node_id": "PRRC_kwDOABII5856bKtt",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        weak_hash = md5(expected_exception.encode(\"utf-8\"))\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{weak_hash.hexdigest()[:16]}\")\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed ^ int.from_bytes(weak_hash.digest()[:8], 'little')}\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 48,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm fine with this as well, but to avoid complexity on declaration site and usage site (and to skip the \"weak\" part which seems out-of-place), we could try:\r\n```suggestion\r\n        hash_id = int(sha256(expected_exception.encode(\"utf-8\")).hexdigest()[:8], 16)\r\n        if self.options.tmpdir:\r\n            args.append(f\"--tmpdir={self.options.tmpdir}/{hash_id}\")\r\n        if self.options.randomseed is not None:\r\n            args.append(f\"--randomseed={self.options.randomseed ^ hash_id}\")\r\n```",
      "created_at": "2025-04-22T11:44:31Z",
      "updated_at": "2025-04-22T11:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053942125",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053942125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 44,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053944080",
      "pull_request_review_id": 2783771949,
      "id": 2053944080,
      "node_id": "PRRC_kwDOABII5856bLMQ",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        weak_hash = md5(expected_exception.encode(\"utf-8\"))\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{weak_hash.hexdigest()[:16]}\")\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed ^ int.from_bytes(weak_hash.digest()[:8], 'little')}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # Warning: timeouts like this halt execution of TestNode logic,\n+            # meaning dangling bitcoind processes are to be expected.\n+\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output.decode(\"utf-8\") if isinstance(e.output, bytes) else e.output\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := output.count(\"Traceback\")) != 1:\n+            errors.append(f\"Found {n}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+        if (n := len(re.findall(expected_exception, output))) != 1:\n+            errors.append(f\"Found {n}/1 occurrences of the specific exception: {expected_exception}\")\n+        if (n := len(re.findall(\"Test failed. Test logging available at\", output))) != 1:\n+            errors.append(f\"Found {n}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 75,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: '\\n' seems less cryptic:\r\n```suggestion\r\n        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{'\\n'.join(errors)}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"\r\n```",
      "created_at": "2025-04-22T11:45:50Z",
      "updated_at": "2025-04-22T11:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053944080",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053944080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053946928",
      "pull_request_review_id": 2783771949,
      "id": 2053946928,
      "node_id": "PRRC_kwDOABII5856bL4w",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        weak_hash = md5(expected_exception.encode(\"utf-8\"))\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{weak_hash.hexdigest()[:16]}\")\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed ^ int.from_bytes(weak_hash.digest()[:8], 'little')}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # Warning: timeouts like this halt execution of TestNode logic,\n+            # meaning dangling bitcoind processes are to be expected.\n+\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output.decode(\"utf-8\") if isinstance(e.output, bytes) else e.output\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := output.count(\"Traceback\")) != 1:\n+            errors.append(f\"Found {n}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+        if (n := len(re.findall(expected_exception, output))) != 1:\n+            errors.append(f\"Found {n}/1 occurrences of the specific exception: {expected_exception}\")\n+        if (n := len(re.findall(\"Test failed. Test logging available at\", output))) != 1:\n+            errors.append(f\"Found {n}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"\n+\n+    def run_test(self):\n+        self.log.info(\"Parent process is measuring node startup duration in order to obtain a reasonable timeout value for later test...\")\n+        node_start_time = time.time()\n+        self.nodes[0].start()\n+        self.nodes[0].wait_for_rpc_connection()\n+        node_start_duration = time.time() - node_start_time\n+        self.nodes[0].stop_node()\n+        self.log.info(f\"...measured {node_start_duration:.1f}s.\")\n+\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._verify_startup_failure(\n+            TestWrongRpcPortStartupFailure, [f\"--internal_node_start_duration={node_start_duration}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._verify_startup_failure(\n+            TestInitErrorStartupFailure, [],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between raises an assert.\")\n+        self._verify_startup_failure(\n+            TestStartStopStartupFailure, [],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+class InternalTestMixin:\n+    def add_options(self, parser):\n+        # Just here to silence unrecognized argument error, we actually read the value in the if-main at the bottom.\n+        parser.add_argument(\"--internal_test\", dest=\"internal_never_read\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+class TestWrongRpcPortStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal_node_start_duration\", dest=\"node_start_duration\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\", type=float)\n+        InternalTestMixin.add_options(self, parser)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # Override RPC listen port to something TestNode isn't expecting so that\n+        # we are unable to establish an RPC connection.\n+        self.extra_args = [[f\"-rpcport={rpc_port(2)}\"]]\n+        # Override the timeout to avoid waiting unnecessarily long to realize\n+        # nothing is on that port. Divide by timeout_factor to counter\n+        # multiplication in base, 2 * node_start_duration should be enough.\n+        self.rpc_timeout = max(3, 2 * self.options.node_start_duration) / self.options.timeout_factor\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+class TestInitErrorStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-nonexistentarg\"]]\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+class TestStartStopStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.nodes[0].start()\n+        self.nodes[0].stop_node()\n+        assert False, \"stop_node() should raise an exception when we haven't called wait_for_rpc_connection()\"\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"\n+\n+\n+if __name__ == '__main__':\n+    if class_name := next((m[1] for arg in sys.argv if (m := re.match(r'--internal_test=(.*)', arg))), None):",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 150,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit:\r\nI know I wrote `.*` but we might want `.+` instead, since we likely don't support empty ones",
      "created_at": "2025-04-22T11:47:21Z",
      "updated_at": "2025-04-22T11:56:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053946928",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2053946928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2054050094",
      "pull_request_review_id": 2783998473,
      "id": 2054050094,
      "node_id": "PRRC_kwDOABII5856blEu",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 33,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91",
      "in_reply_to_id": 2053935108,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Adjusted in similar direction.",
      "created_at": "2025-04-22T12:50:48Z",
      "updated_at": "2025-04-22T12:57:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2054050094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2054050094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2054051131",
      "pull_request_review_id": 2783998473,
      "id": 2054051131,
      "node_id": "PRRC_kwDOABII5856blU7",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        weak_hash = md5(expected_exception.encode(\"utf-8\"))\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{weak_hash.hexdigest()[:16]}\")\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed ^ int.from_bytes(weak_hash.digest()[:8], 'little')}\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 48,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91",
      "in_reply_to_id": 2053942125,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Took part of the simplification.",
      "created_at": "2025-04-22T12:51:24Z",
      "updated_at": "2025-04-22T12:57:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2054051131",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2054051131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 44,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2054053341",
      "pull_request_review_id": 2783998473,
      "id": 2054053341,
      "node_id": "PRRC_kwDOABII5856bl3d",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        weak_hash = md5(expected_exception.encode(\"utf-8\"))\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{weak_hash.hexdigest()[:16]}\")\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed ^ int.from_bytes(weak_hash.digest()[:8], 'little')}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # Warning: timeouts like this halt execution of TestNode logic,\n+            # meaning dangling bitcoind processes are to be expected.\n+\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output.decode(\"utf-8\") if isinstance(e.output, bytes) else e.output\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := output.count(\"Traceback\")) != 1:\n+            errors.append(f\"Found {n}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+        if (n := len(re.findall(expected_exception, output))) != 1:\n+            errors.append(f\"Found {n}/1 occurrences of the specific exception: {expected_exception}\")\n+        if (n := len(re.findall(\"Test failed. Test logging available at\", output))) != 1:\n+            errors.append(f\"Found {n}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 75,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91",
      "in_reply_to_id": 2053944080,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This was the result of an unfortunate battle with the linter. Seems to not even have worked on older versions:\r\n\r\nhttps://stackoverflow.com/questions/51775950/why-isnt-it-possible-to-use-backslashes-inside-the-braces-of-f-strings-how-can",
      "created_at": "2025-04-22T12:52:43Z",
      "updated_at": "2025-04-22T12:57:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2054053341",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2054053341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2054592532",
      "pull_request_review_id": 2784838614,
      "id": 2054592532,
      "node_id": "PRRC_kwDOABII5856dpgU",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052883498,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2053031058\r\n\r\nI think you could drop all unnecessary encoding and decoding by just dropping `encoding=\"utf-8\"` parameter to `subprocess.run` and printing the bytes directly with something like `sys.stderr.buffer.write(b\"<CHILD OUTPUT BEGIN>\\n%s\\n<CHILD OUTPUT END>\" % e.output)`",
      "created_at": "2025-04-22T17:57:30Z",
      "updated_at": "2025-04-22T18:02:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2054592532",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2054592532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055595632",
      "pull_request_review_id": 2786512666,
      "id": 2055595632,
      "node_id": "PRRC_kwDOABII5856heZw",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052883498,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Pushed an alternative, still using `print`. When I tried `sys.stderr.buffer.write` that data ended up at the end of the failure output, instead of when the exception was caught.",
      "created_at": "2025-04-23T09:04:53Z",
      "updated_at": "2025-04-23T09:33:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055595632",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055595632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 57,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055602303",
      "pull_request_review_id": 2786512666,
      "id": 2055602303,
      "node_id": "PRRC_kwDOABII5856hgB_",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{hash(expected_exception)}\"),\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed + hash(expected_exception)}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output if isinstance(e.output, str) else e.output.decode(\"utf-8\")\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := len(re.findall(\"Traceback\", output))) != 1:\n+            errors.append(f\"Found {n}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+        if (n := len(re.findall(expected_exception, output))) != 1:\n+            errors.append(f\"Found {n}/1 occurrences of the specific exception: {expected_exception}\")\n+        if (n := len(re.findall(\"Test failed. Test logging available at\", output))) != 1:\n+            errors.append(f\"Found {n}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"\n+\n+    def run_test(self):\n+        self.log.info(\"Parent process is measuring node startup duration in order to obtain a reasonable timeout value for later test...\")\n+        node_start_time = time.time()\n+        self.nodes[0].start()\n+        self.nodes[0].wait_for_rpc_connection()\n+        node_start_duration = time.time() - node_start_time\n+        self.nodes[0].stop_node()\n+        self.log.info(f\"...measured {node_start_duration:.1f}s.\")\n+\n+        self.log.info(\"Verifying inability to connect to bitcoind's RPC interface due to wrong port results in one exception containing at least one OSError.\")\n+        self._verify_startup_failure(\n+            TestWrongRpcPortStartupFailure, [f\"--internal_node_start_duration={node_start_duration}\"],\n+            r\"AssertionError: \\[node 0\\] Unable to connect to bitcoind after \\d+s \\(ignored errors: {[^}]*'OSError \\w+'?: \\d+[^}]*}, latest error: \\w+\\([^)]+\\)\\)\"\n+        )\n+\n+        self.log.info(\"Verify startup failure due to invalid arg results in only one exception.\")\n+        self._verify_startup_failure(\n+            TestInitErrorStartupFailure, [],\n+            r\"FailedToStartError: \\[node 0\\] bitcoind exited with status 1 during initialization\\. Error: Error parsing command line arguments: Invalid parameter -nonexistentarg\"\n+        )\n+\n+        self.log.info(\"Verify start() then stop_node() on a node without wait_for_rpc_connection() in between raises an assert.\")\n+        self._verify_startup_failure(\n+            TestStartStopStartupFailure, [],\n+            r\"AssertionError: \\[node 0\\] Should only call stop_node\\(\\) on a running node after wait_for_rpc_connection\\(\\) succeeded\\. Did you forget to call the latter after start\\(\\)\\? Not connected to process: \\d+\"\n+        )\n+\n+class InternalTestMixin:\n+    def add_options(self, parser):\n+        # Just here to silence unrecognized argument error, we actually read the value in the if-main at the bottom.\n+        parser.add_argument(\"--internal_test\", dest=\"internal_never_read\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+class TestWrongRpcPortStartupFailure(InternalTestMixin, BitcoinTestFramework):\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal_node_start_duration\", dest=\"node_start_duration\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\", type=float)\n+        InternalTestMixin.add_options(self, parser)\n+\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        # Override RPC listen port to something TestNode isn't expecting so that\n+        # we are unable to establish an RPC connection.\n+        self.extra_args = [[f\"-rpcport={rpc_port(2)}\"]]\n+        # Override the timeout to avoid waiting unnecessarily long to realize\n+        # nothing is on that port. Divide by timeout_factor to counter\n+        # multiplication in base, 2 * node_start_duration should be enough.\n+        self.rpc_timeout = max(3, 2 * self.options.node_start_duration) / self.options.timeout_factor\n+\n+    def run_test(self):\n+        assert False, \"Should have failed earlier during startup.\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": 132,
      "original_position": 120,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ae99bf8d7bb2c3b5e741e76860b4d2f43c26514",
      "in_reply_to_id": 2052891901,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If there was some kind of `UnreachableError` I would use it. Looked into using our utility `assert_raises(...stop_node...)`, but that swallows the exception, so the test fails.",
      "created_at": "2025-04-23T09:07:43Z",
      "updated_at": "2025-04-23T09:33:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055602303",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055602303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 132,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055653426",
      "pull_request_review_id": 2786512666,
      "id": 2055653426,
      "node_id": "PRRC_kwDOABII5856hsgy",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050590043,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The full example from the python docs is:\r\n```python\r\ntry:\r\n    f = open('myfile.txt')\r\n    s = f.readline()\r\n    i = int(s.strip())\r\nexcept OSError as err:\r\n    print(\"OS error:\", err)\r\nexcept ValueError:\r\n    print(\"Could not convert data to an integer.\")\r\nexcept Exception as err:\r\n    print(f\"Unexpected {err=}, {type(err)=}\")\r\n    raise\r\n```\r\nSo the first and last lines inside the `try` are expected to sometimes raise exceptions (maybe the `readline()` too), which does not map well to the code in `_verify_startup_failure()`.",
      "created_at": "2025-04-23T09:31:44Z",
      "updated_at": "2025-04-23T09:33:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055653426",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055653426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055664123",
      "pull_request_review_id": 2786657209,
      "id": 2055664123,
      "node_id": "PRRC_kwDOABII5856hvH7",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050590043,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The point is that the happy path is separated from the error handling, we're not using exceptions as if they were returned error codes",
      "created_at": "2025-04-23T09:38:04Z",
      "updated_at": "2025-04-23T09:38:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055664123",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055664123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055688076",
      "pull_request_review_id": 2786705852,
      "id": 2055688076,
      "node_id": "PRRC_kwDOABII5856h0-M",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050590043,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My intent is to keep as much of the code separate from error handling as possible. By narrowing the scope of the `try` it makes clear to the reader that there aren't exceptions hiding in every line of the happy path.",
      "created_at": "2025-04-23T09:51:31Z",
      "updated_at": "2025-04-23T09:51:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055688076",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055688076"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055708651",
      "pull_request_review_id": 2786738924,
      "id": 2055708651,
      "node_id": "PRRC_kwDOABII5856h5_r",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050590043,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the opposite is true, this way we're forcing the reader to consider the error case when trying to understand the happy path (i.e. separation of concerns). But I'll leave it, it's not *that* important.",
      "created_at": "2025-04-23T10:03:30Z",
      "updated_at": "2025-04-23T10:03:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055708651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055708651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055750894",
      "pull_request_review_id": 2786806460,
      "id": 2055750894,
      "node_id": "PRRC_kwDOABII5856iETu",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I must be missing something fundamental here, I don't understand why these lines are never triggered while running the test.\r\nAre these triggered in some special circumstance that has happened before but isn't happening anymore - and since it's already testing other tests, there's no point in covering it with actual tests?\r\n\r\nI find it a bit confusing, wanted to understand why e.g. the `nocleanup` branch was added here - but disabling it still passes, so that doesn't help... \r\n\r\n```python\r\nif self.options.nocleanup:\r\n    raise Exception(\"\")\r\n    args.append(\"--nocleanup\")\r\n```\r\nand\r\n```python\r\nif self.options.randomseed is not None:\r\n    raise Exception(\"\")\r\n    args.append(f\"--randomseed={self.options.randomseed ^ weak_hash}\")\r\n```\r\nand\r\n```python\r\nif (n := output.count(\"Traceback\")) != 1:\r\n    raise Exception(\"\")\r\n    errors.append(f\"Found {n}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\r\n```",
      "created_at": "2025-04-23T10:28:00Z",
      "updated_at": "2025-04-23T10:28:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055750894",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055750894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055884036",
      "pull_request_review_id": 2787025044,
      "id": 2055884036,
      "node_id": "PRRC_kwDOABII5856ik0E",
      "diff_hunk": "@@ -0,0 +1,109 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify various startup failures only raise one exception since multiple\n+exceptions being raised muddies the waters of what actually went wrong.\n+We should maintain this bar of only raising one exception as long as\n+additional maintenance and complexity is low.\n+\n+Test relaunches itself into a child processes in order to trigger failure\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+import re\n+import subprocess\n+import sys\n+\n+class FeatureFrameworkRPCFailure(BitcoinTestFramework):\n+    def set_test_params(self):\n+        # Only run a node for child processes\n+        self.num_nodes = 1 if any(o is not None for o in [self.options.internal_rpc_timeout,\n+                                                          self.options.internal_extra_args,\n+                                                          self.options.internal_start_stop]) else 0\n+\n+        if self.options.internal_rpc_timeout is not None:\n+            self.rpc_timeout = self.options.internal_rpc_timeout\n+        if self.options.internal_extra_args:\n+            self.extra_args = [[self.options.internal_extra_args]]\n+\n+    def add_options(self, parser):\n+        parser.add_argument(\"--internal-rpc_timeout\", dest=\"internal_rpc_timeout\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-extra_args\", dest=\"internal_extra_args\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+        parser.add_argument(\"--internal-start_stop\", dest=\"internal_start_stop\", help=\"ONLY TO BE USED WHEN TEST RELAUNCHES ITSELF\")\n+\n+    def setup_network(self):\n+        # Avoid doing anything if num_nodes == 0, otherwise we fail.\n+        if self.num_nodes > 0:\n+            if self.options.internal_start_stop:\n+                self.add_nodes(self.num_nodes, self.extra_args)\n+                self.nodes[0].start()\n+                self.nodes[0].stop_node()\n+            else:\n+                BitcoinTestFramework.setup_network(self)\n+\n+    def _run_test_internal(self, args, expected_exception):\n+        try:\n+            result = subprocess.run([sys.executable, __file__] + args, encoding=\"utf-8\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=60 * self.options.timeout_factor)\n+        except subprocess.TimeoutExpired as e:\n+            print(f\"Unexpected timeout, subprocess output:\\n{e.output}\\nSubprocess output end\", file=sys.stderr)\n+            raise\n+\n+        success = True\n+\n+        traceback_count = len(re.findall(\"Traceback\", result.stdout))",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 58,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "3ee7062ee33c94c717131b8e7a8c01b37a1e9728",
      "in_reply_to_id": 2050590043,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Another objection to your approach as a general rule:\r\nIf one of the lines in the happy path is modified to call a function that raises exceptions under some circumstances, we run the risk of accidentally catching it by related (parent)type through a pre-existing `except`/`catch`-block, and treating it differently than we had if we intentionally designed the code.\r\n\r\nSide note: I'm in favor of newer languages like Rust/Zig **not** supporting exceptions.",
      "created_at": "2025-04-23T11:54:31Z",
      "updated_at": "2025-04-23T11:54:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055884036",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055884036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055895552",
      "pull_request_review_id": 2787042686,
      "id": 2055895552,
      "node_id": "PRRC_kwDOABII5856inoA",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The forwarding of `self.options` to the child process is purely to obey the expectations of someone running feature_framework_startup_failures.py or test_runner.py with those arguments on the CLI/CI.",
      "created_at": "2025-04-23T12:01:09Z",
      "updated_at": "2025-04-23T12:01:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055895552",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055895552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055902833",
      "pull_request_review_id": 2787055905,
      "id": 2055902833,
      "node_id": "PRRC_kwDOABII5856ipZx",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not sure I understand, so is it dead code? Would the above exceptions be triggered on CI? In either case I find it confusing.",
      "created_at": "2025-04-23T12:06:14Z",
      "updated_at": "2025-04-23T12:06:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055902833",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055902833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055920502",
      "pull_request_review_id": 2787085443,
      "id": 2055920502,
      "node_id": "PRRC_kwDOABII5856itt2",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is sometimes useful to debug tests by looking at what is left behind on the filesystem. In those cases one could invoke the parent with \"--nocleanup\". Not forwarding it to child processes means they would not leave files behind.",
      "created_at": "2025-04-23T12:17:06Z",
      "updated_at": "2025-04-23T12:17:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055920502",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055920502"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055927034",
      "pull_request_review_id": 2787096335,
      "id": 2055927034,
      "node_id": "PRRC_kwDOABII5856ivT6",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure, but why isn't it used currently? The dead code part is what bothers me",
      "created_at": "2025-04-23T12:21:03Z",
      "updated_at": "2025-04-23T12:21:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055927034",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055927034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055969055",
      "pull_request_review_id": 2787162170,
      "id": 2055969055,
      "node_id": "PRRC_kwDOABII5856i5kf",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is functionality that can be activated by the user/CI. Not having the code would leave such cases in more of a broken state.",
      "created_at": "2025-04-23T12:43:24Z",
      "updated_at": "2025-04-23T12:43:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055969055",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055969055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055973404",
      "pull_request_review_id": 2787169822,
      "id": 2055973404,
      "node_id": "PRRC_kwDOABII5856i6oc",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can we cover the paths in the tests as well?",
      "created_at": "2025-04-23T12:45:20Z",
      "updated_at": "2025-04-23T12:45:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055973404",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055973404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055986974",
      "pull_request_review_id": 2787190816,
      "id": 2055986974,
      "node_id": "PRRC_kwDOABII5856i98e",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We could definitely test more parts of the framework functionality in another PR. This PR is focused on keeping the error reporting clear for startup failures, to aid troubleshooting.",
      "created_at": "2025-04-23T12:51:46Z",
      "updated_at": "2025-04-23T12:51:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055986974",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055986974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055994881",
      "pull_request_review_id": 2787203787,
      "id": 2055994881,
      "node_id": "PRRC_kwDOABII5856i_4B",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "But this PR introduced the dead code",
      "created_at": "2025-04-23T12:55:59Z",
      "updated_at": "2025-04-23T12:56:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055994881",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2055994881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2056007024",
      "pull_request_review_id": 2787224168,
      "id": 2056007024,
      "node_id": "PRRC_kwDOABII5856jC1w",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2055969055",
      "created_at": "2025-04-23T13:02:28Z",
      "updated_at": "2025-04-23T13:02:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2056007024",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2056007024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2059668657",
      "pull_request_review_id": 2793166975,
      "id": 2059668657,
      "node_id": "PRRC_kwDOABII5856xAyx",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I felt we were going in circles here, that's why I illustrated it by linking back up the thread. The code is not dead, it is there to avoid the behavior not being broken when those args are activated by a user or CI.\r\n\r\nThis change is about testing the behavior of the test framework. We could also add tests to test the testing of the test framework, but at some point, this recursion has to stop.\r\n\r\nMaybe we're talking past each other in some way I don't perceive?",
      "created_at": "2025-04-25T06:57:18Z",
      "updated_at": "2025-04-25T06:57:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2059668657",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2059668657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2059950855",
      "pull_request_review_id": 2793635309,
      "id": 2059950855,
      "node_id": "PRRC_kwDOABII5856yFsH",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(We had a call and I will experiment with passing down the full `sys.argv` to the child processes (with some tweaking for tmpdir). Will also see if I can add a test-class which intentionally exercises the failure case of `...count(\"Traceback\")) != 1` and other checks in `_verify_startup_failure` without making things too convoluted, as it will ensure the test tester is robust going forward).",
      "created_at": "2025-04-25T10:05:52Z",
      "updated_at": "2025-04-25T10:05:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2059950855",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2059950855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2060900943",
      "pull_request_review_id": 2795307271,
      "id": 2060900943,
      "node_id": "PRRC_kwDOABII58561tpP",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(Done in latest push from ~8 hours ago).",
      "created_at": "2025-04-25T21:27:06Z",
      "updated_at": "2025-04-25T21:27:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2060900943",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2060900943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061411267",
      "pull_request_review_id": 2796176804,
      "id": 2061411267,
      "node_id": "PRRC_kwDOABII58563qPD",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import (\n+    assert_raises_message,\n+    rpc_port,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        # Inherit args from parent, only modifying tmpdir so children don't fail\n+        # as a cause of colliding with the parent dir.\n+        parent_args = sys.argv.copy()\n+        assert self.options.tmpdir, \"We expect the framework to always set tmpdir.\"\n+        tmpdir_arg = False\n+        subdir = md5(expected_exception.encode('utf-8')).hexdigest()[:8]\n+        for (i, arg) in enumerate(parent_args):\n+            if (m := re.match(r'--tm(p?(d?(i?(r?))))=(.+)', arg)):\n+                parent_args[i] = f\"--tmpdir={m[5]}/{subdir}\"\n+                tmpdir_arg = True\n+                break\n+        if not tmpdir_arg:\n+            parent_args.append(f\"--tmpdir={self.options.tmpdir}/{subdir}\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 50,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "0302eefd9a826e1d8e81b3684ff8ebc6de9d4217",
      "in_reply_to_id": null,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What's the exact purpose of this, why would someone set `--tmr=x` or `--tmdi=y`?\r\nAnd `if not tmpdir_arg` is basically the same as the previous loop which inserts to existing location, it just appends and uses a different root folder, right? We could use those as defaults I think, and slice it in, something like:\r\n\r\n```suggestion\r\n        i, path = next(((i, m[1]) for i, arg in enumerate(parent_args) if (m := re.match(r'--tmpdir=(.+)', arg))),\r\n                       (len(parent_args), self.options.tmpdir))\r\n        subdir = md5(expected_exception.encode('utf-8')).hexdigest()[:8]\r\n        parent_args[i:i + 1] = [f\"--tmpdir={path}/{subdir}\"]\r\n```\r\n\r\n(`(-1, self.options.tmpdir))` would also work, but the slice would look weird in that case)\r\n\r\nNot a blocker from my part, will leave it up to you.",
      "created_at": "2025-04-26T15:49:36Z",
      "updated_at": "2025-04-26T16:23:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2061411267",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061411267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 42,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061435588",
      "pull_request_review_id": 2796176804,
      "id": 2061435588,
      "node_id": "PRRC_kwDOABII58563wLE",
      "diff_hunk": "@@ -0,0 +1,155 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process running this same file, but instantiating\n+    # a child test, and verifies that we (only) raise the expected exception.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")\n+        weak_hash = md5(expected_exception.encode(\"utf-8\"))\n+        if self.options.tmpdir:\n+            args.append(f\"--tmpdir={self.options.tmpdir}/{weak_hash.hexdigest()[:16]}\")\n+        if self.options.randomseed is not None:\n+            args.append(f\"--randomseed={self.options.randomseed ^ int.from_bytes(weak_hash.digest()[:8], 'little')}\")\n+        if self.options.timeout_factor is not None:\n+            args.append(f\"--timeout-factor={self.options.timeout_factor}\")\n+\n+        try:\n+            output = subprocess.run(args,\n+                                    encoding=\"utf-8\",\n+                                    stdout=subprocess.PIPE,\n+                                    stderr=subprocess.STDOUT,\n+                                    timeout=60 * self.options.timeout_factor).stdout\n+        except subprocess.TimeoutExpired as e:\n+            # Warning: timeouts like this halt execution of TestNode logic,\n+            # meaning dangling bitcoind processes are to be expected.\n+\n+            # e.output is returned as bytes on Linux and str on Windows.\n+            child_output = e.output.decode(\"utf-8\") if isinstance(e.output, bytes) else e.output\n+            print(f\"Unexpected child timeout:\\n<CHILD OUTPUT BEGIN>\\n{child_output}\\n<CHILD OUTPUT END>\", file=sys.stderr)\n+            raise\n+\n+        errors = []\n+        if (n := output.count(\"Traceback\")) != 1:\n+            errors.append(f\"Found {n}/1 tracebacks - expecting exactly one with no knock-on exceptions.\")\n+        if (n := len(re.findall(expected_exception, output))) != 1:\n+            errors.append(f\"Found {n}/1 occurrences of the specific exception: {expected_exception}\")\n+        if (n := len(re.findall(\"Test failed. Test logging available at\", output))) != 1:\n+            errors.append(f\"Found {n}/1 test failure output messages.\")\n+\n+        assert not errors, f\"Child test didn't contain (only) expected errors:\\n{chr(10).join(errors)}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 75,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ea3cc8388b4aefcaee61f75e8bf1bc03281a0c91",
      "in_reply_to_id": 2053944080,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The above worked for me - seems it was fixed in Python 3.12, but we have to support earlier ones as well.\r\nBut I haven't fully given up on this :D. It's not very important, just had to find a solution, feel free to ignore.\r\nSince empty strings are also falsy, the 🦭 operator can come to the rescue again.\r\n```suggestion\r\n        assert not (msg := '\\n'.join(errors)), f\"Child test didn't contain (only) expected errors:\\n{msg}\\n<CHILD OUTPUT BEGIN>\\n{output}\\n<CHILD OUTPUT END>\\n\"\r\n```",
      "created_at": "2025-04-26T16:14:31Z",
      "updated_at": "2025-04-26T16:23:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2061435588",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061435588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061444289",
      "pull_request_review_id": 2796176804,
      "id": 2061444289,
      "node_id": "PRRC_kwDOABII58563yTB",
      "diff_hunk": "@@ -0,0 +1,153 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import rpc_port\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        args = [\n+            sys.executable,\n+            __file__,\n+            f\"--cachedir={self.options.cachedir}\",\n+            f\"--portseed={self.options.port_seed}\",\n+            f\"--internal_test={test.__name__}\",\n+        ] + internal_args\n+        if self.options.nocleanup:\n+            args.append(\"--nocleanup\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 43,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "ece5442f05967ce5fe83f144ebde19d37ebbfffb",
      "in_reply_to_id": 2055750894,
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for fixing this!",
      "created_at": "2025-04-26T16:16:25Z",
      "updated_at": "2025-04-26T16:23:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2061444289",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061444289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061570932",
      "pull_request_review_id": 2796389315,
      "id": 2061570932,
      "node_id": "PRRC_kwDOABII58564RN0",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2025-present The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Verify framework startup failures only raise one exception since\n+multiple exceptions being raised muddies the waters of what actually\n+went wrong. We should maintain this bar of only raising one exception as\n+long as additional maintenance and complexity is low.\n+\n+Test relaunches itself into child processes in order to trigger failures\n+without the parent process' BitcoinTestFramework also failing.\n+\"\"\"\n+\n+from test_framework.util import (\n+    assert_raises_message,\n+    rpc_port,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from hashlib import md5\n+import re\n+import subprocess\n+import sys\n+import time\n+\n+class FeatureFrameworkStartupFailures(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Don't start the node yet, as we want to measure during run_test.\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+\n+    # Launches a child test process that runs this same file, but instantiates\n+    # a child test. Verifies that it raises only the expected exception, once.\n+    def _verify_startup_failure(self, test, internal_args, expected_exception):\n+        # Inherit args from parent, only modifying tmpdir so children don't fail\n+        # as a cause of colliding with the parent dir.\n+        parent_args = sys.argv.copy()\n+        assert self.options.tmpdir, \"We expect the framework to always set tmpdir.\"\n+        tmpdir_arg = False\n+        subdir = md5(expected_exception.encode('utf-8')).hexdigest()[:8]\n+        for (i, arg) in enumerate(parent_args):\n+            if (m := re.match(r'--tm(p?(d?(i?(r?))))=(.+)', arg)):\n+                parent_args[i] = f\"--tmpdir={m[5]}/{subdir}\"\n+                tmpdir_arg = True\n+                break\n+        if not tmpdir_arg:\n+            parent_args.append(f\"--tmpdir={self.options.tmpdir}/{subdir}\")",
      "path": "test/functional/feature_framework_startup_failures.py",
      "position": null,
      "original_position": 50,
      "commit_id": "b19439b1eee57041fc37dcf509d5ee9f248263bc",
      "original_commit_id": "0302eefd9a826e1d8e81b3684ff8ebc6de9d4217",
      "in_reply_to_id": 2061411267,
      "user": {
        "login": "hodlinator",
        "id": 172445034,
        "node_id": "U_kgDOCkdNag",
        "avatar_url": "https://avatars.githubusercontent.com/u/172445034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hodlinator",
        "html_url": "https://github.com/hodlinator",
        "followers_url": "https://api.github.com/users/hodlinator/followers",
        "following_url": "https://api.github.com/users/hodlinator/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hodlinator/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hodlinator/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hodlinator/subscriptions",
        "organizations_url": "https://api.github.com/users/hodlinator/orgs",
        "repos_url": "https://api.github.com/users/hodlinator/repos",
        "events_url": "https://api.github.com/users/hodlinator/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hodlinator/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks! Took a variant of that, while still maintaining support for shortened forms of `--tmpdir`. The Python `ArgumentParser` supports doing that and I've personally used `--time=2` in place of `--timeout-factor=2` since it's shorter and I don't remember if it's `--timeout_factor`.",
      "created_at": "2025-04-26T19:53:46Z",
      "updated_at": "2025-04-26T19:53:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30660#discussion_r2061570932",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/2061570932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30660"
        }
      },
      "start_line": null,
      "original_start_line": 42,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    }
  ]
}