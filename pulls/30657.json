{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657",
    "id": 2019600920,
    "node_id": "PR_kwDOABII5854YKoY",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/30657",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/30657.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/30657.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30657",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30657/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
    "number": 30657,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "test: add functional test for XORed block/undo files (`-blocksxor` option)",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This PR adds a dedicated functional test for XORed block data/undo file support (bitcoind option `-blocksxor`, see PR #28052). In order to verify that the XOR pattern has been applied, the {blk,rev}*.dat files are rewritten un-XORed manually by the test while the node is shut down; the node is then started again with `-blocksxor=0`, and both the data and undo files are verified via the `verifychain` RPC (with checklevel=2). Note that starting bitcoind with `-blocksxor=0` fails if a xor key is present already, which is also tested explicitly.\r\n\r\nFixes #30599.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/66",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/66",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/66/labels",
      "id": 10314936,
      "node_id": "MI_kwDOABII584AnWS4",
      "number": 66,
      "state": "closed",
      "title": "28.0",
      "creator": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "open_issues": 0,
      "closed_issues": 98,
      "created_at": "2023-12-15T12:08:23Z",
      "updated_at": "2024-10-16T15:52:11Z",
      "closed_at": "2024-10-16T15:52:11Z"
    },
    "created_at": "2024-08-14T15:34:52Z",
    "updated_at": "2025-09-15T11:41:50Z",
    "closed_at": "2024-08-16T15:26:08Z",
    "mergeable_state": "unknown",
    "merged": true,
    "merged_at": "2024-08-16T15:26:08Z",
    "merged_by": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "merge_commit_sha": "6474132d1b6a02e248ed6603b5a89ec038c35f7d",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "theStack:202408-add_blocksxor_test",
      "ref": "202408-add_blocksxor_test",
      "sha": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 204970720,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMDQ5NzA3MjA=",
        "name": "bitcoin",
        "full_name": "theStack/bitcoin",
        "owner": {
          "login": "theStack",
          "id": 91535,
          "node_id": "MDQ6VXNlcjkxNTM1",
          "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/theStack",
          "html_url": "https://github.com/theStack",
          "followers_url": "https://api.github.com/users/theStack/followers",
          "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
          "organizations_url": "https://api.github.com/users/theStack/orgs",
          "repos_url": "https://api.github.com/users/theStack/repos",
          "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/theStack/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/theStack/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/theStack/bitcoin",
        "archive_url": "https://api.github.com/repos/theStack/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/theStack/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/theStack/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/theStack/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/theStack/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/theStack/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/theStack/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/theStack/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/theStack/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/theStack/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/theStack/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/theStack/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/theStack/bitcoin/events",
        "forks_url": "https://api.github.com/repos/theStack/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/theStack/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/theStack/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/theStack/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/theStack/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/theStack/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/theStack/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/theStack/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/theStack/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/theStack/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/theStack/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/theStack/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/theStack/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/theStack/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/theStack/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/theStack/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:theStack/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/theStack/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/theStack/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/theStack/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/theStack/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/theStack/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/theStack/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/theStack/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/theStack/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/theStack/bitcoin/hooks",
        "svn_url": "https://github.com/theStack/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 356185,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-04T14:07:01Z",
        "created_at": "2019-08-28T15:59:29Z",
        "updated_at": "2025-08-07T03:06:29Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "9264d62bd9e3d9bde0eea973393633d8b75e51a0",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 37779,
        "stargazers_count": 85509,
        "watchers_count": 85509,
        "size": 293566,
        "default_branch": "master",
        "open_issues_count": 779,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-09-15T08:49:33Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-09-15T11:56:32Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 85,
    "deletions": 10,
    "changed_files": 4,
    "commits": 2,
    "review_comments": 23,
    "comments": 3
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZiMzY3NmJlM2U1YjZlNDA3ODc2MDMxNzkxMTcyZjQ0MWIzNTkyOTU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b3676be3e5b6e407876031791172f441b359295",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6b3676be3e5b6e407876031791172f441b359295",
      "tree": {
        "sha": "0ecf270eb792de110d451764ccd3d94fea815d57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ecf270eb792de110d451764ccd3d94fea815d57"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a41e63575986887ae34993b4433ec711ae0ffbc",
          "sha": "1a41e63575986887ae34993b4433ec711ae0ffbc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1a41e63575986887ae34993b4433ec711ae0ffbc"
        }
      ],
      "message": "test: refactor: move `read_xor_key`/`util_xor` helpers to util module",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-08-14T14:43:46Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-08-14T14:43:46Z"
      },
      "sha": "6b3676be3e5b6e407876031791172f441b359295"
    },
    {
      "event": "commented",
      "id": 2289130085,
      "node_id": "IC_kwDOABII586IcVpl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2289130085",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T15:34:55Z",
      "updated_at": "2024-08-16T08:56:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage\nFor detailed information about the code coverage, see the [test coverage report](https://corecheck.dev/bitcoin/bitcoin/pulls/30657).\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [maflcko](https://github.com/bitcoin/bitcoin/pull/30657#pullrequestreview-2239750096), [ismaelsadeeq](https://github.com/bitcoin/bitcoin/pull/30657#pullrequestreview-2240361497), [glozow](https://github.com/bitcoin/bitcoin/pull/30657#issuecomment-2293114610) |\n| Concept ACK | [TheCharlatan](https://github.com/bitcoin/bitcoin/pull/30657#issuecomment-2289173555) |\n| Approach ACK | [tdb3](https://github.com/bitcoin/bitcoin/pull/30657#pullrequestreview-2239353746) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#issuecomment-2289130085",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30657"
    },
    {
      "event": "labeled",
      "id": 13882746807,
      "node_id": "LE_lADOABII586S_yBpzwAAAAM7eee3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13882746807",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T15:34:57Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "renamed",
      "id": 13882750855,
      "node_id": "RTE_lADOABII586S_yBpzwAAAAM7efeH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13882750855",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T15:35:17Z",
      "rename": {
        "from": "test: add functional test for XORed block/undo files (`-blockxor` option)",
        "to": "test: add functional test for XORed block/undo files (`-blocksxor` option)"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13882757968,
      "node_id": "HRFPE_lADOABII586S_yBpzwAAAAM7ehNQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13882757968",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "fb2ea1ed36a9bf16f0331ebebdf2b27ea9d22808",
      "commit_url": "https://api.github.com/repos/theStack/bitcoin/commits/fb2ea1ed36a9bf16f0331ebebdf2b27ea9d22808",
      "created_at": "2024-08-14T15:35:49Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZhYTFiOWIwZTZkZTdkMjEzNjk5ZmJkYmMyZTI1YTJhODFjMzVjZGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "tree": {
        "sha": "72c3bdcb4219b576aa3e86990df41efaf2a59ae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72c3bdcb4219b576aa3e86990df41efaf2a59ae5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b3676be3e5b6e407876031791172f441b359295",
          "sha": "6b3676be3e5b6e407876031791172f441b359295",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6b3676be3e5b6e407876031791172f441b359295"
        }
      ],
      "message": "test: add functional test for XORed block/undo files (`-blocksxor`)",
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-08-14T15:38:28Z"
      },
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2024-08-14T15:21:07Z"
      },
      "sha": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13882794160,
      "node_id": "HRFPE_lADOABII586S_yBpzwAAAAM7eqCw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13882794160",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "commit_url": "https://api.github.com/repos/theStack/bitcoin/commits/faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "created_at": "2024-08-14T15:38:43Z"
    },
    {
      "event": "commented",
      "id": 2289173555,
      "node_id": "IC_kwDOABII586IcgQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2289173555",
      "actor": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-14T15:53:36Z",
      "updated_at": "2024-08-14T15:53:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#issuecomment-2289173555",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30657"
    },
    {
      "event": "reviewed",
      "id": 2239353746,
      "node_id": "PRR_kwDOABII586FedOS",
      "url": null,
      "actor": null,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-15T01:15:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK.\r\nNice additions.\r\nLeft a comment and a nit.",
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#pullrequestreview-2239353746",
      "submitted_at": "2024-08-15T01:15:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
    },
    {
      "event": "reviewed",
      "id": 2239750096,
      "node_id": "PRR_kwDOABII586Ff9_Q",
      "url": null,
      "actor": null,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-15T05:53:51Z",
      "author_association": "MEMBER",
      "body": "ACK faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#pullrequestreview-2239750096",
      "submitted_at": "2024-08-15T05:53:51Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
    },
    {
      "event": "review_requested",
      "id": 13892072395,
      "node_id": "RRE_lADOABII586S_yBpzwAAAAM8CDPL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13892072395",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T05:53:54Z",
      "requested_reviewer": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 13892072488,
      "node_id": "RRE_lADOABII586S_yBpzwAAAAM8CDQo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13892072488",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T05:53:54Z",
      "requested_reviewer": {
        "login": "TheCharlatan",
        "id": 8421793,
        "node_id": "MDQ6VXNlcjg0MjE3OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8421793?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheCharlatan",
        "html_url": "https://github.com/TheCharlatan",
        "followers_url": "https://api.github.com/users/TheCharlatan/followers",
        "following_url": "https://api.github.com/users/TheCharlatan/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheCharlatan/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheCharlatan/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheCharlatan/subscriptions",
        "organizations_url": "https://api.github.com/users/TheCharlatan/orgs",
        "repos_url": "https://api.github.com/users/TheCharlatan/repos",
        "events_url": "https://api.github.com/users/TheCharlatan/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheCharlatan/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "milestoned",
      "id": 13892309476,
      "node_id": "MIE_lADOABII586S_yBpzwAAAAM8C9Hk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13892309476",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-15T06:31:06Z",
      "milestone": {
        "title": "28.0"
      }
    },
    {
      "event": "reviewed",
      "id": 2240218277,
      "node_id": "PRR_kwDOABII586FhwSl",
      "url": null,
      "actor": null,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-15T11:48:20Z",
      "author_association": "MEMBER",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#pullrequestreview-2240218277",
      "submitted_at": "2024-08-15T11:48:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
    },
    {
      "event": "reviewed",
      "id": 2240361497,
      "node_id": "PRR_kwDOABII586FiTQZ",
      "url": null,
      "actor": null,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2024-08-15T13:10:28Z",
      "author_association": "MEMBER",
      "body": "Tested ACK faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc\r\n",
      "user": {
        "login": "ismaelsadeeq",
        "id": 48946461,
        "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ismaelsadeeq",
        "html_url": "https://github.com/ismaelsadeeq",
        "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
        "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
        "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
        "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
        "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#pullrequestreview-2240361497",
      "submitted_at": "2024-08-15T13:10:28Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
    },
    {
      "event": "commented",
      "id": 2293114610,
      "node_id": "IC_kwDOABII586Iriby",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2293114610",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T08:56:29Z",
      "updated_at": "2024-08-16T08:56:29Z",
      "author_association": "MEMBER",
      "body": "ACK faa1b9b0e6d",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#issuecomment-2293114610",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/30657"
    },
    {
      "event": "merged",
      "id": 13912288183,
      "node_id": "ME_lADOABII586S_yBpzwAAAAM9PKu3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13912288183",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6474132d1b6a02e248ed6603b5a89ec038c35f7d",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6474132d1b6a02e248ed6603b5a89ec038c35f7d",
      "created_at": "2024-08-16T15:26:08Z"
    },
    {
      "event": "closed",
      "id": 13912288208,
      "node_id": "CE_lADOABII586S_yBpzwAAAAM9PKvQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13912288208",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-16T15:26:08Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 13945167032,
      "node_id": "HRDE_lADOABII586S_yBpzwAAAAM_Mly4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/13945167032",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-08-20T13:28:51Z"
    },
    {
      "event": "referenced",
      "id": 14017362060,
      "node_id": "REFE_lADOABII586S_yBpzwAAAANDf_iM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14017362060",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d50f0ce248a32a373fb22ade33e565d234ddc335",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d50f0ce248a32a373fb22ade33e565d234ddc335",
      "created_at": "2024-08-26T18:30:29Z"
    },
    {
      "event": "locked",
      "id": 19699314876,
      "node_id": "LOE_lADOABII586S_yBpzwAAAASWK7C8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19699314876",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-15T11:41:50Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717654069",
      "pull_request_review_id": 2239353746,
      "id": 1717654069,
      "node_id": "PRRC_kwDOABII585mYVI1",
      "diff_hunk": "@@ -311,6 +311,13 @@ def sha256sum_file(filename):\n     return h.digest()\n \n \n+def util_xor(data, key, *, offset):",
      "path": "test/functional/test_framework/util.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "6b3676be3e5b6e407876031791172f441b359295",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nitty nit:  Since this is being moved, could update to use a more descriptive function name (e.g. `xor_bytes`).  Feel free to ignore.",
      "created_at": "2024-08-15T00:09:03Z",
      "updated_at": "2024-08-15T01:15:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1717654069",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717654069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 314,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717724161",
      "pull_request_review_id": 2239353746,
      "id": 1717724161,
      "node_id": "PRRC_kwDOABII585mYmQB",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)\n+\n+        self.log.info(\"Delete XOR key, restart node with '-blocksxor=0', check blk*.dat/rev*.dat file integrity\")\n+        os.remove(node.blocks_path / 'xor.dat')\n+        self.start_node(0, extra_args=['-blocksxor=0'])\n+        # checklevel=2 -> verify block validity + undo data\n+        # nblocks=0    -> verify all blocks\n+        node.verifychain(checklevel=2, nblocks=0)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 61,
      "original_position": 61,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": null,
      "user": {
        "login": "tdb3",
        "id": 106488469,
        "node_id": "U_kgDOBljilQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/106488469?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tdb3",
        "html_url": "https://github.com/tdb3",
        "followers_url": "https://api.github.com/users/tdb3/followers",
        "following_url": "https://api.github.com/users/tdb3/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/tdb3/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/tdb3/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/tdb3/subscriptions",
        "organizations_url": "https://api.github.com/users/tdb3/orgs",
        "repos_url": "https://api.github.com/users/tdb3/repos",
        "events_url": "https://api.github.com/users/tdb3/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/tdb3/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The help for `-blocksxor` mentions `The created XOR-key will be zeros for an existing blocksdir or when `-blocksxor=0` is set`.\r\n\r\nAfter the `verifychain`, could test that a new `xor.dat` is created (consisting of all zeros) when the node is started with no `xor.dat` and with `-blocksxor=0`.  Something like:\r\n```python\r\nassert read_xor_key(node=node) == bytes(8)\r\n```\r\nor maybe lift `NUM_XOR_BYTES` out of `read_xor_key` to enable\r\n```python\r\nassert read_xor_key(node=node) == bytes(NUM_XOR_BYTES)\r\n```\r\nor even add a constant in `util.py`\r\n```python\r\nNULL_BLK_XOR_KEY = bytes(NUM_XOR_BYTES) # all-0 xor key\r\n```\r\nto enable\r\n```python\r\nassert read_xor_key(node=node) == NULL_BLK_XOR_KEY\r\n```\r\n",
      "created_at": "2024-08-15T01:14:10Z",
      "updated_at": "2024-08-15T01:15:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1717724161",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717724161"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 58,
      "original_start_line": 58,
      "start_side": "RIGHT",
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717985952",
      "pull_request_review_id": 2239750096,
      "id": 1717985952,
      "node_id": "PRRC_kwDOABII585mZmKg",
      "diff_hunk": "@@ -508,6 +515,12 @@ def check_node_connections(*, node, num_in, num_out):\n     assert_equal(info[\"connections_out\"], num_out)\n \n \n+def read_xor_key(*, node):",
      "path": "test/functional/test_framework/util.py",
      "position": 18,
      "original_position": 18,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: Any reason to make this a global function and pass a node to it? Seems clearer to just make it a member function on the node, like `blocks_path()`, no?",
      "created_at": "2024-08-15T05:49:13Z",
      "updated_at": "2024-08-15T05:53:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1717985952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1717985952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 518,
      "original_line": 518,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718299849",
      "pull_request_review_id": 2240218277,
      "id": 1718299849,
      "node_id": "PRRC_kwDOABII585mayzJ",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This fails for me locally, because somehow I have 0000000000000000 as my xor key... but it fails consistently. Unsure if that's supposed to be possible?",
      "created_at": "2024-08-15T11:48:19Z",
      "updated_at": "2024-08-15T11:48:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1718299849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718299849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718344848",
      "pull_request_review_id": 2240289512,
      "id": 1718344848,
      "node_id": "PRRC_kwDOABII585ma9yQ",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe a leftover previous `bitcoind` was used? Can you try `make clean`, just to double check? Otherwise, the combined log could be useful.",
      "created_at": "2024-08-15T12:38:05Z",
      "updated_at": "2024-08-15T12:38:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1718344848",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718344848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718700679",
      "pull_request_review_id": 2240859096,
      "id": 1718700679,
      "node_id": "PRRC_kwDOABII585mcUqH",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I added a `if (opts.use_xor) assert(xor_key != decltype(xor_key){});` which hit, so not an old bitcoind. Attaching combined log.\r\n```\r\n node0 2024-08-15T16:40:41.093882Z [init] [node/blockstorage.cpp:1184] [InitBlocksdirXorKey] Using obfuscation key for blocksdir *.dat files (/tmp/bitcoin_func_test__c38k83u/node0/regtest/blocks): '0000000000000000' \r\n```\r\n[logs_30657.txt](https://github.com/user-attachments/files/16627687/logs_30657.txt)",
      "created_at": "2024-08-15T16:53:39Z",
      "updated_at": "2024-08-15T16:53:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1718700679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718700679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718716512",
      "pull_request_review_id": 2240882489,
      "id": 1718716512,
      "node_id": "PRRC_kwDOABII585mcYhg",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I added a `if (opts.use_xor) assert(xor_key != decltype(xor_key){});` which hit, so not an old bitcoind. Attaching combined log.\r\n\r\nCan you also print/log/debug the result of `fs::is_empty(opts.blocks_dir)` and `fs::exists(xor_key_path)`?",
      "created_at": "2024-08-15T17:02:08Z",
      "updated_at": "2024-08-15T17:02:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1718716512",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718716512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718748117",
      "pull_request_review_id": 2240942116,
      "id": 1718748117,
      "node_id": "PRRC_kwDOABII585mcgPV",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "[logs_30657_2.txt](https://github.com/user-attachments/files/16627939/logs_30657_2.txt)\r\n\r\nAh interesting, `fs::is_empty(opts.blocks_dir)` is 0\r\n\r\n^so clearly this isn't a problem with the test",
      "created_at": "2024-08-15T17:22:34Z",
      "updated_at": "2024-08-16T09:02:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1718748117",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718748117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718764031",
      "pull_request_review_id": 2240967409,
      "id": 1718764031,
      "node_id": "PRRC_kwDOABII585mckH_",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Fascinating. What is your compiler, stdlib version, OS and filesystem for `/tmp/` and `./`?\r\n\r\nDoes the issue happen when you create a non-`/tmp/` folder? (I presume `/tmp/` is a ramdisk?)\r\n\r\n```\r\nmkdir no_ramdisk_temp_prefix\r\n./test/functional/test_runner.py --tmpdirprefix ./no_ramdisk_temp_prefix/ feature_blocksxor",
      "created_at": "2024-08-15T17:32:04Z",
      "updated_at": "2024-08-15T17:32:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1718764031",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718764031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718767576",
      "pull_request_review_id": 2240972942,
      "id": 1718767576,
      "node_id": "PRRC_kwDOABII585mck_Y",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Also, what is `ls --all /tmp/bitcoin_func_test_fj812gkv/node0/regtest/blocks`",
      "created_at": "2024-08-15T17:35:39Z",
      "updated_at": "2024-08-15T17:35:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1718767576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718767576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718769752",
      "pull_request_review_id": 2240976702,
      "id": 1718769752,
      "node_id": "PRRC_kwDOABII585mclhY",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is it Apple https://en.wikipedia.org/wiki/.DS_Store ?",
      "created_at": "2024-08-15T17:37:59Z",
      "updated_at": "2024-08-15T17:38:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1718769752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718769752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718786049",
      "pull_request_review_id": 2241002213,
      "id": 1718786049,
      "node_id": "PRRC_kwDOABII585mcpgB",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It's jammy with clang 17, indeed it works with a non-`/tmp` folder. Nothing out of place in `ls`. Hmmm",
      "created_at": "2024-08-15T17:52:52Z",
      "updated_at": "2024-08-15T17:57:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1718786049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718786049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718816229",
      "pull_request_review_id": 2241051996,
      "id": 1718816229,
      "node_id": "PRRC_kwDOABII585mcw3l",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Jammy doesn't have clang 17, so I guess it is installed from the nightly llvm apt and then `CC=clang-17 CXX=clang++-17 ../configure` (using the libstdc++-11, not libc++-17)?\r\n\r\nNext steps to test would be:\r\n\r\n* `df --human-readable /tmp/` (to confirm the filesystem type)\r\n* Try with `CC=gcc CXX=g++ ./configure` (using the libstdc++-11)\r\n* Try with `CC=clang-17 CXX='clang++-17 -stdlib=libc++-17' ./configure` (using libc++-17)\r\n* Try turning it off and on again (To kill any processes that may make `/tmp/` dirty)?",
      "created_at": "2024-08-15T18:21:31Z",
      "updated_at": "2024-08-15T18:49:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1718816229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1718816229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719562102",
      "pull_request_review_id": 2242260412,
      "id": 1719562102,
      "node_id": "PRRC_kwDOABII585mfm92",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```\r\nFilesystem      Size  Used Avail Use% Mounted on\r\n/dev/nvme0n1p2  468G  110G  335G  25% /\r\n```\r\nIt worked with gcc. `./configure` didn't like libc++-17. After reboot I can't get it to fail anymore (also I don't mean to hold up this PR)",
      "created_at": "2024-08-16T08:55:20Z",
      "updated_at": "2024-08-16T08:55:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1719562102",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719562102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719575839",
      "pull_request_review_id": 2242283027,
      "id": 1719575839,
      "node_id": "PRRC_kwDOABII585mfqUf",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> After reboot I can't get it to fail anymore (also I don't mean to hold up this PR)\r\n\r\nThanks for checking. This is really helpful to make sure that the feature isn't shipped to users with bugs included.\r\n\r\nMy random guess would be that there was a process running on your machine which accidentally or intentionally put files into all folders in `/tmp/`. However, based on your check with `ls --all` on the temp folder, which didn't reveal any hidden files, this may be something else, or a race (as the files were deleted again by the same process or a different one).\r\n\r\nIt would be useful, if an Apple person tried to break this feature with https://en.wikipedia.org/wiki/.DS_Store. The process would be:\r\n\r\n* Start the test, but pause Bitcoin Core once the blocksdir is created (empty)\r\n* Run Apple Finder on the blocksdir to check if a file will be created\r\n* Continue the test and see it fail (if a file was created), or pass (otherwise)",
      "created_at": "2024-08-16T09:08:24Z",
      "updated_at": "2024-08-16T09:08:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1719575839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719575839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719919217",
      "pull_request_review_id": 2242843362,
      "id": 1719919217,
      "node_id": "PRRC_kwDOABII585mg-Jx",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tried this on my apple machine and am able to make this test fail if I add a sleep right before the line checking `fs::is_empty`. No sign of DS_Store. It kind of seems more like blk0000.dat, rev0000.dat, and index/ are showing up early... I don't think I know init well enough to know exactly what order everything should happen in.\r\n\r\nedit: ah, maybe I am not looking hard enough\r\n> Starting at [macOS 10.12](https://en.wikipedia.org/wiki/MacOS_10.12) 16A238m, Finder will not display .DS_Store files (even with com.apple.finder AppleShowAllFiles YES set).",
      "created_at": "2024-08-16T14:26:19Z",
      "updated_at": "2024-08-16T14:29:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1719919217",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719919217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719948326",
      "pull_request_review_id": 2242893910,
      "id": 1719948326,
      "node_id": "PRRC_kwDOABII585mhFQm",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Thanks for checking!\r\n\r\nI honestly don't known if this should be considered a bug in Bitcoin Core. If so, are we going to enumerate all external programs that write to the blocksdir without permission and add workarounds for them?\r\n\r\nTo me it seems like this is something that Apple should fix, or Apple users (by not using Apple, or by adjusting the Finder settings to leave Bitcoin Core alone).\r\n\r\n",
      "created_at": "2024-08-16T14:45:31Z",
      "updated_at": "2024-08-16T14:47:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1719948326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719948326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719955094",
      "pull_request_review_id": 2242905824,
      "id": 1719955094,
      "node_id": "PRRC_kwDOABII585mhG6W",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I guess `fs::is_empty(opts.blocks_dir)` could be replaced by `not fs::exists(\"blk0000.dat\")`?",
      "created_at": "2024-08-16T14:50:41Z",
      "updated_at": "2024-08-16T14:50:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1719955094",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719955094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719992797",
      "pull_request_review_id": 2242966872,
      "id": 1719992797,
      "node_id": "PRRC_kwDOABII585mhQHd",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "fwiw the sleepy version doesn't seem to use 0 as xor key when I start a node (tried a few times with mainnet, regtest) normally. I also never have problems when I use a non-tmp folder. So maybe your guess about temp directory paranormal activity is correct.\r\n\r\nGoing to merge this test since there's not a problem with it.",
      "created_at": "2024-08-16T15:23:40Z",
      "updated_at": "2024-08-27T08:58:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1719992797",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1719992797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723358327",
      "pull_request_review_id": 2248076747,
      "id": 1723358327,
      "node_id": "PRRC_kwDOABII585muFx3",
      "diff_hunk": "@@ -508,6 +515,12 @@ def check_node_connections(*, node, num_in, num_out):\n     assert_equal(info[\"connections_out\"], num_out)\n \n \n+def read_xor_key(*, node):",
      "path": "test/functional/test_framework/util.py",
      "position": 18,
      "original_position": 18,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1717985952,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> nit: Any reason to make this a global function and pass a node to it? Seems clearer to just make it a member function on the node, like `blocks_path()`, no?\r\n\r\nNo strong reason. Personally I first look into util.py for helpers and tend to forget that there are also some implemented as `TestNode` methods, but I agree that the latter makes sense. Could be picked up in a follow-up, e.g. #30669.\r\n",
      "created_at": "2024-08-20T13:52:55Z",
      "updated_at": "2024-08-20T13:52:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1723358327",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1723358327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 518,
      "original_line": 518,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749192762",
      "pull_request_review_id": 2288511971,
      "id": 1749192762,
      "node_id": "PRRC_kwDOABII585oQpA6",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Found this here because I saw #30833 and it got me to look into `blocksxor` for the first time. I see the same failures @glozow describes (also on macos) and I can confirm the findings here about the use of the temp folders because it does not happen when the test uses a clean chain, e.g. using a clean chain like this made the test robust for me: https://github.com/fjahr/bitcoin/commit/ef00b8eab48cf7ebcc8a0539f237175b8f5a0373  I didn't find anything new beyond that so far but I thought it should be noted that it's not on @glozow 's machine alone.",
      "created_at": "2024-09-08T11:18:50Z",
      "updated_at": "2024-09-08T11:18:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1749192762",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749192762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749642423",
      "pull_request_review_id": 2288932570,
      "id": 1749642423,
      "node_id": "PRRC_kwDOABII585oSWy3",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> made the test robust for me: [fjahr@ef00b8e](https://github.com/fjahr/bitcoin/commit/ef00b8eab48cf7ebcc8a0539f237175b8f5a0373)\r\n\r\nThanks for checking. Using a clean chain means that the cache won't be used, which normally lives on the storage unit where the build dir lives, so only the temp dir should be used. However, given the prior result that a non-tmp folder was generally fine, I would have expected the opposite result (Test would be less fragile by using the persisted cache on a non-tmp dir). However, I don't have a macOS to test this, so I don't know for sure what is going on. Also, if this \"fixes\" the test, it will just silence the symptoms, but it may be better to fix the underlying issue itself. The suggested replacement in https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1719955094 may be a good try.",
      "created_at": "2024-09-09T06:34:01Z",
      "updated_at": "2024-09-09T06:34:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1749642423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1749642423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760114937",
      "pull_request_review_id": 2305413821,
      "id": 1760114937,
      "node_id": "PRRC_kwDOABII585o6Tj5",
      "diff_hunk": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2024 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test support for XORed block data and undo files (`-blocksxor` option).\"\"\"\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_node import ErrorMatch\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    read_xor_key,\n+    util_xor,\n+)\n+from test_framework.wallet import MiniWallet\n+\n+\n+class BlocksXORTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-blocksxor=1',\n+            '-fastprune=1',             # use smaller block files\n+            '-datacarriersize=100000',  # needed to pad transaction with MiniWallet\n+        ]]\n+\n+    def run_test(self):\n+        self.log.info(\"Mine some blocks, to create multiple blk*.dat/rev*.dat files\")\n+        node = self.nodes[0]\n+        wallet = MiniWallet(node)\n+        for _ in range(5):\n+            wallet.send_self_transfer(from_node=node, target_weight=80000)\n+            self.generate(wallet, 1)\n+\n+        block_files = list(node.blocks_path.glob('blk[0-9][0-9][0-9][0-9][0-9].dat'))\n+        undo_files  = list(node.blocks_path.glob('rev[0-9][0-9][0-9][0-9][0-9].dat'))\n+        assert_equal(len(block_files), len(undo_files))\n+        assert_greater_than(len(block_files), 1)  # we want at least one full block file\n+\n+        self.log.info(\"Shut down node and un-XOR block/undo files manually\")\n+        self.stop_node(0)\n+        xor_key = read_xor_key(node=node)\n+        for data_file in sorted(block_files + undo_files):\n+            self.log.debug(f\"Rewriting file {data_file}...\")\n+            with open(data_file, 'rb+') as f:\n+                xored_data = f.read()\n+                f.seek(0)\n+                f.write(util_xor(xored_data, xor_key, offset=0))\n+\n+        self.log.info(\"Check that restarting with 'blocksxor=0' fails if XOR key is present\")\n+        node.assert_start_raises_init_error(['-blocksxor=0'],\n+            'The blocksdir XOR-key can not be disabled when a random key was already stored!',\n+            match=ErrorMatch.PARTIAL_REGEX)",
      "path": "test/functional/feature_blocksxor.py",
      "position": 54,
      "original_position": 54,
      "commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "original_commit_id": "faa1b9b0e6de7d213699fbdbc2e25a2a81c35cdc",
      "in_reply_to_id": 1718299849,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I guess fs::is_empty(opts.blocks_dir) could be replaced by not fs::exists(\"blk0000.dat\")?\r\n\r\nI think that alone wouldn't work if the user upgrades a pruned node to v28?\r\n\r\nAnyway, I was going to revisit this today but I simply don't see the failures anymore currently 🤷‍♂️  I will get back to it if I see them occur again.",
      "created_at": "2024-09-15T16:20:43Z",
      "updated_at": "2024-09-15T16:20:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/30657#discussion_r1760114937",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1760114937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/30657"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    }
  ]
}