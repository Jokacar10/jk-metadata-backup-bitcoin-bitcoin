{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022",
    "id": 2104295782,
    "node_id": "PR_kwDOABII5859bQFm",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/31022",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/31022.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/31022.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31022",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31022/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
    "number": 31022,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "test: Add mockable steady clock, tests for PCP and NATPMP implementations",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Add a NodeSteadyClock, a steady_clock that can be mocked with millisecond precision. Use this in the PCP implementation.\r\n\r\nThen add a mock for a simple scriptable UDP server,, which is used to test various code paths (including successful mappings, timeouts and errors) in the PCP and NATPMP implementations.\r\n\r\nIncludes \"net: Add optional length checking to CService::SetSockAddr\" from #31014 as a prerequisite.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "created_at": "2024-10-02T20:52:40Z",
    "updated_at": "2025-01-16T14:59:02Z",
    "mergeable": true,
    "mergeable_state": "blocked",
    "merge_commit_sha": "6baae8185752169f6dd97c1256b4e6d52f2561ed",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "laanwj:2024-10-pcp-tests",
      "ref": "2024-10-pcp-tests",
      "sha": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1750308,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNzUwMzA4",
        "name": "bitcoin",
        "full_name": "laanwj/bitcoin",
        "owner": {
          "login": "laanwj",
          "id": 126646,
          "node_id": "MDQ6VXNlcjEyNjY0Ng==",
          "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/laanwj",
          "html_url": "https://github.com/laanwj",
          "followers_url": "https://api.github.com/users/laanwj/followers",
          "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
          "organizations_url": "https://api.github.com/users/laanwj/orgs",
          "repos_url": "https://api.github.com/users/laanwj/repos",
          "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/laanwj/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/laanwj/bitcoin",
        "description": "Laanwj's Bitcoin Core fork - see README.md on \"readme\" branch",
        "fork": true,
        "url": "https://api.github.com/repos/laanwj/bitcoin",
        "archive_url": "https://api.github.com/repos/laanwj/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/laanwj/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/laanwj/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/laanwj/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/laanwj/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/laanwj/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/laanwj/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/laanwj/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/laanwj/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/laanwj/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/laanwj/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/laanwj/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/laanwj/bitcoin/events",
        "forks_url": "https://api.github.com/repos/laanwj/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/laanwj/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/laanwj/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/laanwj/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/laanwj/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/laanwj/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/laanwj/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/laanwj/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/laanwj/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/laanwj/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/laanwj/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/laanwj/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/laanwj/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/laanwj/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/laanwj/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/laanwj/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:laanwj/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/laanwj/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/laanwj/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/laanwj/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/laanwj/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/laanwj/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/laanwj/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/laanwj/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/laanwj/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/laanwj/bitcoin/hooks",
        "svn_url": "https://github.com/laanwj/bitcoin",
        "homepage": "",
        "forks_count": 14,
        "stargazers_count": 44,
        "watchers_count": 44,
        "size": 245713,
        "default_branch": "readme",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-16T14:58:48Z",
        "created_at": "2011-05-15T07:09:54Z",
        "updated_at": "2024-10-04T16:35:48Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "335798c496371b7e12a7e159312a4377a858cfc3",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 36543,
        "stargazers_count": 81409,
        "watchers_count": 81409,
        "size": 274296,
        "default_branch": "master",
        "open_issues_count": 702,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-01-16T13:42:36Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2025-01-16T14:48:45Z",
        "allow_forking": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 767,
    "deletions": 15,
    "changed_files": 9,
    "commits": 5,
    "review_comments": 32,
    "comments": 7
  },
  "events": [
    {
      "event": "labeled",
      "id": 14495201987,
      "node_id": "LE_lADOABII586Yvn5VzwAAAANf-zrD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14495201987",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T20:52:40Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 14495201996,
      "node_id": "LE_lADOABII586Yvn5VzwAAAANf-zrM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14495201996",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T20:52:40Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 2389676933,
      "node_id": "IC_kwDOABII586Ob5OF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2389676933",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T20:52:43Z",
      "updated_at": "2025-01-16T14:25:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--006a51241073e994b41acfe9ec718e94-->\n### Code Coverage & Benchmarks\nFor details see: https://corecheck.dev/bitcoin/bitcoin/pulls/31022.\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [dergoegge](https://github.com/bitcoin/bitcoin/pull/31022#pullrequestreview-2345125043) |\n| Stale ACK | [sipa](https://github.com/bitcoin/bitcoin/pull/31022#pullrequestreview-2520898727), [darosior](https://github.com/bitcoin/bitcoin/pull/31022#issuecomment-2588243197) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#31549](https://github.com/bitcoin/bitcoin/pull/31549) (fuzz: Abort if system time is called without mock time being set by marcofleon)\n* [#31014](https://github.com/bitcoin/bitcoin/pull/31014) (net: Use GetAdaptersAddresses to get local addresses on Windows by laanwj)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#issuecomment-2389676933",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31022"
    },
    {
      "event": "renamed",
      "id": 14495203310,
      "node_id": "RTE_lADOABII586Yvn5VzwAAAANf-z_u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14495203310",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T20:52:45Z",
      "rename": {
        "from": "test: Add mockable steady clock, tests for PCP and NATPMP implementations ",
        "to": "test: Add mockable steady clock, tests for PCP and NATPMP implementations"
      }
    },
    {
      "event": "labeled",
      "id": 14496450056,
      "node_id": "LE_lADOABII586Yvn5VzwAAAANgDkYI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14496450056",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-02T23:11:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14499558275,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAANgPbOD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14499558275",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "957348d2cebc6bd59bdca0a3d34a5ba12257e733",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/957348d2cebc6bd59bdca0a3d34a5ba12257e733",
      "created_at": "2024-10-03T06:55:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14499739271,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAANgQHaH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14499739271",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a2420fa9f51a0ebfade1b8759a2a2820d7a8781c",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/a2420fa9f51a0ebfade1b8759a2a2820d7a8781c",
      "created_at": "2024-10-03T07:12:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14499949899,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAANgQ61L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14499949899",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "41d276d4beca08f9cddbe2ccdb6707b711987bf9",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/41d276d4beca08f9cddbe2ccdb6707b711987bf9",
      "created_at": "2024-10-03T07:30:26Z"
    },
    {
      "event": "labeled",
      "id": 14499958776,
      "node_id": "LE_lADOABII586Yvn5VzwAAAANgQ8_4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14499958776",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T07:31:11Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14500105131,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAANgRgur",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14500105131",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "85a41cb90e2f7d4c90297b7198e7d08fd285354d",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/85a41cb90e2f7d4c90297b7198e7d08fd285354d",
      "created_at": "2024-10-03T07:43:34Z"
    },
    {
      "event": "comment_deleted",
      "id": 14500128342,
      "node_id": "CDE_lADOABII586Yvn5VzwAAAANgRmZW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14500128342",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T07:45:33Z"
    },
    {
      "event": "unlabeled",
      "id": 14500129692,
      "node_id": "UNLE_lADOABII586Yvn5VzwAAAANgRmuc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14500129692",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T07:45:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "unlabeled",
      "id": 14500998501,
      "node_id": "UNLE_lADOABII586Yvn5VzwAAAANgU61l",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14500998501",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T08:54:59Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "comment_deleted",
      "id": 14501518975,
      "node_id": "CDE_lADOABII586Yvn5VzwAAAANgW55_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14501518975",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-03T09:34:08Z"
    },
    {
      "event": "reviewed",
      "id": 2345125043,
      "node_id": "PRR_kwDOABII586Lx8Sz",
      "url": null,
      "actor": null,
      "commit_id": "85a41cb90e2f7d4c90297b7198e7d08fd285354d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nLeft some comments on the approach for the steady mock time.",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#pullrequestreview-2345125043",
      "submitted_at": "2024-10-03T09:55:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14517760848,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAANhU3NQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14517760848",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5016a0707000d56be57683507bc77661bdbf8037",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/5016a0707000d56be57683507bc77661bdbf8037",
      "created_at": "2024-10-04T11:27:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14769674464,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAANwV1jg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14769674464",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "258b2856cdc6e2c054ea573cf57de7021aebc3c5",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/258b2856cdc6e2c054ea573cf57de7021aebc3c5",
      "created_at": "2024-10-21T18:41:48Z"
    },
    {
      "event": "commented",
      "id": 2464948588,
      "node_id": "IC_kwDOABII586S7CFs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2464948588",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-08T14:49:51Z",
      "updated_at": "2024-11-08T14:49:51Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#issuecomment-2464948588",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31022"
    },
    {
      "event": "reviewed",
      "id": 2520898727,
      "node_id": "PRR_kwDOABII586WQdyn",
      "url": null,
      "actor": null,
      "commit_id": "258b2856cdc6e2c054ea573cf57de7021aebc3c5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Neat, utACK 258b2856cdc6e2c054ea573cf57de7021aebc3c5. I did not verify the test scenario byte sequences against the spec. Just a few nits.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#pullrequestreview-2520898727",
      "submitted_at": "2024-12-23T16:53:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
    },
    {
      "event": "review_requested",
      "id": 15750110412,
      "node_id": "RRE_lADOABII586Yvn5VzwAAAAOqx5zM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15750110412",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-23T16:53:47Z",
      "requested_reviewer": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "review_requested",
      "id": 15750110523,
      "node_id": "RRE_lADOABII586Yvn5VzwAAAAOqx507",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15750110523",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-23T16:53:48Z",
      "requested_reviewer": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "labeled",
      "id": 15883460504,
      "node_id": "LE_lADOABII586Yvn5VzwAAAAOyul-Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15883460504",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-10T15:12:11Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15903193958,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAAOz53tm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15903193958",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f10c3223f7261436fc4e41a9bee3f9275404ad83",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/f10c3223f7261436fc4e41a9bee3f9275404ad83",
      "created_at": "2025-01-13T11:05:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15903351807,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAAOz6eP_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15903351807",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e4cc03c189c29d3862be1c576102a5c54a55caf9",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/e4cc03c189c29d3862be1c576102a5c54a55caf9",
      "created_at": "2025-01-13T11:18:23Z"
    },
    {
      "event": "commented",
      "id": 2586835482,
      "node_id": "IC_kwDOABII586aL_oa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2586835482",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-13T11:19:37Z",
      "updated_at": "2025-01-13T11:19:37Z",
      "author_association": "MEMBER",
      "body": "Rebased for merge conflict, and updated for @sipa's comment (thanks) to add a constant for the initial mocked clock value.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#issuecomment-2586835482",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31022"
    },
    {
      "event": "mentioned",
      "id": 15903365900,
      "node_id": "MEE_lADOABII586Yvn5VzwAAAAOz6hsM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15903365900",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-13T11:19:38Z"
    },
    {
      "event": "subscribed",
      "id": 15903365914,
      "node_id": "SE_lADOABII586Yvn5VzwAAAAOz6hsa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15903365914",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-13T11:19:38Z"
    },
    {
      "event": "reviewed",
      "id": 2546343939,
      "node_id": "PRR_kwDOABII586XxiAD",
      "url": null,
      "actor": null,
      "commit_id": "e4cc03c189c29d3862be1c576102a5c54a55caf9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#pullrequestreview-2546343939",
      "submitted_at": "2025-01-13T11:19:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15903494525,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAAOz7BF9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15903494525",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a50e1b5af747134b3e102ef7867ee262ba410700",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/a50e1b5af747134b3e102ef7867ee262ba410700",
      "created_at": "2025-01-13T11:30:49Z"
    },
    {
      "event": "unlabeled",
      "id": 15903988518,
      "node_id": "UNLE_lADOABII586Yvn5VzwAAAAOz85sm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15903988518",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-13T12:12:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 2529393336,
      "node_id": "PRR_kwDOABII586Ww3q4",
      "url": null,
      "actor": null,
      "commit_id": "a50e1b5af747134b3e102ef7867ee262ba410700",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK a50e1b5af747134b3e102ef7867ee262ba410700\r\n\r\n`PROTOCOL_ERROR` is the only variant of `MappingError` which is not covered by the unit test. If you feel that's worth including it i wrote https://github.com/darosior/bitcoin/commit/be7482c2f6f754cfa4c205cff66ba9c689d426f5 to cover the 3 code paths in which it occurs.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#pullrequestreview-2529393336",
      "submitted_at": "2025-01-13T19:35:00Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
    },
    {
      "event": "review_requested",
      "id": 15911486930,
      "node_id": "RRE_lADOABII586Yvn5VzwAAAAO0ZgXS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15911486930",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-13T19:35:04Z",
      "requested_reviewer": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "commented",
      "id": 2588142467,
      "node_id": "IC_kwDOABII586aQ-uD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2588142467",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-13T20:35:51Z",
      "updated_at": "2025-01-13T20:35:51Z",
      "author_association": "MEMBER",
      "body": "> PROTOCOL_ERROR is the only variant of MappingError which is not covered by the unit test. If you feel that's worth including it i wrote https://github.com/darosior/bitcoin/commit/be7482c2f6f754cfa4c205cff66ba9c689d426f5 to cover the 3 code paths in which it occurs.\r\n\r\nThank you! Will pull that in.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#issuecomment-2588142467",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31022"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15912651339,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAAO0d8pL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15912651339",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a5c8da94a067d59e0edfb5800871b380c9db605c",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/a5c8da94a067d59e0edfb5800871b380c9db605c",
      "created_at": "2025-01-13T20:50:06Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFiMWQzZWNlMDI2ODQ0ZTY4MjY3NjY3M2I4YTQ2MTk2NGE1YjNjZTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab1d3ece026844e682676673b8a461964a5b3ce4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ab1d3ece026844e682676673b8a461964a5b3ce4",
      "tree": {
        "sha": "b37d25b8251b9e705965299edc464d292662659f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b37d25b8251b9e705965299edc464d292662659f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35bf426e02210c1bbb04926f4ca2e0285fbfcd11",
          "sha": "35bf426e02210c1bbb04926f4ca2e0285fbfcd11",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/35bf426e02210c1bbb04926f4ca2e0285fbfcd11"
        }
      ],
      "message": "net: Add optional length checking to CService::SetSockAddr\n\nIn almost all cases (the only exception is `getifaddrs`), we know the\nsize of the data passed into SetSockAddr, so we can check this to be\nwhat is expected.",
      "committer": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2025-01-13T20:53:56Z"
      },
      "author": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2024-10-01T14:28:28Z"
      },
      "sha": "ab1d3ece026844e682676673b8a461964a5b3ce4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDAzNjQ4MzIxZWNiNzA0YjY5ZTQ3ZWVkN2UzZGY2YTc3OWFlZThmMTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03648321ecb704b69e47eed7e3df6a779aee8f11",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/03648321ecb704b69e47eed7e3df6a779aee8f11",
      "tree": {
        "sha": "3b899298469bd58a44b856a6c405fc0244510143",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b899298469bd58a44b856a6c405fc0244510143"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab1d3ece026844e682676673b8a461964a5b3ce4",
          "sha": "ab1d3ece026844e682676673b8a461964a5b3ce4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ab1d3ece026844e682676673b8a461964a5b3ce4"
        }
      ],
      "message": "util: Add mockable steady_clock\n\nThis adds a NodeSteadyClock, which is a steady_clock that can be mocked\nwith millisecond precision.",
      "committer": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2025-01-13T20:53:56Z"
      },
      "author": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2024-10-02T20:24:58Z"
      },
      "sha": "03648321ecb704b69e47eed7e3df6a779aee8f11"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNhZjk1MjEwMzMxN2E3ZmE4YmQyYmNlYjM1ZDRlOGFjZTU5Njg5MDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caf952103317a7fa8bd2bceb35d4e8ace5968906",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/caf952103317a7fa8bd2bceb35d4e8ace5968906",
      "tree": {
        "sha": "3663b85bf40f2046886a31dc9c1f3d3e22473ac8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3663b85bf40f2046886a31dc9c1f3d3e22473ac8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03648321ecb704b69e47eed7e3df6a779aee8f11",
          "sha": "03648321ecb704b69e47eed7e3df6a779aee8f11",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/03648321ecb704b69e47eed7e3df6a779aee8f11"
        }
      ],
      "message": "net: Use mockable steady clock in PCP implementation\n\nThis will be needed for the test harness.",
      "committer": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2025-01-13T20:53:56Z"
      },
      "author": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2024-10-02T20:26:21Z"
      },
      "sha": "caf952103317a7fa8bd2bceb35d4e8ace5968906"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15912701550,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAAO0eI5u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15912701550",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "created_at": "2025-01-13T20:54:16Z"
    },
    {
      "event": "commented",
      "id": 2588243197,
      "node_id": "IC_kwDOABII586aRXT9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2588243197",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-13T21:22:21Z",
      "updated_at": "2025-01-13T21:22:21Z",
      "author_association": "MEMBER",
      "body": "re-ACK 9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#issuecomment-2588243197",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31022"
    },
    {
      "event": "reviewed",
      "id": 2553493851,
      "node_id": "PRR_kwDOABII586YMzlb",
      "url": null,
      "actor": null,
      "commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some more nits i noticed when reusing some of this code for the fuzz target. I don't think they warrant retouching, but figured i'd post them anyways.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#pullrequestreview-2553493851",
      "submitted_at": "2025-01-15T21:30:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15962637328,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAAO3coQQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15962637328",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2b4e54d4b31e78aafc71b8b908a38798085e6fb4",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/2b4e54d4b31e78aafc71b8b908a38798085e6fb4",
      "created_at": "2025-01-16T14:25:44Z"
    },
    {
      "event": "commented",
      "id": 2595871882,
      "node_id": "IC_kwDOABII586audyK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2595871882",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T14:26:18Z",
      "updated_at": "2025-01-16T14:26:18Z",
      "author_association": "MEMBER",
      "body": "Updated for @darosior's suggestions.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#issuecomment-2595871882",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31022"
    },
    {
      "event": "mentioned",
      "id": 15962659452,
      "node_id": "MEE_lADOABII586Yvn5VzwAAAAO3ctp8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15962659452",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T14:27:13Z"
    },
    {
      "event": "subscribed",
      "id": 15962659477,
      "node_id": "SE_lADOABII586Yvn5VzwAAAAO3ctqV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15962659477",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T14:27:13Z"
    },
    {
      "event": "reviewed",
      "id": 2556410459,
      "node_id": "PRR_kwDOABII586YX7pb",
      "url": null,
      "actor": null,
      "commit_id": "2b4e54d4b31e78aafc71b8b908a38798085e6fb4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#pullrequestreview-2556410459",
      "submitted_at": "2025-01-16T14:55:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGZjNzAwYmI0N2ZkOGI2YWM1OGY2MTJiOTMyYWVmMGUzNjE2ODZjYzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc700bb47fd8b6ac58f612b932aef0e361686cc3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fc700bb47fd8b6ac58f612b932aef0e361686cc3",
      "tree": {
        "sha": "c58ccd37112cd44f83314876672c68b13d6dd3eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c58ccd37112cd44f83314876672c68b13d6dd3eb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caf952103317a7fa8bd2bceb35d4e8ace5968906",
          "sha": "caf952103317a7fa8bd2bceb35d4e8ace5968906",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/caf952103317a7fa8bd2bceb35d4e8ace5968906"
        }
      ],
      "message": "test: Add tests for PCP and NATPMP implementations\n\nAdd a mock for a simple scriptable UDP server, and use this to test\nvarious code paths (including successful mappings, timeouts and errors)\nin the PCP and NATPMP implementations.",
      "committer": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2025-01-16T14:56:02Z"
      },
      "author": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2024-10-02T20:26:54Z"
      },
      "sha": "fc700bb47fd8b6ac58f612b932aef0e361686cc3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBmNzE2ZjI4ODk2YzZlZGZjZDRlMmEyYjI1Yzg4ZjQ3OGEwMjljN2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "tree": {
        "sha": "8db884d147416ded45418a4114aed57e93c07730",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8db884d147416ded45418a4114aed57e93c07730"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc700bb47fd8b6ac58f612b932aef0e361686cc3",
          "sha": "fc700bb47fd8b6ac58f612b932aef0e361686cc3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fc700bb47fd8b6ac58f612b932aef0e361686cc3"
        }
      ],
      "message": "qa: cover PROTOCOL_ERROR variant in PCP unit tests",
      "committer": {
        "name": "laanwj",
        "email": "126646+laanwj@users.noreply.github.com",
        "date": "2025-01-16T14:56:02Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-01-13T19:30:35Z"
      },
      "sha": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 15963133216,
      "node_id": "HRFPE_lADOABII586Yvn5VzwAAAAO3ehUg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15963133216",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "commit_url": "https://api.github.com/repos/laanwj/bitcoin/commits/0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "created_at": "2025-01-16T14:58:54Z"
    },
    {
      "event": "labeled",
      "id": 15963134656,
      "node_id": "LE_lADOABII586Yvn5VzwAAAAO3ehrA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/15963134656",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T14:58:58Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 2595954316,
      "node_id": "IC_kwDOABII586aux6M",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2595954316",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-16T14:59:00Z",
      "updated_at": "2025-01-16T14:59:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "<!--85328a0da195eb286784d51f73fa0af9-->\n🚧 At least one of the CI tasks failed.\n<sub>Debug: https://github.com/bitcoin/bitcoin/runs/35719158891</sub>\n\n<details><summary>Hints</summary>\n\nTry to run the tests locally, according to the documentation. However, a CI failure may still\nhappen due to a number of reasons, for example:\n\n* Possibly due to a silent merge conflict (the changes in this pull request being\nincompatible with the current code in the target branch). If so, make sure to rebase on the latest\ncommit of the target branch.\n\n* A sanitizer issue, which can only be found by compiling with the sanitizer and running the\n  affected test.\n\n* An intermittent issue.\n\nLeave a comment here, if you need help tracking down a confusing failure.\n\n</details>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#issuecomment-2595954316",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31022"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1785930990",
      "pull_request_review_id": 2345125043,
      "id": 1785930990,
      "node_id": "PRRC_kwDOABII585qcyTu",
      "diff_hunk": "@@ -22,6 +22,15 @@ struct NodeClock : public std::chrono::system_clock {\n };\n using NodeSeconds = std::chrono::time_point<NodeClock, std::chrono::seconds>;\n \n+/** Mockable steady clock in the context of tests, otherwise the system steady clock */\n+struct NodeSteadyClock : public std::chrono::steady_clock {",
      "path": "src/util/time.h",
      "position": null,
      "original_position": 5,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "85a41cb90e2f7d4c90297b7198e7d08fd285354d",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could we turn `SteadyClock` into this struct instead? Having both types could be confusing.",
      "created_at": "2024-10-03T09:40:27Z",
      "updated_at": "2024-10-03T09:55:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1785930990",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1785930990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1785941780",
      "pull_request_review_id": 2345125043,
      "id": 1785941780,
      "node_id": "PRRC_kwDOABII585qc08U",
      "diff_hunk": "@@ -41,6 +42,22 @@ std::chrono::seconds GetMockTime()\n     return g_mock_time.load(std::memory_order_relaxed);\n }\n \n+NodeSteadyClock::time_point NodeSteadyClock::now() noexcept\n+{\n+    const auto mocktime{g_mock_steady_time.load(std::memory_order_relaxed)};\n+    const auto ret{\n+        mocktime.count() ?\n+            mocktime :\n+            std::chrono::steady_clock::now().time_since_epoch()};\n+    return time_point{ret};\n+};\n+\n+void SetMockSteadyTime(std::chrono::milliseconds mock_time_in)\n+{\n+    Assert(mock_time_in >= 0s);\n+    g_mock_steady_time.store(mock_time_in, std::memory_order_relaxed);",
      "path": "src/util/time.cpp",
      "position": 28,
      "original_position": 25,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "85a41cb90e2f7d4c90297b7198e7d08fd285354d",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My approach for this would have been to reuse `SetMockTime`, which would set `g_mock_time` to the requested mocktime and `g_mock_steady_time` to `max(mock_time_in, g_mock_steady_time)` (to ensure it only ever increases).\r\n\r\nThe benefit of that approach would be that all existing tests that make use of mock time would now also mock steady time (assuming `NodeSteadyClock` is used throughout). \r\n\r\nI never implemented and tested this but I was curious if you considered this as well?",
      "created_at": "2024-10-03T09:48:49Z",
      "updated_at": "2024-10-03T09:55:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1785941780",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1785941780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 68,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1785957916",
      "pull_request_review_id": 2345168193,
      "id": 1785957916,
      "node_id": "PRRC_kwDOABII585qc44c",
      "diff_hunk": "@@ -22,6 +22,15 @@ struct NodeClock : public std::chrono::system_clock {\n };\n using NodeSeconds = std::chrono::time_point<NodeClock, std::chrono::seconds>;\n \n+/** Mockable steady clock in the context of tests, otherwise the system steady clock */\n+struct NodeSteadyClock : public std::chrono::steady_clock {",
      "path": "src/util/time.h",
      "position": null,
      "original_position": 5,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "85a41cb90e2f7d4c90297b7198e7d08fd285354d",
      "in_reply_to_id": 1785930990,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "sure, fine with me, agree it's less confusing (`NodeSteadyClock` says nothing at all) though i wasn't sure which of the current usages should be mockable and didn't want to decide that here\r\n\r\nedit: i'll rename the structure to something clearer like `MockableSteadyClock` how about that?",
      "created_at": "2024-10-03T10:01:34Z",
      "updated_at": "2024-10-03T10:24:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1785957916",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1785957916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1785962075",
      "pull_request_review_id": 2345175237,
      "id": 1785962075,
      "node_id": "PRRC_kwDOABII585qc55b",
      "diff_hunk": "@@ -41,6 +42,22 @@ std::chrono::seconds GetMockTime()\n     return g_mock_time.load(std::memory_order_relaxed);\n }\n \n+NodeSteadyClock::time_point NodeSteadyClock::now() noexcept\n+{\n+    const auto mocktime{g_mock_steady_time.load(std::memory_order_relaxed)};\n+    const auto ret{\n+        mocktime.count() ?\n+            mocktime :\n+            std::chrono::steady_clock::now().time_since_epoch()};\n+    return time_point{ret};\n+};\n+\n+void SetMockSteadyTime(std::chrono::milliseconds mock_time_in)\n+{\n+    Assert(mock_time_in >= 0s);\n+    g_mock_steady_time.store(mock_time_in, std::memory_order_relaxed);",
      "path": "src/util/time.cpp",
      "position": 28,
      "original_position": 25,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "85a41cb90e2f7d4c90297b7198e7d08fd285354d",
      "in_reply_to_id": 1785941780,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "i don't know.\r\n\r\ni like being able to mock them seperately, and millisecond resolultion instead of second resolution is kind of nice here because it tends to be used for deadlines and timeouts, seconds are kind of clunky there.\r\n\r\nalso conceptually i think \"`max(mock_time_in, g_mock_steady_time)`\" is a wrong representation of how monotonic time works, it's basically a CPU cycle counter (from system startup, usually), it isn't linked to wall time or updates of that at all. \r\n\r\nThe reference point generally doesn't matter, only differences do; in my current tests i in fact reset it in every test case.",
      "created_at": "2024-10-03T10:04:46Z",
      "updated_at": "2024-10-03T10:12:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1785962075",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1785962075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 68,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1786428201",
      "pull_request_review_id": 2345944225,
      "id": 1786428201,
      "node_id": "PRRC_kwDOABII585qersp",
      "diff_hunk": "@@ -22,6 +22,15 @@ struct NodeClock : public std::chrono::system_clock {\n };\n using NodeSeconds = std::chrono::time_point<NodeClock, std::chrono::seconds>;\n \n+/** Mockable steady clock in the context of tests, otherwise the system steady clock */\n+struct NodeSteadyClock : public std::chrono::steady_clock {",
      "path": "src/util/time.h",
      "position": null,
      "original_position": 5,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "85a41cb90e2f7d4c90297b7198e7d08fd285354d",
      "in_reply_to_id": 1785930990,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">  i wasn't sure which of the current usages should be mockable and didn't want to decide that here\r\n\r\nfair enough!\r\n\r\n`MockableSteadyClock` sgtm!",
      "created_at": "2024-10-03T15:22:51Z",
      "updated_at": "2024-10-03T15:22:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1786428201",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1786428201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1786431421",
      "pull_request_review_id": 2345949547,
      "id": 1786431421,
      "node_id": "PRRC_kwDOABII585qese9",
      "diff_hunk": "@@ -41,6 +42,22 @@ std::chrono::seconds GetMockTime()\n     return g_mock_time.load(std::memory_order_relaxed);\n }\n \n+NodeSteadyClock::time_point NodeSteadyClock::now() noexcept\n+{\n+    const auto mocktime{g_mock_steady_time.load(std::memory_order_relaxed)};\n+    const auto ret{\n+        mocktime.count() ?\n+            mocktime :\n+            std::chrono::steady_clock::now().time_since_epoch()};\n+    return time_point{ret};\n+};\n+\n+void SetMockSteadyTime(std::chrono::milliseconds mock_time_in)\n+{\n+    Assert(mock_time_in >= 0s);\n+    g_mock_steady_time.store(mock_time_in, std::memory_order_relaxed);",
      "path": "src/util/time.cpp",
      "position": 28,
      "original_position": 25,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "85a41cb90e2f7d4c90297b7198e7d08fd285354d",
      "in_reply_to_id": 1785941780,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> in my current tests i in fact reset it in every test case.\r\n\r\nRight, this wouldn't work with my approach as this is a global.",
      "created_at": "2024-10-03T15:25:06Z",
      "updated_at": "2024-10-03T15:25:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1786431421",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1786431421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 68,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1787577470",
      "pull_request_review_id": 2347823354,
      "id": 1787577470,
      "node_id": "PRRC_kwDOABII585qjER-",
      "diff_hunk": "@@ -22,6 +22,15 @@ struct NodeClock : public std::chrono::system_clock {\n };\n using NodeSeconds = std::chrono::time_point<NodeClock, std::chrono::seconds>;\n \n+/** Mockable steady clock in the context of tests, otherwise the system steady clock */\n+struct NodeSteadyClock : public std::chrono::steady_clock {",
      "path": "src/util/time.h",
      "position": null,
      "original_position": 5,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "85a41cb90e2f7d4c90297b7198e7d08fd285354d",
      "in_reply_to_id": 1785930990,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should be unambigious now, i've renamed it and the methods to set/clear the mock time are included on the clock itself.\r\n```c++\r\n/**\r\n * Version of SteadyClock that is mockable in the context of tests (set the\r\n * current value with SetMockTime), otherwise the system steady clock.\r\n */\r\nstruct MockableSteadyClock : public std::chrono::steady_clock {\r\n    using time_point = std::chrono::time_point<MockableSteadyClock>;\r\n    /** Return current system time or mocked time, if set */\r\n    static time_point now() noexcept;\r\n    static std::time_t to_time_t(const time_point&) = delete; // unused\r\n    static time_point from_time_t(std::time_t) = delete;      // unused\r\n\r\n    /** Set mock time for testing. */\r\n    static void SetMockTime(std::chrono::milliseconds mock_time_in);\r\n\r\n    /** Clear mock time, go back to system steady clock. */\r\n    static void ClearMockTime();\r\n};\r\n```",
      "created_at": "2024-10-04T11:29:05Z",
      "updated_at": "2024-10-04T14:16:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1787577470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1787577470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1895944792",
      "pull_request_review_id": 2520898727,
      "id": 1895944792,
      "node_id": "PRRC_kwDOABII585xAdJY",
      "diff_hunk": "@@ -0,0 +1,580 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+    int error;",
      "path": "src/test/pcp_tests.cpp",
      "position": 30,
      "original_position": 27,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "258b2856cdc6e2c054ea573cf57de7021aebc3c5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps document that this represents the expected error.",
      "created_at": "2024-12-23T16:45:58Z",
      "updated_at": "2024-12-23T16:53:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1895944792",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1895944792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1895945169",
      "pull_request_review_id": 2520898727,
      "id": 1895945169,
      "node_id": "PRRC_kwDOABII585xAdPR",
      "diff_hunk": "@@ -0,0 +1,580 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup",
      "path": "src/test/pcp_tests.cpp",
      "position": 37,
      "original_position": 34,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "258b2856cdc6e2c054ea573cf57de7021aebc3c5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could be marked `final`.",
      "created_at": "2024-12-23T16:46:27Z",
      "updated_at": "2024-12-23T16:53:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1895945169",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1895945169"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1895945418",
      "pull_request_review_id": 2520898727,
      "id": 1895945418,
      "node_id": "PRRC_kwDOABII585xAdTK",
      "diff_hunk": "@@ -0,0 +1,580 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock : public Sock",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "258b2856cdc6e2c054ea573cf57de7021aebc3c5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Could be marked `final`.",
      "created_at": "2024-12-23T16:46:47Z",
      "updated_at": "2024-12-23T16:53:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1895945418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1895945418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1895947529",
      "pull_request_review_id": 2520898727,
      "id": 1895947529,
      "node_id": "PRRC_kwDOABII585xAd0J",
      "diff_hunk": "@@ -0,0 +1,580 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }\n+\n+    PCPTestSock& operator=(Sock&& other) override\n+    {\n+        assert(false && \"Move of Sock into MockSock not allowed.\");\n+        return *this;\n+    }\n+\n+    ssize_t Send(const void* data, size_t len, int) const override {\n+        if (!m_connected) return -1;\n+        Span in_pkt = Span(static_cast<const uint8_t*>(data), len);\n+        if (AtEndOfScript() || CurOp().op != TestOp::SEND) {\n+            // Ignore sends after end of script, or sends when we expect a receive.\n+            FailScript();\n+            return len;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        if (CurOp().data.empty() || std::ranges::equal(CurOp().data, in_pkt)) {\n+            AdvanceOp();\n+        } else {\n+            // Wrong send, fail script\n+            FailScript();\n+        }\n+        return len;\n+    }\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override\n+    {\n+        if (!m_connected || AtEndOfScript() || CurOp().op != TestOp::RECV || m_time_left != 0s) {\n+            return -1;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        const auto &recv_pkt = CurOp().data;\n+        const size_t consume_bytes{std::min(len, recv_pkt.size())};\n+        std::memcpy(buf, recv_pkt.data(), consume_bytes);\n+        if ((flags & MSG_PEEK) == 0) {\n+            AdvanceOp();\n+        }\n+        return consume_bytes;\n+    }\n+\n+    int Connect(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len) && service == CService(m_gateway_ip, 5351)) {\n+            if (m_bound.IsBindAny()) { // If bind-any, bind to local ip.\n+                m_bound = CService(m_local_ip, 0);\n+            }\n+            if (m_bound.GetPort() == 0) { // If no port assigned, assign port 1.\n+                m_bound = CService(m_bound, 1);\n+            }\n+            m_connected = true;\n+            return 0;\n+        }\n+        return -1;\n+    }\n+\n+    int Bind(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len)) {\n+            // Can only bind to one of our local ips\n+            if (!service.IsBindAny() && service != m_local_ip) {\n+                return -1;\n+            }\n+            m_bound = service;\n+        }\n+        return 0;\n+    }\n+\n+    int Listen(int) const override { return -1; }\n+\n+    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override\n+    {\n+        return nullptr;\n+    };\n+\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n+    {\n+        std::memset(opt_val, 0x0, *opt_len);\n+        return 0;\n+    }\n+\n+    int SetSockOpt(int, int, const void*, socklen_t) const override { return 0; }\n+\n+    int GetSockName(sockaddr* name, socklen_t* name_len) const override\n+    {\n+        // Return the address we've been bound to.\n+        return m_bound.GetSockAddr(name, name_len) ? 0 : -1;\n+    }\n+\n+    bool SetNonBlocking() const override { return true; }\n+\n+    bool IsSelectable() const override { return true; }\n+\n+    bool Wait(std::chrono::milliseconds timeout,\n+              Event requested,\n+              Event* occurred = nullptr) const override\n+    {\n+        // Only handles receive events.\n+        if (AtEndOfScript() || requested != Sock::RECV) {\n+            ElapseTime(timeout);\n+        } else {\n+            std::chrono::milliseconds delay = std::min(m_time_left, timeout);\n+            ElapseTime(delay);\n+            m_time_left -= delay;\n+            if (CurOp().op == TestOp::RECV && m_time_left == 0s && occurred != nullptr) {\n+                *occurred = Sock::RECV;\n+            }\n+            if (CurOp().op == TestOp::NOP) {\n+                // This was a pure delay operation, move to the next op.\n+                AdvanceOp();\n+            }\n+        }\n+        return true;\n+    }\n+\n+    bool WaitMany(std::chrono::milliseconds timeout, EventsPerSock& events_per_sock) const override\n+    {\n+        return false;\n+    }\n+\n+    bool IsConnected(std::string&) const override\n+    {\n+        return true;\n+    }\n+\n+private:\n+    const std::vector<TestOp> m_script;\n+    mutable size_t m_script_ptr = 0;\n+    mutable std::chrono::milliseconds m_time_left;\n+    mutable std::chrono::milliseconds m_time{1000};",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 222,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "258b2856cdc6e2c054ea573cf57de7021aebc3c5",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps document that this must start at nonzero, otherwise `MockableSteadyClock::SetMockTime(m_time)` would disable mocking.",
      "created_at": "2024-12-23T16:49:11Z",
      "updated_at": "2024-12-23T16:53:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1895947529",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1895947529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1897481126",
      "pull_request_review_id": 2522662948,
      "id": 1897481126,
      "node_id": "PRRC_kwDOABII585xGUOm",
      "diff_hunk": "@@ -0,0 +1,580 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }\n+\n+    PCPTestSock& operator=(Sock&& other) override\n+    {\n+        assert(false && \"Move of Sock into MockSock not allowed.\");\n+        return *this;\n+    }\n+\n+    ssize_t Send(const void* data, size_t len, int) const override {\n+        if (!m_connected) return -1;\n+        Span in_pkt = Span(static_cast<const uint8_t*>(data), len);\n+        if (AtEndOfScript() || CurOp().op != TestOp::SEND) {\n+            // Ignore sends after end of script, or sends when we expect a receive.\n+            FailScript();\n+            return len;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        if (CurOp().data.empty() || std::ranges::equal(CurOp().data, in_pkt)) {\n+            AdvanceOp();\n+        } else {\n+            // Wrong send, fail script\n+            FailScript();\n+        }\n+        return len;\n+    }\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override\n+    {\n+        if (!m_connected || AtEndOfScript() || CurOp().op != TestOp::RECV || m_time_left != 0s) {\n+            return -1;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        const auto &recv_pkt = CurOp().data;\n+        const size_t consume_bytes{std::min(len, recv_pkt.size())};\n+        std::memcpy(buf, recv_pkt.data(), consume_bytes);\n+        if ((flags & MSG_PEEK) == 0) {\n+            AdvanceOp();\n+        }\n+        return consume_bytes;\n+    }\n+\n+    int Connect(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len) && service == CService(m_gateway_ip, 5351)) {\n+            if (m_bound.IsBindAny()) { // If bind-any, bind to local ip.\n+                m_bound = CService(m_local_ip, 0);\n+            }\n+            if (m_bound.GetPort() == 0) { // If no port assigned, assign port 1.\n+                m_bound = CService(m_bound, 1);\n+            }\n+            m_connected = true;\n+            return 0;\n+        }\n+        return -1;\n+    }\n+\n+    int Bind(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len)) {\n+            // Can only bind to one of our local ips\n+            if (!service.IsBindAny() && service != m_local_ip) {\n+                return -1;\n+            }\n+            m_bound = service;\n+        }\n+        return 0;\n+    }\n+\n+    int Listen(int) const override { return -1; }\n+\n+    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override\n+    {\n+        return nullptr;\n+    };\n+\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n+    {\n+        std::memset(opt_val, 0x0, *opt_len);\n+        return 0;\n+    }\n+\n+    int SetSockOpt(int, int, const void*, socklen_t) const override { return 0; }\n+\n+    int GetSockName(sockaddr* name, socklen_t* name_len) const override\n+    {\n+        // Return the address we've been bound to.\n+        return m_bound.GetSockAddr(name, name_len) ? 0 : -1;\n+    }\n+\n+    bool SetNonBlocking() const override { return true; }\n+\n+    bool IsSelectable() const override { return true; }\n+\n+    bool Wait(std::chrono::milliseconds timeout,\n+              Event requested,\n+              Event* occurred = nullptr) const override\n+    {\n+        // Only handles receive events.\n+        if (AtEndOfScript() || requested != Sock::RECV) {\n+            ElapseTime(timeout);\n+        } else {\n+            std::chrono::milliseconds delay = std::min(m_time_left, timeout);\n+            ElapseTime(delay);\n+            m_time_left -= delay;\n+            if (CurOp().op == TestOp::RECV && m_time_left == 0s && occurred != nullptr) {\n+                *occurred = Sock::RECV;\n+            }\n+            if (CurOp().op == TestOp::NOP) {\n+                // This was a pure delay operation, move to the next op.\n+                AdvanceOp();\n+            }\n+        }\n+        return true;\n+    }\n+\n+    bool WaitMany(std::chrono::milliseconds timeout, EventsPerSock& events_per_sock) const override\n+    {\n+        return false;\n+    }\n+\n+    bool IsConnected(std::string&) const override\n+    {\n+        return true;\n+    }\n+\n+private:\n+    const std::vector<TestOp> m_script;\n+    mutable size_t m_script_ptr = 0;\n+    mutable std::chrono::milliseconds m_time_left;\n+    mutable std::chrono::milliseconds m_time{1000};",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 222,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "258b2856cdc6e2c054ea573cf57de7021aebc3c5",
      "in_reply_to_id": 1895947529,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Correct. Thinking of it, we could define a constant for this in the MockableClock like `INITIAL_MOCK_TIME`. This would document it while at the same time as preventing that mistake being made in future tests that use the mockable steady clock.\r\n\r\nThe alternative was to make the mock time in MockableClock an optional, but this would mean it could no longer simply be an atomic value, so was kind of a hassle compared to starting at non-zero.",
      "created_at": "2024-12-25T21:29:58Z",
      "updated_at": "2024-12-25T21:30:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1897481126",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1897481126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901969607",
      "pull_request_review_id": 2529393336,
      "id": 1901969607,
      "node_id": "PRRC_kwDOABII585xXcDH",
      "diff_hunk": "@@ -539,7 +539,14 @@ class CService : public CNetAddr\n     explicit CService(const struct sockaddr_in& addr);\n     uint16_t GetPort() const;\n     bool GetSockAddr(struct sockaddr* paddr, socklen_t* addrlen) const;\n-    bool SetSockAddr(const struct sockaddr* paddr);\n+    /**\n+     * Set CService from a network sockaddr.\n+     * @param[in] paddr Pointer to sockaddr structure\n+     * @param[in] addrlen Length of sockaddr structure in bytes. This will be checked to exactly match the length of\n+     * a socket address of the provided family, unless std::nullopt is passed\n+     * @returns true on success\n+     */\n+    bool SetSockAddr(const struct sockaddr* paddr, std::optional<socklen_t> addrlen);",
      "path": "src/netaddress.h",
      "position": null,
      "original_position": 12,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "39f7c14621f74df5596a333b32ccfe2d6e9a21db",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This does not need to be optional.",
      "created_at": "2025-01-03T16:42:56Z",
      "updated_at": "2025-01-13T19:35:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1901969607",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1901969607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913034308",
      "pull_request_review_id": 2546343939,
      "id": 1913034308,
      "node_id": "PRRC_kwDOABII585yBpZE",
      "diff_hunk": "@@ -48,6 +49,27 @@ std::chrono::seconds GetMockTime()\n     return g_mock_time.load(std::memory_order_relaxed);\n }\n \n+MockableSteadyClock::time_point MockableSteadyClock::now() noexcept\n+{\n+    const auto mocktime{g_mock_steady_time.load(std::memory_order_relaxed)};",
      "path": "src/util/time.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "e4cc03c189c29d3862be1c576102a5c54a55caf9",
      "in_reply_to_id": null,
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For the merge conflict, isn't this missing in the next line?\r\n\r\n```cpp\r\n    if (!mocktime.count()) {\r\n        g_used_system_time = true;\r\n    }",
      "created_at": "2025-01-13T11:19:47Z",
      "updated_at": "2025-01-13T11:19:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1913034308",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913034308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913040379",
      "pull_request_review_id": 2546354026,
      "id": 1913040379,
      "node_id": "PRRC_kwDOABII585yBq37",
      "diff_hunk": "@@ -48,6 +49,27 @@ std::chrono::seconds GetMockTime()\n     return g_mock_time.load(std::memory_order_relaxed);\n }\n \n+MockableSteadyClock::time_point MockableSteadyClock::now() noexcept\n+{\n+    const auto mocktime{g_mock_steady_time.load(std::memory_order_relaxed)};",
      "path": "src/util/time.cpp",
      "position": 14,
      "original_position": 14,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "e4cc03c189c29d3862be1c576102a5c54a55caf9",
      "in_reply_to_id": 1913034308,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "i first didn't  because i thought it would require all tests that indirectly use the steady clock to be updated, which i deemed outside the scope of this PR.\r\nBut it actually doesn't, the new clock is (intentially) only used in one place. And besides, this is checked for the fuzz framework not the unit tests.\r\nWill add.",
      "created_at": "2025-01-13T11:25:13Z",
      "updated_at": "2025-01-13T11:25:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1913040379",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913040379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913713048",
      "pull_request_review_id": 2547670689,
      "id": 1913713048,
      "node_id": "PRRC_kwDOABII585yEPGY",
      "diff_hunk": "@@ -539,7 +539,14 @@ class CService : public CNetAddr\n     explicit CService(const struct sockaddr_in& addr);\n     uint16_t GetPort() const;\n     bool GetSockAddr(struct sockaddr* paddr, socklen_t* addrlen) const;\n-    bool SetSockAddr(const struct sockaddr* paddr);\n+    /**\n+     * Set CService from a network sockaddr.\n+     * @param[in] paddr Pointer to sockaddr structure\n+     * @param[in] addrlen Length of sockaddr structure in bytes. This will be checked to exactly match the length of\n+     * a socket address of the provided family, unless std::nullopt is passed\n+     * @returns true on success\n+     */\n+    bool SetSockAddr(const struct sockaddr* paddr, std::optional<socklen_t> addrlen);",
      "path": "src/netaddress.h",
      "position": null,
      "original_position": 12,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "39f7c14621f74df5596a333b32ccfe2d6e9a21db",
      "in_reply_to_id": 1901969607,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah, maybe it does for #31014.",
      "created_at": "2025-01-13T19:36:27Z",
      "updated_at": "2025-01-13T19:36:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1913713048",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913713048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913774345",
      "pull_request_review_id": 2547817898,
      "id": 1913774345,
      "node_id": "PRRC_kwDOABII585yEeEJ",
      "diff_hunk": "@@ -539,7 +539,14 @@ class CService : public CNetAddr\n     explicit CService(const struct sockaddr_in& addr);\n     uint16_t GetPort() const;\n     bool GetSockAddr(struct sockaddr* paddr, socklen_t* addrlen) const;\n-    bool SetSockAddr(const struct sockaddr* paddr);\n+    /**\n+     * Set CService from a network sockaddr.\n+     * @param[in] paddr Pointer to sockaddr structure\n+     * @param[in] addrlen Length of sockaddr structure in bytes. This will be checked to exactly match the length of\n+     * a socket address of the provided family, unless std::nullopt is passed\n+     * @returns true on success\n+     */\n+    bool SetSockAddr(const struct sockaddr* paddr, std::optional<socklen_t> addrlen);",
      "path": "src/netaddress.h",
      "position": null,
      "original_position": 12,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "39f7c14621f74df5596a333b32ccfe2d6e9a21db",
      "in_reply_to_id": 1901969607,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes there is one edge-case there where it is necessary for it to be optional, unfortunately, and no length is directlly available.\r\ni guess we could also make it non-optional then do something else at the call-site there (e.g. create a `AddrLenFromFamily` function or such), fine with me too.",
      "created_at": "2025-01-13T20:34:01Z",
      "updated_at": "2025-01-13T20:34:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1913774345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913774345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913788476",
      "pull_request_review_id": 2547853742,
      "id": 1913788476,
      "node_id": "PRRC_kwDOABII585yEhg8",
      "diff_hunk": "@@ -0,0 +1,580 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup",
      "path": "src/test/pcp_tests.cpp",
      "position": 37,
      "original_position": 34,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "258b2856cdc6e2c054ea573cf57de7021aebc3c5",
      "in_reply_to_id": 1895945169,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This doesn't work, boost apparently does derive from it.\r\n```\r\n.../src/test/pcp_tests.cpp:260:22: error: cannot derive from ‘final’ base ‘PCPTestingSetup’ in derived type ‘pcp_tests::natpmp_ipv4’\r\n  260 | BOOST_AUTO_TEST_CASE(natpmp_ipv4)\r\n      |                      ^~~~~~~~~~~\r\n.../src/test/pcp_tests.cpp:311:22: error: cannot derive from ‘final’ base ‘PCPTestingSetup’ in derived type ‘pcp_tests::pcp_ipv4’\r\n  311 | BOOST_AUTO_TEST_CASE(pcp_ipv4)\r\n      |                      ^~~~~~~~\r\n```",
      "created_at": "2025-01-13T20:48:27Z",
      "updated_at": "2025-01-13T20:48:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1913788476",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913788476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 37,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913790664",
      "pull_request_review_id": 2547859212,
      "id": 1913790664,
      "node_id": "PRRC_kwDOABII585yEiDI",
      "diff_hunk": "@@ -0,0 +1,580 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+    int error;",
      "path": "src/test/pcp_tests.cpp",
      "position": 30,
      "original_position": 27,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "258b2856cdc6e2c054ea573cf57de7021aebc3c5",
      "in_reply_to_id": 1895944792,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done. It's actually the injected error, in case send/receive has to fail.",
      "created_at": "2025-01-13T20:50:49Z",
      "updated_at": "2025-01-13T20:50:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1913790664",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913790664"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 30,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913790833",
      "pull_request_review_id": 2547859490,
      "id": 1913790833,
      "node_id": "PRRC_kwDOABII585yEiFx",
      "diff_hunk": "@@ -0,0 +1,580 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock : public Sock",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "258b2856cdc6e2c054ea573cf57de7021aebc3c5",
      "in_reply_to_id": 1895945418,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done",
      "created_at": "2025-01-13T20:50:59Z",
      "updated_at": "2025-01-13T20:50:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1913790833",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913790833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913795001",
      "pull_request_review_id": 2547869247,
      "id": 1913795001,
      "node_id": "PRRC_kwDOABII585yEjG5",
      "diff_hunk": "@@ -539,7 +539,14 @@ class CService : public CNetAddr\n     explicit CService(const struct sockaddr_in& addr);\n     uint16_t GetPort() const;\n     bool GetSockAddr(struct sockaddr* paddr, socklen_t* addrlen) const;\n-    bool SetSockAddr(const struct sockaddr* paddr);\n+    /**\n+     * Set CService from a network sockaddr.\n+     * @param[in] paddr Pointer to sockaddr structure\n+     * @param[in] addrlen Length of sockaddr structure in bytes. This will be checked to exactly match the length of\n+     * a socket address of the provided family, unless std::nullopt is passed\n+     * @returns true on success\n+     */\n+    bool SetSockAddr(const struct sockaddr* paddr, std::optional<socklen_t> addrlen);",
      "path": "src/netaddress.h",
      "position": null,
      "original_position": 12,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "39f7c14621f74df5596a333b32ccfe2d6e9a21db",
      "in_reply_to_id": 1901969607,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, made it non-optional now. Somehow feels more consistent. It's likely that this PR will go in first anyhow. Will look into a different solution for #31014.",
      "created_at": "2025-01-13T20:55:09Z",
      "updated_at": "2025-01-13T20:55:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1913795001",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1913795001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 549,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1917096066",
      "pull_request_review_id": 2553493851,
      "id": 1917096066,
      "node_id": "PRRC_kwDOABII585yRJCC",
      "diff_hunk": "@@ -0,0 +1,701 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+\n+    //! Injected error.\n+    //! Set this field to a non-zero value to return the errno code from send or receive operation.\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock final : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }\n+\n+    PCPTestSock& operator=(Sock&& other) override\n+    {\n+        assert(false && \"Move of Sock into MockSock not allowed.\");\n+        return *this;\n+    }\n+\n+    ssize_t Send(const void* data, size_t len, int) const override {\n+        if (!m_connected) return -1;\n+        Span in_pkt = Span(static_cast<const uint8_t*>(data), len);\n+        if (AtEndOfScript() || CurOp().op != TestOp::SEND) {\n+            // Ignore sends after end of script, or sends when we expect a receive.\n+            FailScript();\n+            return len;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        if (CurOp().data.empty() || std::ranges::equal(CurOp().data, in_pkt)) {\n+            AdvanceOp();\n+        } else {\n+            // Wrong send, fail script\n+            FailScript();\n+        }\n+        return len;\n+    }\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override\n+    {\n+        if (!m_connected || AtEndOfScript() || CurOp().op != TestOp::RECV || m_time_left != 0s) {\n+            return -1;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        const auto &recv_pkt = CurOp().data;\n+        const size_t consume_bytes{std::min(len, recv_pkt.size())};\n+        std::memcpy(buf, recv_pkt.data(), consume_bytes);\n+        if ((flags & MSG_PEEK) == 0) {\n+            AdvanceOp();\n+        }\n+        return consume_bytes;\n+    }\n+\n+    int Connect(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len) && service == CService(m_gateway_ip, 5351)) {\n+            if (m_bound.IsBindAny()) { // If bind-any, bind to local ip.\n+                m_bound = CService(m_local_ip, 0);\n+            }\n+            if (m_bound.GetPort() == 0) { // If no port assigned, assign port 1.\n+                m_bound = CService(m_bound, 1);\n+            }\n+            m_connected = true;\n+            return 0;\n+        }\n+        return -1;\n+    }\n+\n+    int Bind(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len)) {\n+            // Can only bind to one of our local ips\n+            if (!service.IsBindAny() && service != m_local_ip) {\n+                return -1;\n+            }\n+            m_bound = service;\n+        }\n+        return 0;",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 161,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit in the context of this test but i think you meant:\r\n```suggestion\r\n        if (service.SetSockAddr(sa, sa_len)) {\r\n            // Can only bind to one of our local ips\r\n            if (!service.IsBindAny() && service != m_local_ip) {\r\n                return -1;\r\n            }\r\n            m_bound = service;\r\n            return 0;\r\n        }\r\n        return -1;\r\n```",
      "created_at": "2025-01-15T17:44:41Z",
      "updated_at": "2025-01-15T21:30:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1917096066",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1917096066"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": 154,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1917096949",
      "pull_request_review_id": 2553493851,
      "id": 1917096949,
      "node_id": "PRRC_kwDOABII585yRJP1",
      "diff_hunk": "@@ -0,0 +1,701 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+\n+    //! Injected error.\n+    //! Set this field to a non-zero value to return the errno code from send or receive operation.\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock final : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }\n+\n+    PCPTestSock& operator=(Sock&& other) override\n+    {\n+        assert(false && \"Move of Sock into MockSock not allowed.\");",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit\r\n```suggestion\r\n        assert(false && \"Move of Sock into PCPTestSock not allowed.\");\r\n```",
      "created_at": "2025-01-15T17:45:21Z",
      "updated_at": "2025-01-15T21:30:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1917096949",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1917096949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1917105856",
      "pull_request_review_id": 2553493851,
      "id": 1917105856,
      "node_id": "PRRC_kwDOABII585yRLbA",
      "diff_hunk": "@@ -0,0 +1,701 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+\n+    //! Injected error.\n+    //! Set this field to a non-zero value to return the errno code from send or receive operation.\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock final : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }\n+\n+    PCPTestSock& operator=(Sock&& other) override\n+    {\n+        assert(false && \"Move of Sock into MockSock not allowed.\");\n+        return *this;\n+    }\n+\n+    ssize_t Send(const void* data, size_t len, int) const override {\n+        if (!m_connected) return -1;\n+        Span in_pkt = Span(static_cast<const uint8_t*>(data), len);\n+        if (AtEndOfScript() || CurOp().op != TestOp::SEND) {\n+            // Ignore sends after end of script, or sends when we expect a receive.\n+            FailScript();\n+            return len;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        if (CurOp().data.empty() || std::ranges::equal(CurOp().data, in_pkt)) {\n+            AdvanceOp();\n+        } else {\n+            // Wrong send, fail script\n+            FailScript();\n+        }\n+        return len;\n+    }\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override\n+    {\n+        if (!m_connected || AtEndOfScript() || CurOp().op != TestOp::RECV || m_time_left != 0s) {\n+            return -1;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        const auto &recv_pkt = CurOp().data;\n+        const size_t consume_bytes{std::min(len, recv_pkt.size())};\n+        std::memcpy(buf, recv_pkt.data(), consume_bytes);\n+        if ((flags & MSG_PEEK) == 0) {\n+            AdvanceOp();\n+        }\n+        return consume_bytes;\n+    }\n+\n+    int Connect(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len) && service == CService(m_gateway_ip, 5351)) {\n+            if (m_bound.IsBindAny()) { // If bind-any, bind to local ip.\n+                m_bound = CService(m_local_ip, 0);\n+            }\n+            if (m_bound.GetPort() == 0) { // If no port assigned, assign port 1.\n+                m_bound = CService(m_bound, 1);\n+            }\n+            m_connected = true;\n+            return 0;\n+        }\n+        return -1;\n+    }\n+\n+    int Bind(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len)) {\n+            // Can only bind to one of our local ips\n+            if (!service.IsBindAny() && service != m_local_ip) {\n+                return -1;\n+            }\n+            m_bound = service;\n+        }\n+        return 0;\n+    }\n+\n+    int Listen(int) const override { return -1; }\n+\n+    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override\n+    {\n+        return nullptr;\n+    };\n+\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n+    {\n+        std::memset(opt_val, 0x0, *opt_len);",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 173,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: it's never used, any reason for defining it?",
      "created_at": "2025-01-15T17:51:43Z",
      "updated_at": "2025-01-15T21:30:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1917105856",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1917105856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1917172067",
      "pull_request_review_id": 2553493851,
      "id": 1917172067,
      "node_id": "PRRC_kwDOABII585yRblj",
      "diff_hunk": "@@ -0,0 +1,701 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+\n+    //! Injected error.\n+    //! Set this field to a non-zero value to return the errno code from send or receive operation.\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock final : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }\n+\n+    PCPTestSock& operator=(Sock&& other) override\n+    {\n+        assert(false && \"Move of Sock into MockSock not allowed.\");\n+        return *this;\n+    }\n+\n+    ssize_t Send(const void* data, size_t len, int) const override {\n+        if (!m_connected) return -1;\n+        Span in_pkt = Span(static_cast<const uint8_t*>(data), len);\n+        if (AtEndOfScript() || CurOp().op != TestOp::SEND) {\n+            // Ignore sends after end of script, or sends when we expect a receive.\n+            FailScript();\n+            return len;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        if (CurOp().data.empty() || std::ranges::equal(CurOp().data, in_pkt)) {\n+            AdvanceOp();\n+        } else {\n+            // Wrong send, fail script\n+            FailScript();\n+        }\n+        return len;\n+    }\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override\n+    {\n+        if (!m_connected || AtEndOfScript() || CurOp().op != TestOp::RECV || m_time_left != 0s) {\n+            return -1;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        const auto &recv_pkt = CurOp().data;\n+        const size_t consume_bytes{std::min(len, recv_pkt.size())};\n+        std::memcpy(buf, recv_pkt.data(), consume_bytes);\n+        if ((flags & MSG_PEEK) == 0) {\n+            AdvanceOp();\n+        }\n+        return consume_bytes;\n+    }\n+\n+    int Connect(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len) && service == CService(m_gateway_ip, 5351)) {\n+            if (m_bound.IsBindAny()) { // If bind-any, bind to local ip.\n+                m_bound = CService(m_local_ip, 0);\n+            }\n+            if (m_bound.GetPort() == 0) { // If no port assigned, assign port 1.\n+                m_bound = CService(m_bound, 1);\n+            }\n+            m_connected = true;\n+            return 0;\n+        }\n+        return -1;\n+    }\n+\n+    int Bind(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len)) {\n+            // Can only bind to one of our local ips\n+            if (!service.IsBindAny() && service != m_local_ip) {\n+                return -1;\n+            }\n+            m_bound = service;\n+        }\n+        return 0;\n+    }\n+\n+    int Listen(int) const override { return -1; }\n+\n+    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override\n+    {\n+        return nullptr;\n+    };\n+\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n+    {\n+        std::memset(opt_val, 0x0, *opt_len);\n+        return 0;\n+    }\n+\n+    int SetSockOpt(int, int, const void*, socklen_t) const override { return 0; }\n+\n+    int GetSockName(sockaddr* name, socklen_t* name_len) const override\n+    {\n+        // Return the address we've been bound to.\n+        return m_bound.GetSockAddr(name, name_len) ? 0 : -1;\n+    }\n+\n+    bool SetNonBlocking() const override { return true; }\n+\n+    bool IsSelectable() const override { return true; }\n+\n+    bool Wait(std::chrono::milliseconds timeout,\n+              Event requested,\n+              Event* occurred = nullptr) const override\n+    {\n+        // Only handles receive events.\n+        if (AtEndOfScript() || requested != Sock::RECV) {\n+            ElapseTime(timeout);\n+        } else {\n+            std::chrono::milliseconds delay = std::min(m_time_left, timeout);\n+            ElapseTime(delay);\n+            m_time_left -= delay;\n+            if (CurOp().op == TestOp::RECV && m_time_left == 0s && occurred != nullptr) {\n+                *occurred = Sock::RECV;\n+            }\n+            if (CurOp().op == TestOp::NOP) {\n+                // This was a pure delay operation, move to the next op.\n+                AdvanceOp();\n+            }\n+        }\n+        return true;\n+    }\n+\n+    bool WaitMany(std::chrono::milliseconds timeout, EventsPerSock& events_per_sock) const override\n+    {\n+        return false;\n+    }\n+\n+    bool IsConnected(std::string&) const override\n+    {\n+        return true;\n+    }\n+\n+private:\n+    const std::vector<TestOp> m_script;\n+    mutable size_t m_script_ptr = 0;\n+    mutable std::chrono::milliseconds m_time_left;\n+    mutable std::chrono::milliseconds m_time{MockableSteadyClock::INITIAL_MOCK_TIME};\n+    mutable bool m_connected{false};\n+    mutable CService m_bound;\n+    mutable CNetAddr m_local_ip;\n+    mutable CNetAddr m_gateway_ip;\n+\n+    void ElapseTime(std::chrono::milliseconds duration) const\n+    {\n+        m_time += duration;\n+        MockableSteadyClock::SetMockTime(m_time);\n+    }\n+\n+    bool AtEndOfScript() const { return m_script_ptr == m_script.size(); }\n+    const TestOp &CurOp() const {\n+        BOOST_REQUIRE(m_script_ptr < m_script.size());\n+        return m_script[m_script_ptr];\n+    }\n+\n+    void PrepareOp() const {\n+        if (AtEndOfScript()) return;\n+        m_time_left = CurOp().delay;\n+    }\n+\n+    void AdvanceOp() const\n+    {\n+        m_script_ptr += 1;\n+        PrepareOp();\n+    }\n+\n+    void FailScript() const { m_script_ptr = m_script.size(); }\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(pcp_tests, PCPTestingSetup)\n+\n+// NAT-PMP IPv4 good-weather scenario.\n+BOOST_AUTO_TEST_CASE(natpmp_ipv4)\n+{\n+    const std::vector<TestOp> script{\n+        {\n+            0ms, TestOp::SEND,\n+            {\n+                0x00, 0x00, // version, opcode (request external IP)\n+            }, 0\n+        },\n+        {\n+            2ms, TestOp::RECV,\n+            {\n+                0x00, 0x80, 0x00, 0x00, // version, opcode (external IP), result code (success)\n+                0x66, 0xfd, 0xa1, 0xee, // seconds sinds start of epoch\n+                0x01, 0x02, 0x03, 0x04, // external IP address\n+            }, 0\n+        },\n+        {\n+            0ms, TestOp::SEND,\n+            {\n+                0x00, 0x02, 0x00, 0x00, // version, opcode (request map TCP)\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, suggested external port\n+                0x00, 0x00, 0x03, 0xe8, // requested mapping lifetime in seconds\n+            }, 0\n+        },\n+        {\n+            2ms, TestOp::RECV,\n+            {\n+                0x00, 0x82, 0x00, 0x00, // version, opcode (mapped TCP)\n+                0x66, 0xfd, 0xa1, 0xee, // seconds sinds start of epoch\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, mapped external port\n+                0x00, 0x00, 0x01, 0xf4, // mapping lifetime in seconds\n+            }, 0\n+        },\n+    };\n+    CreateSock = [this, &script](int domain, int type, int protocol) {\n+        if (domain == AF_INET && type == SOCK_DGRAM && protocol == IPPROTO_UDP) return std::make_unique<PCPTestSock>(default_local_ipv4, default_gateway_ipv4, script);\n+        return std::unique_ptr<PCPTestSock>();\n+    };\n+\n+    auto res = NATPMPRequestPortMap(default_gateway_ipv4, 1234, 1000, 1, 200ms);\n+\n+    MappingResult* mapping = std::get_if<MappingResult>(&res);\n+    BOOST_REQUIRE(mapping);\n+    BOOST_CHECK_EQUAL(mapping->version, 0);\n+    BOOST_CHECK_EQUAL(mapping->internal.ToStringAddrPort(), \"192.168.0.6:1234\");\n+    BOOST_CHECK_EQUAL(mapping->external.ToStringAddrPort(), \"1.2.3.4:1234\");\n+    BOOST_CHECK_EQUAL(mapping->lifetime, 500);\n+}\n+\n+// PCP IPv4 good-weather scenario.\n+BOOST_AUTO_TEST_CASE(pcp_ipv4)\n+{\n+    const std::vector<TestOp> script{\n+        {\n+            0ms, TestOp::SEND,\n+            {\n+                0x02, 0x01, 0x00, 0x00, // version, opcode\n+                0x00, 0x00, 0x03, 0xe8, // lifetime\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xa8, 0x00, 0x06, // internal IP\n+                0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, // nonce\n+                0x06, 0x00, 0x00, 0x00, // protocol (TCP), reserved\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, suggested external port\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, // suggested external IP\n+            }, 0\n+        },\n+        {\n+            250ms, TestOp::RECV, // 250ms delay before answer\n+            {\n+                0x02, 0x81, 0x00, 0x00, // version, opcode, result success\n+                0x00, 0x00, 0x01, 0xf4, // granted lifetime\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n+                0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, // nonce\n+                0x06, 0x00, 0x00, 0x00, // protocol (TCP), reserved\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, assigned external port\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, // assigned external IP\n+            }, 0\n+        },\n+    };\n+    CreateSock = [this, &script](int domain, int type, int protocol) {\n+        if (domain == AF_INET && type == SOCK_DGRAM && protocol == IPPROTO_UDP) return std::make_unique<PCPTestSock>(default_local_ipv4, default_gateway_ipv4, script);\n+        return std::unique_ptr<PCPTestSock>();\n+    };\n+\n+    auto res = PCPRequestPortMap(TEST_NONCE, default_gateway_ipv4, bind_any_ipv4, 1234, 1000, 1, 1000ms);\n+\n+    MappingResult* mapping = std::get_if<MappingResult>(&res);\n+    BOOST_REQUIRE(mapping);\n+    BOOST_CHECK_EQUAL(mapping->version, 2);\n+    BOOST_CHECK_EQUAL(mapping->internal.ToStringAddrPort(), \"192.168.0.6:1234\");\n+    BOOST_CHECK_EQUAL(mapping->external.ToStringAddrPort(), \"1.2.3.4:1234\");\n+    BOOST_CHECK_EQUAL(mapping->lifetime, 500);\n+}\n+\n+// PCP IPv6 good-weather scenario.\n+BOOST_AUTO_TEST_CASE(pcp_ipv6)\n+{\n+    const std::vector<TestOp> script{\n+        {\n+            0ms, TestOp::SEND,\n+            {\n+                0x02, 0x01, 0x00, 0x00, // version, opcode\n+                0x00, 0x00, 0x03, 0xe8, // lifetime\n+                0x2a, 0x10, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, // internal IP\n+                0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, // nonce\n+                0x06, 0x00, 0x00, 0x00, // protocol (TCP), reserved\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, suggested external port\n+                0x2a, 0x10, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, // suggested external IP\n+            }, 0\n+        },\n+        {\n+            500ms, TestOp::RECV, // 500ms delay before answer\n+            {\n+                0x02, 0x81, 0x00, 0x00, // version, opcode, result success\n+                0x00, 0x00, 0x01, 0xf4, // granted lifetime\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n+                0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, // nonce\n+                0x06, 0x00, 0x00, 0x00, // protocol (TCP), reserved\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, assigned external port\n+                0x2a, 0x10, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, // suggested external IP\n+            }, 0\n+        },\n+    };\n+    CreateSock = [this, &script](int domain, int type, int protocol) {\n+        if (domain == AF_INET6 && type == SOCK_DGRAM && protocol == IPPROTO_UDP) return std::make_unique<PCPTestSock>(default_local_ipv6, default_gateway_ipv6, script);\n+        return std::unique_ptr<PCPTestSock>();\n+    };\n+\n+    auto res = PCPRequestPortMap(TEST_NONCE, default_gateway_ipv6, default_local_ipv6, 1234, 1000, 1, 1000ms);\n+\n+    MappingResult* mapping = std::get_if<MappingResult>(&res);\n+    BOOST_REQUIRE(mapping);\n+    BOOST_CHECK_EQUAL(mapping->version, 2);\n+    BOOST_CHECK_EQUAL(mapping->internal.ToStringAddrPort(), \"[2a10:1234:5678:9abc:def0:1234:5678:9abc]:1234\");\n+    BOOST_CHECK_EQUAL(mapping->external.ToStringAddrPort(), \"[2a10:1234:5678:9abc:def0:1234:5678:9abc]:1234\");\n+    BOOST_CHECK_EQUAL(mapping->lifetime, 500);\n+}\n+\n+// PCP timeout.\n+BOOST_AUTO_TEST_CASE(pcp_timeout)\n+{\n+    const std::vector<TestOp> script{};\n+    CreateSock = [this, &script](int domain, int type, int protocol) {\n+        if (domain == AF_INET && type == SOCK_DGRAM && protocol == IPPROTO_UDP) return std::make_unique<PCPTestSock>(default_local_ipv4, default_gateway_ipv4, script);\n+        return std::unique_ptr<PCPTestSock>();\n+    };\n+\n+    ASSERT_DEBUG_LOG(\"pcp: Retrying (1)\");\n+    ASSERT_DEBUG_LOG(\"pcp: Retrying (2)\");\n+    ASSERT_DEBUG_LOG(\"pcp: Timeout\");\n+\n+    auto res = PCPRequestPortMap(TEST_NONCE, default_gateway_ipv4, bind_any_ipv4, 1234, 1000, 3, 2000ms);\n+\n+    MappingError* err = std::get_if<MappingError>(&res);\n+    BOOST_REQUIRE(err);\n+    BOOST_CHECK_EQUAL(*err, MappingError::NETWORK_ERROR);\n+}\n+\n+// PCP failure receiving (router sends ICMP port closed).\n+BOOST_AUTO_TEST_CASE(pcp_connrefused)\n+{\n+    const std::vector<TestOp> script{\n+        {\n+            0ms, TestOp::SEND,\n+            { // May send anything.\n+            }, 0\n+        },\n+        {\n+            0ms, TestOp::RECV,\n+            {\n+            }, ECONNREFUSED\n+        },\n+    };\n+    CreateSock = [this, &script](int domain, int type, int protocol) {\n+        if (domain == AF_INET && type == SOCK_DGRAM && protocol == IPPROTO_UDP) return std::make_unique<PCPTestSock>(default_local_ipv4, default_gateway_ipv4, script);\n+        return std::unique_ptr<PCPTestSock>();\n+    };\n+\n+    ASSERT_DEBUG_LOG(\"pcp: Could not receive response\");\n+\n+    auto res = PCPRequestPortMap(TEST_NONCE, default_gateway_ipv4, bind_any_ipv4, 1234, 1000, 3, 2000ms);\n+\n+    MappingError* err = std::get_if<MappingError>(&res);\n+    BOOST_REQUIRE(err);\n+    BOOST_CHECK_EQUAL(*err, MappingError::NETWORK_ERROR);\n+}\n+\n+// PCP IPv6 success after one timeout.\n+BOOST_AUTO_TEST_CASE(pcp_ipv6_timeout_success)\n+{\n+    const std::vector<TestOp> script{\n+        {\n+            0ms, TestOp::SEND,\n+            {\n+                0x02, 0x01, 0x00, 0x00, // version, opcode\n+                0x00, 0x00, 0x03, 0xe8, // lifetime\n+                0x2a, 0x10, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, // internal IP\n+                0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, // nonce\n+                0x06, 0x00, 0x00, 0x00, // protocol (TCP), reserved\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, suggested external port\n+                0x2a, 0x10, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, // suggested external IP\n+            }, 0\n+        },\n+        {\n+            2001ms, TestOp::NOP, // Takes longer to respond than timeout of 2000ms\n+            {}, 0\n+        },\n+        {\n+            0ms, TestOp::SEND, // Repeated send (try 2)\n+            {\n+                0x02, 0x01, 0x00, 0x00, // version, opcode\n+                0x00, 0x00, 0x03, 0xe8, // lifetime\n+                0x2a, 0x10, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, // internal IP\n+                0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, // nonce\n+                0x06, 0x00, 0x00, 0x00, // protocol (TCP), reserved\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, suggested external port\n+                0x2a, 0x10, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, // suggested external IP\n+            }, 0\n+        },\n+        {\n+            200ms, TestOp::RECV, // This time we're in time\n+            {\n+                0x02, 0x81, 0x00, 0x00, // version, opcode, result success\n+                0x00, 0x00, 0x01, 0xf4, // granted lifetime\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n+                0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, // nonce\n+                0x06, 0x00, 0x00, 0x00, // protocol (TCP), reserved\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, assigned external port\n+                0x2a, 0x10, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, // suggested external IP\n+            }, 0\n+        },\n+    };\n+    CreateSock = [this, &script](int domain, int type, int protocol) {\n+        if (domain == AF_INET6 && type == SOCK_DGRAM && protocol == IPPROTO_UDP) return std::make_unique<PCPTestSock>(default_local_ipv6, default_gateway_ipv6, script);\n+        return std::unique_ptr<PCPTestSock>();\n+    };\n+\n+    ASSERT_DEBUG_LOG(\"pcp: Retrying (1)\");\n+    ASSERT_DEBUG_LOG(\"pcp: Timeout\");\n+\n+    auto res = PCPRequestPortMap(TEST_NONCE, default_gateway_ipv6, default_local_ipv6, 1234, 1000, 2, 2000ms);\n+\n+    BOOST_CHECK(std::get_if<MappingResult>(&res));\n+}\n+\n+// PCP IPv4 failure (no resources).\n+BOOST_AUTO_TEST_CASE(pcp_ipv4_fail_no_resources)\n+{\n+    const std::vector<TestOp> script{\n+        {\n+            0ms, TestOp::SEND,\n+            {\n+                0x02, 0x01, 0x00, 0x00, // version, opcode\n+                0x00, 0x00, 0x03, 0xe8, // lifetime\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xa8, 0x00, 0x06, // internal IP\n+                0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, // nonce\n+                0x06, 0x00, 0x00, 0x00, // protocol (TCP), reserved\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, suggested external port\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, // suggested external IP\n+            }, 0\n+        },\n+        {\n+            500ms, TestOp::RECV,\n+            {\n+                0x02, 0x81, 0x00, 0x08, // version, opcode, result 0x08: no resources\n+                0x00, 0x00, 0x00, 0x00, // granted lifetime\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n+                0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, // nonce\n+                0x06, 0x00, 0x00, 0x00, // protocol (TCP), reserved\n+                0x04, 0xd2, 0x00, 0x00, // internal port, assigned external port\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // assigned external IP\n+            }, 0\n+        },\n+    };\n+    CreateSock = [this, &script](int domain, int type, int protocol) {\n+        if (domain == AF_INET && type == SOCK_DGRAM && protocol == IPPROTO_UDP) return std::make_unique<PCPTestSock>(default_local_ipv4, default_gateway_ipv4, script);\n+        return std::unique_ptr<PCPTestSock>();\n+    };\n+\n+    auto res = PCPRequestPortMap(TEST_NONCE, default_gateway_ipv4, bind_any_ipv4, 1234, 1000, 3, 1000ms);\n+\n+    MappingError* err = std::get_if<MappingError>(&res);\n+    BOOST_REQUIRE(err);\n+    BOOST_CHECK_EQUAL(*err, MappingError::NO_RESOURCES);\n+}\n+\n+// PCP IPv4 failure (test NATPMP downgrade scenario).\n+BOOST_AUTO_TEST_CASE(pcp_ipv4_fail_unsupported_version)\n+{\n+    const std::vector<TestOp> script{\n+        {\n+            0ms, TestOp::SEND,\n+            {\n+                0x02, 0x01, 0x00, 0x00, // version, opcode\n+                0x00, 0x00, 0x03, 0xe8, // lifetime\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xa8, 0x00, 0x06, // internal IP\n+                0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, // nonce\n+                0x06, 0x00, 0x00, 0x00, // protocol (TCP), reserved\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, suggested external port\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, // suggested external IP\n+            }, 0\n+        },\n+        {\n+            500ms, TestOp::RECV,\n+            {\n+                0x00, 0x81, 0x00, 0x01, // version, opcode, result 0x01: unsupported version\n+                0x00, 0x00, 0x00, 0x00,\n+            }, 0\n+        },\n+    };\n+    CreateSock = [this, &script](int domain, int type, int protocol) {\n+        if (domain == AF_INET && type == SOCK_DGRAM && protocol == IPPROTO_UDP) return std::make_unique<PCPTestSock>(default_local_ipv4, default_gateway_ipv4, script);\n+        return std::unique_ptr<PCPTestSock>();\n+    };\n+\n+    auto res = PCPRequestPortMap(TEST_NONCE, default_gateway_ipv4, bind_any_ipv4, 1234, 1000, 3, 1000ms);\n+\n+    MappingError* err = std::get_if<MappingError>(&res);\n+    BOOST_REQUIRE(err);\n+    BOOST_CHECK_EQUAL(*err, MappingError::UNSUPP_VERSION);\n+}\n+\n+// NAT-PMP IPv4 protocol error scenarii.\n+BOOST_AUTO_TEST_CASE(natpmp_protocol_error)\n+{\n+    // First scenario: non-0 result code when requesting external IP.\n+    std::vector<TestOp> script{\n+        {\n+            0ms, TestOp::SEND,\n+            {\n+                0x00, 0x00, // version, opcode (request external IP)\n+            }, 0\n+        },\n+        {\n+            2ms, TestOp::RECV,\n+            {\n+                0x00, 0x80, 0x00, 0x42, // version, opcode (external IP), result code (*NOT* success)\n+                0x66, 0xfd, 0xa1, 0xee, // seconds sinds start of epoch\n+                0x01, 0x02, 0x03, 0x04, // external IP address\n+            }, 0\n+        },\n+    };\n+    CreateSock = [this, &script](int domain, int type, int protocol) {\n+        if (domain == AF_INET && type == SOCK_DGRAM && protocol == IPPROTO_UDP) return std::make_unique<PCPTestSock>(default_local_ipv4, default_gateway_ipv4, script);\n+        return std::unique_ptr<PCPTestSock>();\n+    };\n+\n+    auto res = NATPMPRequestPortMap(default_gateway_ipv4, 1234, 1000, 1, 200ms);\n+\n+    MappingError* err = std::get_if<MappingError>(&res);\n+    BOOST_REQUIRE(err);\n+    BOOST_CHECK_EQUAL(*err, MappingError::PROTOCOL_ERROR);\n+\n+    // First scenario: non-0 result code when requesting port mapping.\n+    script = {\n+        {\n+            0ms, TestOp::SEND,\n+            {\n+                0x00, 0x00, // version, opcode (request external IP)\n+            }, 0\n+        },\n+        {\n+            2ms, TestOp::RECV,\n+            {\n+                0x00, 0x80, 0x00, 0x00, // version, opcode (external IP), result code (success)\n+                0x66, 0xfd, 0xa1, 0xee, // seconds sinds start of epoch\n+                0x01, 0x02, 0x03, 0x04, // external IP address\n+            }, 0\n+        },\n+        {\n+            0ms, TestOp::SEND,\n+            {\n+                0x00, 0x02, 0x00, 0x00, // version, opcode (request map TCP)\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, suggested external port\n+                0x00, 0x00, 0x03, 0xe8, // requested mapping lifetime in seconds\n+            }, 0\n+        },\n+        {\n+            2ms, TestOp::RECV,\n+            {\n+                0x00, 0x82, 0x00, 0x43, // version, opcode (mapped TCP)\n+                0x66, 0xfd, 0xa1, 0xee, // seconds sinds start of epoch\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, mapped external port\n+                0x00, 0x00, 0x01, 0xf4, // mapping lifetime in seconds\n+            }, 0\n+        },\n+    };\n+    CreateSock = [this, &script](int domain, int type, int protocol) {\n+        if (domain == AF_INET && type == SOCK_DGRAM && protocol == IPPROTO_UDP) return std::make_unique<PCPTestSock>(default_local_ipv4, default_gateway_ipv4, script);\n+        return std::unique_ptr<PCPTestSock>();\n+    };\n+\n+    res = NATPMPRequestPortMap(default_gateway_ipv4, 1234, 1000, 1, 200ms);\n+\n+    err = std::get_if<MappingError>(&res);\n+    BOOST_REQUIRE(err);\n+    BOOST_CHECK_EQUAL(*err, MappingError::PROTOCOL_ERROR);\n+}\n+\n+// PCP IPv4 protocol error scenario.\n+BOOST_AUTO_TEST_CASE(pcp_protocol_error)\n+{\n+    const std::vector<TestOp> script{\n+        {\n+            0ms, TestOp::SEND,\n+            {\n+                0x02, 0x01, 0x00, 0x00, // version, opcode\n+                0x00, 0x00, 0x03, 0xe8, // lifetime\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xa8, 0x00, 0x06, // internal IP\n+                0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, // nonce\n+                0x06, 0x00, 0x00, 0x00, // protocol (TCP), reserved\n+                0x04, 0xd2, 0x04, 0xd2, // internal port, suggested external port\n+                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, // suggested external IP\n+            }, 0\n+        },\n+        {\n+            250ms, TestOp::RECV, // 250ms delay before answer\n+            {\n+                0x02, 0x81, 0x00, 0x42, // version, opcode, result success",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 678,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit\r\n```suggestion\r\n                0x02, 0x81, 0x00, 0x42, // version, opcode, result error\r\n```",
      "created_at": "2025-01-15T18:38:40Z",
      "updated_at": "2025-01-15T21:30:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1917172067",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1917172067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 678,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1917273199",
      "pull_request_review_id": 2553493851,
      "id": 1917273199,
      "node_id": "PRRC_kwDOABII585yR0Rv",
      "diff_hunk": "@@ -0,0 +1,701 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+\n+    //! Injected error.\n+    //! Set this field to a non-zero value to return the errno code from send or receive operation.\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock final : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Isn't this redundant with `~Sock`?",
      "created_at": "2025-01-15T20:09:26Z",
      "updated_at": "2025-01-15T21:30:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1917273199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1917273199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918532671",
      "pull_request_review_id": 2556100197,
      "id": 1918532671,
      "node_id": "PRRC_kwDOABII585yWnw_",
      "diff_hunk": "@@ -0,0 +1,701 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+\n+    //! Injected error.\n+    //! Set this field to a non-zero value to return the errno code from send or receive operation.\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock final : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }\n+\n+    PCPTestSock& operator=(Sock&& other) override\n+    {\n+        assert(false && \"Move of Sock into MockSock not allowed.\");\n+        return *this;\n+    }\n+\n+    ssize_t Send(const void* data, size_t len, int) const override {\n+        if (!m_connected) return -1;\n+        Span in_pkt = Span(static_cast<const uint8_t*>(data), len);\n+        if (AtEndOfScript() || CurOp().op != TestOp::SEND) {\n+            // Ignore sends after end of script, or sends when we expect a receive.\n+            FailScript();\n+            return len;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        if (CurOp().data.empty() || std::ranges::equal(CurOp().data, in_pkt)) {\n+            AdvanceOp();\n+        } else {\n+            // Wrong send, fail script\n+            FailScript();\n+        }\n+        return len;\n+    }\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override\n+    {\n+        if (!m_connected || AtEndOfScript() || CurOp().op != TestOp::RECV || m_time_left != 0s) {\n+            return -1;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        const auto &recv_pkt = CurOp().data;\n+        const size_t consume_bytes{std::min(len, recv_pkt.size())};\n+        std::memcpy(buf, recv_pkt.data(), consume_bytes);\n+        if ((flags & MSG_PEEK) == 0) {\n+            AdvanceOp();\n+        }\n+        return consume_bytes;\n+    }\n+\n+    int Connect(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len) && service == CService(m_gateway_ip, 5351)) {\n+            if (m_bound.IsBindAny()) { // If bind-any, bind to local ip.\n+                m_bound = CService(m_local_ip, 0);\n+            }\n+            if (m_bound.GetPort() == 0) { // If no port assigned, assign port 1.\n+                m_bound = CService(m_bound, 1);\n+            }\n+            m_connected = true;\n+            return 0;\n+        }\n+        return -1;\n+    }\n+\n+    int Bind(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len)) {\n+            // Can only bind to one of our local ips\n+            if (!service.IsBindAny() && service != m_local_ip) {\n+                return -1;\n+            }\n+            m_bound = service;\n+        }\n+        return 0;",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 161,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "in_reply_to_id": 1917096066,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, failing `Bind` when the network address fails to set makes more sense.",
      "created_at": "2025-01-16T13:20:28Z",
      "updated_at": "2025-01-16T13:20:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1918532671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918532671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": 154,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918533974",
      "pull_request_review_id": 2556103117,
      "id": 1918533974,
      "node_id": "PRRC_kwDOABII585yWoFW",
      "diff_hunk": "@@ -0,0 +1,701 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+\n+    //! Injected error.\n+    //! Set this field to a non-zero value to return the errno code from send or receive operation.\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock final : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }\n+\n+    PCPTestSock& operator=(Sock&& other) override\n+    {\n+        assert(false && \"Move of Sock into MockSock not allowed.\");",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "in_reply_to_id": 1917096949,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Whoops, so clear where i copied the code from now 😄 ",
      "created_at": "2025-01-16T13:21:06Z",
      "updated_at": "2025-01-16T13:21:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1918533974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918533974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918551760",
      "pull_request_review_id": 2556140944,
      "id": 1918551760,
      "node_id": "PRRC_kwDOABII585yWsbQ",
      "diff_hunk": "@@ -0,0 +1,701 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+\n+    //! Injected error.\n+    //! Set this field to a non-zero value to return the errno code from send or receive operation.\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock final : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }\n+\n+    PCPTestSock& operator=(Sock&& other) override\n+    {\n+        assert(false && \"Move of Sock into MockSock not allowed.\");\n+        return *this;\n+    }\n+\n+    ssize_t Send(const void* data, size_t len, int) const override {\n+        if (!m_connected) return -1;\n+        Span in_pkt = Span(static_cast<const uint8_t*>(data), len);\n+        if (AtEndOfScript() || CurOp().op != TestOp::SEND) {\n+            // Ignore sends after end of script, or sends when we expect a receive.\n+            FailScript();\n+            return len;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        if (CurOp().data.empty() || std::ranges::equal(CurOp().data, in_pkt)) {\n+            AdvanceOp();\n+        } else {\n+            // Wrong send, fail script\n+            FailScript();\n+        }\n+        return len;\n+    }\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override\n+    {\n+        if (!m_connected || AtEndOfScript() || CurOp().op != TestOp::RECV || m_time_left != 0s) {\n+            return -1;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        const auto &recv_pkt = CurOp().data;\n+        const size_t consume_bytes{std::min(len, recv_pkt.size())};\n+        std::memcpy(buf, recv_pkt.data(), consume_bytes);\n+        if ((flags & MSG_PEEK) == 0) {\n+            AdvanceOp();\n+        }\n+        return consume_bytes;\n+    }\n+\n+    int Connect(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len) && service == CService(m_gateway_ip, 5351)) {\n+            if (m_bound.IsBindAny()) { // If bind-any, bind to local ip.\n+                m_bound = CService(m_local_ip, 0);\n+            }\n+            if (m_bound.GetPort() == 0) { // If no port assigned, assign port 1.\n+                m_bound = CService(m_bound, 1);\n+            }\n+            m_connected = true;\n+            return 0;\n+        }\n+        return -1;\n+    }\n+\n+    int Bind(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len)) {\n+            // Can only bind to one of our local ips\n+            if (!service.IsBindAny() && service != m_local_ip) {\n+                return -1;\n+            }\n+            m_bound = service;\n+        }\n+        return 0;\n+    }\n+\n+    int Listen(int) const override { return -1; }\n+\n+    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override\n+    {\n+        return nullptr;\n+    };\n+\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n+    {\n+        std::memset(opt_val, 0x0, *opt_len);",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 173,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "in_reply_to_id": 1917105856,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For sake of completeness. i think it's uglier to fall through to the parent class, which would do an actual `getsockopt` call on an invalid socket if in the future the called code would use `GetSockOpt`.\r\n\r\ni kind of wish there was a purely virtual `BaseSock` and `PosixSock` and `TestSock` etc were a subclass of this, so every subclass would be forced to implement everything.\r\n\r\nCould replace with an `assert(not implemented)` stub. But it's just one line...",
      "created_at": "2025-01-16T13:28:25Z",
      "updated_at": "2025-01-16T13:35:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1918551760",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918551760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918567089",
      "pull_request_review_id": 2556169787,
      "id": 1918567089,
      "node_id": "PRRC_kwDOABII585yWwKx",
      "diff_hunk": "@@ -0,0 +1,701 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+\n+    //! Injected error.\n+    //! Set this field to a non-zero value to return the errno code from send or receive operation.\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock final : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "in_reply_to_id": 1917273199,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes. It makes no sense, it doesn't even use `m_socket`.\r\ni copied this destructor from `StaticContentsSock`, which i think also does it redundantly.",
      "created_at": "2025-01-16T13:34:23Z",
      "updated_at": "2025-01-16T13:34:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1918567089",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918567089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918601053",
      "pull_request_review_id": 2556230374,
      "id": 1918601053,
      "node_id": "PRRC_kwDOABII585yW4dd",
      "diff_hunk": "@@ -0,0 +1,701 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+\n+    //! Injected error.\n+    //! Set this field to a non-zero value to return the errno code from send or receive operation.\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock final : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { m_socket = INVALID_SOCKET; }\n+\n+    PCPTestSock& operator=(Sock&& other) override\n+    {\n+        assert(false && \"Move of Sock into MockSock not allowed.\");\n+        return *this;\n+    }\n+\n+    ssize_t Send(const void* data, size_t len, int) const override {\n+        if (!m_connected) return -1;\n+        Span in_pkt = Span(static_cast<const uint8_t*>(data), len);\n+        if (AtEndOfScript() || CurOp().op != TestOp::SEND) {\n+            // Ignore sends after end of script, or sends when we expect a receive.\n+            FailScript();\n+            return len;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        if (CurOp().data.empty() || std::ranges::equal(CurOp().data, in_pkt)) {\n+            AdvanceOp();\n+        } else {\n+            // Wrong send, fail script\n+            FailScript();\n+        }\n+        return len;\n+    }\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override\n+    {\n+        if (!m_connected || AtEndOfScript() || CurOp().op != TestOp::RECV || m_time_left != 0s) {\n+            return -1;\n+        }\n+        if (CurOp().error) return -1; // Inject failure\n+        const auto &recv_pkt = CurOp().data;\n+        const size_t consume_bytes{std::min(len, recv_pkt.size())};\n+        std::memcpy(buf, recv_pkt.data(), consume_bytes);\n+        if ((flags & MSG_PEEK) == 0) {\n+            AdvanceOp();\n+        }\n+        return consume_bytes;\n+    }\n+\n+    int Connect(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len) && service == CService(m_gateway_ip, 5351)) {\n+            if (m_bound.IsBindAny()) { // If bind-any, bind to local ip.\n+                m_bound = CService(m_local_ip, 0);\n+            }\n+            if (m_bound.GetPort() == 0) { // If no port assigned, assign port 1.\n+                m_bound = CService(m_bound, 1);\n+            }\n+            m_connected = true;\n+            return 0;\n+        }\n+        return -1;\n+    }\n+\n+    int Bind(const sockaddr* sa, socklen_t sa_len) const override {\n+        CService service;\n+        if (service.SetSockAddr(sa, sa_len)) {\n+            // Can only bind to one of our local ips\n+            if (!service.IsBindAny() && service != m_local_ip) {\n+                return -1;\n+            }\n+            m_bound = service;\n+        }\n+        return 0;\n+    }\n+\n+    int Listen(int) const override { return -1; }\n+\n+    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override\n+    {\n+        return nullptr;\n+    };\n+\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n+    {\n+        std::memset(opt_val, 0x0, *opt_len);",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 173,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "9cd85281c6cc8d3fb01930e53109fae97a108dd8",
      "in_reply_to_id": 1917105856,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok, will just make it do nothing and return -1. That's just as valid, no need fo the memset.",
      "created_at": "2025-01-16T13:56:35Z",
      "updated_at": "2025-01-16T13:56:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1918601053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918601053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": 171,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918705629",
      "pull_request_review_id": 2556410459,
      "id": 1918705629,
      "node_id": "PRRC_kwDOABII585yXR_d",
      "diff_hunk": "@@ -0,0 +1,701 @@\n+// Copyright (c) 2024 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <common/pcp.h>\n+#include <netbase.h>\n+#include <test/util/logging.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <algorithm>\n+#include <deque>\n+\n+using namespace std::literals;\n+\n+/// UDP test server operation.\n+struct TestOp {\n+    std::chrono::milliseconds delay;\n+    enum Op {\n+        SEND, // Expect send (with optional data)\n+        RECV, // Expect receive (with data)\n+        NOP,  // Just delay\n+    } op;\n+    std::vector<uint8_t> data;\n+\n+    //! Injected error.\n+    //! Set this field to a non-zero value to return the errno code from send or receive operation.\n+    int error;\n+\n+    TestOp(std::chrono::milliseconds delay_in, Op op_in, const std::vector<uint8_t> &data_in, int error_in):\n+        delay(delay_in), op(op_in), data(data_in), error(error_in) {}\n+};\n+\n+/// Save the value of CreateSock and restore when the test ends.\n+class PCPTestingSetup : public BasicTestingSetup\n+{\n+public:\n+    explicit PCPTestingSetup(const ChainType chainType = ChainType::MAIN,\n+                             TestOpts opts = {})\n+        : BasicTestingSetup{chainType, opts},\n+          m_create_sock_orig{CreateSock}\n+    {\n+        const std::optional<CService> local_ipv4{Lookup(\"192.168.0.6\", 1, false)};\n+        const std::optional<CService> local_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:1234:5678:9abc\", 1, false)};\n+        const std::optional<CService> gateway_ipv4{Lookup(\"192.168.0.1\", 1, false)};\n+        const std::optional<CService> gateway_ipv6{Lookup(\"2a10:1234:5678:9abc:def0:0000:0000:0000\", 1, false)};\n+        BOOST_REQUIRE(local_ipv4 && local_ipv6 && gateway_ipv4 && gateway_ipv6);\n+        default_local_ipv4 = *local_ipv4;\n+        default_local_ipv6 = *local_ipv6;\n+        default_gateway_ipv4 = *gateway_ipv4;\n+        default_gateway_ipv6 = *gateway_ipv6;\n+\n+        struct in_addr inaddr_any;\n+        inaddr_any.s_addr = htonl(INADDR_ANY);\n+        bind_any_ipv4 = CNetAddr(inaddr_any);\n+    }\n+\n+    ~PCPTestingSetup()\n+    {\n+        CreateSock = m_create_sock_orig;\n+        MockableSteadyClock::ClearMockTime();\n+    }\n+\n+    // Default testing nonce.\n+    static constexpr PCPMappingNonce TEST_NONCE{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc};\n+    // Default network addresses.\n+    CNetAddr default_local_ipv4;\n+    CNetAddr default_local_ipv6;\n+    CNetAddr default_gateway_ipv4;\n+    CNetAddr default_gateway_ipv6;\n+    // IPv4 bind\n+    CNetAddr bind_any_ipv4;\n+private:\n+    const decltype(CreateSock) m_create_sock_orig;\n+};\n+\n+/** Simple scripted UDP server emulation for testing.\n+ */\n+class PCPTestSock final : public Sock\n+{\n+public:\n+    // Note: we awkwardly mark all methods as const, and properties as mutable,\n+    // because Sock expects all networking calls to be const.\n+    explicit PCPTestSock(const CNetAddr &local_ip, const CNetAddr &gateway_ip, const std::vector<TestOp> &script)\n+        : Sock{INVALID_SOCKET},\n+          m_script(script),\n+          m_local_ip(local_ip),\n+          m_gateway_ip(gateway_ip)\n+    {\n+        ElapseTime(std::chrono::seconds(0)); // start mocking steady time\n+        PrepareOp();\n+    }\n+\n+    ~PCPTestSock() override { }",
      "path": "src/test/pcp_tests.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "0f716f28896c6edfcd4e2a2b25c88f478a029c7b",
      "original_commit_id": "2b4e54d4b31e78aafc71b8b908a38798085e6fb4",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "clang-tidy complains about this:\r\n> [09:51:32.084] [584/666][11.5s] clang-tidy-19 -p=/ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu -quiet -load=/tidy-build/libbitcoin-tidy.so /ci_container_base/src/test/pcp_tests.cpp\r\n[09:51:32.084] /ci_container_base/src/test/pcp_tests.cpp:96:5: error: use '= default' to define a trivial destructor [modernize-use-equals-default,-warnings-as-errors]\r\n[09:51:32.084]    96 |     ~PCPTestSock() override { }\r\n[09:51:32.084]       |     ^                       ~~~\r\n[09:51:32.084]       |                             = default;\r\n[09:51:32.084] 973 warnings generated.",
      "created_at": "2025-01-16T14:55:10Z",
      "updated_at": "2025-01-16T14:55:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/31022#discussion_r1918705629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1918705629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/31022"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    }
  ]
}