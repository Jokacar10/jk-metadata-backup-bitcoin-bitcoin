{
  "type": "issue",
  "issue": {
    "id": 3496102450,
    "node_id": "I_kwDOABII587QYkoy",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/33575",
    "number": 33575,
    "state": "open",
    "state_reason": null,
    "title": "RFC: Cancelling waitNext calls in the IPC mining interface",
    "body": "It seems that the IPC mining interface needs to provide some way to cancel [`BlockTemplate::waitNext`](https://github.com/bitcoin/bitcoin/blob/b510893d00760083ac36948747aa6ebd84656192/src/interfaces/mining.h#L63-L74) calls. This should not be hard to implement, but there are a few approaches that could be taken and it would be useful to know which would work best for callers. Context:\n\n---\n\n _Originally posted by @plebhash in [#33554](https://github.com/bitcoin/bitcoin/issues/33554#issuecomment-3381673850)_:\n\n> the thing is, I still need to cater for incoming Sv2 `CoinbaseOutputConstraints` messages, and whenever that arrives, I need to make sure the `BlockTemplate` (or `TemplateIpcClient` as I'm aliasing on the rust code) that's used to kickstart the next `waitNext` loops has the correct `block_reserved_weight` and `max_additional_sigops` as defined on the Sv2 message.\n\n---\n\nDifferent ways I could think of doing this:\n\n1. Have `BlockTemplate` destructor cancel the `waitNext` call and have it return null right away.\n2. Add a new `BlockTemplate::interruptWait()` to be able to interrupt `waitNext()` without destroying the template.\n3. Make `Mining::createNewBlock()` cancel any pending `waitNext()` calls.\n4. Use Cap'n Proto's cancellation mechanism. Rust code could just drop the waitNext() promise. C++ `waitNext()` method could have a new `interfaces::Cancel` argument that would let it ask if the request was cancelled and/or register a cancellation callback.\n\nIf main use-cases for cancelling waitNext methods are when needing to specify changed `BlockCreateOptions`, and when shutting down, approach (1) could be sufficient, because in both of these cases the client will be discarding the `BlockTemplate` anyway.\n\nBut maybe a new `BlockTemplate::interruptWait()` method (2) could be useful for other reasons and we should add that method too?\n\nApproach (3) making other IPC calls implicitly cancel pending waitNext() calls, seems like it could make mining interface more annoying to use, so I think it is probably not a good idea, but wanted to mention it as an alternative.\n\nApproach (4) could be interesting, and would be the most general approach but would be more work than other approaches to implement. (The implementation would need to modify the `mp.Context` [`PassField`](https://github.com/bitcoin-core/libmultiprocess/blob/a4f92969649018ca70f949a09148bccfeaecd99a/include/mp/type-context.h#L57) implementation to call `Promise::attach` on the promise it returns to be notified when the promise is discarded, as described https://capnproto.org/cxxrpc.html#cancellation and https://github.com/capnproto/capnproto/blob/v2/kjdoc/tour.md#cancellation)",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 3,
    "created_at": "2025-10-08T16:20:21Z",
    "updated_at": "2025-10-08T19:52:15Z"
  },
  "events": [
    {
      "event": "mentioned",
      "id": 20167840492,
      "node_id": "MEE_lADOABII587QYkoyzwAAAASyGNLs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20167840492",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T16:20:22Z"
    },
    {
      "event": "subscribed",
      "id": 20167840515,
      "node_id": "SE_lADOABII587QYkoyzwAAAASyGNMD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20167840515",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T16:20:22Z"
    },
    {
      "event": "commented",
      "id": 3382367189,
      "node_id": "IC_kwDOABII587JmtPV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3382367189",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T16:36:08Z",
      "updated_at": "2025-10-08T16:54:33Z",
      "author_association": "NONE",
      "body": "number 1 would be a bit prohibitive on the Sv2 implementations we're working on\n\nwe need to stop `waitNext` every time the coinbase output constratints change, but that doesn't mean that a solution associatated with past constraints couldn't still arrive\n\nso we still need to keep a reference to every \"live\" `BlockTemplate` in memory, at least until a chain tip update\n\nif we're forced to call `destroy` just to stop `waitNext`, that would lose context and forbid us from submitting this potentially valid solution",
      "user": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3382367189",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    },
    {
      "event": "commented",
      "id": 3382453186,
      "node_id": "IC_kwDOABII587JnCPC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3382453186",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T16:57:45Z",
      "updated_at": "2025-10-08T16:57:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "> if we're forced to call `destroy` just to stop `waitNext`, that would lose context and forbid us from submitting this potentially valid solution\n\nMakes sense. So it sounds like you would want a `BlockTemplate::interruptWait()` method?\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3382453186",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    },
    {
      "event": "commented",
      "id": 3383006863,
      "node_id": "IC_kwDOABII587JpJaP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3383006863",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T19:51:33Z",
      "updated_at": "2025-10-08T19:52:15Z",
      "author_association": "NONE",
      "body": "tbh option 3 feels like the lowest hanging fruit on our side, because it would require basically no changes from the current implementation (aside from the instantiation of new server threads, which is only a temporary workaround for the issues we're trying to mitigate here).\n\nbasically the arrival of `CoinbaseOutputConstraints` triggers the following:\n- breaking the loop that monitors for `waitNext` responses\n- instantiating a `BlockTemplate` via `Mining::createNewBlock()` under new coinbase constraints\n- instantiating a new dedicated server thread (which as stated above, is only a temporary workaround)\n- spawning a new loop to monitor for `waitNext` responses\n\nfor option 2, I'd have to add some extra steps before breaking the loop, and perhaps some synchronization logic to make sure we do `Mining::createNewBlock()` and spawn the new loop only after `BlockTemplate::interruptWait()` has finished\n\nwith option 3, the flow is pretty much the same to what we already have, and whenever the new `waitNext` loop is spawned, the dedicated thread is already going to be free\n\n---\n\nbut I do notice that `Mining::createNewBlock()` doesn't take `:Proxy.Context` as a parameter, wouldn't that be needed in order to implement option 3?\n\n(this is a very naive quesiton, perhaps it makes no sense at all)",
      "user": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3383006863",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    }
  ]
}