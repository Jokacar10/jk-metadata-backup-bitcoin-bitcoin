{
  "type": "issue",
  "issue": {
    "id": 3496102450,
    "node_id": "I_kwDOABII587QYkoy",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/33575",
    "number": 33575,
    "state": "open",
    "state_reason": null,
    "title": "RFC: Cancelling waitNext calls in the IPC mining interface",
    "body": "It seems that the IPC mining interface needs to provide some way to cancel [`BlockTemplate::waitNext`](https://github.com/bitcoin/bitcoin/blob/b510893d00760083ac36948747aa6ebd84656192/src/interfaces/mining.h#L63-L74) calls. This should not be hard to implement, but there are a few approaches that could be taken and it would be useful to know which would work best for callers. Context:\n\n---\n\n _Originally posted by @plebhash in [#33554](https://github.com/bitcoin/bitcoin/issues/33554#issuecomment-3381673850)_:\n\n> the thing is, I still need to cater for incoming Sv2 `CoinbaseOutputConstraints` messages, and whenever that arrives, I need to make sure the `BlockTemplate` (or `TemplateIpcClient` as I'm aliasing on the rust code) that's used to kickstart the next `waitNext` loops has the correct `block_reserved_weight` and `max_additional_sigops` as defined on the Sv2 message.\n\n---\n\nDifferent ways I could think of doing this:\n\n1. Have `BlockTemplate` destructor cancel the `waitNext` call and have it return null right away.\n2. Add a new `BlockTemplate::interruptWait()` to be able to interrupt `waitNext()` without destroying the template.\n3. Make `Mining::createNewBlock()` cancel any pending `waitNext()` calls.\n4. Use Cap'n Proto's cancellation mechanism. Rust code could just drop the waitNext() promise. C++ `waitNext()` method could have a new `interfaces::Cancel` argument that would let it ask if the request was cancelled and/or register a cancellation callback.\n\nIf main use-cases for cancelling waitNext methods are when needing to specify changed `BlockCreateOptions`, and when shutting down, approach (1) could be sufficient, because in both of these cases the client will be discarding the `BlockTemplate` anyway.\n\nBut maybe a new `BlockTemplate::interruptWait()` method (2) could be useful for other reasons and we should add that method too?\n\nApproach (3) making other IPC calls implicitly cancel pending waitNext() calls, seems like it could make mining interface more annoying to use, so I think it is probably not a good idea, but wanted to mention it as an alternative.\n\nApproach (4) could be interesting, and would be the most general approach but would be more work than other approaches to implement. (The implementation would need to modify the `mp.Context` [`PassField`](https://github.com/bitcoin-core/libmultiprocess/blob/a4f92969649018ca70f949a09148bccfeaecd99a/include/mp/type-context.h#L57) implementation to call `Promise::attach` on the promise it returns to be notified when the promise is discarded, as described https://capnproto.org/cxxrpc.html#cancellation and https://github.com/capnproto/capnproto/blob/v2/kjdoc/tour.md#cancellation)",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 9,
    "created_at": "2025-10-08T16:20:21Z",
    "updated_at": "2025-10-09T19:49:46Z"
  },
  "events": [
    {
      "event": "mentioned",
      "id": 20167840492,
      "node_id": "MEE_lADOABII587QYkoyzwAAAASyGNLs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20167840492",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T16:20:22Z"
    },
    {
      "event": "subscribed",
      "id": 20167840515,
      "node_id": "SE_lADOABII587QYkoyzwAAAASyGNMD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/20167840515",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T16:20:22Z"
    },
    {
      "event": "commented",
      "id": 3382367189,
      "node_id": "IC_kwDOABII587JmtPV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3382367189",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T16:36:08Z",
      "updated_at": "2025-10-08T16:54:33Z",
      "author_association": "NONE",
      "body": "number 1 would be a bit prohibitive on the Sv2 implementations we're working on\n\nwe need to stop `waitNext` every time the coinbase output constratints change, but that doesn't mean that a solution associatated with past constraints couldn't still arrive\n\nso we still need to keep a reference to every \"live\" `BlockTemplate` in memory, at least until a chain tip update\n\nif we're forced to call `destroy` just to stop `waitNext`, that would lose context and forbid us from submitting this potentially valid solution",
      "user": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3382367189",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    },
    {
      "event": "commented",
      "id": 3382453186,
      "node_id": "IC_kwDOABII587JnCPC",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3382453186",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T16:57:45Z",
      "updated_at": "2025-10-08T16:57:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "> if we're forced to call `destroy` just to stop `waitNext`, that would lose context and forbid us from submitting this potentially valid solution\n\nMakes sense. So it sounds like you would want a `BlockTemplate::interruptWait()` method?\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3382453186",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    },
    {
      "event": "commented",
      "id": 3383006863,
      "node_id": "IC_kwDOABII587JpJaP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3383006863",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T19:51:33Z",
      "updated_at": "2025-10-08T19:52:15Z",
      "author_association": "NONE",
      "body": "tbh option 3 feels like the lowest hanging fruit on our side, because it would require basically no changes from the current implementation (aside from the instantiation of new server threads, which is only a temporary workaround for the issues we're trying to mitigate here).\n\nbasically the arrival of `CoinbaseOutputConstraints` triggers the following:\n- breaking the loop that monitors for `waitNext` responses\n- instantiating a `BlockTemplate` via `Mining::createNewBlock()` under new coinbase constraints\n- instantiating a new dedicated server thread (which as stated above, is only a temporary workaround)\n- spawning a new loop to monitor for `waitNext` responses\n\nfor option 2, I'd have to add some extra steps before breaking the loop, and perhaps some synchronization logic to make sure we do `Mining::createNewBlock()` and spawn the new loop only after `BlockTemplate::interruptWait()` has finished\n\nwith option 3, the flow is pretty much the same to what we already have, and whenever the new `waitNext` loop is spawned, the dedicated thread is already going to be free\n\n---\n\nbut I do notice that `Mining::createNewBlock()` doesn't take `:Proxy.Context` as a parameter, wouldn't that be needed in order to implement option 3?\n\n(this is a very naive quesiton, perhaps it makes no sense at all)",
      "user": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3383006863",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    },
    {
      "event": "commented",
      "id": 3383146351,
      "node_id": "IC_kwDOABII587Jprdv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3383146351",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T20:38:27Z",
      "updated_at": "2025-10-08T20:38:27Z",
      "author_association": "NONE",
      "body": "oh sorry, just saw the remark saying that option 3 could have undesired consequences, I overlooked that on my first reading!\n\nso yeah option 3 is not necessarily my go-to\n\noption 2 would slightly increase complexity on rust side, but it seems perfectly doable\n\nand also after contemplating option 4, it also seems like a low hanging fruit on our side (even though it seems more complex to implement on C++ side)\n\nthat's because we already drop the `waitNext` promise once a `CoinbaseOutputConstraints` arrive... so if that led to the server also cancelling execution and freeing up the thread for new calls, that'd make everything smooth",
      "user": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3383146351",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    },
    {
      "event": "commented",
      "id": 3383290115,
      "node_id": "IC_kwDOABII587JqOkD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3383290115",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-08T21:24:09Z",
      "updated_at": "2025-10-08T21:24:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Good catch: [createNewBlock](https://github.com/bitcoin/bitcoin/blob/b510893d00760083ac36948747aa6ebd84656192/src/ipc/capnp/mining.capnp#L20C5-L20C19) (and checkBlock below it) really should take an `mp.Context` parameter. Without it, it's impossible to specify a worker thread for the calls to run on, so the calls wiill block the event loop thread while they execute, potentially affecting other calls and clients. This looks like another thing that should be fixed. But fixing it is more-or-less independent from implementing option 3. The `createNewBlock` implementation could be changed to cancel prior `waitNext` calls without needing to add a `context` parameter.\n\nI was a little surprised that from your perspective there might be significant difference between options 2 and 3. But maybe from your second comment the difference is not too significant. Option 2 should just require an extra `block.interruptWait()` call before the `mining.createNewBlock()` call. I should probably try to understand the rust client code and your description above a little better though. I'd think if the rust code is asynchronous, there should only be a single loop, and no need to break and spawn a new loop to handle waitNext responses. I would expect something like following very rough pseudocode:\n\n```python\nblock = None\nnext_block = mining.createNewBlock(create_options)\nsv2_msg = sv2_recv()\nwhile True:\n    done = await wait([next_block, sv2_msg])\n\n    if next_block in done:\n        block = (await next_block).result\n        sv2_send(block)\n        next_block = block.waitNext(threadmap.makeThread().result)\n\n    if sv2_msg in done:\n        msg = await sv2_msg\n        sv2_msg = sv2_recv()\n\n        if msg.type == \"coinbase_constraints\":\n            create_options.sigops = msg.sigops\n            if block: block.interruptWait()\n            next_block = mining.createNewBlock(create_options)\n        elif msg.type == \"found_solution\":\n             mining.submitSolution(...)\n```\n\nHopefully this is not too far off base.\n\nI guess next steps here would be to implement options 1 and 2. It's good to know option 4 has some appeal too, because that could be a followup, but it's would be relatively complicated to implement on the server side at the moment.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3383290115",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    },
    {
      "event": "commented",
      "id": 3386438916,
      "node_id": "IC_kwDOABII587J2PUE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3386438916",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-09T15:54:24Z",
      "updated_at": "2025-10-09T16:13:39Z",
      "author_association": "NONE",
      "body": "the [current implementation](https://github.com/plebhash/sv2-bitcoin-core/tree/2025-10-07-abort-proxy-io) has two concurrent loops:\n- one that [monitors for incoming Sv2 messages](https://github.com/plebhash/sv2-bitcoin-core/blob/054cd88deba028319220e7d852145e8958700623/src/lib.rs#L513)\n- one that [monitors `waitNext`](https://github.com/plebhash/sv2-bitcoin-core/blob/054cd88deba028319220e7d852145e8958700623/src/lib.rs#L282) (which is killed and restarted upon arrival of `CoinbaseOutputConstraints`)\n\nI guess in theory they could be unified into a single loop, however `interruptWait` would have to be called whenever **some** incoming Sv2 message arrived, not only if that was a `CoinbaseOutputConstraints`.\n\nthat's because under a single unified loop, the futures for incoming messages now would be \"competing\" with the `waitNext` promises, so we would drop the promise for `waitNext` whenever the Sv2 message arrived (for more details, see [`tokio::select!`](https://tokio.rs/tokio/tutorial/select)) \n\nso basically, every iteration of the loop would need to instantiate a brand new `waitNext` request (regardless of whether it's under different coinbase constraints or not)... and since it cannot conflict with the previous one, we'd have to always call `interruptWait` before the loop restarts\n\nit would require some refactoring, but at least in theory, under my current mental model, should be doable!",
      "user": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3386438916",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    },
    {
      "event": "commented",
      "id": 3386476128,
      "node_id": "IC_kwDOABII587J2YZg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3386476128",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-09T16:03:34Z",
      "updated_at": "2025-10-09T16:08:01Z",
      "author_association": "NONE",
      "body": "although I wonder about potentially undesirable round-trips that could be avoided by having separate loops?\n\nfor example, every time there's a new template, we send a `NewTemplate` message\n\nand for most Sv2 implementations that are on the receiving and of this message, we expect to get a Sv2 `RequestTransactionData` message right afterwards\n\nso every time there's a new template, we're essentially creating one \"useless\" `waitNext` request that's bound to be discarded right afterwards (with the extra round-trip of `interruptWait`)\n\n---\n\nby having two separate loops, we leave those concerns independent from eachother (with the penalty of having to coordinate the `interruptWait` with the re-spawns, on the relatively rare occasions in which it's actually needed)",
      "user": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3386476128",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    },
    {
      "event": "commented",
      "id": 3386691100,
      "node_id": "IC_kwDOABII587J3M4c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3386691100",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-09T16:51:35Z",
      "updated_at": "2025-10-09T16:51:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "re: https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3386438916\n\n> I guess in theory they could be unified into a single loop, however `interruptWait` would have to be called whenever **some** incoming Sv2 message arrived, not only if that was a `CoinbaseOutputConstraints`.\n\nThis is surprising to me, but it sounds like this justifies using two loops to avoid pointless `interruptWait` and `waitNext` churn.\n\nIn python pseudocode above, waitNext promise is stored in the `next_block` variable and isn't updated until the the promise resolves or there is a CoinbaseOutputConstraints message. But I could imagine rust code not letting the promise lifetime be managed as flexibly. Also I could image there being benefits to having two loops like maybe making it easier to write code that doesn't await unnecessarily. I'm sure using two loops make sense, it's just not what I might have expected naively.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3386691100",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    },
    {
      "event": "commented",
      "id": 3387283609,
      "node_id": "IC_kwDOABII587J5diZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3387283609",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-09T19:49:46Z",
      "updated_at": "2025-10-09T19:49:46Z",
      "author_association": "NONE",
      "body": "hmm thinking about it deeper, I guess I could simply save the `waitNext` future into a `mut` variable so it's still available across the unified loop iterations, and then replace it whenever it either returns or is cancelled (via `interruptWait`) due to `CoinbaseOutputConstraints`\n\nso I wouldn't say your original gut feeling is totally wrong!\n\nalthough I still appreciate the benefits of separating concerns into different loops... I guess I'll experiment with both approaches whenever `interruptWait` becomes available and see which one leads to the best overall result vs tradeoffs\n\nbut bottom line is that options 2, 3 and 4 are all perfectly viable solutions for our needs!",
      "user": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33575#issuecomment-3387283609",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33575"
    }
  ]
}