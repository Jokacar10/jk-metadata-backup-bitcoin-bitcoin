{
  "type": "issue",
  "issue": {
    "id": 2244613792,
    "node_id": "I_kwDOABII586Fyhag",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29884",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29884/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29884/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29884/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/29884",
    "number": 29884,
    "state": "closed",
    "state_reason": "completed",
    "title": "`test/streams_tests.cpp` fails to compile on SunOS / illumos",
    "body": "While testing bitcoin/bitcoin#29484, which seems not related to this bug, I've notice the following failure:\r\n```\r\n$ ./autogen.sh\r\n$ ./configure\r\n$ gmake -C src test/test_bitcoin\r\n...\r\n  CXX      test/test_bitcoin-streams_tests.o\r\nIn file included from test/streams_tests.cpp:5:\r\n./streams.h: In instantiation of 'SpanReader& SpanReader::operator>>(T&&) [with T = signed char&]':\r\ntest/streams_tests.cpp:148:15:   required from here\r\n./streams.h:114:22: error: no matching function for call to 'Unserialize(SpanReader&, signed char&)'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\nIn file included from ./streams.h:9:\r\n./serialize.h:284:48: note: candidate: 'template<class Stream, class V>  requires  CharNotInt8<V> void Unserialize(Stream&, V)' (deleted)\r\n  284 | template <typename Stream, CharNotInt8 V> void Unserialize(Stream&, V) = delete; // char serialization forbidden. Use uint8_t or int8_t\r\n      |                                                ^~~~~~~~~~~\r\n./serialize.h:284:48: note:   template argument deduction/substitution failed:\r\n./serialize.h:284:48: note: constraints not satisfied\r\nIn file included from /usr/gcc/13/include/c++/13.2.0/compare:37,\r\n                 from /usr/gcc/13/include/c++/13.2.0/bits/stl_pair.h:65,\r\n                 from /usr/gcc/13/include/c++/13.2.0/bits/stl_algobase.h:64,\r\n                 from /usr/gcc/13/include/c++/13.2.0/algorithm:60,\r\n                 from ./prevector.h:13,\r\n                 from ./serialize.h:12:\r\n/usr/gcc/13/include/c++/13.2.0/concepts: In substitution of 'template<class Stream, class V>  requires  CharNotInt8<V> void Unserialize(Stream&, V) [with Stream = SpanReader; V = signed char]':\r\n./streams.h:114:22:   required from 'SpanReader& SpanReader::operator>>(T&&) [with T = signed char&]'\r\ntest/streams_tests.cpp:148:15:   required from here\r\n/usr/gcc/13/include/c++/13.2.0/concepts:57:15:   required for the satisfaction of '__same_as<_Tp, _Up>' [with _Tp = signed char; _Up = char]\r\n/usr/gcc/13/include/c++/13.2.0/concepts:62:13:   required for the satisfaction of 'same_as<T, char>' [with T = signed char]\r\n./serialize.h:268:9:   required for the satisfaction of 'CharNotInt8<V>' [with V = signed char]\r\n/usr/gcc/13/include/c++/13.2.0/concepts:57:32: note: the expression 'is_same_v<_Tp, _Up> [with _Tp = signed char; _Up = char]' evaluated to 'false'\r\n   57 |       concept __same_as = std::is_same_v<_Tp, _Up>;\r\n      |                           ~~~~~^~~~~~~~~~~~~~~~~~~\r\n./streams.h: In instantiation of 'SpanReader& SpanReader::operator>>(T&&) [with T = signed char&]':\r\ntest/streams_tests.cpp:148:15:   required from here\r\n./serialize.h:285:33: note: candidate: 'template<class Stream> void Unserialize(Stream&, std::byte&)'\r\n  285 | template <typename Stream> void Unserialize(Stream& s, std::byte& a) { a = std::byte{ser_readdata8(s)}; }\r\n      |                                 ^~~~~~~~~~~\r\n./serialize.h:285:33: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   cannot convert 'obj' (type 'signed char') to type 'std::byte&'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:286:39: note: candidate: 'template<class Stream> void Unserialize(Stream&, int8_t&)'\r\n  286 | template<typename Stream> inline void Unserialize(Stream& s, int8_t& a  ) { a = ser_readdata8(s); }\r\n      |                                       ^~~~~~~~~~~\r\n./serialize.h:286:39: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   cannot convert 'obj' (type 'signed char') to type 'int8_t&' {aka 'char&'}\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:287:39: note: candidate: 'template<class Stream> void Unserialize(Stream&, uint8_t&)'\r\n  287 | template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a ) { a = ser_readdata8(s); }\r\n      |                                       ^~~~~~~~~~~\r\n./serialize.h:287:39: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   cannot convert 'obj' (type 'signed char') to type 'uint8_t&' {aka 'unsigned char&'}\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:288:39: note: candidate: 'template<class Stream> void Unserialize(Stream&, int16_t&)'\r\n  288 | template<typename Stream> inline void Unserialize(Stream& s, int16_t& a ) { a = ser_readdata16(s); }\r\n      |                                       ^~~~~~~~~~~\r\n./serialize.h:288:39: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   cannot convert 'obj' (type 'signed char') to type 'int16_t&' {aka 'short int&'}\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:289:39: note: candidate: 'template<class Stream> void Unserialize(Stream&, uint16_t&)'\r\n  289 | template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a) { a = ser_readdata16(s); }\r\n      |                                       ^~~~~~~~~~~\r\n./serialize.h:289:39: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   cannot convert 'obj' (type 'signed char') to type 'uint16_t&' {aka 'short unsigned int&'}\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:290:39: note: candidate: 'template<class Stream> void Unserialize(Stream&, int32_t&)'\r\n  290 | template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a = ser_readdata32(s); }\r\n      |                                       ^~~~~~~~~~~\r\n./serialize.h:290:39: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   cannot convert 'obj' (type 'signed char') to type 'int32_t&' {aka 'int&'}\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:291:39: note: candidate: 'template<class Stream> void Unserialize(Stream&, uint32_t&)'\r\n  291 | template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }\r\n      |                                       ^~~~~~~~~~~\r\n./serialize.h:291:39: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   cannot convert 'obj' (type 'signed char') to type 'uint32_t&' {aka 'unsigned int&'}\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:292:39: note: candidate: 'template<class Stream> void Unserialize(Stream&, int64_t&)'\r\n  292 | template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }\r\n      |                                       ^~~~~~~~~~~\r\n./serialize.h:292:39: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   cannot convert 'obj' (type 'signed char') to type 'int64_t&' {aka 'long int&'}\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:293:39: note: candidate: 'template<class Stream> void Unserialize(Stream&, uint64_t&)'\r\n  293 | template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }\r\n      |                                       ^~~~~~~~~~~\r\n./serialize.h:293:39: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   cannot convert 'obj' (type 'signed char') to type 'uint64_t&' {aka 'long unsigned int&'}\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:294:53: note: candidate: 'template<class Stream, class B, int N>  requires  BasicByte<B> void Unserialize(Stream&, B (&)[N])'\r\n  294 | template <typename Stream, BasicByte B, int N> void Unserialize(Stream& s, B (&a)[N]) { s.read(MakeWritableByteSpan(a)); }\r\n      |                                                     ^~~~~~~~~~~\r\n./serialize.h:294:53: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   mismatched types 'B [N]' and 'signed char'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:295:61: note: candidate: 'template<class Stream, class B, long unsigned int N>  requires  BasicByte<B> void Unserialize(Stream&, std::array<_Tp, _Nm>&)'\r\n  295 | template <typename Stream, BasicByte B, std::size_t N> void Unserialize(Stream& s, std::array<B, N>& a) { s.read(MakeWritableByteSpan(a)); }\r\n      |                                                             ^~~~~~~~~~~\r\n./serialize.h:295:61: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   mismatched types 'std::array<_Tp, _Nm>' and 'signed char'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:296:46: note: candidate: 'template<class Stream, class B>  requires  BasicByte<B> void Unserialize(Stream&, Span<O>)'\r\n  296 | template <typename Stream, BasicByte B> void Unserialize(Stream& s, Span<B> span) { s.read(AsWritableBytes(span)); }\r\n      |                                              ^~~~~~~~~~~\r\n./serialize.h:296:46: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   mismatched types 'Span<O>' and 'signed char'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:299:40: note: candidate: 'template<class Stream> void Unserialize(Stream&, bool&)'\r\n  299 | template <typename Stream> inline void Unserialize(Stream& s, bool& a) { uint8_t f = ser_readdata8(s); a = f; }\r\n      |                                        ^~~~~~~~~~~\r\n./serialize.h:299:40: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   cannot convert 'obj' (type 'signed char') to type 'bool&'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:809:6: note: candidate: 'template<class Stream, class C> void Unserialize(Stream&, std::__cxx11::basic_string<C>&)'\r\n  809 | void Unserialize(Stream& is, std::basic_string<C>& str)\r\n      |      ^~~~~~~~~~~\r\n./serialize.h:809:6: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   mismatched types 'std::__cxx11::basic_string<C>' and 'signed char'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:835:6: note: candidate: 'template<class Stream, unsigned int N, class T> void Unserialize(Stream&, prevector<N, T>&)'\r\n  835 | void Unserialize(Stream& is, prevector<N, T>& v)\r\n      |      ^~~~~~~~~~~\r\n./serialize.h:835:6: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   mismatched types 'prevector<N, T>' and 'signed char'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:878:6: note: candidate: 'template<class Stream, class T, class A> void Unserialize(Stream&, std::vector<_ValT, _Allocator>&)'\r\n  878 | void Unserialize(Stream& is, std::vector<T, A>& v)\r\n      |      ^~~~~~~~~~~\r\n./serialize.h:878:6: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   mismatched types 'std::vector<_ValT, _Allocator>' and 'signed char'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:908:6: note: candidate: 'template<class Stream, class K, class T> void Unserialize(Stream&, std::pair<_Tp1, _Tp2>&)'\r\n  908 | void Unserialize(Stream& is, std::pair<K, T>& item)\r\n      |      ^~~~~~~~~~~\r\n./serialize.h:908:6: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   mismatched types 'std::pair<_Tp1, _Tp2>' and 'signed char'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:928:6: note: candidate: 'template<class Stream, class K, class T, class Pred, class A> void Unserialize(Stream&, std::map<K, T, Pred, A>&)'\r\n  928 | void Unserialize(Stream& is, std::map<K, T, Pred, A>& m)\r\n      |      ^~~~~~~~~~~\r\n./serialize.h:928:6: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   mismatched types 'std::map<K, T, Pred, A>' and 'signed char'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:955:6: note: candidate: 'template<class Stream, class K, class Pred, class A> void Unserialize(Stream&, std::set<K, Pred, A>&)'\r\n  955 | void Unserialize(Stream& is, std::set<K, Pred, A>& m)\r\n      |      ^~~~~~~~~~~\r\n./serialize.h:955:6: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   mismatched types 'std::set<K, Pred, A>' and 'signed char'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:997:6: note: candidate: 'template<class Stream, class T> void Unserialize(Stream&, std::shared_ptr<const T>&)'\r\n  997 | void Unserialize(Stream& is, std::shared_ptr<const T>& p)\r\n      |      ^~~~~~~~~~~\r\n./serialize.h:997:6: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   mismatched types 'std::shared_ptr<const T>' and 'signed char'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:980:6: note: candidate: 'template<class Stream, class T> void Unserialize(Stream&, std::unique_ptr<const T>&)'\r\n  980 | void Unserialize(Stream& is, std::unique_ptr<const T>& p)\r\n      |      ^~~~~~~~~~~\r\n./serialize.h:980:6: note:   template argument deduction/substitution failed:\r\n./streams.h:114:22: note:   mismatched types 'std::unique_ptr<const T>' and 'signed char'\r\n  114 |         ::Unserialize(*this, obj);\r\n      |         ~~~~~~~~~~~~~^~~~~~~~~~~~\r\n./serialize.h:774:6: note: candidate: 'template<class Stream, class T>  requires  Unserializable<T, Stream> void Unserialize(Stream&, T&&)'\r\n  774 | void Unserialize(Stream& is, T&& a)\r\n      |      ^~~~~~~~~~~\r\n./serialize.h:774:6: note:   template argument deduction/substitution failed:\r\n./serialize.h:774:6: note: constraints not satisfied\r\n./serialize.h: In substitution of 'template<class Stream, class T>  requires  Unserializable<T, Stream> void Unserialize(Stream&, T&&) [with Stream = SpanReader; T = signed char&]':\r\n./streams.h:114:22:   required from 'SpanReader& SpanReader::operator>>(T&&) [with T = signed char&]'\r\ntest/streams_tests.cpp:148:15:   required from here\r\n./serialize.h:771:9:   required for the satisfaction of 'Unserializable<T, Stream>' [with T = signed char&; Stream = SpanReader]\r\n./serialize.h:771:26:   in requirements with 'T a', 'Stream s' [with T = signed char&; Stream = SpanReader]\r\n./serialize.h:771:65: note: the required expression 'a.Unserialize(s)' is invalid\r\n  771 | concept Unserializable = requires(T a, Stream s) { a.Unserialize(s); };\r\n      |                                                    ~~~~~~~~~~~~~^~~\r\n./streams.h: In instantiation of 'SpanReader& SpanReader::operator>>(T&&) [with T = signed char&]':\r\ntest/streams_tests.cpp:148:15:   required from here\r\n...\r\n```\r\n\r\nI believe, it has been broken since https://github.com/bitcoin/bitcoin/pull/12254.\r\n\r\n---\r\n\r\nSystem and compiler details:\r\n```\r\n$ uname -a\r\nSunOS openindiana 5.11 illumos-064d431af1 i86pc i386 i86pc\r\n$ g++ --version\r\ng++ (OpenIndiana 13.2.0-oi-3) 13.2.0\r\nCopyright (C) 2023 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n```",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [
      {
        "id": 64585,
        "node_id": "MDU6TGFiZWw2NDU4NQ==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug",
        "name": "Bug",
        "color": "FBBAAB",
        "default": false
      },
      {
        "id": 234878,
        "node_id": "MDU6TGFiZWwyMzQ4Nzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Linux/Unix",
        "name": "Linux/Unix",
        "color": "770000",
        "default": false
      },
      {
        "id": 61889416,
        "node_id": "MDU6TGFiZWw2MTg4OTQxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system",
        "name": "Build system",
        "color": "5319e7",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": true,
    "comments": 4,
    "closed_at": "2024-05-04T01:07:51Z",
    "closed_by": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "created_at": "2024-04-15T21:02:12Z",
    "updated_at": "2025-05-04T07:52:39Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 12477553851,
      "node_id": "LE_lADOABII586FyhagzwAAAALnuFy7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12477553851",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-15T21:02:23Z",
      "label": {
        "name": "Bug",
        "color": "FBBAAB"
      }
    },
    {
      "event": "labeled",
      "id": 12477553863,
      "node_id": "LE_lADOABII586FyhagzwAAAALnuFzH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12477553863",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-15T21:02:23Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 12477556043,
      "node_id": "LE_lADOABII586FyhagzwAAAALnuGVL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12477556043",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-15T21:02:31Z",
      "label": {
        "name": "Linux/Unix",
        "color": "770000"
      }
    },
    {
      "event": "commented",
      "id": 2058434577,
      "node_id": "IC_kwDOABII5856sTgR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2058434577",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-16T07:37:11Z",
      "updated_at": "2024-04-16T07:37:11Z",
      "author_association": "MEMBER",
      "body": "Using `char` is not allowed in serialization code, because the sign of `char` is unknown/unclear. However, on some systems, `int8_t==char`, which means that `signed char` has no serialization helper.\r\n\r\nThis could be fixed in the serialization code by replacing `int8_t` by a concept of `!CharNotInt8 || std::same_as<T, signed char>`. However, my preference would be to completely avoid `signed char` and just use `int8_t` in the serialization code. That is, fix the test to use `int8_t`.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/29884#issuecomment-2058434577",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29884"
    },
    {
      "event": "commented",
      "id": 2058578466,
      "node_id": "IC_kwDOABII5856s2oi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2058578466",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-16T08:53:20Z",
      "updated_at": "2024-04-16T08:53:20Z",
      "author_association": "MEMBER",
      "body": "> However, my preference would be to completely avoid `signed char` and just use `int8_t` in the serialization code. That is, fix the test to use `int8_t`.\r\n\r\nI lean to agree, considering that `signed char` is used in tests only.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/29884#issuecomment-2058578466",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29884"
    },
    {
      "event": "commented",
      "id": 2058600361,
      "node_id": "IC_kwDOABII5856s7-p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2058600361",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-16T09:04:21Z",
      "updated_at": "2024-04-16T09:04:21Z",
      "author_association": "MEMBER",
      "body": "Happy to review a pull, if someone creates one.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/29884#issuecomment-2058600361",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29884"
    },
    {
      "event": "commented",
      "id": 2065265007,
      "node_id": "IC_kwDOABII5857GXFv",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2065265007",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-18T20:31:35Z",
      "updated_at": "2024-04-18T20:31:35Z",
      "author_association": "MEMBER",
      "body": "> Happy to review a pull, if someone creates one.\r\n\r\nPlease see https://github.com/bitcoin/bitcoin/pull/29907.",
      "user": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/29884#issuecomment-2065265007",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/29884"
    },
    {
      "event": "closed",
      "id": 12702566193,
      "node_id": "CE_lADOABII586FyhagzwAAAAL1Iccx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12702566193",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "61d3280c3a36084a6fef17fcedb3de3555294424",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61d3280c3a36084a6fef17fcedb3de3555294424",
      "created_at": "2024-05-04T01:07:51Z"
    },
    {
      "event": "referenced",
      "id": 12702566522,
      "node_id": "REFE_lADOABII586FyhagzwAAAAL1Ich6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/12702566522",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "61d3280c3a36084a6fef17fcedb3de3555294424",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/61d3280c3a36084a6fef17fcedb3de3555294424",
      "created_at": "2024-05-04T01:07:55Z"
    },
    {
      "event": "referenced",
      "id": 14883598752,
      "node_id": "REFE_lADOABII586FyhagzwAAAAN3IbGg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14883598752",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4e8fbdd865cf92c5b76707acb5207cbe21108335",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/4e8fbdd865cf92c5b76707acb5207cbe21108335",
      "created_at": "2024-10-25T20:39:40Z"
    },
    {
      "event": "referenced",
      "id": 14908633929,
      "node_id": "REFE_lADOABII586FyhagzwAAAAN4n7NJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/14908633929",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "61a5832a6ac45638a3e21d7d447bccd004bca84f",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/61a5832a6ac45638a3e21d7d447bccd004bca84f",
      "created_at": "2024-10-26T17:30:12Z"
    },
    {
      "event": "locked",
      "id": 17509718174,
      "node_id": "LOE_lADOABII586FyhagzwAAAAQTqRie",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17509718174",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-04T07:52:39Z"
    }
  ]
}