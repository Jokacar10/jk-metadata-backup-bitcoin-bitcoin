{
  "type": "issue",
  "issue": {
    "id": 3374934257,
    "node_id": "I_kwDOABII587JKWjx",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33277",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33277/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33277/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33277/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/33277",
    "number": 33277,
    "state": "open",
    "state_reason": null,
    "title": "intermittent Segmentation fault in mptest IPC path (callFnAsyncParams)",
    "body": "\n> ðŸš§ At least one of the CI tasks failed.\n> <sub>Task `ARM, unit tests, no functional tests`: https://github.com/bitcoin/bitcoin/runs/49360561051</sub>\n> <sub>LLM reason (âœ¨ experimental): Segmentation fault in mptest IPC path (callFnAsyncParams) causing the test suite to fail.</sub>\n\n_Originally posted by @DrahtBot in https://github.com/bitcoin/bitcoin/issues/30469#issuecomment-3243496575_\n\n\n\n\n```\n[23:59:57.639] + ulimit -s 512\n[23:59:57.639] + '[' -n '' ']'\n[23:59:57.639] + '[' '' = true ']'\n[23:59:57.639] + '[' true = true ']'\n[23:59:57.639] + DIR_UNIT_TEST_DATA=/ci_container_base/ci/scratch/qa-assets/unit_test_data/\n[23:59:57.639] + LD_LIBRARY_PATH=/ci_container_base/depends/arm-linux-gnueabihf/lib\n[23:59:57.639] + CTEST_OUTPUT_ON_FAILURE=ON\n[23:59:57.639] + ctest --test-dir /ci_container_base/ci/scratch/build-arm-linux-gnueabihf --stop-on-failure -j10 --timeout 2400\n[23:59:57.653] Internal ctest changing into directory: /ci_container_base/ci/scratch/build-arm-linux-gnueabihf\n[23:59:57.654] Test project /ci_container_base/ci/scratch/build-arm-linux-gnueabihf\n[23:59:57.660]         Start   1: univalue_test\n[23:59:57.663]         Start   2: univalue_object_test\n[23:59:57.665]         Start   3: mptest\n[23:59:57.667]         Start   4: secp256k1_noverify_tests\n[23:59:57.669]         Start   5: secp256k1_tests\n[23:59:57.670]         Start   6: secp256k1_exhaustive_tests\n[23:59:57.673]         Start   7: test_bitcoin-qt\n[23:59:57.675]         Start   8: bench_sanity_check\n[23:59:57.676]         Start   9: addrman_tests\n[23:59:57.679]         Start  10: allocator_tests\n[23:59:57.682]   1/148 Test   #1: univalue_test ........................   Passed    0.02 sec\n[23:59:57.682]         Start  11: amount_tests\n[23:59:57.684]   2/148 Test   #2: univalue_object_test .................   Passed    0.02 sec\n[23:59:57.684]         Start  12: argsman_tests\n[23:59:57.686]   3/148 Test   #3: mptest ...............................***Failed    0.02 sec\n[23:59:57.686] [ TEST ] test.cpp:110: Call FooInterface methods\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client first request from current thread, constructing waiter\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.add$Params (a = 1, b = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #1 FooInterface.add$Params (a = 1, b = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #1 FooInterface.add$Results (result = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.add$Results (result = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.pass$Params (arg = (name = \"name\", setint = [1, 2], vbool = [false, true, false]))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #2 FooInterface.pass$Params (arg = (name = \"name\", setint = [1, 2], vbool = [false, true, false]))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #2 FooInterface.pass$Results (result = (name = \"name\", setint = [1, 2], vbool = [false, true, false]))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.pass$Results (result = (name = \"name\", setint = [1, 2], vbool = [false, true, false]))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.raise$Params (arg = (name = \"name\", setint = [1, 2], vbool = [false, true, false]))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #3 FooInterface.raise$Params (arg = (name = \"name\", setint = [1, 2], vbool = [false, true, false]))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #3 FooInterface.raise$Results (error = (name = \"name\", setint = [1, 2], vbool = [false, true, false]))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.raise$Results (error = (name = \"name\", setint = [1, 2], vbool = [false, true, false]))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.initThreadMap$Params (threadMap = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #4 FooInterface.initThreadMap$Params (threadMap = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #4 FooInterface.initThreadMap$Results (threadMap = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.initThreadMap$Results (threadMap = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.callback$Params (context = (thread = <external capability>, callbackThread = <external capability>), callback = <external capability>, arg = 1)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #5 FooInterface.callback$Params (context = (thread = <external capability>, callbackThread = <external capability>), callback = <external capability>, arg = 1)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #5 {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooCallback.call$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 1)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #6 FooCallback.call$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 1)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #6 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #6 FooCallback.call$Results (result = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooCallback.call$Results (result = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client destroy N2mp11ProxyClientINS_4test8messages11FooCallbackEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooCallback.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #7 FooCallback.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #7 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #7 FooCallback.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooCallback.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #5 FooInterface.callback$Results (result = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.callback$Results (result = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server destroy N2mp11ProxyServerINS_4test8messages11FooCallbackEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.callbackUnique$Params (context = (thread = <external capability>, callbackThread = <external capability>), callback = <external capability>, arg = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #8 FooInterface.callbackUnique$Params (context = (thread = <external capability>, callbackThread = <external capability>), callback = <external capability>, arg = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #8 {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooCallback.call$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #9 FooCallback.call$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #9 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #9 FooCallback.call$Results (result = 4)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooCallback.call$Results (result = 4)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client destroy N2mp11ProxyClientINS_4test8messages11FooCallbackEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooCallback.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #10 FooCallback.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #10 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #10 FooCallback.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooCallback.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #8 FooInterface.callbackUnique$Results (result = 4)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.callbackUnique$Results (result = 4)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server destroy N2mp11ProxyServerINS_4test8messages11FooCallbackEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.callbackShared$Params (context = (thread = <external capability>, callbackThread = <external capability>), callback = <external capability>, arg = 5)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #11 FooInterface.callbackShared$Params (context = (thread = <external capability>, callbackThread = <external capability>), callback = <external capability>, arg = 5)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #11 {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooCallback.call$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 5)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #12 FooCallback.call$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 5)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #12 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #12 FooCallback.call$Results (result = 6)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooCallback.call$Results (result = 6)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client destroy N2mp11ProxyClientINS_4test8messages11FooCallbackEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooCallback.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #13 FooCallback.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #13 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #13 FooCallback.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooCallback.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #11 FooInterface.callbackShared$Results (result = 6)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.callbackShared$Results (result = 6)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server destroy N2mp11ProxyServerINS_4test8messages11FooCallbackEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.saveCallback$Params (context = (thread = <external capability>, callbackThread = <external capability>), callback = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #14 FooInterface.saveCallback$Params (context = (thread = <external capability>, callbackThread = <external capability>), callback = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #14 {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #14 FooInterface.saveCallback$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.saveCallback$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.callbackSaved$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 7)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #15 FooInterface.callbackSaved$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 7)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #15 {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooCallback.call$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 7)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #16 FooCallback.call$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 7)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #16 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #16 FooCallback.call$Results (result = 8)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooCallback.call$Results (result = 8)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #15 FooInterface.callbackSaved$Results (result = 8)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.callbackSaved$Results (result = 8)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.callbackSaved$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 7)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #17 FooInterface.callbackSaved$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 7)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #17 {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooCallback.call$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 7)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #18 FooCallback.call$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 7)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #18 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #18 FooCallback.call$Results (result = 8)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooCallback.call$Results (result = 8)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #17 FooInterface.callbackSaved$Results (result = 8)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.callbackSaved$Results (result = 8)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.saveCallback$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #19 FooInterface.saveCallback$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #19 {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client destroy N2mp11ProxyClientINS_4test8messages11FooCallbackEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooCallback.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #20 FooCallback.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #20 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #20 FooCallback.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooCallback.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server destroy N2mp11ProxyServerINS_4test8messages11FooCallbackEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #19 FooInterface.saveCallback$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.saveCallback$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.callbackExtended$Params (context = (thread = <external capability>, callbackThread = <external capability>), callback = <external capability>, arg = 11)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #21 FooInterface.callbackExtended$Params (context = (thread = <external capability>, callbackThread = <external capability>), callback = <external capability>, arg = 11)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #21 {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send ExtendedCallback.callExtended$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 11)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #22 ExtendedCallback.callExtended$Params (context = (thread = <external capability>, callbackThread = <external capability>), arg = 11)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #22 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #22 ExtendedCallback.callExtended$Results (result = 12)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv ExtendedCallback.callExtended$Results (result = 12)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client destroy N2mp11ProxyClientINS_4test8messages16ExtendedCallbackEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooCallback.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #23 FooCallback.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #23 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #23 FooCallback.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooCallback.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #21 FooInterface.callbackExtended$Results (result = 12)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.callbackExtended$Results (result = 12)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server destroy N2mp11ProxyServerINS_4test8messages16ExtendedCallbackEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.passCustom$Params (arg = (v1 = \"v1\", v2 = 5))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #24 FooInterface.passCustom$Params (arg = (v1 = \"v1\", v2 = 5))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #24 FooInterface.passCustom$Results (result = (v1 = \"v1\", v2 = 5))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.passCustom$Results (result = (v1 = \"v1\", v2 = 5))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.passEmpty$Params (arg = ())\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #25 FooInterface.passEmpty$Params (arg = ())\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #25 FooInterface.passEmpty$Results (result = ())\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.passEmpty$Results (result = ())\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.passMessage$Params (arg = (message = \"init build\"))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #26 FooInterface.passMessage$Params (arg = (message = \"init build\"))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #26 FooInterface.passMessage$Results (result = (message = \"init build read call build\"))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.passMessage$Results (result = (message = \"init build read call build\"))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.passMutable$Params (arg = (message = \"init build\"))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #27 FooInterface.passMutable$Params (arg = (message = \"init build\"))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #27 FooInterface.passMutable$Results (arg = (message = \"init build pass call return\"))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.passMutable$Results (arg = (message = \"init build pass call return\"))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.passFn$Params (context = (thread = <external capability>, callbackThread = <external capability>), fn = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #28 FooInterface.passFn$Params (context = (thread = <external capability>, callbackThread = <external capability>), fn = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #28 {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooFn.call$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #29 FooFn.call$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #29 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #29 FooFn.call$Results (result = 10)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooFn.call$Results (result = 10)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client destroy N2mp11ProxyClientINS_4test8messages5FooFnEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client send FooFn.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server recv request  #30 FooFn.destroy$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server post request  #30 {mptest-9596/mptest-9596}\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #30 FooFn.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9601 (from mptest-9596/mptest-9596)} IPC client recv FooFn.destroy$Results ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server send response #28 FooInterface.passFn$Results (result = 10)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.passFn$[ PASS ] test.cpp:110: Call FooInterface methods (11391 Î¼s)\n[23:59:57.686] [ TEST ] test.cpp:197: Call IPC method after client connection is closed\n[23:59:57.686] [ PASS ] test.cpp:197: Call IPC method after client connection is closed (1539 Î¼s)\n[23:59:57.686] [ TEST ] test.cpp:214: Calling IPC method after server connection is closed\n[23:59:57.686] [ PASS ] test.cpp:214: Calling IPC method after server connection is closed (1723 Î¼s)\n[23:59:57.686] [ TEST ] test.cpp:231: Calling IPC method and disconnecting during the call\n[23:59:57.686] [ PASS ] test.cpp:231: Calling IPC method and disconnecting during the call (979 Î¼s)\n[23:59:57.686] [ TEST ] test.cpp:251: Calling IPC method, disconnecting and blocking during the call\n[23:59:57.686] Results (result = 10)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client destroy N2mp11ProxyClientINS_4test8messages12FooInterfaceEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server destroy N2mp11ProxyServerINS_4test8messages5FooFnEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} IPC server destroy N2mp11ProxyServerINS_4test8messages12FooInterfaceEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} EventLoop::loop done, cancelling event listeners.\n[23:59:57.686] LOG0: {mptest-9596/mptest-9598} EventLoop::loop bye.\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.add$Params (a = 1, b = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9607} IPC server recv request  #31 FooInterface.add$Params (a = 1, b = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9607} IPC server send response #31 FooInterface.add$Results (result = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.add$Results (result = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9607} IPC server destroy N2mp11ProxyServerINS_4test8messages12FooInterfaceEEE\n[23:59:57.686] LOG1: IPC client method called after disconnect.\n[23:59:57.686] LOG0: {mptest-9596/mptest-9607} EventLoop::loop done, cancelling event listeners.\n[23:59:57.686] LOG0: {mptest-9596/mptest-9607} EventLoop::loop bye.\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.add$Params (a = 1, b = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9609} IPC server recv request  #32 FooInterface.add$Params (a = 1, b = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9609} IPC server send response #32 FooInterface.add$Results (result = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.add$Results (result = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9609} IPC server destroy N2mp11ProxyServerINS_4test8messages12FooInterfaceEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.add$Params (a = 1, b = 2)\n[23:59:57.686] LOG1: IPC client method call interrupted by disconnect.\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client destroy N2mp11ProxyClientINS_4test8messages12FooInterfaceEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9609} EventLoop::loop done, cancelling event listeners.\n[23:59:57.686] LOG0: {mptest-9596/mptest-9609} EventLoop::loop bye.\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.add$Params (a = 1, b = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9612} IPC server recv request  #33 FooInterface.add$Params (a = 1, b = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9612} IPC server send response #33 FooInterface.add$Results (result = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.add$Results (result = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.callFn$Params ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9612} IPC server recv request  #34 FooInterface.callFn$Params ()\n[23:59:57.686] LOG0: {mptest-9596/mptest-9612} IPC server send response #34 FooInterface.callFn$Results ()\n[23:59:57.686] LOG1: IPC client method call interrupted by disconnect.\n[23:59:57.686] LOG0: {mptest-9596/mptest-9612} IPC server destroy N2mp11ProxyServerINS_4test8messages12FooInterfaceEEE\n[23:59:57.686] LOG0: {mptest-9596/mptest-9612} EventLoop::loop done, cancelling event listeners.\n[23:59:57.686] LOG0: {mptest-9596/mptest-9612} EventLoop::loop bye.\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.add$Params (a = 1, b = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9615} IPC server recv request  #35 FooInterface.add$Params (a = 1, b = 2)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9615} IPC server send response #35 FooInterface.add$Results (result = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.add$Results (result = 3)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.initThreadMap$Params (threadMap = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9615} IPC server recv request  #36 FooInterface.initThreadMap$Params (threadMap = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9615} IPC server send response #36 FooInterface.initThreadMap$Results (threadMap = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client recv FooInterface.initThreadMap$Results (threadMap = <external capability>)\n[23:59:57.686] LOG0: {mptest-9596/mptest-9596} IPC client send FooInterface.callFnAsync$Params (context = (thread = <external capability>, callbackThread = <external capability>))\n[23:59:57.686] LOG0: {mptest-9596/mptest-9615} IPC server recv request  #37 FooInterface.callFnAsync$Params (context = (thread = <external capability>, callbackThread *** Received signal #11: Segmentation fault\n[23:59:57.686] stack: \n[23:59:57.686] \n[23:59:57.803]   4/148 Test  #11: amount_tests .........................   Passed    0.12 sec\n[23:59:57.806]   5/148 Test  #10: allocator_tests ......................   Passed    0.13 sec\n[23:59:58.033]   6/148 Test   #9: addrman_tests ........................   Passed    0.35 sec\n[23:59:58.450]   7/148 Test  #12: argsman_tests ........................   Passed    0.76 sec\n[00:00:01.852]   8/148 Test   #7: test_bitcoin-qt ......................   Passed    4.18 sec\n[00:00:21.925]   9/148 Test   #6: secp256k1_exhaustive_tests ...........   Passed   24.25 sec\n[00:00:57.606]  10/148 Test   #8: bench_sanity_check ...................   Passed   59.93 sec\n[00:01:17.408]  11/148 Test   #4: secp256k1_noverify_tests .............   Passed   79.74 sec\n[00:02:28.037]  12/148 Test   #5: secp256k1_tests ......................   Passed  150.37 sec\n[00:02:28.038] \n[00:02:28.038] 92% tests passed, 1 tests failed out of 12\n[00:02:28.038] \n[00:02:28.038] Total Test time (real) = 150.38 sec\n[00:02:28.038] \n[00:02:28.038] The following tests FAILED:\n[00:02:28.038] \t  3 - mptest (Failed)\n[00:02:28.039] Errors while running CTest\n[00:02:28.085] Command '['./ci/test/02_run_container.sh']' returned non-zero exit status 8.",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [
      {
        "id": 5334691551,
        "node_id": "LA_kwDOABII588AAAABPfju3w",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/CI%20failed",
        "name": "CI failed",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/72",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/72",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/72/labels",
      "id": 12172984,
      "node_id": "MI_kwDOABII584Aub64",
      "number": 72,
      "state": "open",
      "title": "30.0",
      "description": "",
      "creator": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "open_issues": 10,
      "closed_issues": 71,
      "created_at": "2025-01-15T19:21:36Z",
      "updated_at": "2025-09-02T10:03:41Z"
    },
    "locked": false,
    "comments": 0,
    "created_at": "2025-09-02T08:15:16Z",
    "updated_at": "2025-09-02T10:03:41Z"
  },
  "events": [
    {
      "event": "mentioned",
      "id": 19454160508,
      "node_id": "MEE_lADOABII587JKWjxzwAAAASHju58",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19454160508",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-02T08:15:17Z"
    },
    {
      "event": "subscribed",
      "id": 19454160527,
      "node_id": "SE_lADOABII587JKWjxzwAAAASHju6P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19454160527",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-02T08:15:17Z"
    },
    {
      "event": "labeled",
      "id": 19454164024,
      "node_id": "LE_lADOABII587JKWjxzwAAAASHjvw4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19454164024",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-02T08:15:27Z",
      "label": {
        "name": "CI failed",
        "color": "cccccc"
      }
    },
    {
      "event": "milestoned",
      "id": 19456475493,
      "node_id": "MIE_lADOABII587JKWjxzwAAAASHskFl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19456475493",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-02T10:03:41Z",
      "milestone": {
        "title": "30.0"
      }
    }
  ]
}