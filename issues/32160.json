{
  "type": "issue",
  "issue": {
    "id": 2956388487,
    "node_id": "I_kwDOABII586wNuiH",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32160",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32160/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32160/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32160/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/32160",
    "number": 32160,
    "state": "open",
    "state_reason": null,
    "title": "Test Package Accept",
    "body": "### Please describe the feature you'd like to see added.\n\n**Description of how the feature should work:**\nThe `testmempoolaccept` RPC should continue to take a list of hex transactions with minimal restrictions (no duplicates, no conflicting transactions, not too many). It should allow singleton transactions, transactions already in mempool, and any topology (multiple disconnected components should be ok). It should attempt to validate as much as possible and return each transaction's validation result. Of course, it should not modify mempool contents while doing so, and most importantly it should simulate the fee-bumping policies like package CPFP and package RBF.\n\n**Problems today:**\nWe added multi-transaction support in `testmempoolaccept` in #20833, before package policies were decided. It enabled some of the validation functionality that package validation uses, but ultimately has a different codepath and thus different interface. It has roughly the input requirements that we want (no duplicates, no conflicts, max 25, topological). Its results array format is also fine in my opinion.\nThe biggest problem is that it doesn’t apply package policies. So if you have a 1p1c package with the parent bumped by the child, `testmempoolaccept` says that the parent has too low feerate, but `submitpackage` says it's accepted. This is confusing.\n\n**Why fixing this is hard:**\n(1) Our method of “splitting” a package is not compatible with test acceptance because it is trial-and-error based. Instead, it should decide what subpackages will be up front.\n(2) We can’t stage and unstage the changes made by each subpackage on top of the changes made by previous subpackages without applying the changes to mempool.\n\nLonger form explanation:\n- Supporting test package acceptance arbitrary lists of transactions, or indeed any list of transactions that isn’t a two-generation tree, requires we first analyze the package and decide what subpackages or chunks to submit together, and in what order. These decisions can very much affect whether/which transactions get in. The decision should involve the fee and vsize of these transactions, which requires fetching UTXOs and linearizing them.\n- Today, we achieve “splitting” through a trial-and-error process. We continuously attempt to submit package subsets in increasing size order (i.e. starting individually), excluding things once they have been successfully submitted. This was the convenient way to implement it because `AcceptPackage`, and it’s not a terrible way to split two generation-packages.\n- Given our current setup, package transactions are either in the mempool or we haven’t yet decided if they’re valid; we don’t have an intermediate stage of transactions that have been fully “approved” but not yet submitted. Once something fails, we just quit out and don’t try the rest of the transactions in the package. Often, they get a “missing inputs” error, which is equivalent to “depends on an invalid transaction”.\n- In git terms: We want the ability to `git commit` each subpackage, and then merge the branch with multiple commits into master, or just look at the branch log and use it to produce the RPC results. Today, we can’t `git branch`, we can only stage changes and either discard all of them or commit them directly on master.\n\n“But if it’s so hard to keep going after a failure, why do it? How much do we care about continuing to validate the package after a subpackage has failed?” For a package we receive over p2p, we should keep going instead of wasting bandwidth downloading the same transactions until we get the exact right combination.\n\n“Does it make things easier or more sensible to not support disconnected transactions / distinct clusters?” After deduplication, it is possible that our package contains disconnected transactions, even if we define packages as ancestors or prefixes of some target transaction (i.e. the protocol requires the package to be connected when we receive it over p2p). As an example, imagine it’s us + our parent + a sibling in the same chunk, and the parent is deduplicated. Another reason is that we’d like package test acceptance to be as helpful as possible, and potentially accept lists of raw transactions that aren’t all connected. `DepGraph` handles disconnected transactions just the same, so the linearization part is not more difficult.\n\n### Describe the solution you'd like\n\nHere is a proposed solution, which builds off of the package RBF outline in this [delving post](https://delvingbitcoin.org/t/post-clustermempool-package-rbf-per-chunk-processing/190), simplifying out some of the RBF details and focusing on the changeset staging.\n\n1. **Deduplication**: remove transactions that are already in mempool.\n2. **Topological linearization**: sort it topologically.\n3. **UTXO fetching**, in which we learn the fee and virtual sizes of these transactions. This allows us to build a standalone instance of `DepGraph` or a `TxGraph` of the package, i.e. not connected to mempool transactions. This is probably done through a `PreChecks` call, so we can save and exclude any standardness failures.\n4. **Pre-linearization**: linearize the package transactions. This is without mempool transactions. Decide on what the chunks i.e. subpackages will be.\n5. Use `TxGraph::StartStaging` to create a level 1.\n6. **Splitting** for each chunk `CNK`:\n    1. Use `TxGraph::StartStaging` to create a level 2.\n    2. Validate: Limiting, Conflict-finding, Replacement checks, Verification, up to and including `PolicyScriptChecks`. When doing replacement and diagram checks, always compare the top level with the one just below it, not with the Main level.\n    3. Commit these changes using `TxGraph::CommitStaging` to level 1, not level 0 which represents what is in the mempool.\n    4. The chunk can also be discarded if it is invalid or doesn’t pass its RBF requirements, i.e. `TxGraph::AbortStaging`. The other chunks’ changes in the level 1 are retained.\n7. Full Addition and Eviction should happen at the end, i.e. `ConsensusScriptChecks` and `ChangeSet::Apply` and `TxGraph::CommitStaging` applying the changes from level 1 to level 0.\n\n### Please leave any additional context\n\n**Takeaways and open questions:**\n- I think we could do an extremely limited version now by rerouting test-accepts through `AcceptPackage` and making a few logical tweaks (`AcceptSingleTransaction(test_accept=true)` followed by and `AcceptMultipleTransactions(test_accept=true)` works for 1p1c). But I don't think this is worth it.\n- Is there a simple way to implement the full feature without doing the package validation restructuring described above? I don't really think so.\n- Like a lot of things, implementing will be way easier with the cluster mempool changes merged. However, we need to modify `TxGraph` to support up to 3 levels.\n    - An alternative is to try to build an “UndoSubpackageChanges” external to `TxGraph`. I think that will be pretty complex and more levels seems more natural.\n- I think we can delete `MiniMiner::Linearize` since it was written for this purpose, and we can now use cluster_linearize instead.\n- Do we need to make a new RPC given we’re changing the interface? I’d lean towards no since this is a loosening and basically playing catchup for supporting packages.",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [
      {
        "id": 64583,
        "node_id": "MDU6TGFiZWw2NDU4Mw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature",
        "name": "Feature",
        "color": "7cf575",
        "default": false
      },
      {
        "id": 164208572,
        "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
        "name": "Mempool",
        "color": "fef2c0",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": false,
    "comments": 2,
    "created_at": "2025-03-28T14:48:58Z",
    "updated_at": "2025-04-16T20:54:23Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 17033922981,
      "node_id": "LE_lADOABII586wNuiHzwAAAAP3TQml",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17033922981",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T14:48:58Z",
      "label": {
        "name": "Feature",
        "color": "7cf575"
      }
    },
    {
      "event": "labeled",
      "id": 17034097566,
      "node_id": "LE_lADOABII586wNuiHzwAAAAP3T7Oe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17034097566",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T15:00:37Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "commented",
      "id": 2810428751,
      "node_id": "IC_kwDOABII586ng71P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2810428751",
      "actor": {
        "login": "ronnakamoto",
        "id": 14256602,
        "node_id": "MDQ6VXNlcjE0MjU2NjAy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14256602?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ronnakamoto",
        "html_url": "https://github.com/ronnakamoto",
        "followers_url": "https://api.github.com/users/ronnakamoto/followers",
        "following_url": "https://api.github.com/users/ronnakamoto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ronnakamoto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ronnakamoto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ronnakamoto/subscriptions",
        "organizations_url": "https://api.github.com/users/ronnakamoto/orgs",
        "repos_url": "https://api.github.com/users/ronnakamoto/repos",
        "events_url": "https://api.github.com/users/ronnakamoto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ronnakamoto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-16T18:46:16Z",
      "updated_at": "2025-04-16T18:46:16Z",
      "author_association": "NONE",
      "body": "The proposed solution looks good. But, like you mentioned we could get it done with a few logical tweaks through the `AcceptPackage` and that would allow us to skip waiting for the cluster mempool merge.\n\nI think we can modify the code to have `testmempoolaccept` and `submitpackage` share the same validation logic path, but just differ in whether they apply changes to the mempool.\n\nThe basic idea would be:\n\n- Have both RPCs use `AcceptPackage` instead of the current split where test uses `AcceptMultipleTransactions` and submit uses `AcceptPackage`\n- Add a parameter to control whether package policies (CPFP, RBF) are applied during validation, separate from the existing `test_accept` flag\n- Use the existing `ChangeSet` mechanism but skip the `Apply()` call when in test mode\n\nBut, the downside of course would be that it won't allow complex topologies directly but maybe that could be done if its done in a more generic way. ",
      "user": {
        "login": "ronnakamoto",
        "id": 14256602,
        "node_id": "MDQ6VXNlcjE0MjU2NjAy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14256602?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ronnakamoto",
        "html_url": "https://github.com/ronnakamoto",
        "followers_url": "https://api.github.com/users/ronnakamoto/followers",
        "following_url": "https://api.github.com/users/ronnakamoto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ronnakamoto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ronnakamoto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ronnakamoto/subscriptions",
        "organizations_url": "https://api.github.com/users/ronnakamoto/orgs",
        "repos_url": "https://api.github.com/users/ronnakamoto/repos",
        "events_url": "https://api.github.com/users/ronnakamoto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ronnakamoto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/32160#issuecomment-2810428751",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32160"
    },
    {
      "event": "commented",
      "id": 2810770258,
      "node_id": "IC_kwDOABII586niPNS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2810770258",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-16T20:54:22Z",
      "updated_at": "2025-04-16T20:54:22Z",
      "author_association": "MEMBER",
      "body": "@ronnakamoto IIRC we already the param you're talking about (`m_package_feerates`). I haven't tried implementing it yet, let me know if you have a patch that works? An easy way to test would be to add a testmempoolaccept call in front of all the submitpackage tests and check they give equivalent results.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/32160#issuecomment-2810770258",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32160"
    },
    {
      "event": "mentioned",
      "id": 17295847875,
      "node_id": "MEE_lADOABII586wNuiHzwAAAAQG6bHD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17295847875",
      "actor": {
        "login": "ronnakamoto",
        "id": 14256602,
        "node_id": "MDQ6VXNlcjE0MjU2NjAy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14256602?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ronnakamoto",
        "html_url": "https://github.com/ronnakamoto",
        "followers_url": "https://api.github.com/users/ronnakamoto/followers",
        "following_url": "https://api.github.com/users/ronnakamoto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ronnakamoto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ronnakamoto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ronnakamoto/subscriptions",
        "organizations_url": "https://api.github.com/users/ronnakamoto/orgs",
        "repos_url": "https://api.github.com/users/ronnakamoto/repos",
        "events_url": "https://api.github.com/users/ronnakamoto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ronnakamoto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-16T20:54:23Z"
    },
    {
      "event": "subscribed",
      "id": 17295847891,
      "node_id": "SE_lADOABII586wNuiHzwAAAAQG6bHT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17295847891",
      "actor": {
        "login": "ronnakamoto",
        "id": 14256602,
        "node_id": "MDQ6VXNlcjE0MjU2NjAy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14256602?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ronnakamoto",
        "html_url": "https://github.com/ronnakamoto",
        "followers_url": "https://api.github.com/users/ronnakamoto/followers",
        "following_url": "https://api.github.com/users/ronnakamoto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ronnakamoto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ronnakamoto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ronnakamoto/subscriptions",
        "organizations_url": "https://api.github.com/users/ronnakamoto/orgs",
        "repos_url": "https://api.github.com/users/ronnakamoto/repos",
        "events_url": "https://api.github.com/users/ronnakamoto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ronnakamoto/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-16T20:54:23Z"
    }
  ]
}