{
  "type": "issue",
  "issue": {
    "id": 3417196483,
    "node_id": "I_kwDOABII587LrkfD",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33389",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33389/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33389/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33389/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/33389",
    "number": 33389,
    "state": "open",
    "state_reason": null,
    "title": "RFC: Bitcoin Core Node `BlockTemplateManager`",
    "body": "Bitcoin Core Node `BlockTemplateManager`  main use should be handling block template creation for other components of the node.\nIt should use the low-level block assembler to do that. This `BlockTemplateManager` should be initialized with a pointer to the mempool and a `ChainstateManager` reference. It should have access to the default block creation options and be instantiated during node startup and destroyed when the node is shutting down.\nThis `BlockTemplateManager` should be available via the node interfaces.\n\nDuring instantiation of `BlockTemplateManager`,  it should create an instance of the `BlockAssembler` and subscribe to the validation interface `BlockConnected` notification.\n\nOther components like the Mining interface (`waitNext`, `createNewBlock`), Peer Manager #33191, and Fee Estimation with the mempool #30157 will request a template with their respective block creation options and the number of seconds of how fresh they want the template to be.\n\nThe `BlockTemplateManager` will maintain a vector of previously built block templates as caches and check if there is a template match within the interval specified by the client. If there is, it will return the template; else it will build a new one and add it to the cache.\n\nWhenever a new block is connected, the cache is cleared.\n\n<details>\n<summary>This is the overall flow</summary>\n\n<img width=\"2872\" height=\"1004\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/5b855932-305c-46b6-9947-74a03afbf2d3\" />  \n\n</details>\n\n**Future Improvement**\n\n1. Detect the fee increase in the mempool and create a new template based on that information, not just using a time interval. See discussion here:\n   [https://github.com/bitcoin/bitcoin/pull/31283#discussion\\_r1937451223](https://github.com/bitcoin/bitcoin/pull/31283#discussion_r1937451223)\n   After this, it should be possible to add a push-based technique to the `BlockTemplateManager` where you can make a subscription to get a notification when a better template is available in the mempool or when the chain tip changes. This can effectively be used in `waitNext` and make it better than the current approach, which constantly calls `createBlockTemplate` every second and checks if it is a better template.\n\n2. Low-priority, nice-to-have: prioritize clients; the mining interface should be served first before other components. (This is low-priority because of cache and template sharing between components. If a component calls BlockTemplateManager with the same config before the mining interface, the only overhead should be the shared pointer copy, which is negligible, I think. E.g., mempool-based fee estimation has the same config as the default configs for the mining interface. However, Peer Manager seems to have a diverging config; hence the priority will result in serving it faster and will have measurable improvement.)\n\n**FAQ**\n1. Is this useful?\nThe current approach of components each creating its instance of block assembler and effectively its own caching mechanism, as shown in #31664 and #33191, results in duplicate code and does not allow for better resource usage between the components.\n - <details>\n   <summary>See Image</summary>\n   <img width=\"2872\" height=\"2404\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/0e2be732-79b6-4deb-ba61-690e9f80eff8\" />  \n   </details>\n       Using the `BlockTemplateManager` will result in better utilization of resources in the node and avoid wasted work in some cases. Generally, I think this is a better design and allows for sharing of code and the future improvements above.\n\n  2. Is there a POC?\n   Yes, I've attempted this and have a branch here: [https://github.com/ismaelsadeeq/bitcoin/tree/09-2025-minerman](https://github.com/ismaelsadeeq/bitcoin/tree/09-2025-minerman) which has the mining interface `createNewBlock` using the `BlockTemplateManager`.\n \\#30157 will fit in nicely and reduce a large portion of mempool forecaster code, which was the caching code: [https://github.com/ismaelsadeeq/bitcoin/commit/ba9b5876ae453315b57af09654d5b12b664e897a](https://github.com/ismaelsadeeq/bitcoin/commit/ba9b5876ae453315b57af09654d5b12b664e897a)\n \\#33191 will also fit in nicely; see: [https://github.com/ismaelsadeeq/bitcoin/commit/10bd8920fd259aa47d4b96037a2302d7ae6ea41f](https://github.com/ismaelsadeeq/bitcoin/commit/10bd8920fd259aa47d4b96037a2302d7ae6ea41f)\n\n\n",
    "user": {
      "login": "ismaelsadeeq",
      "id": 48946461,
      "node_id": "MDQ6VXNlcjQ4OTQ2NDYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/48946461?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ismaelsadeeq",
      "html_url": "https://github.com/ismaelsadeeq",
      "followers_url": "https://api.github.com/users/ismaelsadeeq/followers",
      "following_url": "https://api.github.com/users/ismaelsadeeq/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ismaelsadeeq/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ismaelsadeeq/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ismaelsadeeq/subscriptions",
      "organizations_url": "https://api.github.com/users/ismaelsadeeq/orgs",
      "repos_url": "https://api.github.com/users/ismaelsadeeq/repos",
      "events_url": "https://api.github.com/users/ismaelsadeeq/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ismaelsadeeq/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": false,
    "comments": 1,
    "created_at": "2025-09-15T09:55:15Z",
    "updated_at": "2025-09-15T18:08:36Z"
  },
  "events": [
    {
      "event": "commented",
      "id": 3293358522,
      "node_id": "IC_kwDOABII587ETKm6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3293358522",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-15T18:08:36Z",
      "updated_at": "2025-09-15T18:08:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Another link to the POC branch: https://github.com/bitcoin/bitcoin/compare/master...ismaelsadeeq:bitcoin:09-2025-minerman\n\nThis seems like a good idea. The actual change here doesn't seem very big and it seems like it could avoid some wasted memory and wasted work. It does seem like `BlockTemplateManager` is currently duplicating some logic in `WaitAndCreateNewBlock`, but I think the idea would be to replace it?\n\nThis idea also seems like it might relate to https://github.com/bitcoin/bitcoin/issues/31109 (if that issue is not already resolved by having having BlockTemplate::waitNext()).\n\nAnother minor piece of feedback is I think `shared_ptr<CBlockTemplate>` should be replaced by `shared_ptr<const CBlockTemplate>` in the branch to prevent callers from making changes to shared templates.\n\n\n\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33389#issuecomment-3293358522",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33389"
    }
  ]
}