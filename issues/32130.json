{
  "type": "issue",
  "issue": {
    "id": 2942735646,
    "node_id": "I_kwDOABII586vZpUe",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32130",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32130/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32130/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32130/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/32130",
    "number": 32130,
    "state": "open",
    "state_reason": null,
    "title": "RFC: Macro Regression Test Suite for Historical Reorgs",
    "body": "### Context and Motivation\n\nWhenever we're modifying caching behavior ([optimizations](https://github.com/bitcoin/bitcoin/pull/28280), [refactors](https://github.com/bitcoin/bitcoin/pull/30906), [new features](https://github.com/bitcoin/bitcoin/pull/31553), [calculating additional metrics](https://github.com/bitcoin/bitcoin/pull/31703#discussion_r1925501920)), a common concern is often: \"Sweet, but have you tested it via a reorg?!\"\n\nWe already have tests covering basic reorg scenarios ([feature_block.py](https://github.com/bitcoin/bitcoin/blob/master/test/functional/feature_block.py#L186-L200), [p2p_unrequested_blocks.py](https://github.com/bitcoin/bitcoin/blob/master/test/functional/p2p_unrequested_blocks.py#L228-L255), [feature_pruning.py](https://github.com/bitcoin/bitcoin/blob/master/test/functional/feature_pruning.py#L181-L269)). However, we're lacking a macro regression test suite that systematically verifies Bitcoin Core behavior against historical mainnet reorg events, especially across releases, different configurations (pruned, txindex, varying memory settings), or with random undo/redo cycles.\n\n### Proposal: Historical Reorg Macro Test Suite\n\nThe goal is to create a robust regression test ensuring the latest Bitcoin Core handles historical reorgs identically to when they originally occurred. This would increase confidence that new versions do not introduce regressions in complex reorg and undo/redo logic, especially when modifying sensitive code paths. While partially covered by existing synthetic tests, this proposal is a more heavyweight alternative, using real historical blocks, performing a full IBD, and explicitly checking for behavior changes related to reorgs.\nMaking sure `mainnet` behavior is retained in critical, but we might as well extend it to making sure `testnet` behavior (which is a lot more volatile anyway) is also covered.\n\n### Dedicated Historical Stale Block Proxy\n\nLeveraging the existing [bitcoin-data/stale-blocks](https://github.com/bitcoin-data/stale-blocks/tree/master/blocks) dataset, which currently contains over 200 real historical stale blocks, we propose:\n\n- A dedicated fake node (\"stale-block proxy\") that replays historical mainnet headers and blocks exactly as originally observed (since we can't have reorgs during IBD otherwise, but this way we can simulate the ones that did actually happen).\n- The node under test would exclusively connect to this proxy node.\n- The proxy sequentially presents each historical stale block as a temporary chain tip (once the stale block is reached, the proxy moves on to the next available stale block, routing real blocks via the network), forcing the test node into realistic mainnet reorg conditions during a full IBD.\n- Once we reach a given height we could validate the resulting UTXO set againt known AssumeUTXO hashes.\n\n### Key Testing Scenarios:\n\n- Perform full initial block download (IBD) against the stale-block proxy, ensuring natural and historically accurate chain reorgs.\n- Test various node configurations explicitly:\n  - Default setup\n  - Pruned nodes\n  - Nodes with small and large dbcache memory allocations\n  - Nodes running with `txindex=1`\n\n### Additional Randomized Undo/Redo Testing:\n\nIn addition to historical scenarios, randomly trigger smaller undo/redo reorg cycles at various block heights to further stress-test UTXO consistency, using `CoinsTip::SanityCheck()` for validation before and after each reorg (confirming that undoing and reapplying a block results in the same state).\n\n### RFC / Questions:\n\n- Should this be an optional functional test (run periodically, monthly, pre-release), or triggered automatically via a GitHub label for relevant PRs?\n- Are there any additional scenarios or configurations we should consider?\n- How could we gather more historical stale blocks for our dataset (do we even have data for >1 reorgs)?",
    "user": {
      "login": "l0rinc",
      "id": 1841944,
      "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l0rinc",
      "html_url": "https://github.com/l0rinc",
      "followers_url": "https://api.github.com/users/l0rinc/followers",
      "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
      "organizations_url": "https://api.github.com/users/l0rinc/orgs",
      "repos_url": "https://api.github.com/users/l0rinc/repos",
      "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/l0rinc/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [
      {
        "id": 64584,
        "node_id": "MDU6TGFiZWw2NDU4NA==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
        "name": "Brainstorming",
        "color": "ebd775",
        "default": false
      },
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 3,
    "created_at": "2025-03-24T10:17:02Z",
    "updated_at": "2025-03-25T15:50:41Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 16953329237,
      "node_id": "LE_lADOABII586vZpUezwAAAAPyf0ZV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16953329237",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-24T10:51:16Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 16953384390,
      "node_id": "LE_lADOABII586vZpUezwAAAAPygB3G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16953384390",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-24T10:54:40Z",
      "label": {
        "name": "Brainstorming",
        "color": "ebd775"
      }
    },
    {
      "event": "commented",
      "id": 2747839536,
      "node_id": "IC_kwDOABII586jyLQw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2747839536",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-24T11:43:29Z",
      "updated_at": "2025-03-24T11:43:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "Instead of using mainnet blocks with a reorg maybe every 1000-3000 blocks, one could consider using testnet4 blocks as it often has multiple reorgs per block and blocks are a lot smaller and faster to load.\n\nSee for example https://fork.observer/?network=4\n![Image](https://github.com/user-attachments/assets/aa1cc9ac-d6d9-493c-afcb-7449344265d9)",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/32130#issuecomment-2747839536",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32130"
    },
    {
      "event": "commented",
      "id": 2747870653,
      "node_id": "IC_kwDOABII586jyS29",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2747870653",
      "actor": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-24T11:55:28Z",
      "updated_at": "2025-03-24T11:57:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Nice, we should do that as well!\nI think it's important to be close to the historical behavior - it may not be a tragedy if testnet behavior happens to change accidentally, but it is, if mainnet logic change isn't caught - that's why I insist on making it as realistic as possible.\nAdded it to the description.",
      "user": {
        "login": "l0rinc",
        "id": 1841944,
        "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/l0rinc",
        "html_url": "https://github.com/l0rinc",
        "followers_url": "https://api.github.com/users/l0rinc/followers",
        "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
        "organizations_url": "https://api.github.com/users/l0rinc/orgs",
        "repos_url": "https://api.github.com/users/l0rinc/repos",
        "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/l0rinc/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/32130#issuecomment-2747870653",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32130"
    },
    {
      "event": "commented",
      "id": 2751731539,
      "node_id": "IC_kwDOABII586kBBdT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2751731539",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-25T15:50:39Z",
      "updated_at": "2025-03-25T15:50:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "> since we can't have reorgs during IBD otherwise\n\nI'd say we shouldn't really encounter reorgs during IBD in general - reorgs typically happen when the node is synced to the tip, a new node doing IBD today usually won't experience any of the historical reorgs.\nDo I understand it correctly that what you suggest  is to simulate a situation where the syncing node thinks it is out of IBD to replay these reorgs - by changing `-minchainwork` for the node under test to a lower value, and having some orchestration in the fake node to send incomplete headers?\n\n> I think it's important to be close to the historical behavior\n\nCan you expand on this a bit? I would have thought that historical reorgs weren't particularly deep or complicated, so that synthetic scenarios might be more of a stress test than historical ones.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/32130#issuecomment-2751731539",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32130"
    }
  ]
}