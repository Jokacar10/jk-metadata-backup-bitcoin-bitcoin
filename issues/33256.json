{
  "type": "issue",
  "issue": {
    "id": 3355140651,
    "node_id": "I_kwDOABII587H-2Ir",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33256",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33256/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33256/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33256/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/33256",
    "number": 33256,
    "state": "open",
    "state_reason": null,
    "title": "ci: tidy job is producing output",
    "body": "master (6ca6f3b37b992591726bd13b494369bee3bd6468) https://cirrus-ci.com/task/5658586602274816:\n```bash\n[17:17:19.943] [108/715][22.0s] clang-tidy-20 -p=/ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu -quiet -load=/tidy-build/libbitcoin-tidy.so /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/ipc/capnp/echo.capnp.proxy-server.c++\n[17:17:34.032] /usr/include/kj/async-inl.h:609:37: warning: The left operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]\n[17:17:34.032]   609 |       return *(void**)(*(char**)obj + voff);\n[17:17:34.032]       |                                     ^\n[17:17:34.032] /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/ipc/capnp/echo.capnp.proxy-server.c++:23:12: note: Calling 'serverInvoke<mp::ProxyServer<ipc::capnp::messages::Echo>, capnp::CallContext<ipc::capnp::messages::Echo::EchoParams, ipc::capnp::messages::Echo::EchoResults>, mp::ServerField<0, mp::Accessor<mp::echo_fields::Context, 17>, mp::ServerField<1, mp::Accessor<mp::echo_fields::Echo, 17>, mp::ServerRet<mp::Accessor<mp::echo_fields::Result, 18>, mp::ServerCall>>>>'\n[17:17:34.032]    23 |     return serverInvoke(*this, call_context, MakeServerField<0, Accessor<echo_fields::Context, FIELD_IN | FIELD_BOXED>>(MakeServerField<1, Accessor<echo_fields::Echo, FIELD_IN | FIELD_BOXED>>(Make<ServerRet, Accessor<echo_fields::Result, FIELD_OUT | FIELD_BOXED>>(ServerCall()))));\n[17:17:34.032]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:16: note: Calling 'ReplaceVoid<(lambda at /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:28), (lambda at /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:718:13)>'\n[17:17:34.032]   717 |         return ReplaceVoid([&]() { return fn.invoke(server_context, ArgList()); },\n[17:17:34.032]       |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032]   718 |             [&]() { return kj::Promise<CallContext>(kj::mv(call_context)); })\n[17:17:34.032]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:678:19: note: 'is_same_v' is false\n[17:17:34.032]   678 |     if constexpr (std::is_same_v<decltype(fn()), void>) {\n[17:17:34.032]       |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:678:5: note: Taking false branch\n[17:17:34.032]   678 |     if constexpr (std::is_same_v<decltype(fn()), void>) {\n[17:17:34.032]       |     ^\n[17:17:34.032] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:682:16: note: Calling 'operator()'\n[17:17:34.032]   682 |         return fn();\n[17:17:34.032]       |                ^~~~\n[17:17:34.032] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:43: note: Calling 'ServerField::invoke'\n[17:17:34.032]   717 |         return ReplaceVoid([&]() { return fn.invoke(server_context, ArgList()); },\n[17:17:34.032]       |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:539:16: note: Calling 'PassField<mp::Accessor<mp::echo_fields::Context, 17>, mp::ServerInvokeContext<mp::ProxyServer<ipc::capnp::messages::Echo>, capnp::CallContext<ipc::capnp::messages::Echo::EchoParams, ipc::capnp::messages::Echo::EchoResults>>, mp::ServerField<1, mp::Accessor<mp::echo_fields::Echo, 17>, mp::ServerRet<mp::Accessor<mp::echo_fields::Result, 18>, mp::ServerCall>>, mp::TypeList<const std::basic_string<char> &>>'\n[17:17:34.032]   539 |         return PassField<Accessor>(Priority<2>(),\n[17:17:34.032]       |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032]   540 |             typename Split<argc, ArgTypes>::First(),\n[17:17:34.032]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032]   541 |             server_context,\n[17:17:34.032]       |             ~~~~~~~~~~~~~~~\n[17:17:34.032]   542 |             this->parent(),\n[17:17:34.032]       |             ~~~~~~~~~~~~~~~\n[17:17:34.032]   543 |             typename Split<argc, ArgTypes>::Second(),\n[17:17:34.032]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032]   544 |             std::forward<Args>(args)...);\n[17:17:34.032]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032] /ci_container_base/src/ipc/libmultiprocess/include/mp/type-context.h:136:12: note: Calling 'CapabilityServerSet::getLocalServer'\n[17:17:34.032]   136 |     return server.m_context.connection->m_threads.getLocalServer(thread_client)\n[17:17:34.032]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032] /usr/include/capnp/capability.h:1274:10: note: Calling 'Promise::then'\n[17:17:34.032]  1274 |   return getLocalServerInternal(client)\n[17:17:34.032]       |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032]  1275 |       .then([](void* server) -> kj::Maybe<typename T::Server&> {\n[17:17:34.032]       |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032]  1276 |     if (server == nullptr) {\n[17:17:34.032]       |     ~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032]  1277 |       return nullptr;\n[17:17:34.032]       |       ~~~~~~~~~~~~~~~\n[17:17:34.032]  1278 |     } else {\n[17:17:34.032]       |     ~~~~~~~~\n[17:17:34.032]  1279 |       return *reinterpret_cast<typename T::Server*>(server);\n[17:17:34.032]       |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032]  1280 |     }\n[17:17:34.032]       |     ~\n[17:17:34.032]  1281 |   });\n[17:17:34.032]       |   ~~\n[17:17:34.032] /usr/include/kj/async-inl.h:1295:32: note: Calling 'GetFunctorStartAddress::apply'\n[17:17:34.032]  1295 |   void* continuationTracePtr = _::GetFunctorStartAddress<_::FixVoid<T>&&>::apply(func);\n[17:17:34.032]       |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032] /usr/include/kj/async-inl.h:677:12: note: Calling 'PtmfHelper::apply'\n[17:17:34.032]   677 |     return PtmfHelper::from<ReturnType, Decay<Func>, ParamTypes...>(\n[17:17:34.032]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032]   678 |         &Decay<Func>::operator()).apply(&func);\n[17:17:34.032]       |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:17:34.032] /usr/include/kj/async-inl.h:606:9: note: Assuming the condition is true\n[17:17:34.032]   606 |     if (voff & 1) {\n[17:17:34.032]       |         ^~~~~~~~\n[17:17:34.032] /usr/include/kj/async-inl.h:606:5: note: Taking true branch\n[17:17:34.032]   606 |     if (voff & 1) {\n[17:17:34.032]       |     ^\n[17:17:34.032] /usr/include/kj/async-inl.h:609:37: note: The left operand of '+' is a garbage value\n[17:17:34.032]   609 |       return *(void**)(*(char**)obj + voff);\n[17:17:34.032]       |                        ~~~~~~~~~~~~ ^\n[17:17:34.032] 1 warning generated.\n```\n\n```bash\n[17:30:54.725] [683/715][156.9s] clang-tidy-20 -p=/ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu -quiet -load=/tidy-build/libbitcoin-tidy.so /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/ipc/capnp/mining.capnp.proxy-server.c++\n[17:30:54.725] /usr/include/kj/async-inl.h:609:37: warning: The left operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]\n[17:30:54.725]   609 |       return *(void**)(*(char**)obj + voff);\n[17:30:54.725]       |                                     ^\n[17:30:54.725] /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/ipc/capnp/mining.capnp.proxy-server.c++:68:12: note: Calling 'serverInvoke<mp::ProxyServer<ipc::capnp::messages::BlockTemplate>, capnp::CallContext<ipc::capnp::messages::BlockTemplate::WaitNextParams, ipc::capnp::messages::BlockTemplate::WaitNextResults>, mp::ServerField<0, mp::Accessor<mp::mining_fields::Context, 17>, mp::ServerField<1, mp::Accessor<mp::mining_fields::Options, 17>, mp::ServerRet<mp::Accessor<mp::mining_fields::Result, 18>, mp::ServerCall>>>>'\n[17:30:54.725]    68 |     return serverInvoke(*this, call_context, MakeServerField<0, Accessor<mining_fields::Context, FIELD_IN | FIELD_BOXED>>(MakeServerField<1, Accessor<mining_fields::Options, FIELD_IN | FIELD_BOXED>>(Make<ServerRet, Accessor<mining_fields::Result, FIELD_OUT | FIELD_BOXED>>(ServerCall()))));\n[17:30:54.725]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:16: note: Calling 'ReplaceVoid<(lambda at /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:28), (lambda at /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:718:13)>'\n[17:30:54.725]   717 |         return ReplaceVoid([&]() { return fn.invoke(server_context, ArgList()); },\n[17:30:54.725]       |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725]   718 |             [&]() { return kj::Promise<CallContext>(kj::mv(call_context)); })\n[17:30:54.725]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:678:19: note: 'is_same_v' is false\n[17:30:54.725]   678 |     if constexpr (std::is_same_v<decltype(fn()), void>) {\n[17:30:54.725]       |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:678:5: note: Taking false branch\n[17:30:54.725]   678 |     if constexpr (std::is_same_v<decltype(fn()), void>) {\n[17:30:54.725]       |     ^\n[17:30:54.725] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:682:16: note: Calling 'operator()'\n[17:30:54.725]   682 |         return fn();\n[17:30:54.725]       |                ^~~~\n[17:30:54.725] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:43: note: Calling 'ServerField::invoke'\n[17:30:54.725]   717 |         return ReplaceVoid([&]() { return fn.invoke(server_context, ArgList()); },\n[17:30:54.725]       |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:539:16: note: Calling 'PassField<mp::Accessor<mp::mining_fields::Context, 17>, mp::ServerInvokeContext<mp::ProxyServer<ipc::capnp::messages::BlockTemplate>, capnp::CallContext<ipc::capnp::messages::BlockTemplate::WaitNextParams, ipc::capnp::messages::BlockTemplate::WaitNextResults>>, mp::ServerField<1, mp::Accessor<mp::mining_fields::Options, 17>, mp::ServerRet<mp::Accessor<mp::mining_fields::Result, 18>, mp::ServerCall>>, mp::TypeList<node::BlockWaitOptions>>'\n[17:30:54.725]   539 |         return PassField<Accessor>(Priority<2>(),\n[17:30:54.725]       |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725]   540 |             typename Split<argc, ArgTypes>::First(),\n[17:30:54.725]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725]   541 |             server_context,\n[17:30:54.725]       |             ~~~~~~~~~~~~~~~\n[17:30:54.725]   542 |             this->parent(),\n[17:30:54.725]       |             ~~~~~~~~~~~~~~~\n[17:30:54.725]   543 |             typename Split<argc, ArgTypes>::Second(),\n[17:30:54.725]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725]   544 |             std::forward<Args>(args)...);\n[17:30:54.725]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725] /ci_container_base/src/ipc/libmultiprocess/include/mp/type-context.h:136:12: note: Calling 'CapabilityServerSet::getLocalServer'\n[17:30:54.725]   136 |     return server.m_context.connection->m_threads.getLocalServer(thread_client)\n[17:30:54.725]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725] /usr/include/capnp/capability.h:1274:10: note: Calling 'Promise::then'\n[17:30:54.725]  1274 |   return getLocalServerInternal(client)\n[17:30:54.725]       |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725]  1275 |       .then([](void* server) -> kj::Maybe<typename T::Server&> {\n[17:30:54.725]       |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725]  1276 |     if (server == nullptr) {\n[17:30:54.725]       |     ~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725]  1277 |       return nullptr;\n[17:30:54.725]       |       ~~~~~~~~~~~~~~~\n[17:30:54.725]  1278 |     } else {\n[17:30:54.725]       |     ~~~~~~~~\n[17:30:54.725]  1279 |       return *reinterpret_cast<typename T::Server*>(server);\n[17:30:54.725]       |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725]  1280 |     }\n[17:30:54.725]       |     ~\n[17:30:54.725]  1281 |   });\n[17:30:54.725]       |   ~~\n[17:30:54.725] /usr/include/kj/async-inl.h:1295:32: note: Calling 'GetFunctorStartAddress::apply'\n[17:30:54.725]  1295 |   void* continuationTracePtr = _::GetFunctorStartAddress<_::FixVoid<T>&&>::apply(func);\n[17:30:54.725]       |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725] /usr/include/kj/async-inl.h:677:12: note: Calling 'PtmfHelper::apply'\n[17:30:54.725]   677 |     return PtmfHelper::from<ReturnType, Decay<Func>, ParamTypes...>(\n[17:30:54.725]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725]   678 |         &Decay<Func>::operator()).apply(&func);\n[17:30:54.725]       |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:30:54.725] /usr/include/kj/async-inl.h:606:9: note: Assuming the condition is true\n[17:30:54.725]   606 |     if (voff & 1) {\n[17:30:54.725]       |         ^~~~~~~~\n[17:30:54.725] /usr/include/kj/async-inl.h:606:5: note: Taking true branch\n[17:30:54.725]   606 |     if (voff & 1) {\n[17:30:54.725]       |     ^\n[17:30:54.725] /usr/include/kj/async-inl.h:609:37: note: The left operand of '+' is a garbage value\n[17:30:54.725]   609 |       return *(void**)(*(char**)obj + voff);\n[17:30:54.725]       |                        ~~~~~~~~~~~~ ^\n[17:30:54.725] 1 warning generated.\n```\n\n```bash\n[17:31:39.220] [713/715][30.6s] clang-tidy-20 -p=/ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu -quiet -load=/tidy-build/libbitcoin-tidy.so /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/ipc/capnp/init.capnp.proxy-server.c++\n[17:31:45.233] /usr/include/kj/async-inl.h:609:37: warning: The left operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]\n[17:31:45.233]   609 |       return *(void**)(*(char**)obj + voff);\n[17:31:45.233]       |                                     ^\n[17:31:45.233] /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/ipc/capnp/init.capnp.proxy-server.c++:26:12: note: Calling 'serverInvoke<mp::ProxyServer<ipc::capnp::messages::Init>, capnp::CallContext<ipc::capnp::messages::Init::MakeMiningParams, ipc::capnp::messages::Init::MakeMiningResults>, mp::ServerField<0, mp::Accessor<mp::init_fields::Context, 17>, mp::ServerRet<mp::Accessor<mp::init_fields::Result, 18>, mp::ServerCall>>>'\n[17:31:45.233]    26 |     return serverInvoke(*this, call_context, MakeServerField<0, Accessor<init_fields::Context, FIELD_IN | FIELD_BOXED>>(Make<ServerRet, Accessor<init_fields::Result, FIELD_OUT | FIELD_BOXED>>(ServerCall())));\n[17:31:45.233]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:16: note: Calling 'ReplaceVoid<(lambda at /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:28), (lambda at /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:718:13)>'\n[17:31:45.233]   717 |         return ReplaceVoid([&]() { return fn.invoke(server_context, ArgList()); },\n[17:31:45.233]       |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233]   718 |             [&]() { return kj::Promise<CallContext>(kj::mv(call_context)); })\n[17:31:45.233]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:678:19: note: 'is_same_v' is false\n[17:31:45.233]   678 |     if constexpr (std::is_same_v<decltype(fn()), void>) {\n[17:31:45.233]       |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:678:5: note: Taking false branch\n[17:31:45.233]   678 |     if constexpr (std::is_same_v<decltype(fn()), void>) {\n[17:31:45.233]       |     ^\n[17:31:45.233] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:682:16: note: Calling 'operator()'\n[17:31:45.233]   682 |         return fn();\n[17:31:45.233]       |                ^~~~\n[17:31:45.233] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:43: note: Calling 'ServerField::invoke'\n[17:31:45.233]   717 |         return ReplaceVoid([&]() { return fn.invoke(server_context, ArgList()); },\n[17:31:45.233]       |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:539:16: note: Calling 'PassField<mp::Accessor<mp::init_fields::Context, 17>, mp::ServerInvokeContext<mp::ProxyServer<ipc::capnp::messages::Init>, capnp::CallContext<ipc::capnp::messages::Init::MakeMiningParams, ipc::capnp::messages::Init::MakeMiningResults>>, mp::ServerRet<mp::Accessor<mp::init_fields::Result, 18>, mp::ServerCall>, mp::TypeList<>>'\n[17:31:45.233]   539 |         return PassField<Accessor>(Priority<2>(),\n[17:31:45.233]       |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233]   540 |             typename Split<argc, ArgTypes>::First(),\n[17:31:45.233]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233]   541 |             server_context,\n[17:31:45.233]       |             ~~~~~~~~~~~~~~~\n[17:31:45.233]   542 |             this->parent(),\n[17:31:45.233]       |             ~~~~~~~~~~~~~~~\n[17:31:45.233]   543 |             typename Split<argc, ArgTypes>::Second(),\n[17:31:45.233]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233]   544 |             std::forward<Args>(args)...);\n[17:31:45.233]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233] /ci_container_base/src/ipc/libmultiprocess/include/mp/type-context.h:136:12: note: Calling 'CapabilityServerSet::getLocalServer'\n[17:31:45.233]   136 |     return server.m_context.connection->m_threads.getLocalServer(thread_client)\n[17:31:45.233]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233] /usr/include/capnp/capability.h:1274:10: note: Calling 'Promise::then'\n[17:31:45.233]  1274 |   return getLocalServerInternal(client)\n[17:31:45.233]       |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233]  1275 |       .then([](void* server) -> kj::Maybe<typename T::Server&> {\n[17:31:45.233]       |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233]  1276 |     if (server == nullptr) {\n[17:31:45.233]       |     ~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233]  1277 |       return nullptr;\n[17:31:45.233]       |       ~~~~~~~~~~~~~~~\n[17:31:45.233]  1278 |     } else {\n[17:31:45.233]       |     ~~~~~~~~\n[17:31:45.233]  1279 |       return *reinterpret_cast<typename T::Server*>(server);\n[17:31:45.233]       |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233]  1280 |     }\n[17:31:45.233]       |     ~\n[17:31:45.233]  1281 |   });\n[17:31:45.233]       |   ~~\n[17:31:45.233] /usr/include/kj/async-inl.h:1295:32: note: Calling 'GetFunctorStartAddress::apply'\n[17:31:45.233]  1295 |   void* continuationTracePtr = _::GetFunctorStartAddress<_::FixVoid<T>&&>::apply(func);\n[17:31:45.233]       |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233] /usr/include/kj/async-inl.h:677:12: note: Calling 'PtmfHelper::apply'\n[17:31:45.233]   677 |     return PtmfHelper::from<ReturnType, Decay<Func>, ParamTypes...>(\n[17:31:45.233]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233]   678 |         &Decay<Func>::operator()).apply(&func);\n[17:31:45.233]       |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:31:45.233] /usr/include/kj/async-inl.h:606:9: note: Assuming the condition is true\n[17:31:45.233]   606 |     if (voff & 1) {\n[17:31:45.233]       |         ^~~~~~~~\n[17:31:45.233] /usr/include/kj/async-inl.h:606:5: note: Taking true branch\n[17:31:45.233]   606 |     if (voff & 1) {\n[17:31:45.233]       |     ^\n[17:31:45.233] /usr/include/kj/async-inl.h:609:37: note: The left operand of '+' is a garbage value\n[17:31:45.233]   609 |       return *(void**)(*(char**)obj + voff);\n[17:31:45.233]       |                        ~~~~~~~~~~~~ ^\n[17:31:45.233] 2 warnings generated.\n[17:31:45.233] \n[17:31:45.233] [714/715][167.1s] clang-tidy-20 -p=/ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu -quiet -load=/tidy-build/libbitcoin-tidy.so /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/ipc/libmultiprocess/test/mp/test/foo.capnp.proxy-server.c++\n[17:32:33.147] /usr/include/kj/async-inl.h:609:37: warning: The left operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]\n[17:32:33.147]   609 |       return *(void**)(*(char**)obj + voff);\n[17:32:33.147]       |                                     ^\n[17:32:33.147] /ci_container_base/ci/scratch/build-x86_64-pc-linux-gnu/src/ipc/libmultiprocess/test/mp/test/foo.capnp.proxy-server.c++:95:12: note: Calling 'serverInvoke<mp::ProxyServer<mp::test::messages::FooFn>, capnp::CallContext<mp::test::messages::FooFn::CallParams, mp::test::messages::FooFn::CallResults>, mp::ServerField<0, mp::Accessor<mp::foo_fields::Context, 17>, mp::ServerRet<mp::Accessor<mp::foo_fields::Result, 2>, mp::ServerCall>>>'\n[17:32:33.147]    95 |     return serverInvoke(*this, call_context, MakeServerField<0, Accessor<foo_fields::Context, FIELD_IN | FIELD_BOXED>>(Make<ServerRet, Accessor<foo_fields::Result, FIELD_OUT>>(ServerCall())));\n[17:32:33.147]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:16: note: Calling 'ReplaceVoid<(lambda at /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:28), (lambda at /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:718:13)>'\n[17:32:33.147]   717 |         return ReplaceVoid([&]() { return fn.invoke(server_context, ArgList()); },\n[17:32:33.147]       |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147]   718 |             [&]() { return kj::Promise<CallContext>(kj::mv(call_context)); })\n[17:32:33.147]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:678:19: note: 'is_same_v' is false\n[17:32:33.147]   678 |     if constexpr (std::is_same_v<decltype(fn()), void>) {\n[17:32:33.147]       |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:678:5: note: Taking false branch\n[17:32:33.147]   678 |     if constexpr (std::is_same_v<decltype(fn()), void>) {\n[17:32:33.147]       |     ^\n[17:32:33.147] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:682:16: note: Calling 'operator()'\n[17:32:33.147]   682 |         return fn();\n[17:32:33.147]       |                ^~~~\n[17:32:33.147] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:717:43: note: Calling 'ServerField::invoke'\n[17:32:33.147]   717 |         return ReplaceVoid([&]() { return fn.invoke(server_context, ArgList()); },\n[17:32:33.147]       |                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147] /ci_container_base/src/ipc/libmultiprocess/include/mp/proxy-types.h:539:16: note: Calling 'PassField<mp::Accessor<mp::foo_fields::Context, 17>, mp::ServerInvokeContext<mp::ProxyServer<mp::test::messages::FooFn>, capnp::CallContext<mp::test::messages::FooFn::CallParams, mp::test::messages::FooFn::CallResults>>, mp::ServerRet<mp::Accessor<mp::foo_fields::Result, 2>, mp::ServerCall>, mp::TypeList<>>'\n[17:32:33.147]   539 |         return PassField<Accessor>(Priority<2>(),\n[17:32:33.147]       |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147]   540 |             typename Split<argc, ArgTypes>::First(),\n[17:32:33.147]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147]   541 |             server_context,\n[17:32:33.147]       |             ~~~~~~~~~~~~~~~\n[17:32:33.147]   542 |             this->parent(),\n[17:32:33.147]       |             ~~~~~~~~~~~~~~~\n[17:32:33.147]   543 |             typename Split<argc, ArgTypes>::Second(),\n[17:32:33.147]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147]   544 |             std::forward<Args>(args)...);\n[17:32:33.147]       |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147] /ci_container_base/src/ipc/libmultiprocess/include/mp/type-context.h:136:12: note: Calling 'CapabilityServerSet::getLocalServer'\n[17:32:33.147]   136 |     return server.m_context.connection->m_threads.getLocalServer(thread_client)\n[17:32:33.147]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147] /usr/include/capnp/capability.h:1274:10: note: Calling 'Promise::then'\n[17:32:33.147]  1274 |   return getLocalServerInternal(client)\n[17:32:33.147]       |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147]  1275 |       .then([](void* server) -> kj::Maybe<typename T::Server&> {\n[17:32:33.147]       |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147]  1276 |     if (server == nullptr) {\n[17:32:33.147]       |     ~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147]  1277 |       return nullptr;\n[17:32:33.147]       |       ~~~~~~~~~~~~~~~\n[17:32:33.147]  1278 |     } else {\n[17:32:33.147]       |     ~~~~~~~~\n[17:32:33.147]  1279 |       return *reinterpret_cast<typename T::Server*>(server);\n[17:32:33.147]       |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147]  1280 |     }\n[17:32:33.147]       |     ~\n[17:32:33.147]  1281 |   });\n[17:32:33.147]       |   ~~\n[17:32:33.147] /usr/include/kj/async-inl.h:1295:32: note: Calling 'GetFunctorStartAddress::apply'\n[17:32:33.147]  1295 |   void* continuationTracePtr = _::GetFunctorStartAddress<_::FixVoid<T>&&>::apply(func);\n[17:32:33.147]       |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147] /usr/include/kj/async-inl.h:677:12: note: Calling 'PtmfHelper::apply'\n[17:32:33.147]   677 |     return PtmfHelper::from<ReturnType, Decay<Func>, ParamTypes...>(\n[17:32:33.147]       |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147]   678 |         &Decay<Func>::operator()).apply(&func);\n[17:32:33.147]       |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n[17:32:33.147] /usr/include/kj/async-inl.h:606:9: note: Assuming the condition is true\n[17:32:33.147]   606 |     if (voff & 1) {\n[17:32:33.147]       |         ^~~~~~~~\n[17:32:33.147] /usr/include/kj/async-inl.h:606:5: note: Taking true branch\n[17:32:33.147]   606 |     if (voff & 1) {\n[17:32:33.147]       |     ^\n[17:32:33.147] /usr/include/kj/async-inl.h:609:37: note: The left operand of '+' is a garbage value\n[17:32:33.147]   609 |       return *(void**)(*(char**)obj + voff);\n[17:32:33.147]       |                        ~~~~~~~~~~~~ ^\n[17:32:33.147] 1 warning generated.\n```",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "MEMBER",
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/72",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/72",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/72/labels",
      "id": 12172984,
      "node_id": "MI_kwDOABII584Aub64",
      "number": 72,
      "state": "open",
      "title": "30.0",
      "description": "",
      "creator": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "open_issues": 13,
      "closed_issues": 71,
      "created_at": "2025-01-15T19:21:36Z",
      "updated_at": "2025-09-02T13:50:23Z"
    },
    "locked": false,
    "comments": 4,
    "created_at": "2025-08-26T10:50:56Z",
    "updated_at": "2025-09-02T13:25:49Z"
  },
  "events": [
    {
      "event": "commented",
      "id": 3223652850,
      "node_id": "IC_kwDOABII587AJQny",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3223652850",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-26T10:51:20Z",
      "updated_at": "2025-08-26T10:51:20Z",
      "author_association": "MEMBER",
      "body": "cc @Sjors @ryanofsky ",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33256#issuecomment-3223652850",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33256"
    },
    {
      "event": "mentioned",
      "id": 19341297124,
      "node_id": "MEE_lADOABII587H-2IrzwAAAASA1MXk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19341297124",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-26T10:51:21Z"
    },
    {
      "event": "subscribed",
      "id": 19341297147,
      "node_id": "SE_lADOABII587H-2IrzwAAAASA1MX7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19341297147",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-26T10:51:21Z"
    },
    {
      "event": "mentioned",
      "id": 19341297193,
      "node_id": "MEE_lADOABII587H-2IrzwAAAASA1MYp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19341297193",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-26T10:51:22Z"
    },
    {
      "event": "subscribed",
      "id": 19341297219,
      "node_id": "SE_lADOABII587H-2IrzwAAAASA1MZD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19341297219",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-26T10:51:22Z"
    },
    {
      "event": "commented",
      "id": 3224259026,
      "node_id": "IC_kwDOABII587ALknS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3224259026",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-26T13:48:40Z",
      "updated_at": "2025-08-26T13:48:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "This warning \"warning: The left operand of '+' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]\" is a clang-analzyer false positive that we'd seen before and is fixed in \nhttps://github.com/capnproto/capnproto/pull/2334/commits/4c011373fe209a8b045b5aca0de043de271ad931 (https://github.com/capnproto/capnproto/pull/2334) upstream.\n\nAs described in that commit message it's possible to turn off that specific warning globally but not really to suppress it locally with compiler options. So if the output is a problem we could turn it off globally, or apply the patch there which suppresses it locally with a `NOLINT` annotation",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33256#issuecomment-3224259026",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33256"
    },
    {
      "event": "labeled",
      "id": 19345262270,
      "node_id": "LE_lADOABII587H-2IrzwAAAASBEUa-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19345262270",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-26T13:55:47Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "milestoned",
      "id": 19457645382,
      "node_id": "MIE_lADOABII587H-2IrzwAAAASHxBtG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19457645382",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-02T11:02:06Z",
      "milestone": {
        "title": "30.0"
      }
    },
    {
      "event": "commented",
      "id": 3244852511,
      "node_id": "IC_kwDOABII587BaIUf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3244852511",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-02T11:04:31Z",
      "updated_at": "2025-09-02T11:04:31Z",
      "author_association": "MEMBER",
      "body": "> So if the output is a problem we could turn it off globally, or apply the patch there which suppresses it locally with a NOLINT annotation\n\nI don't think we should have spurious/undocumented output in the CI, so it'd be good to fix this.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33256#issuecomment-3244852511",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33256"
    },
    {
      "event": "referenced",
      "id": 19460339632,
      "node_id": "REFE_lADOABII587H-2IrzwAAAASH7Tew",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/19460339632",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c157a1bc8388fecec85f61286ae928721aa8d78a",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c157a1bc8388fecec85f61286ae928721aa8d78a",
      "created_at": "2025-09-02T13:18:15Z"
    },
    {
      "event": "commented",
      "id": 3245345508,
      "node_id": "IC_kwDOABII587BcArk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3245345508",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-02T13:25:49Z",
      "updated_at": "2025-09-02T13:25:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "re: https://github.com/bitcoin/bitcoin/issues/33256#issuecomment-3244852511\n\n> I don't think we should have spurious/undocumented output in the CI, so it'd be good to fix this.\n\nAgree it's important to fix because it makes output not useful for identifying real errors. Opened #33281 to try to work around this.\n\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/33256#issuecomment-3245345508",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/33256"
    }
  ]
}