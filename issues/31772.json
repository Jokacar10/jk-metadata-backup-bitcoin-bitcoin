{
  "type": "issue",
  "issue": {
    "id": 2823765551,
    "node_id": "I_kwDOABII586oTz4v",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/31772",
    "number": 31772,
    "state": "open",
    "state_reason": null,
    "title": "test: 32-bit Clang `ipc_test` failure at `-O0`",
    "body": "Noticed as part of this branch #29796, however it can also be reproduced with master (8fa10edcd1706a1f0dc9d8c3adbc8efa3c7755bf) by reproducing the equivalent CI & setting C(XX)FLAGS to -O0:\n```bash\nmake -C depends/ MULTIPROCESS=1 NO_QT=1 NO_WALLET=1 NO_ZMQ=1 NO_USDT=1 CFLAGS=\"-O0\" CXXFLAGS=\"-O0\" DEBUG=1 -j19 HOST=i686-pc-linux-gnu\ncmake -B build --toolchain /root/ci_scratch/depends/i686-pc-linux-gnu/toolchain.cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER='clang;-m32' -DCMAKE_CXX_COMPILER='clang++;-m32'\ncmake --build build -j18\n```\n\n```bash\n./build/src/test/test_bitcoin --run_test=ipc*\nRunning 2 test cases...\nterminate called after throwing an instance of 'kj::ExceptionImpl'\n  what():  /root/ci_scratch/depends/i686-pc-linux-gnu/include/kj/common.h:1797: failed: expected start <= end && end <= size_; Out-of-bounds ArrayPtr::slice().\nstack: 5ca0dd6d 5c78b5db 5c8cc599 5ca0adc9 5c94fb37 5c950070 5c9cd709 5c9cf58a 5c9d72fd 5c9d025e 5c776f11 5bf6351d 5bf6347d 5bf633cd 5bf6337b 5bf6331d 5bf63194 f7afa4b0 f773dff6 f77d55b7\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\n    ??:0: returning here\nunknown location(0): fatal error: in \"ipc_tests/ipc_tests\": signal: SIGABRT (application abort requested)\ntest/ipc_tests.cpp(12): last checkpoint: \"ipc_tests\" test entry\ntest_bitcoin: common/args.cpp:578: void ArgsManager::AddArg(const std::string &, const std::string &, unsigned int, const OptionsCategory &): Assertion `ret.second' failed.\nunknown location(0): fatal error: in \"ipc_tests/parse_address_test\": signal: SIGABRT (application abort requested)\ntest/ipc_tests.cpp(20): last checkpoint: \"parse_address_test\" fixture ctor\n\n*** 2 failures are detected in the test module \"Bitcoin Core Test Suite\"\n```",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "MEMBER",
    "locked": false,
    "comments": 12,
    "created_at": "2025-01-31T15:12:40Z",
    "updated_at": "2025-02-05T18:50:31Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 16141882668,
      "node_id": "LE_lADOABII586oTz4vzwAAAAPCIZUs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16141882668",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-01-31T15:12:40Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "subscribed",
      "id": 16149022994,
      "node_id": "SE_lADOABII586oTz4vzwAAAAPCjokS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16149022994",
      "actor": {
        "login": "davidgumberg",
        "id": 2257631,
        "node_id": "MDQ6VXNlcjIyNTc2MzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2257631?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/davidgumberg",
        "html_url": "https://github.com/davidgumberg",
        "followers_url": "https://api.github.com/users/davidgumberg/followers",
        "following_url": "https://api.github.com/users/davidgumberg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/davidgumberg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/davidgumberg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/davidgumberg/subscriptions",
        "organizations_url": "https://api.github.com/users/davidgumberg/orgs",
        "repos_url": "https://api.github.com/users/davidgumberg/repos",
        "events_url": "https://api.github.com/users/davidgumberg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/davidgumberg/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-01T05:52:08Z"
    },
    {
      "event": "comment_deleted",
      "id": 16162454782,
      "node_id": "CDE_lADOABII586oTz4vzwAAAAPDW3z-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16162454782",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T13:34:17Z"
    },
    {
      "event": "subscribed",
      "id": 16163571991,
      "node_id": "SE_lADOABII586oTz4vzwAAAAPDbIkX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16163571991",
      "actor": {
        "login": "emc99",
        "id": 20481828,
        "node_id": "MDQ6VXNlcjIwNDgxODI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/20481828?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emc99",
        "html_url": "https://github.com/emc99",
        "followers_url": "https://api.github.com/users/emc99/followers",
        "following_url": "https://api.github.com/users/emc99/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emc99/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emc99/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emc99/subscriptions",
        "organizations_url": "https://api.github.com/users/emc99/orgs",
        "repos_url": "https://api.github.com/users/emc99/repos",
        "events_url": "https://api.github.com/users/emc99/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emc99/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T14:45:44Z"
    },
    {
      "event": "commented",
      "id": 2631693290,
      "node_id": "IC_kwDOABII586c3HPq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2631693290",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T17:58:48Z",
      "updated_at": "2025-02-03T17:58:48Z",
      "author_association": "MEMBER",
      "body": "cc @ryanofsky ",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2631693290",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    },
    {
      "event": "mentioned",
      "id": 16166355550,
      "node_id": "MEE_lADOABII586oTz4vzwAAAAPDlwJe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16166355550",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T17:58:49Z"
    },
    {
      "event": "subscribed",
      "id": 16166355561,
      "node_id": "SE_lADOABII586oTz4vzwAAAAPDlwJp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16166355561",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-03T17:58:50Z"
    },
    {
      "event": "commented",
      "id": 2632608138,
      "node_id": "IC_kwDOABII586c6mmK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2632608138",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T02:21:11Z",
      "updated_at": "2025-02-04T02:21:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "I tried those steps except I left off the ` -DCMAKE_C_COMPILER='clang;-m32' -DCMAKE_CXX_COMPILER='clang++;-m32'` part and the test passed without a problem.\n\nIs the clang part important? It seems odd to use gcc for the depends build and clang for the bitcoin build, and when when I tried the adding the clang arguments specified, cmake complained about not being able to find libstdc++, which maybe makes sense because, I don't know if it is supposed to work with the gnu library.\n\nIf there are any easier steps to reproduce this maybe using docker, or just a CI run I can look at that would be helpful. I ran into countless problems just getting i686 default build to work at all on my machine, so it is hard to know what things may be particular to the configuration this is happening in.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2632608138",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    },
    {
      "event": "commented",
      "id": 2633390450,
      "node_id": "IC_kwDOABII586c9lly",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2633390450",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T09:49:43Z",
      "updated_at": "2025-02-04T09:49:43Z",
      "author_association": "MEMBER",
      "body": "> If there are any easier steps to reproduce this maybe using docker,\n\nRunning `time env -i HOME=\"$HOME\" PATH=\"$PATH\" USER=\"$USER\" bash -c 'FILE_ENV=\"./ci/test/00_setup_env_i686_multiprocess.sh\" ./ci/test_run_all.sh'` with the branch from #29796.\n\n> or just a CI run I can look at that would be helpful.\n\nhttps://github.com/bitcoin/bitcoin/pull/29796/checks?check_run_id=36485685971",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2633390450",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    },
    {
      "event": "commented",
      "id": 2634071115,
      "node_id": "IC_kwDOABII586dALxL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2634071115",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T14:05:18Z",
      "updated_at": "2025-02-04T14:05:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks was able to get a stack trace by running `cd /ci_container_base/ci/scratch/build-i686-pc-linux-gnu`, `gdb -ex run --args ./src/test/test_bitcoin -t ipc_tests`, and `bt` in container:\n\n```c++\n#0  0xf7f4b5b9 in __kernel_vsyscall ()\n#1  0xf79e6037 in ?? () from /lib32/libc.so.6\n#2  0xf7994c51 in raise () from /lib32/libc.so.6\n#3  0xf797c2b7 in abort () from /lib32/libc.so.6\n#4  0xf7d4bf71 in ?? () from /lib32/libstdc++.so.6\n#5  0xf7d65a97 in ?? () from /lib32/libstdc++.so.6\n#6  0xf7d4b8f9 in std::terminate() () from /lib32/libstdc++.so.6\n#7  0xf7d65ddc in __cxa_throw () from /lib32/libstdc++.so.6\n#8  0x597d7e12 in kj::ExceptionCallback::RootExceptionCallback::onFatalException (this=0x5c8344b0, exception=...) at /usr/src/kj/exception.c++:1107\n#9  0x597d6085 in kj::throwFatalException (exception=..., ignoreCount=1) at /usr/src/kj/exception.c++:1194\n#10 0x597d05e5 in kj::_::Debug::Fault::fatal (this=0xf75cbc28) at /usr/src/kj/debug.c++:371\n#11 0x597cf19a in kj::_::inlineRequireFailure (file=0x59e9a314 \"/ci_container_base/depends/i686-pc-linux-gnu/include/kj/common.h\", line=1797, expectation=0x59e9a2f7 \"start <= end && end <= size_\", \n    macroArgs=0x59e9a2d4 \"\\\"Out-of-bounds ArrayPtr::slice().\\\"\", message=0x59e9a2b0 \"Out-of-bounds ArrayPtr::slice().\") at /usr/src/kj/common.c++:36\n#12 0x5954afc8 in kj::ArrayPtr<char const>::slice (this=0xf75cbd54, start=1498659230, end=13) at /usr/src/kj/common.h:1797\n#13 0x5968bd88 in kj::StringPtr::slice (this=0xf75cbd54, start=1498659230) at /usr/src/kj/string.h:734\n#14 0x597cc1e4 in kj::CidrRange::CidrRange (this=0x5a9ddc80 <kj::_::reservedCidrs()::result>, pattern=...) at /usr/src/kj/cidr.c++:53\n#15 0x597105fe in kj::_::reservedCidrs () at /usr/src/kj/async-io.c++:3007\n#16 0x59710b37 in kj::_::NetworkFilter::NetworkFilter (this=0x5c838b70) at /usr/src/kj/async-io.c++:3038\n#17 0x5978e80c in kj::(anonymous namespace)::SocketNetwork::SocketNetwork (this=0x5c838b68, lowLevel=...) at /usr/src/kj/async-io-unix.c++:1742\n#18 0x5979068d in kj::(anonymous namespace)::AsyncIoProviderImpl::AsyncIoProviderImpl (this=0x5c838b60, lowLevel=...) at /usr/src/kj/async-io-unix.c++:1974\n#19 0x59798404 in kj::heap<kj::(anonymous namespace)::AsyncIoProviderImpl, kj::(anonymous namespace)::LowLevelAsyncIoProviderImpl&> () at /usr/src/kj/memory.h:609\n#20 0x59791361 in kj::setupAsyncIo () at /usr/src/kj/async-io-unix.c++:2058\n#21 0x595373c2 in mp::EventLoop::EventLoop(char const*, std::function<void (bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>, void*) (this=0xf75cc110, \n    exe_name=0x59b257f6 \"IpcPipeTest\", log_fn=..., context=0x0) at /usr/src/mp/proxy.cpp:158\n#22 0x58a4064e in IpcPipeTest()::$_0::operator()() const (this=0x5c8542d4) at ./test/ipc_test.cpp:60\n#23 0x58a405ae in std::__invoke_impl<void, IpcPipeTest()::$_0>(std::__invoke_other, IpcPipeTest()::$_0&&) (__f=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/invoke.h:61\n#24 0x58a404fe in std::__invoke<IpcPipeTest()::$_0>(IpcPipeTest()::$_0&&) (__fn=...) at /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/invoke.h:96\n#25 0x58a404ac in std::thread::_Invoker<std::tuple<IpcPipeTest()::$_0> >::_M_invoke<0u>(std::_Index_tuple<0u>) (this=0x5c8542d4)\n    at /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_thread.h:292\n#26 0x58a4044e in std::thread::_Invoker<std::tuple<IpcPipeTest()::$_0> >::operator()() (this=0x5c8542d4) at /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_thread.h:299\n#27 0x58a402c5 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<IpcPipeTest()::$_0> > >::_M_run() (this=0x5c8542d0)\n    at /usr/bin/../lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/bits/std_thread.h:244\n#28 0xf7d98d21 in ?? () from /lib32/libstdc++.so.6\n#29 0xf79e4157 in ?? () from /lib32/libc.so.6\n#30 0xf7a78e08 in ?? () from /lib32/libc.so.6\n```",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2634071115",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    },
    {
      "event": "commented",
      "id": 2634113716,
      "node_id": "IC_kwDOABII586dAWK0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2634113716",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T14:21:56Z",
      "updated_at": "2025-02-04T14:21:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Stack trace seems to be showing something going wrong in capnproto code, but unclear what the cause is. The crash is happening in the CidrRange::CidrRange constructor here:\n\nhttps://github.com/capnproto/capnproto/blob/b34ec28cceaf15b1082b74b50f03f770873c3636/c%2B%2B/src/kj/cidr.c%2B%2B#L53\n\nwhich is being called on a static list of address patterns:\n\nhttps://github.com/capnproto/capnproto/blob/b34ec28cceaf15b1082b74b50f03f770873c3636/c%2B%2B/src/kj/async-io.c%2B%2B#L2999-L3007\n\nAll of the patterns look valid so no reason there should be a parsing exception like seems to be happening. It seems like this might be a more strange compiler / build issue",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2634113716",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    },
    {
      "event": "commented",
      "id": 2634135091,
      "node_id": "IC_kwDOABII586dAbYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2634135091",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T14:29:50Z",
      "updated_at": "2025-02-04T14:29:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "gdb shows invalid results being returned from `pattern.findFirst('/')` call where pattern is `192.0.0.0/24`\n\nhttps://github.com/capnproto/capnproto/blob/b34ec28cceaf15b1082b74b50f03f770873c3636/c%2B%2B/src/kj/cidr.c%2B%2B#L51C48-L51C57\n\n```\n#14 0x5971f1e4 in kj::CidrRange::CidrRange (this=0x5a930c80 <kj::_::reservedCidrs()::result>, pattern=...) at /usr/src/kj/cidr.c++:53\n(gdb) p pattern\n$6 = {content = {<kj::DisallowConstCopyIfNotConst<char const>> = {<No data fields>}, ptr = 0x59e13a45 \"192.0.0.0/24\", size_ = 13}}\n(gdb) p slashPos\n$7 = 1497950621\n(gdb) p pattern.findFirst('/')\n$8 = {ptr = {isSet = true, {value = 2155537998}}}\n```",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2634135091",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    },
    {
      "event": "subscribed",
      "id": 16181256620,
      "node_id": "SE_lADOABII586oTz4vzwAAAAPEemGs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16181256620",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T15:48:52Z"
    },
    {
      "event": "commented",
      "id": 2634917217,
      "node_id": "IC_kwDOABII586dDaVh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2634917217",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T19:48:19Z",
      "updated_at": "2025-02-04T19:48:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "I thought I tracked down the problem, and some change I made to the test caused it to pass, but rerunning the the fix in a new container, it no longer works, so I have to go back.\n\nHere were notes I was about to post about potential problem & fix. In any case I suspect problem would be avoided if we just consistently used gcc or clang for this build and didn't try to mix them.\n\n---\n\nTest failure seems to be caused by the container using incompatible ABI versions for the depends build and the main build. The depends build is using gcc with ABI version 18:\n\n```bash\ngcc -E -x c++ - -dM <<< \"\" | grep ABI\n#define __GXX_ABI_VERSION 1018\n```\n\nThe bitcoin build is using clang with ABI version 2:\n\n```bash\nclang++ -E -x c++ - -dM <<< \"\" | grep ABI\n#define __GXX_ABI_VERSION 1002\n```\n\nIn clang, the ABI version is determined when the compiler is built, but in gcc you can control it with the `-fabi-version` option, so the following change seems to fix the build:\n\n```diff\n--- a/depends/hosts/linux.mk\n+++ b/depends/hosts/linux.mk\n@@ -1,5 +1,5 @@\n linux_CFLAGS=-pipe -std=$(C_STANDARD)\n-linux_CXXFLAGS=-pipe -std=$(CXX_STANDARD)\n+linux_CXXFLAGS=-pipe -std=$(CXX_STANDARD) -fabi-version=2\n \n ifneq ($(LTO),)\n linux_AR = $(host_toolchain)gcc-ar\n--- a/depends/packages/libmultiprocess.mk\n+++ b/depends/packages/libmultiprocess.mk\n@@ -27,3 +27,5 @@ endef\n define $(package)_stage_cmds\n   $(MAKE) DESTDIR=$($(package)_staging_dir) install-lib\n endef\n+\n+$(package)_cxxflags += -fabi-version=11\n\n```\n\nFirst part of the diff setting ` -fabi-version=2` in the depends build is the main fix. The second part of the diff setting ` -fabi-version=11` is a workaround for an issue that happened specifically with the multiprocess package. Because when `-fabi-version` is set to 10 or below there is a compile error:\n\n\n<details><summary>error: no matching function for call to ‘std::__uniq_ptr_data</summary>\n<p>\n\n```c++\n[ 20%] Building CXX object CMakeFiles/mputil.dir/src/mp/util.cpp.o\nIn file included from /usr/include/c++/13/bits/shared_ptr_base.h:59,\n                 from /usr/include/c++/13/bits/shared_ptr.h:53,\n                 from /usr/include/c++/13/condition_variable:45,\n                 from /usr/include/c++/13/future:41,\n                 from /ci_container_base/depends/work/build/i686-pc-linux-gnu/libmultiprocess/07c917f7ca910d66abc6d3873162fc9061704074-722fc6d9234/include/mp/util.h:11,\n                 from /ci_container_base/depends/work/build/i686-pc-linux-gnu/libmultiprocess/07c917f7ca910d66abc6d3873162fc9061704074-722fc6d9234/src/mp/util.cpp:6:\n/usr/include/c++/13/bits/unique_ptr.h: In instantiation of ‘constexpr std::unique_ptr<_Tp, _Dp>::unique_ptr() [with _Del = std::__future_base::_Result_base::_Deleter; <template-parameter-2-2> = void; _Tp = std::__future_base::_Result_base; _Dp = std::__future_base::_Result_base::_Deleter]’:\n/usr/include/c++/13/future:340:34:   required from here\n/usr/include/c++/13/bits/unique_ptr.h:305:11: error: no matching function for call to ‘std::__uniq_ptr_data<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter, true, true>::__uniq_ptr_data()’\n  305 |         : _M_t()\n      |           ^~~~~~\n/usr/include/c++/13/bits/unique_ptr.h:241:40: note: candidate: ‘template<class _Del> std::__uniq_ptr_data<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter, true, true>::__uniq_ptr_data(std::__uniq_ptr_impl<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>::pointer, _Del&&) [inherited from std::__uniq_ptr_impl<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>]’\n  241 |       using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;\n      |                                        ^~~~~~~~~~~~~~~\n/usr/include/c++/13/bits/unique_ptr.h:241:40: note:   template argument deduction/substitution failed:\n/usr/include/c++/13/bits/unique_ptr.h:305:11: note:   candidate expects 2 arguments, 0 provided\n  305 |         : _M_t()\n      |           ^~~~~~\n/usr/include/c++/13/bits/unique_ptr.h:241:40: note: candidate: ‘std::__uniq_ptr_data<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter, true, true>::__uniq_ptr_data(std::__uniq_ptr_impl<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>::pointer) [inherited from std::__uniq_ptr_impl<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>]’\n  241 |       using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;\n      |                                        ^~~~~~~~~~~~~~~\n/usr/include/c++/13/bits/unique_ptr.h:241:40: note:   candidate expects 1 argument, 0 provided\n/usr/include/c++/13/bits/unique_ptr.h:242:7: note: candidate: ‘std::__uniq_ptr_data<_Tp, _Dp, <anonymous>, <anonymous> >::__uniq_ptr_data(std::__uniq_ptr_data<_Tp, _Dp, <anonymous>, <anonymous> >&&) [with _Tp = std::__future_base::_Result_base; _Dp = std::__future_base::_Result_base::_Deleter; bool <anonymous> = true; bool <anonymous> = true]’\n  242 |       __uniq_ptr_data(__uniq_ptr_data&&) = default;\n      |       ^~~~~~~~~~~~~~~\n/usr/include/c++/13/bits/unique_ptr.h:242:7: note:   candidate expects 1 argument, 0 provided\nmake[4]: *** [CMakeFiles/mputil.dir/build.make:76: CMakeFiles/mputil.dir/src/mp/util.cpp.o] Error 1\n```\n\n</p>\n</details>",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2634917217",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    },
    {
      "event": "commented",
      "id": 2634991591,
      "node_id": "IC_kwDOABII586dDsfn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2634991591",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T20:28:04Z",
      "updated_at": "2025-02-04T20:28:04Z",
      "author_association": "MEMBER",
      "body": "Interesting that this did not result in a compile or link failure instead.\n\nI switched to clang in commit fad0f21c3caba129106799fe6c14aff323ef99f2 to avoid OOM with g++, (which was before switching to 32-bit in commit fae0295a799499268caca9c385ac4d7061543980), but now that the CI machines have more memory, it should be fine if this CI task takes more memory and time.\n\nHappy to review a pull, if someone submits one.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2634991591",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    },
    {
      "event": "commented",
      "id": 2635116588,
      "node_id": "IC_kwDOABII586dELAs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2635116588",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-04T21:28:51Z",
      "updated_at": "2025-02-04T21:28:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Can confirm switching from clang to gcc does seem to fix this. `-Wno-error=documentation` also had to be dropped because gcc does not support it.\n\n```c++\n--- a/ci/test/00_setup_env_i686_multiprocess.sh\n+++ b/ci/test/00_setup_env_i686_multiprocess.sh\n@@ -10,15 +10,12 @@ export HOST=i686-pc-linux-gnu\n export CONTAINER_NAME=ci_i686_multiprocess\n export CI_IMAGE_NAME_TAG=\"docker.io/ubuntu:24.04\"\n export CI_IMAGE_PLATFORM=\"linux/amd64\"\n-export PACKAGES=\"llvm clang g++-multilib\"\n-export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n+export PACKAGES=\"g++-multilib\"\n+export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1 NO_QT=1\"\n export GOAL=\"install\"\n export TEST_RUNNER_EXTRA=\"--v2transport\"\n export BITCOIN_CONFIG=\"\\\n  -DCMAKE_BUILD_TYPE=Debug \\\n- -DCMAKE_C_COMPILER='clang;-m32' \\\n- -DCMAKE_CXX_COMPILER='clang++;-m32' \\\n- -DCMAKE_CXX_FLAGS='-Wno-error=documentation' \\\n  -DAPPEND_CPPFLAGS='-DBOOST_MULTI_INDEX_ENABLE_SAFE_MODE' \\\n \"\n export BITCOIND=bitcoin-node  # Used in functional tests\n```\n\n---\n\n> Interesting that this did not result in a compile or link failure instead.\n\nI was just seeing a lot of strange things here. Theoretically, I think it should be fine to use gcc and clang together. Some other things I noticed: when I ran gdb I could step into the [findFirst](https://github.com/capnproto/capnproto/blob/b34ec28cceaf15b1082b74b50f03f770873c3636/c%2B%2B/src/kj/common.h#L1882-L1920) methods and see it looking for the '/' character and `pos` pointing to the right place but then the return value was wrong (a very large number instead of the position of the character). Also in I couldn't even tell which findFirst overload I was in because line number did not seem to correspond to the source file.\n\nWhen I added the -fabi-version flags and rebuilt I saw the ipc tests run and passed, and the  -fabi-version fix worked twice in two different containers when I applied it manually, but did not seem to work when it was already applied at the beginning of the build. So I think something else I was doing in my rebuild steps, like reconfiguring cmake was causing the problem to go away. So I don't know. I want to debug more but I think I already spent way too much time on this.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2635116588",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    },
    {
      "event": "commented",
      "id": 2635384042,
      "node_id": "IC_kwDOABII586dFMTq",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2635384042",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T00:04:47Z",
      "updated_at": "2025-02-05T00:04:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "I tried to repeat previous steps rebuilding depends and test_bitcoin in container to figure out what I was doing that caused the test to stop crashing, but it seems to crash reliably, so I can't work out what I other changes I might have made while trying -fabi-version flags in https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2634917217 that would have caused it not to crash.\n\nAdditionally, I went back to original build and debugged it with GDB, and could easily step through and see where the bug is happening when I run with:\n\n```bash\ngdb -ex 'b findFirst' -ex run --args ./src/test/test_bitcoin -t ipc_tests\n```\n\nEverything works well up until reaching the `ArrayPtr<const char>::findFirst` method:\n\nhttps://github.com/capnproto/capnproto/blob/b34ec28cceaf15b1082b74b50f03f770873c3636/c%2B%2B/src/kj/common.h#L1882-L1890\n\nThe method also seems to work fine until it reaches the `return pos - ptr;` line. Because the function returns a Maybe value, this calls Maybe constructor:\n\nhttps://github.com/capnproto/capnproto/blob/b34ec28cceaf15b1082b74b50f03f770873c3636/c%2B%2B/src/kj/common.h#L1389\n\nwhich has a NullableValue member and calls NullableValue constructor:\n\nhttps://github.com/capnproto/capnproto/blob/b34ec28cceaf15b1082b74b50f03f770873c3636/c%2B%2B/src/kj/common.h#L1158\n\nwhich calls a function called ctor:\n\nhttps://github.com/capnproto/capnproto/blob/b34ec28cceaf15b1082b74b50f03f770873c3636/c%2B%2B/src/kj/common.h#L1061\n\nand unfortunately that function seems to be completely broken and not do anything. The `ctor` function is supposed to construct a `T` value inside the `NullableValue<T>` object, but it fails to do that. In this case `T` is a `size_t` object so it is supposed to assign the `pos - ptr` size that was computed into the `Maybe<size_t>` object that is being returned. But it doesn't do this. So the `Maybe<size_t>` object is only half-initialized as `{isSet = true, {value = 1497966205}}`, where the value 1497966205 is just the preexisting value it held before it was constructed, and is much longer than the size of the string being searched, so the code later throws an exception when there is an attempt to slice the \"192.0.0.0/24\" string at that position.\n\nThis bug seems like it is is probably a compiler bug, but not one is necessarily going to happen reliably because if the unitialized memory location started of as 0 instead 1497966205, crash would not happen. So I'm not sure switching bitcoin compiler from clang to gcc really fixes the problem, or just makes it appear not to happen. And I\"m not sure what I was doing before that caused the problem to disappear as well. It seems like there might be just be a problem with this version of gcc and -O0 and this piece of code.\n\nNext steps might be to look at generated assembly and confirm compiler is really producing buggy code or try to reproduce a minimal test case. Another thing we could try to do is update to a new version of gcc. Version here seems to be `gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0`\n\nHere is disassembly of relevant functions:\n\n<details><summary>disassembly</summary>\n<p>\n\n```c++\n(gdb) disassemble /s\nDump of assembler code for function _ZNK2kj8ArrayPtrIKcE9findFirstERS1_:\n/usr/src/kj/common.h:\n1883    inline Maybe<size_t> ArrayPtr<const char>::findFirst(const char& c) const {\n   0x5977156c <+0>:     push   %ebp\n   0x5977156d <+1>:     mov    %esp,%ebp\n   0x5977156f <+3>:     push   %ebx\n   0x59771570 <+4>:     sub    $0x24,%esp\n   0x59771573 <+7>:     call   0x566e8da0 <__x86.get_pc_thunk.bx>\n   0x59771578 <+12>:    add    $0x121eff0,%ebx\n   0x5977157e <+18>:    mov    0x8(%ebp),%eax\n   0x59771581 <+21>:    mov    %eax,-0x1c(%ebp)\n   0x59771584 <+24>:    mov    0xc(%ebp),%eax\n   0x59771587 <+27>:    mov    %eax,-0x20(%ebp)\n   0x5977158a <+30>:    mov    0x10(%ebp),%eax\n   0x5977158d <+33>:    mov    %eax,-0x24(%ebp)\n=> 0x59771590 <+36>:    mov    %gs:0x14,%eax\n   0x59771596 <+42>:    mov    %eax,-0xc(%ebp)\n   0x59771599 <+45>:    xor    %eax,%eax\n\n1884      const char* pos = reinterpret_cast<const char*>(memchr(ptr, c, size_));\n   0x5977159b <+47>:    mov    -0x20(%ebp),%eax\n   0x5977159e <+50>:    mov    0x4(%eax),%ecx\n   0x597715a1 <+53>:    mov    -0x24(%ebp),%eax\n   0x597715a4 <+56>:    movzbl (%eax),%eax\n   0x597715a7 <+59>:    movsbl %al,%edx\n   0x597715aa <+62>:    mov    -0x20(%ebp),%eax\n   0x597715ad <+65>:    mov    (%eax),%eax\n   0x597715af <+67>:    sub    $0x4,%esp\n   0x597715b2 <+70>:    push   %ecx\n   0x597715b3 <+71>:    push   %edx\n   0x597715b4 <+72>:    push   %eax\n   0x597715b5 <+73>:    call   0x5664a880 <memchr@plt>\n   0x597715ba <+78>:    add    $0x10,%esp\n   0x597715bd <+81>:    mov    %eax,-0x10(%ebp)\n\n1885      if (pos == nullptr) {\n   0x597715c0 <+84>:    cmpl   $0x0,-0x10(%ebp)\n   0x597715c4 <+88>:    jne    0x597715d8 <_ZNK2kj8ArrayPtrIKcE9findFirstERS1_+108>\n\n1886        return nullptr;\n   0x597715c6 <+90>:    sub    $0x8,%esp\n   0x597715c9 <+93>:    push   $0x0\n   0x597715cb <+95>:    push   -0x1c(%ebp)\n   0x597715ce <+98>:    call   0x595224a6 <_ZN2kj5MaybeIjEC2EDn>\n   0x597715d3 <+103>:   add    $0x10,%esp\n   0x597715d6 <+106>:   jmp    0x597715f9 <_ZNK2kj8ArrayPtrIKcE9findFirstERS1_+141>\n\n1887      } else {\n1888        return pos - ptr;\n   0x597715d8 <+108>:   mov    -0x20(%ebp),%eax\n   0x597715db <+111>:   mov    (%eax),%eax\n   0x597715dd <+113>:   mov    -0x10(%ebp),%edx\n   0x597715e0 <+116>:   sub    %eax,%edx\n   0x597715e2 <+118>:   mov    %edx,%eax\n   0x597715e4 <+120>:   mov    %eax,-0x14(%ebp)\n   0x597715e7 <+123>:   sub    $0x8,%esp\n   0x597715ea <+126>:   lea    -0x14(%ebp),%eax\n   0x597715ed <+129>:   push   %eax\n   0x597715ee <+130>:   push   -0x1c(%ebp)\n   0x597715f1 <+133>:   call   0x595224d0 <_ZN2kj5MaybeIjEC2EOj>\n   0x597715f6 <+138>:   add    $0x10,%esp\n\n1889      }\n1890    }\n   0x597715f9 <+141>:   mov    -0xc(%ebp),%eax\n   0x597715fc <+144>:   sub    %gs:0x14,%eax\n   0x59771603 <+151>:   je     0x5977160a <_ZNK2kj8ArrayPtrIKcE9findFirstERS1_+158>\n   0x59771605 <+153>:   call   0x597cf290 <__stack_chk_fail_local>\n   0x5977160a <+158>:   mov    -0x1c(%ebp),%eax\n   0x5977160d <+161>:   mov    -0x4(%ebp),%ebx\n   0x59771610 <+164>:   leave\n   0x59771611 <+165>:   ret    $0x4\nEnd of assembler dump.\n(gdb) disassemble /s _ZN2kj5MaybeIjEC2EOj\nDump of assembler code for function _ZN2kj5MaybeIjEC2EOj:\n/usr/src/kj/common.h:\n1389      Maybe(T&& t): ptr(kj::mv(t)) {}\n   0x595224d0 <+0>:     push   %ebp\n   0x595224d1 <+1>:     mov    %esp,%ebp\n   0x595224d3 <+3>:     push   %esi\n   0x595224d4 <+4>:     push   %ebx\n   0x595224d5 <+5>:     call   0x566e8da0 <__x86.get_pc_thunk.bx>\n   0x595224da <+10>:    add    $0x146e08e,%ebx\n   0x595224e0 <+16>:    mov    0x8(%ebp),%esi\n   0x595224e3 <+19>:    sub    $0xc,%esp\n   0x595224e6 <+22>:    push   0xc(%ebp)\n   0x595224e9 <+25>:    call   0x59502e4c <_ZN2kj2mvIjEEOT_RS1_>\n   0x595224ee <+30>:    add    $0x10,%esp\n   0x595224f1 <+33>:    sub    $0x8,%esp\n   0x595224f4 <+36>:    push   %eax\n   0x595224f5 <+37>:    push   %esi\n   0x595224f6 <+38>:    call   0x5952b7d8 <_ZN2kj1_13NullableValueIjEC2EOj>\n   0x595224fb <+43>:    add    $0x10,%esp\n   0x595224fe <+46>:    nop\n   0x595224ff <+47>:    lea    -0x8(%ebp),%esp\n   0x59522502 <+50>:    pop    %ebx\n   0x59522503 <+51>:    pop    %esi\n   0x59522504 <+52>:    pop    %ebp\n   0x59522505 <+53>:    ret\nEnd of assembler dump.\n(gdb) disassemble /s _ZN2kj1_13NullableValueIjEC2EOj\nDump of assembler code for function _ZN2kj1_13NullableValueIjEC2EOj:\n/usr/src/kj/common.h:\n1156      inline NullableValue(T&& t)\n   0x5952b7d8 <+0>:     push   %ebp\n   0x5952b7d9 <+1>:     mov    %esp,%ebp\n   0x5952b7db <+3>:     push   %ebx\n   0x5952b7dc <+4>:     sub    $0x4,%esp\n   0x5952b7df <+7>:     call   0x566e8da0 <__x86.get_pc_thunk.bx>\n   0x5952b7e4 <+12>:    add    $0x1464d84,%ebx\n\n1157          : isSet(true) {\n   0x5952b7ea <+18>:    mov    0x8(%ebp),%eax\n   0x5952b7ed <+21>:    movb   $0x1,(%eax)\n\n1158        ctor(value, kj::mv(t));\n   0x5952b7f0 <+24>:    sub    $0xc,%esp\n   0x5952b7f3 <+27>:    push   0xc(%ebp)\n   0x5952b7f6 <+30>:    call   0x59502e4c <_ZN2kj2mvIjEEOT_RS1_>\n   0x5952b7fb <+35>:    add    $0x10,%esp\n   0x5952b7fe <+38>:    mov    0x8(%ebp),%edx\n   0x5952b801 <+41>:    add    $0x4,%edx\n   0x5952b804 <+44>:    sub    $0x8,%esp\n   0x5952b807 <+47>:    push   %eax\n   0x5952b808 <+48>:    push   %edx\n   0x5952b809 <+49>:    call   0x595314f8 <_ZN2kj4ctorIjIjEEEvRT_DpOT0_>\n   0x5952b80e <+54>:    add    $0x10,%esp\n\n1159      }\n   0x5952b811 <+57>:    nop\n   0x5952b812 <+58>:    mov    -0x4(%ebp),%ebx\n   0x5952b815 <+61>:    leave\n   0x5952b816 <+62>:    ret\nEnd of assembler dump.\n(gdb) disassemble /s _ZN2kj4ctorIjIjEEEvRT_DpOT0_\n\nDump of assembler code for function _ZN2kj4ctorIjIjEEEvRT_DpOT0_:\n/usr/src/kj/common.h:\n1060    inline void ctor(T& location, Params&&... params) {\n   0x595314f8 <+0>:     push   %ebp\n   0x595314f9 <+1>:     mov    %esp,%ebp\n   0x595314fb <+3>:     push   %esi\n   0x595314fc <+4>:     push   %ebx\n   0x595314fd <+5>:     call   0x566e8da0 <__x86.get_pc_thunk.bx>\n   0x59531502 <+10>:    add    $0x145f066,%ebx\n\n1061      new (_::PlacementNew(), &location) T(kj::fwd<Params>(params)...);\n   0x59531508 <+16>:    sub    $0x4,%esp\n   0x5953150b <+19>:    push   0x8(%ebp)\n   0x5953150e <+22>:    push   %eax\n   0x5953150f <+23>:    push   $0x4\n   0x59531511 <+25>:    call   0x58a0ec00 <_ZnwjN2kj1_12PlacementNewEPv>\n   0x59531516 <+30>:    add    $0x10,%esp\n   0x59531519 <+33>:    mov    %eax,%esi\n   0x5953151b <+35>:    test   %esi,%esi\n   0x5953151d <+37>:    je     0x59531531 <_ZN2kj4ctorIjIjEEEvRT_DpOT0_+57>\n   0x5953151f <+39>:    sub    $0xc,%esp\n   0x59531522 <+42>:    push   0xc(%ebp)\n   0x59531525 <+45>:    call   0x59502e70 <_ZN2kj3fwdIjEEOT_RNS_8NoInfer_IS1_E4TypeE>\n   0x5953152a <+50>:    add    $0x10,%esp\n   0x5953152d <+53>:    mov    (%eax),%eax\n   0x5953152f <+55>:    mov    %eax,(%esi)\n\n1062    }\n   0x59531531 <+57>:    nop\n   0x59531532 <+58>:    lea    -0x8(%ebp),%esp\n   0x59531535 <+61>:    pop    %ebx\n   0x59531536 <+62>:    pop    %esi\n   0x59531537 <+63>:    pop    %ebp\n   0x59531538 <+64>:    ret\nEnd of assembler dump.\n(gdb) \nDump of assembler code for function _ZN2kj4ctorIjIjEEEvRT_DpOT0_:\n/usr/src/kj/common.h:\n1060    inline void ctor(T& location, Params&&... params) {\n   0x595314f8 <+0>:     push   %ebp\n   0x595314f9 <+1>:     mov    %esp,%ebp\n   0x595314fb <+3>:     push   %esi\n   0x595314fc <+4>:     push   %ebx\n   0x595314fd <+5>:     call   0x566e8da0 <__x86.get_pc_thunk.bx>\n   0x59531502 <+10>:    add    $0x145f066,%ebx\n\n1061      new (_::PlacementNew(), &location) T(kj::fwd<Params>(params)...);\n   0x59531508 <+16>:    sub    $0x4,%esp\n   0x5953150b <+19>:    push   0x8(%ebp)\n   0x5953150e <+22>:    push   %eax\n   0x5953150f <+23>:    push   $0x4\n   0x59531511 <+25>:    call   0x58a0ec00 <_ZnwjN2kj1_12PlacementNewEPv>\n   0x59531516 <+30>:    add    $0x10,%esp\n   0x59531519 <+33>:    mov    %eax,%esi\n   0x5953151b <+35>:    test   %esi,%esi\n   0x5953151d <+37>:    je     0x59531531 <_ZN2kj4ctorIjIjEEEvRT_DpOT0_+57>\n   0x5953151f <+39>:    sub    $0xc,%esp\n   0x59531522 <+42>:    push   0xc(%ebp)\n   0x59531525 <+45>:    call   0x59502e70 <_ZN2kj3fwdIjEEOT_RNS_8NoInfer_IS1_E4TypeE>\n   0x5953152a <+50>:    add    $0x10,%esp\n   0x5953152d <+53>:    mov    (%eax),%eax\n   0x5953152f <+55>:    mov    %eax,(%esi)\n\n1062    }\n   0x59531531 <+57>:    nop\n   0x59531532 <+58>:    lea    -0x8(%ebp),%esp\n   0x59531535 <+61>:    pop    %ebx\n   0x59531536 <+62>:    pop    %esi\n   0x59531537 <+63>:    pop    %ebp\n   0x59531538 <+64>:    ret\nEnd of assembler dump.\n(gdb) disassemble /s _ZnwjN2kj1_12PlacementNewEPv\nDump of assembler code for function _ZnwjN2kj1_12PlacementNewEPv:\n/ci_container_base/depends/i686-pc-linux-gnu/include/kj/common.h:\n1051    inline void* operator new(size_t, kj::_::PlacementNew, void* __p) noexcept {\n   0x58a0ec00 <+0>:     endbr32\n   0x58a0ec04 <+4>:     push   %ebp\n   0x58a0ec05 <+5>:     mov    %esp,%ebp\n   0x58a0ec07 <+7>:     push   %ebx\n   0x58a0ec08 <+8>:     sub    $0x14,%esp\n   0x58a0ec0b <+11>:    call   0x58a0ec10 <_ZnwjN2kj1_12PlacementNewEPv+16>\n   0x58a0ec10 <+16>:    pop    %eax\n   0x58a0ec11 <+17>:    add    $0x1f81958,%eax\n   0x58a0ec17 <+23>:    mov    %eax,-0x14(%ebp)\n   0x58a0ec1a <+26>:    mov    0xc(%ebp),%eax\n   0x58a0ec1d <+29>:    mov    0x8(%ebp),%eax\n   0x58a0ec20 <+32>:    mov    %gs:0x14,%eax\n   0x58a0ec26 <+38>:    mov    %eax,-0x8(%ebp)\n\n1052      return __p;\n   0x58a0ec29 <+41>:    mov    0xc(%ebp),%eax\n   0x58a0ec2c <+44>:    mov    %eax,-0x10(%ebp)\n   0x58a0ec2f <+47>:    mov    %gs:0x14,%eax\n   0x58a0ec35 <+53>:    mov    -0x8(%ebp),%ecx\n   0x58a0ec38 <+56>:    cmp    %ecx,%eax\n   0x58a0ec3a <+58>:    jne    0x58a0ec49 <_ZnwjN2kj1_12PlacementNewEPv+73>\n   0x58a0ec40 <+64>:    mov    -0x10(%ebp),%eax\n   0x58a0ec43 <+67>:    add    $0x14,%esp\n   0x58a0ec46 <+70>:    pop    %ebx\n   0x58a0ec47 <+71>:    pop    %ebp\n   0x58a0ec48 <+72>:    ret\n   0x58a0ec49 <+73>:    mov    -0x14(%ebp),%ebx\n   0x58a0ec4c <+76>:    call   0x56649250 <__stack_chk_fail@plt>\nEnd of assembler dump.\n(gdb) disassemble /s _ZN2kj3fwdIjEEOT_RNS_8NoInfer_IS1_E4TypeE\nDump of assembler code for function _ZN2kj3fwdIjEEOT_RNS_8NoInfer_IS1_E4TypeE:\n/ci_container_base/depends/i686-pc-linux-gnu/include/kj/common.h:\n700     template<typename T> constexpr T&& fwd(NoInfer<T>& t) noexcept { return static_cast<T&&>(t); }\n   0x59502e70 <+0>:     push   %ebp\n   0x59502e71 <+1>:     mov    %esp,%ebp\n   0x59502e73 <+3>:     call   0x584df28a <__x86.get_pc_thunk.ax>\n   0x59502e78 <+8>:     add    $0x148d6f0,%eax\n   0x59502e7d <+13>:    mov    0x8(%ebp),%eax\n   0x59502e80 <+16>:    pop    %ebp\n   0x59502e81 <+17>:    ret\nEnd of assembler dump.\n```\n\n</p>\n</details>\n\nWhen I fed this to chatgpt (https://chatgpt.com/share/67a2aa92-e100-800a-b5b3-999982d1a648) it claimed to find a bug in the dissembly where operator new function is not interpreting its parameters correctly, and I could confirm this with gdb (at least to the best of my understanding, I am not that familiar with assembly and calling conventions). But gdb definitely showed operator new returning the wrong address (source address not destination address), which explained why the destination was not being updated and contained a garbage value.\n\nSo I think there is pretty good evidence that this version of gcc contains a bug with -O0 and is miscompiling the code. Again I'm not sure if we care about this or not. It's an older version of gcc so might be logical to just update it. Or just not compile this code with -O0.\n\n\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2635384042",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    },
    {
      "event": "commented",
      "id": 2636229967,
      "node_id": "IC_kwDOABII586dIa1P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2636229967",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T09:45:20Z",
      "updated_at": "2025-02-05T09:45:20Z",
      "author_association": "MEMBER",
      "body": "> This bug seems like it is is probably a compiler bug, but not one is necessarily going to happen reliably because if the unitialized memory location started of as 0 instead 1497966205, crash would not happen. So I'm not sure switching bitcoin compiler from clang to gcc really fixes the problem, or just makes it appear not to happen. And I\"m not sure what I was doing before that caused the problem to disappear as well. It seems like there might be just be a problem with this version of gcc and -O0 and this piece of code.\n> \n> Next steps might be to look at generated assembly and confirm compiler is really producing buggy code or try to reproduce a minimal test case. Another thing we could try to do is update to a new version of gcc. Version here seems to be `gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0`\n\nInteresting. It would be nice to reduce this, if someone wants to spend more time on this. However, I am not familiar with libmp and the build process around it, so if someone manages to produce one (or two) cpp files (even if large) with the corresponding compiler flags, I am happy to take it from there and minimize further.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2636229967",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    },
    {
      "event": "commented",
      "id": 2637754217,
      "node_id": "IC_kwDOABII586dOO9p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2637754217",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-02-05T18:50:28Z",
      "updated_at": "2025-02-05T18:50:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Interesting. It would be nice to reduce this\n\nSo I reduced the failure down to a standalone case, but it could be reduced further. Now it is unclear to me if there is a compiler bug here or not, because this is caused by a very specific interaction between the two compiler versions we are using:\n\n- gcc version Ubuntu 13.3.0-6ubuntu2~24.04\n- clang version 18.1.3 (1ubuntu1)\n\nand maybe the specific flags we are using. The bug happens because the linker links together the\n\n- `_ZN2kj4ctorIjIjEEEvRT_DpOT0_` function (`void kj::ctor<unsigned int, unsigned int>(unsigned int&, unsigned int&&)`)\n\ngenerated by GCC in the capnproto static libraries\n\n-  `_ZnwjN2kj1_12PlacementNewEPv` function (`operator new(unsigned int, kj::_::PlacementNew, void*)`)\n\ngenerated by clang in the `libbitcoin_ipc_test.a` library.\n\nThis happens due to linker command line order. The `ipc_test` library comes before the kj static libraries in the command line, but it only contains an `operator new` symbol, not a `ctor` symbol, while kj static libraries contain both symbols. The link will prefer the first symbol definition it sees so it uses the `operator new` from bitcoin together with the `ctor` from libkj and this does not work because gcc `ctor` calls clang `operator new` with a calling convention it is not expecting (as described by chatgpt above).\n\nHere's the reduced test case I have which reproduces the bug with the same code and flags as the CI build:\n\n```c++\ncat > test.h <<EOS\n#include <cstddef>\ntemplate <typename T> struct NoInfer_ { typedef T Type; };\ntemplate <typename T> using NoInfer = typename NoInfer_<T>::Type;\n\ntemplate<typename T> constexpr T&& fwd(NoInfer<T>& t) noexcept { return static_cast<T&&>(t); }\n\nstruct PlacementNew {};\n\nvoid* operator new(size_t, PlacementNew, void* __p) noexcept;\n\ntemplate <typename T, typename... Params>\ninline void ctor(T& location, Params&&... params) {\n  new (PlacementNew(), &location) T(fwd<Params>(params)...);\n}\nEOS\n\ncat > test_gcc.cpp <<EOS\n#include \"test.h\"\ntemplate void ctor<size_t, size_t>(size_t&, size_t&&);\nEOS\n\ncat > test_clang.cpp <<EOS\n#include \"test.h\"\n#include <iostream>\n\nvoid* operator new(size_t, PlacementNew, void* __p) noexcept {\n  return __p;\n}\n\nsize_t f() {\n    size_t i = 10;\n    size_t j = 20;\n    ctor(i, std::move(j));\n    return i;\n}\n\nint main() {\n    std::cout << \"i = \" << f() << std::endl;\n}\nEOS\n\ng++ -m32 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG -pipe -std=c++20 -O0 -g -fPIC -Wall -Wextra -Wno-strict-aliasing -Wno-sign-compare -Wno-unused-parameter -pthread -c test_gcc.cpp -o test_gcc.o\nclang++ -m32 -Wno-error=documentation -O0 -ftrapv -O0 -g3 -g3 -fstack-protector-all -fcf-protection=full -fstack-clash-protection -fPIE -c test_clang.cpp -o test_clang.o\nclang++ -m32 -Wno-error=documentation -O0 -ftrapv -O0 -g3 -g3 -fstack-protector-all -fcf-protection=full -fstack-clash-protection -Wl,-z,relro -Wl,-z,now -Wl,-z,separate-code -fPIE -pie test_gcc.o test_clang.o\n./a.out\n```\n\nIf the test case were compiled properly it would print 20, but due to the calling convention problem here it prints 10, because the line `ctor(i, std::move(j));` is supposed to assign `j` (20) to `i`, but doesn't do that because `operator new` returns a garbage value.\n\nI confirmed that adding `-fabi-version=2` to gcc command line above does not fix the problem (the program still prints 10 instead of 20). But I did not experiment further to see which of the compiler flags we are passing may be causing the incompatibility, or if the flags are irrelevant and gcc and clang just disagree on the calling convention for this `operator new`.\n\nI am not sure if there is a general solution for this problem. If linker order were changed so that kj libraries were always specified first before the bitcoin library, that would prevent crashing inside kj libraries, but then it might cause a similar crash in the bitcoin code.\n\nAll of this suggests that if you are using depends, and you want to change the compiler or pass different flags in bitcoin, you really need to make the same changes in both builds. Mixing different flags and compiler versions might not be a good idea.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/31772#issuecomment-2637754217",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/31772"
    }
  ]
}