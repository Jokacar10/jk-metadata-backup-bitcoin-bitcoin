{
  "type": "issue",
  "issue": {
    "id": 2950023967,
    "node_id": "I_kwDOABII586v1csf",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32147",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32147/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32147/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32147/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/32147",
    "number": 32147,
    "state": "closed",
    "state_reason": "not_planned",
    "title": ".",
    "body": "Will SAI-15 be a priority for Developers to run this? Let's look at it mathematically and this is Reference (https://syamailcointheogwhitepaper.tiiny.site) SAI-15 Key Generation and Encryption Framework\ndef generate_key(self):\n    return secrets.token_bytes(399)\n\ndef encrypt(self, plaintext, key):\n    if len(key) != 399:\n        raise ValueError(\"Key must be exactly 399 bytes\")\n    ciphertext = bytearray()\n    for i, byte in enumerate(plaintext):\n        key_byte = key[i % 399]\n        ciphertext.append(byte ^ key_byte)\n    return bytes(ciphertext)\n\n// Message Schedule and Compression for SAI-15\n// Initialization with 399-byte key\nK = secrets.token_bytes(399)  // 399-byte cryptographic key\nP = bytearray(plaintext)      // Input plaintext as byte array\nR = 64                       // Number of rounds (configurable)\n\n// Processing Steps\nFor i from 0 to R-1:\n    // XOR-based transformation with key\n    S[i] = P[i] ⊕ K[i % 399]\n    // Apply Byzantine Fault Tolerance check (BFT)\n    if BFT_check(S[i], i):\n        S[i] = rotate_left(S[i], i % 8) + i\n    // Sustainable Vault capacity adjustment via PKI\n    S[i] = (S[i] * PKI_factor(i)) % 256\n    // Final state update\n    H[i] = S[i] + (H[i-1] if i > 0 else 0)\n\n// Final 399-byte hash calculation\nH_SAI = bytes(H)\n\n// Mathematical Representation\nHSAI[i] = (P[i] ⊕ K[i % 399]) * PKI_factor(i) + rotate_left(S[i], i % 8) + i\nWhere:\n- P[i]: Plaintext byte at position i\n- K[i % 399]: Key byte cycled through 399 bytes\n- PKI_factor(i): Public Key Infrastructure scaling factor (dynamic based on position)\n- rotate_left(x, n): Left rotation of x by n bits\n- i: Position in the sequence (0 to R-1)\n\nAnd How does this work? First of all you can buy Entropy Pool and Cipher (QSC01) physical product QSC01 for create Heterodyning 144 kHz slow down to 22 kHz and implement Heterodyning to the Place of Communication either outside the blockchain or the underlying process of your coin. From EYL inc and Quside Company, and for example Pseudocode.\n\nimport secrets\nimport math\n\nclass SAI15Encryption:\n    def __init__(self, rounds=64):\n        \"\"\"\n        Initialize the SAI-15 Encryption Framework\n        \n        :param rounds: Number of processing rounds (default: 64)\n        \"\"\"\n        self.rounds = rounds\n        self.key_size = 399  # Constant key size of 399 bytes\n    \n    def generate_key(self):\n        \"\"\"\n        Generate a cryptographic key of 399 bytes\n        \n        :return: 399-byte cryptographic key\n        \"\"\"\n        return secrets.token_bytes(self.key_size)\n    \n    def pki_factor(self, position):\n        \"\"\"\n        Compute the Public Key Infrastructure scaling factor\n        \n        :param position: Current processing position\n        :return: Dynamic scaling factor\n        \"\"\"\n        \n        return (position * 17 + 3) % 256 + 1\n    \n    def bft_check(self, state_byte, position):\n        \"\"\"\n        Byzantine Fault Tolerance check\n        \n        :param state_byte: Current state byte\n        :param position: Current processing position\n        :return: Boolean indicating if BFT condition is met\n        \"\"\"\n        \n        return (state_byte + position) % 7 == 0\n    \n    def rotate_left(self, x, n):\n        \"\"\"\n        Perform left rotation on a byte\n        \n        :param x: Byte to rotate\n        :param n: Number of positions to rotate\n        :return: Rotated byte\n        \"\"\"\n        return ((x << n) | (x >> (8 - n))) & 0xFF\n    \n    def encrypt(self, plaintext, key=None):\n        \"\"\"\n        Encrypt plaintext using SAI-15 algorithm\n        \n        :param plaintext: Input plaintext (bytes)\n        :param key: Optional 399-byte key (generates new if not provided)\n        :return: Encrypted ciphertext\n        \"\"\"\n        # Generate key if not provided\n        if key is None:\n            key = self.generate_key()\n        \n        \n        if len(key) != self.key_size:\n            raise ValueError(f\"Key must be exactly {self.key_size} bytes\")\n        \n        \n        P = bytearray(plaintext)\n        \n        \n        S = bytearray(self.rounds)\n        H = bytearray(self.rounds)\n        \n        \n        for i in range(self.rounds):\n            # Ensure we don't go out of bounds of plaintext\n            p_byte = P[i] if i < len(P) else 0\n            \n            \n            S[i] = p_byte ^ key[i % self.key_size]\n            \n            \n            if self.bft_check(S[i], i):\n                S[i] = self.rotate_left(S[i], i % 8) + i\n            \n            \n            S[i] = (S[i] * self.pki_factor(i)) % 256\n            \n            \n            H[i] = (S[i] + (H[i-1] if i > 0 else 0)) % 256\n        \n        \n        return bytes(H), bytes(S)\n    \n    def decrypt(self, ciphertext, key, original_length=None):\n        \"\"\"\n        Decrypt ciphertext using the same SAI-15 algorithm\n        \n        :param ciphertext: Encrypted ciphertext (bytes)\n        :param key: 399-byte key used for encryption\n        :param original_length: Optional original plaintext length\n        :return: Decrypted plaintext\n        \"\"\"\n        \n        if len(key) != self.key_size:\n            raise ValueError(f\"Key must be exactly {self.key_size} bytes\")\n        \n        \n        if original_length is None:\n            original_length = len(ciphertext)\n        \n        \n        plaintext = bytearray(original_length)\n        \n        \n        S = bytearray(self.rounds)\n        H = bytearray(self.rounds)\n        \n        for i in range(self.rounds):\n            p_byte = 0 if i >= original_length else plaintext[i]\n            \n            S[i] = p_byte ^ key[i % self.key_size]\n            \n            if self.bft_check(S[i], i):\n                S[i] = self.rotate_left(S[i], i % 8) + i\n            \n            S[i] = (S[i] * self.pki_factor(i)) % 256\n            H[i] = (S[i] + (H[i-1] if i > 0 else 0)) % 256\n            \n            \n            if i < original_length:\n                plaintext[i] = ciphertext[i] ^ key[i % self.key_size]\n        \n        return bytes(plaintext)\n\n\ndef main():\n    crypto = SAI15Encryption()\n    \n    \n    key = crypto.generate_key()\n    \n   \n    plaintext = b\"Hello, SAI-15 Encryption Framework!\"\n    \n    \n    hash_result, state = crypto.encrypt(plaintext, key)\n    \n    print(\"Original Plaintext:\", plaintext)\n    print(\"Encryption Key Length:\", len(key))\n    print(\"Hash Result:\", hash_result.hex())\n    print(\"State:\", state.hex())\n    \n    # Decrypt\n    decrypted = crypto.decrypt(hash_result, key, len(plaintext))\n    print(\"Decrypted Plaintext:\", decrypted)\n    print(\"Decryption Successful:\", decrypted == plaintext)\n\nif __name__ == \"__main__\":\n    main()\n\n[NIST.FIPS.205.ipd.pdf](https://github.com/user-attachments/files/19469254/NIST.FIPS.205.ipd.pdf)\n\n[2502.20510v2.pdf](https://github.com/user-attachments/files/19469265/2502.20510v2.pdf)\n\n![Image](https://github.com/user-attachments/assets/82a880c5-7e53-47aa-bd4e-9224e03d17e3)\n\nThe third image is the formula for the Underlying which should be listed on the running math of both coding and blockchain before being verified, I can't give all but hope it helps.\n\n![Image](https://github.com/user-attachments/assets/590461e4-4a73-4d55-ad6c-4156b00d6a81)",
    "user": {
      "login": "Kotarou10",
      "id": 204763349,
      "node_id": "U_kgDODDRw1Q",
      "avatar_url": "https://avatars.githubusercontent.com/u/204763349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kotarou10",
      "html_url": "https://github.com/Kotarou10",
      "followers_url": "https://api.github.com/users/Kotarou10/followers",
      "following_url": "https://api.github.com/users/Kotarou10/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/Kotarou10/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/Kotarou10/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/Kotarou10/subscriptions",
      "organizations_url": "https://api.github.com/users/Kotarou10/orgs",
      "repos_url": "https://api.github.com/users/Kotarou10/repos",
      "events_url": "https://api.github.com/users/Kotarou10/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/Kotarou10/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [],
    "assignees": [],
    "author_association": "NONE",
    "locked": true,
    "comments": 1,
    "closed_at": "2025-03-26T15:31:00Z",
    "closed_by": {
      "login": "pinheadmz",
      "id": 2084648,
      "node_id": "MDQ6VXNlcjIwODQ2NDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pinheadmz",
      "html_url": "https://github.com/pinheadmz",
      "followers_url": "https://api.github.com/users/pinheadmz/followers",
      "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
      "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
      "repos_url": "https://api.github.com/users/pinheadmz/repos",
      "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "created_at": "2025-03-26T15:29:10Z",
    "updated_at": "2025-03-27T01:26:48Z"
  },
  "events": [
    {
      "event": "commented",
      "id": 2754840927,
      "node_id": "IC_kwDOABII586kM4lf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2754840927",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-26T15:31:00Z",
      "updated_at": "2025-03-26T15:31:00Z",
      "author_association": "MEMBER",
      "body": "I don't think this has anything to do with bitcoin so, closing. ",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/32147#issuecomment-2754840927",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32147"
    },
    {
      "event": "closed",
      "id": 16995372828,
      "node_id": "CE_lADOABII586v1csfzwAAAAP1AM8c",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16995372828",
      "actor": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-26T15:31:00Z"
    },
    {
      "event": "locked",
      "id": 17002595369,
      "node_id": "LOE_lADOABII586v1csfzwAAAAP1bwQp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17002595369",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-27T01:23:24Z"
    },
    {
      "event": "renamed",
      "id": 17002638982,
      "node_id": "RTE_lADOABII586v1csfzwAAAAP1b66G",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/17002638982",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-27T01:26:48Z",
      "rename": {
        "from": "Accedence; SAI-15; SLH-DSA.",
        "to": "."
      }
    }
  ]
}