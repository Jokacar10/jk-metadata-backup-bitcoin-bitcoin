{
  "type": "issue",
  "issue": {
    "id": 2942929111,
    "node_id": "I_kwDOABII586vaYjX",
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32131",
    "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
    "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32131/labels%7B/name%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32131/comments",
    "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32131/events",
    "html_url": "https://github.com/bitcoin/bitcoin/issues/32131",
    "number": 32131,
    "state": "open",
    "state_reason": null,
    "title": "RFC: Compact Block Reconstruction Macro Benchmark Suite",
    "body": "### Context and Motivation\n\nCompact blocks significantly improve block propagation efficiency by reducing bandwidth usage and latency during transmission. Precise benchmarking of compact block reconstruction performance is crucial for detecting regressions or improvements across releases, especially when modifying related code paths affecting mempool behavior or block relay performance.\n\nRecent [analysis by `B10C`](https://delvingbitcoin.org/t/stats-on-compact-block-reconstructions/1052/12) highlights significant variance in compact block reconstruction efficiency depending on mempool conditions. Specifically, during periods of high mempool congestion, reconstruction success rates frequently dropped below 50%, requiring additional transaction requests and significantly increasing reconstruction times. Additionally, enabling `mempoolfullrbf` was found to notably improve reconstruction efficiency, underscoring the importance of consistent mempool policies.\n\n### Proposal: Compact Block Reconstruction Macro Benchmark Suite\n\nThe goal is to create a robust macro benchmark suite measuring the performance of compact block reconstruction across Bitcoin Core releases and different node configurations. This suite would provide consistent and actionable data when reviewing changes to relevant code paths.\n\nAs part of our [macro benchmarking efforts](https://github.com/bitcoin-dev-tools/benchcoin) - and as Gregory Sanders [also outlined](https://gist.github.com/l0rinc/dc8c5e5289de2d801df16f4468b5a58c?permalink_comment_id=5458016#gistcomment-5458016) in recent Benchmarking meeting notes - we propose:\n\n- Setting up a node by syncing up to a known block height (e.g., block 840,000, ideally via quick AssumeUTXO seeding).\n- Fetching the next few blocks from the network (lazy-init from network, caching the blocks locally) and adding their transactions to the local mempool.\n- Replaying compact block announcements and measuring reconstruction performance (multiple times for consistent and statistically meaningful results, given variability compared to stable micro-benchmarks).\n- Testing under different mempool scenarios and configurations (e.g., varying `mempoolfullrbf` settings):\n  - Fully populated mempool (asserting the mempool contains every transaction).\n  - Single transaction missing (note that this will require unreliable network traffic unless we also add a local node that serves these transactions).\n  - Empty mempool.\n\n### RFC / Questions:\n\n- Should this benchmark run periodically (weekly, pre-release), or should it be triggered automatically via GitHub labels on relevant PRs?\n- Are there additional configurations or mempool states worth considering (such as the `mempoolfullrbf` discovery above)?\n- Should we measure performance for arbitrary block heights and varying subsequent block counts?",
    "user": {
      "login": "l0rinc",
      "id": 1841944,
      "node_id": "MDQ6VXNlcjE4NDE5NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1841944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l0rinc",
      "html_url": "https://github.com/l0rinc",
      "followers_url": "https://api.github.com/users/l0rinc/followers",
      "following_url": "https://api.github.com/users/l0rinc/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/l0rinc/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/l0rinc/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/l0rinc/subscriptions",
      "organizations_url": "https://api.github.com/users/l0rinc/orgs",
      "repos_url": "https://api.github.com/users/l0rinc/repos",
      "events_url": "https://api.github.com/users/l0rinc/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/l0rinc/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "labels": [
      {
        "id": 64584,
        "node_id": "MDU6TGFiZWw2NDU4NA==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming",
        "name": "Brainstorming",
        "color": "ebd775",
        "default": false
      },
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "assignees": [],
    "author_association": "CONTRIBUTOR",
    "locked": false,
    "comments": 2,
    "created_at": "2025-03-24T11:27:23Z",
    "updated_at": "2025-03-24T11:54:05Z"
  },
  "events": [
    {
      "event": "labeled",
      "id": 16954019289,
      "node_id": "LE_lADOABII586vaYjXzwAAAAPyic3Z",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16954019289",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-24T11:35:53Z",
      "label": {
        "name": "Brainstorming",
        "color": "ebd775"
      }
    },
    {
      "event": "labeled",
      "id": 16954019299,
      "node_id": "LE_lADOABII586vaYjXzwAAAAPyic3j",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/16954019299",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-24T11:35:53Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "commented",
      "id": 2747858696,
      "node_id": "IC_kwDOABII586jyP8I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2747858696",
      "actor": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-24T11:50:46Z",
      "updated_at": "2025-03-24T11:50:46Z",
      "author_association": "MEMBER",
      "body": "> * Setting up a node by syncing up to a known block height (e.g., block 840,000, ideally via quick AssumeUTXO seeding).\n> \n> * Fetching the next few blocks from the network (lazy-init from network, caching the blocks locally) and adding their transactions to the local mempool.\n> \n> * Replaying compact block announcements and measuring reconstruction performance\n\nMaybe I am missing something obvious, but I don't think this is possible to detect the effects of mempoolfullrbf (one motivation for this benchmark). If you linearly replay blocks from the chain into the mempool, there won't be any conflicts, so there can't be any replacements, so any rbf policy settings won't have any effect. I don't think it is possible to benchmark this other than on the live network (the way it was done in https://delvingbitcoin.org/t/stats-on-compact-block-reconstructions/1052). If you really wanted to do it offline, you'd have to take a \"real\" mempool snapshot at the height you are interested in from an online node with the policy settings set you are interested in.",
      "user": {
        "login": "maflcko",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maflcko",
        "html_url": "https://github.com/maflcko",
        "followers_url": "https://api.github.com/users/maflcko/followers",
        "following_url": "https://api.github.com/users/maflcko/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maflcko/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maflcko/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maflcko/subscriptions",
        "organizations_url": "https://api.github.com/users/maflcko/orgs",
        "repos_url": "https://api.github.com/users/maflcko/repos",
        "events_url": "https://api.github.com/users/maflcko/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maflcko/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/32131#issuecomment-2747858696",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32131"
    },
    {
      "event": "commented",
      "id": 2747865062,
      "node_id": "IC_kwDOABII586jyRfm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2747865062",
      "actor": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-24T11:53:17Z",
      "updated_at": "2025-03-24T11:54:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Replaying compact block announcements and measuring reconstruction performance (multiple times for consistent and statistically meaningful results, given variability compared to stable micro-benchmarks)\n\nWhat is the exact metric you are trying to measure? It's not 100% clear to me if you are trying to measure performance as in \"speed\" or performance as in \"reconstructions without a round trip\".\n\n> Fetching the next few blocks from the network (lazy-init from network, caching the blocks locally) and adding their transactions to the local mempool.\n\nAdding multiple future blocks to the mempool is probably not as easy as one might think. Currently about 10% of transactions (https://transactionfee.info/charts/transactions-height-based-locktime/) have a locktime set. This means, you won't be able to add these transactions and their children to your mempool. This will automatically cause transactions to be missing during compact block reconstruction. \n",
      "user": {
        "login": "0xB10C",
        "id": 19157360,
        "node_id": "MDQ6VXNlcjE5MTU3MzYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19157360?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xB10C",
        "html_url": "https://github.com/0xB10C",
        "followers_url": "https://api.github.com/users/0xB10C/followers",
        "following_url": "https://api.github.com/users/0xB10C/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/0xB10C/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/0xB10C/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/0xB10C/subscriptions",
        "organizations_url": "https://api.github.com/users/0xB10C/orgs",
        "repos_url": "https://api.github.com/users/0xB10C/repos",
        "events_url": "https://api.github.com/users/0xB10C/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/0xB10C/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bitcoin/issues/32131#issuecomment-2747865062",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/32131"
    }
  ]
}